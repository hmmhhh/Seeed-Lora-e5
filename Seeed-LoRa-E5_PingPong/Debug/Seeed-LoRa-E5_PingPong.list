
Seeed-LoRa-E5_PingPong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd80  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  0800beb8  0800beb8  0001beb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2d0  0800c2d0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c2d0  0800c2d0  0001c2d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c2d8  0800c2d8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2d8  0800c2d8  0001c2d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c2dc  0800c2dc  0001c2dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800c2e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000076c  2000001c  0800c2fc  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000788  0800c2fc  00020788  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY
 13 .debug_info   000204fd  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005c68  00000000  00000000  00040586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001eb8  00000000  00000000  000461f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000170c  00000000  00000000  000480a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00009290  00000000  00000000  000497b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024480  00000000  00000000  00052a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000baf0d  00000000  00000000  00076ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007bbc  00000000  00000000  00131dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00139990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000001c 	.word	0x2000001c
 8000154:	00000000 	.word	0x00000000
 8000158:	0800bea0 	.word	0x0800bea0

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000020 	.word	0x20000020
 8000174:	0800bea0 	.word	0x0800bea0

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295
 8000198:	f04f 30ff 	movne.w	r0, #4294967295
 800019c:	f000 b970 	b.w	8000480 <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f000 f806 	bl	80001b8 <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__udivmoddi4>:
 80001b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001bc:	9e08      	ldr	r6, [sp, #32]
 80001be:	460d      	mov	r5, r1
 80001c0:	4604      	mov	r4, r0
 80001c2:	460f      	mov	r7, r1
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d14a      	bne.n	800025e <__udivmoddi4+0xa6>
 80001c8:	428a      	cmp	r2, r1
 80001ca:	4694      	mov	ip, r2
 80001cc:	d965      	bls.n	800029a <__udivmoddi4+0xe2>
 80001ce:	fab2 f382 	clz	r3, r2
 80001d2:	b143      	cbz	r3, 80001e6 <__udivmoddi4+0x2e>
 80001d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80001d8:	f1c3 0220 	rsb	r2, r3, #32
 80001dc:	409f      	lsls	r7, r3
 80001de:	fa20 f202 	lsr.w	r2, r0, r2
 80001e2:	4317      	orrs	r7, r2
 80001e4:	409c      	lsls	r4, r3
 80001e6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80001ea:	fa1f f58c 	uxth.w	r5, ip
 80001ee:	fbb7 f1fe 	udiv	r1, r7, lr
 80001f2:	0c22      	lsrs	r2, r4, #16
 80001f4:	fb0e 7711 	mls	r7, lr, r1, r7
 80001f8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80001fc:	fb01 f005 	mul.w	r0, r1, r5
 8000200:	4290      	cmp	r0, r2
 8000202:	d90a      	bls.n	800021a <__udivmoddi4+0x62>
 8000204:	eb1c 0202 	adds.w	r2, ip, r2
 8000208:	f101 37ff 	add.w	r7, r1, #4294967295
 800020c:	f080 811b 	bcs.w	8000446 <__udivmoddi4+0x28e>
 8000210:	4290      	cmp	r0, r2
 8000212:	f240 8118 	bls.w	8000446 <__udivmoddi4+0x28e>
 8000216:	3902      	subs	r1, #2
 8000218:	4462      	add	r2, ip
 800021a:	1a12      	subs	r2, r2, r0
 800021c:	b2a4      	uxth	r4, r4
 800021e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000222:	fb0e 2210 	mls	r2, lr, r0, r2
 8000226:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800022a:	fb00 f505 	mul.w	r5, r0, r5
 800022e:	42a5      	cmp	r5, r4
 8000230:	d90a      	bls.n	8000248 <__udivmoddi4+0x90>
 8000232:	eb1c 0404 	adds.w	r4, ip, r4
 8000236:	f100 32ff 	add.w	r2, r0, #4294967295
 800023a:	f080 8106 	bcs.w	800044a <__udivmoddi4+0x292>
 800023e:	42a5      	cmp	r5, r4
 8000240:	f240 8103 	bls.w	800044a <__udivmoddi4+0x292>
 8000244:	4464      	add	r4, ip
 8000246:	3802      	subs	r0, #2
 8000248:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800024c:	1b64      	subs	r4, r4, r5
 800024e:	2100      	movs	r1, #0
 8000250:	b11e      	cbz	r6, 800025a <__udivmoddi4+0xa2>
 8000252:	40dc      	lsrs	r4, r3
 8000254:	2300      	movs	r3, #0
 8000256:	e9c6 4300 	strd	r4, r3, [r6]
 800025a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025e:	428b      	cmp	r3, r1
 8000260:	d908      	bls.n	8000274 <__udivmoddi4+0xbc>
 8000262:	2e00      	cmp	r6, #0
 8000264:	f000 80ec 	beq.w	8000440 <__udivmoddi4+0x288>
 8000268:	2100      	movs	r1, #0
 800026a:	e9c6 0500 	strd	r0, r5, [r6]
 800026e:	4608      	mov	r0, r1
 8000270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000274:	fab3 f183 	clz	r1, r3
 8000278:	2900      	cmp	r1, #0
 800027a:	d149      	bne.n	8000310 <__udivmoddi4+0x158>
 800027c:	42ab      	cmp	r3, r5
 800027e:	d302      	bcc.n	8000286 <__udivmoddi4+0xce>
 8000280:	4282      	cmp	r2, r0
 8000282:	f200 80f7 	bhi.w	8000474 <__udivmoddi4+0x2bc>
 8000286:	1a84      	subs	r4, r0, r2
 8000288:	eb65 0203 	sbc.w	r2, r5, r3
 800028c:	2001      	movs	r0, #1
 800028e:	4617      	mov	r7, r2
 8000290:	2e00      	cmp	r6, #0
 8000292:	d0e2      	beq.n	800025a <__udivmoddi4+0xa2>
 8000294:	e9c6 4700 	strd	r4, r7, [r6]
 8000298:	e7df      	b.n	800025a <__udivmoddi4+0xa2>
 800029a:	b902      	cbnz	r2, 800029e <__udivmoddi4+0xe6>
 800029c:	deff      	udf	#255	; 0xff
 800029e:	fab2 f382 	clz	r3, r2
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	f040 808f 	bne.w	80003c6 <__udivmoddi4+0x20e>
 80002a8:	1a8a      	subs	r2, r1, r2
 80002aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ae:	fa1f fe8c 	uxth.w	lr, ip
 80002b2:	2101      	movs	r1, #1
 80002b4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002b8:	fb07 2015 	mls	r0, r7, r5, r2
 80002bc:	0c22      	lsrs	r2, r4, #16
 80002be:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002c2:	fb0e f005 	mul.w	r0, lr, r5
 80002c6:	4290      	cmp	r0, r2
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0x124>
 80002ca:	eb1c 0202 	adds.w	r2, ip, r2
 80002ce:	f105 38ff 	add.w	r8, r5, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0x122>
 80002d4:	4290      	cmp	r0, r2
 80002d6:	f200 80ca 	bhi.w	800046e <__udivmoddi4+0x2b6>
 80002da:	4645      	mov	r5, r8
 80002dc:	1a12      	subs	r2, r2, r0
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb2 f0f7 	udiv	r0, r2, r7
 80002e4:	fb07 2210 	mls	r2, r7, r0, r2
 80002e8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ec:	fb0e fe00 	mul.w	lr, lr, r0
 80002f0:	45a6      	cmp	lr, r4
 80002f2:	d908      	bls.n	8000306 <__udivmoddi4+0x14e>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 32ff 	add.w	r2, r0, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x14c>
 80002fe:	45a6      	cmp	lr, r4
 8000300:	f200 80ba 	bhi.w	8000478 <__udivmoddi4+0x2c0>
 8000304:	4610      	mov	r0, r2
 8000306:	eba4 040e 	sub.w	r4, r4, lr
 800030a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800030e:	e79f      	b.n	8000250 <__udivmoddi4+0x98>
 8000310:	f1c1 0720 	rsb	r7, r1, #32
 8000314:	408b      	lsls	r3, r1
 8000316:	fa22 fc07 	lsr.w	ip, r2, r7
 800031a:	ea4c 0c03 	orr.w	ip, ip, r3
 800031e:	fa05 f401 	lsl.w	r4, r5, r1
 8000322:	fa20 f307 	lsr.w	r3, r0, r7
 8000326:	40fd      	lsrs	r5, r7
 8000328:	4323      	orrs	r3, r4
 800032a:	fa00 f901 	lsl.w	r9, r0, r1
 800032e:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	fbb5 f8f0 	udiv	r8, r5, r0
 800033a:	0c1c      	lsrs	r4, r3, #16
 800033c:	fb00 5518 	mls	r5, r0, r8, r5
 8000340:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000344:	fb08 f50e 	mul.w	r5, r8, lr
 8000348:	42a5      	cmp	r5, r4
 800034a:	fa02 f201 	lsl.w	r2, r2, r1
 800034e:	d90b      	bls.n	8000368 <__udivmoddi4+0x1b0>
 8000350:	eb1c 0404 	adds.w	r4, ip, r4
 8000354:	f108 3aff 	add.w	sl, r8, #4294967295
 8000358:	f080 8087 	bcs.w	800046a <__udivmoddi4+0x2b2>
 800035c:	42a5      	cmp	r5, r4
 800035e:	f240 8084 	bls.w	800046a <__udivmoddi4+0x2b2>
 8000362:	f1a8 0802 	sub.w	r8, r8, #2
 8000366:	4464      	add	r4, ip
 8000368:	1b64      	subs	r4, r4, r5
 800036a:	b29d      	uxth	r5, r3
 800036c:	fbb4 f3f0 	udiv	r3, r4, r0
 8000370:	fb00 4413 	mls	r4, r0, r3, r4
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	fb03 fe0e 	mul.w	lr, r3, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x1da>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f103 30ff 	add.w	r0, r3, #4294967295
 8000388:	d26b      	bcs.n	8000462 <__udivmoddi4+0x2aa>
 800038a:	45a6      	cmp	lr, r4
 800038c:	d969      	bls.n	8000462 <__udivmoddi4+0x2aa>
 800038e:	3b02      	subs	r3, #2
 8000390:	4464      	add	r4, ip
 8000392:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000396:	fba0 8302 	umull	r8, r3, r0, r2
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	429c      	cmp	r4, r3
 80003a0:	46c6      	mov	lr, r8
 80003a2:	461d      	mov	r5, r3
 80003a4:	d355      	bcc.n	8000452 <__udivmoddi4+0x29a>
 80003a6:	d052      	beq.n	800044e <__udivmoddi4+0x296>
 80003a8:	b156      	cbz	r6, 80003c0 <__udivmoddi4+0x208>
 80003aa:	ebb9 030e 	subs.w	r3, r9, lr
 80003ae:	eb64 0405 	sbc.w	r4, r4, r5
 80003b2:	fa04 f707 	lsl.w	r7, r4, r7
 80003b6:	40cb      	lsrs	r3, r1
 80003b8:	40cc      	lsrs	r4, r1
 80003ba:	431f      	orrs	r7, r3
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	f1c3 0120 	rsb	r1, r3, #32
 80003ca:	fa02 fc03 	lsl.w	ip, r2, r3
 80003ce:	fa20 f201 	lsr.w	r2, r0, r1
 80003d2:	fa25 f101 	lsr.w	r1, r5, r1
 80003d6:	409d      	lsls	r5, r3
 80003d8:	432a      	orrs	r2, r5
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e6:	fb07 1510 	mls	r5, r7, r0, r1
 80003ea:	0c11      	lsrs	r1, r2, #16
 80003ec:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80003f0:	fb00 f50e 	mul.w	r5, r0, lr
 80003f4:	428d      	cmp	r5, r1
 80003f6:	fa04 f403 	lsl.w	r4, r4, r3
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x256>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 38ff 	add.w	r8, r0, #4294967295
 8000404:	d22f      	bcs.n	8000466 <__udivmoddi4+0x2ae>
 8000406:	428d      	cmp	r5, r1
 8000408:	d92d      	bls.n	8000466 <__udivmoddi4+0x2ae>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	1b49      	subs	r1, r1, r5
 8000410:	b292      	uxth	r2, r2
 8000412:	fbb1 f5f7 	udiv	r5, r1, r7
 8000416:	fb07 1115 	mls	r1, r7, r5, r1
 800041a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800041e:	fb05 f10e 	mul.w	r1, r5, lr
 8000422:	4291      	cmp	r1, r2
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x280>
 8000426:	eb1c 0202 	adds.w	r2, ip, r2
 800042a:	f105 38ff 	add.w	r8, r5, #4294967295
 800042e:	d216      	bcs.n	800045e <__udivmoddi4+0x2a6>
 8000430:	4291      	cmp	r1, r2
 8000432:	d914      	bls.n	800045e <__udivmoddi4+0x2a6>
 8000434:	3d02      	subs	r5, #2
 8000436:	4462      	add	r2, ip
 8000438:	1a52      	subs	r2, r2, r1
 800043a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800043e:	e739      	b.n	80002b4 <__udivmoddi4+0xfc>
 8000440:	4631      	mov	r1, r6
 8000442:	4630      	mov	r0, r6
 8000444:	e709      	b.n	800025a <__udivmoddi4+0xa2>
 8000446:	4639      	mov	r1, r7
 8000448:	e6e7      	b.n	800021a <__udivmoddi4+0x62>
 800044a:	4610      	mov	r0, r2
 800044c:	e6fc      	b.n	8000248 <__udivmoddi4+0x90>
 800044e:	45c1      	cmp	r9, r8
 8000450:	d2aa      	bcs.n	80003a8 <__udivmoddi4+0x1f0>
 8000452:	ebb8 0e02 	subs.w	lr, r8, r2
 8000456:	eb63 050c 	sbc.w	r5, r3, ip
 800045a:	3801      	subs	r0, #1
 800045c:	e7a4      	b.n	80003a8 <__udivmoddi4+0x1f0>
 800045e:	4645      	mov	r5, r8
 8000460:	e7ea      	b.n	8000438 <__udivmoddi4+0x280>
 8000462:	4603      	mov	r3, r0
 8000464:	e795      	b.n	8000392 <__udivmoddi4+0x1da>
 8000466:	4640      	mov	r0, r8
 8000468:	e7d1      	b.n	800040e <__udivmoddi4+0x256>
 800046a:	46d0      	mov	r8, sl
 800046c:	e77c      	b.n	8000368 <__udivmoddi4+0x1b0>
 800046e:	3d02      	subs	r5, #2
 8000470:	4462      	add	r2, ip
 8000472:	e733      	b.n	80002dc <__udivmoddi4+0x124>
 8000474:	4608      	mov	r0, r1
 8000476:	e70b      	b.n	8000290 <__udivmoddi4+0xd8>
 8000478:	4464      	add	r4, ip
 800047a:	3802      	subs	r0, #2
 800047c:	e743      	b.n	8000306 <__udivmoddi4+0x14e>
 800047e:	bf00      	nop

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000484:	b480      	push	{r7}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800048c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000490:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000492:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4313      	orrs	r3, r2
 800049a:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800049c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4013      	ands	r3, r2
 80004a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004a8:	68fb      	ldr	r3, [r7, #12]
}
 80004aa:	bf00      	nop
 80004ac:	3714      	adds	r7, #20
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr

080004b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80004b8:	2004      	movs	r0, #4
 80004ba:	f7ff ffe3 	bl	8000484 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004be:	2001      	movs	r0, #1
 80004c0:	f7ff ffe0 	bl	8000484 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80004c4:	2200      	movs	r2, #0
 80004c6:	2102      	movs	r1, #2
 80004c8:	200b      	movs	r0, #11
 80004ca:	f001 fa62 	bl	8001992 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004ce:	200b      	movs	r0, #11
 80004d0:	f001 fa79 	bl	80019c6 <HAL_NVIC_EnableIRQ>

}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4313      	orrs	r3, r2
 80004ee:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4013      	ands	r3, r2
 80004fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004fc:	68fb      	ldr	r3, [r7, #12]
}
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051c:	2001      	movs	r0, #1
 800051e:	f7ff ffdb 	bl	80004d8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000522:	2004      	movs	r0, #4
 8000524:	f7ff ffd8 	bl	80004d8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000528:	2002      	movs	r0, #2
 800052a:	f7ff ffd5 	bl	80004d8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|DBG2_Pin, GPIO_PIN_RESET);
 800052e:	2200      	movs	r2, #0
 8000530:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8000534:	4821      	ldr	r0, [pc, #132]	; (80005bc <MX_GPIO_Init+0xb4>)
 8000536:	f002 f87b 	bl	8002630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800053a:	2201      	movs	r2, #1
 800053c:	2120      	movs	r1, #32
 800053e:	481f      	ldr	r0, [pc, #124]	; (80005bc <MX_GPIO_Init+0xb4>)
 8000540:	f002 f876 	bl	8002630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	2131      	movs	r1, #49	; 0x31
 8000548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800054c:	f002 f870 	bl	8002630 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin|DBG2_Pin;
 8000550:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000554:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000556:	2301      	movs	r3, #1
 8000558:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	2300      	movs	r3, #0
 800055c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800055e:	2303      	movs	r3, #3
 8000560:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	4619      	mov	r1, r3
 8000566:	4815      	ldr	r0, [pc, #84]	; (80005bc <MX_GPIO_Init+0xb4>)
 8000568:	f001 fe34 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 800056c:	2331      	movs	r3, #49	; 0x31
 800056e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000570:	2301      	movs	r3, #1
 8000572:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000574:	2300      	movs	r3, #0
 8000576:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000578:	2303      	movs	r3, #3
 800057a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	4619      	mov	r1, r3
 8000580:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000584:	f001 fe26 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 8000588:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800058c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800058e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000592:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000594:	2301      	movs	r3, #1
 8000596:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	4619      	mov	r1, r3
 800059c:	4807      	ldr	r0, [pc, #28]	; (80005bc <MX_GPIO_Init+0xb4>)
 800059e:	f001 fe19 	bl	80021d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2100      	movs	r1, #0
 80005a6:	2029      	movs	r0, #41	; 0x29
 80005a8:	f001 f9f3 	bl	8001992 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005ac:	2029      	movs	r0, #41	; 0x29
 80005ae:	f001 fa0a 	bl	80019c6 <HAL_NVIC_EnableIRQ>

}
 80005b2:	bf00      	nop
 80005b4:	3718      	adds	r7, #24
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	48000400 	.word	0x48000400

080005c0 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80005c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005d0:	f023 0218 	bic.w	r2, r3, #24
 80005d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4313      	orrs	r3, r2
 80005dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bc80      	pop	{r7}
 80005e8:	4770      	bx	lr

080005ea <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ea:	b580      	push	{r7, lr}
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f001 f8a9 	bl	8001744 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f807 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f7ff ff87 	bl	8000508 <MX_GPIO_Init>
  MX_SubGHz_Phy_Init();
 80005fa:	f00a f87c 	bl	800a6f6 <MX_SubGHz_Phy_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_SubGHz_Phy_Process();
 80005fe:	f00a f882 	bl	800a706 <MX_SubGHz_Phy_Process>
 8000602:	e7fc      	b.n	80005fe <main+0x14>

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b09a      	sub	sp, #104	; 0x68
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	2248      	movs	r2, #72	; 0x48
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f00b fc0a 	bl	800be2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 0308 	add.w	r3, r7, #8
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
 8000628:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800062a:	f002 f83b 	bl	80026a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800062e:	2000      	movs	r0, #0
 8000630:	f7ff ffc6 	bl	80005c0 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000634:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <SystemClock_Config+0xb0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800063c:	4a1d      	ldr	r2, [pc, #116]	; (80006b4 <SystemClock_Config+0xb0>)
 800063e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <SystemClock_Config+0xb0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000650:	2324      	movs	r3, #36	; 0x24
 8000652:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000654:	2381      	movs	r3, #129	; 0x81
 8000656:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000658:	2301      	movs	r3, #1
 800065a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800065c:	2300      	movs	r3, #0
 800065e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000660:	23b0      	movs	r3, #176	; 0xb0
 8000662:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000664:	2300      	movs	r3, #0
 8000666:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0320 	add.w	r3, r7, #32
 800066c:	4618      	mov	r0, r3
 800066e:	f002 fb65 	bl	8002d3c <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000678:	f000 f81e 	bl	80006b8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800067c:	234f      	movs	r3, #79	; 0x4f
 800067e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000694:	f107 0308 	add.w	r3, r7, #8
 8000698:	2102      	movs	r1, #2
 800069a:	4618      	mov	r0, r3
 800069c:	f002 fed0 	bl	8003440 <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006a6:	f000 f807 	bl	80006b8 <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3768      	adds	r7, #104	; 0x68
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	58000400 	.word	0x58000400

080006b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006bc:	b672      	cpsid	i
}
 80006be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <Error_Handler+0x8>

080006c2 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80006c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80006d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80006da:	bf00      	nop
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr

080006e2 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006e2:	b480      	push	{r7}
 80006e4:	b085      	sub	sp, #20
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80006ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80006f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4313      	orrs	r3, r2
 80006f8:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80006fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006fe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4013      	ands	r3, r2
 8000704:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000706:	68fb      	ldr	r3, [r7, #12]
}
 8000708:	bf00      	nop
 800070a:	3714      	adds	r7, #20
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr
	...

08000714 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08c      	sub	sp, #48	; 0x30
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	222c      	movs	r2, #44	; 0x2c
 800071e:	2100      	movs	r1, #0
 8000720:	4618      	mov	r0, r3
 8000722:	f00b fb83 	bl	800be2c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000726:	4b22      	ldr	r3, [pc, #136]	; (80007b0 <MX_RTC_Init+0x9c>)
 8000728:	4a22      	ldr	r2, [pc, #136]	; (80007b4 <MX_RTC_Init+0xa0>)
 800072a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 800072c:	4b20      	ldr	r3, [pc, #128]	; (80007b0 <MX_RTC_Init+0x9c>)
 800072e:	221f      	movs	r2, #31
 8000730:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000732:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <MX_RTC_Init+0x9c>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000738:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <MX_RTC_Init+0x9c>)
 800073a:	2200      	movs	r2, #0
 800073c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800073e:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <MX_RTC_Init+0x9c>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000744:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <MX_RTC_Init+0x9c>)
 8000746:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800074a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800074c:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <MX_RTC_Init+0x9c>)
 800074e:	2200      	movs	r2, #0
 8000750:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8000752:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <MX_RTC_Init+0x9c>)
 8000754:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000758:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800075a:	4815      	ldr	r0, [pc, #84]	; (80007b0 <MX_RTC_Init+0x9c>)
 800075c:	f003 fb2c 	bl	8003db8 <HAL_RTC_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8000766:	f7ff ffa7 	bl	80006b8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800076a:	4811      	ldr	r0, [pc, #68]	; (80007b0 <MX_RTC_Init+0x9c>)
 800076c:	f003 fe22 	bl	80043b4 <HAL_RTCEx_SetSSRU_IT>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000776:	f7ff ff9f 	bl	80006b8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800077a:	2300      	movs	r3, #0
 800077c:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000782:	2300      	movs	r3, #0
 8000784:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8000786:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800078a:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800078c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000790:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	2200      	movs	r2, #0
 8000796:	4619      	mov	r1, r3
 8000798:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_RTC_Init+0x9c>)
 800079a:	f003 fb8f 	bl	8003ebc <HAL_RTC_SetAlarm_IT>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80007a4:	f7ff ff88 	bl	80006b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	3730      	adds	r7, #48	; 0x30
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000038 	.word	0x20000038
 80007b4:	40002800 	.word	0x40002800

080007b8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b090      	sub	sp, #64	; 0x40
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007c0:	f107 0308 	add.w	r3, r7, #8
 80007c4:	2238      	movs	r2, #56	; 0x38
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f00b fb2f 	bl	800be2c <memset>
  if(rtcHandle->Instance==RTC)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a16      	ldr	r2, [pc, #88]	; (800082c <HAL_RTC_MspInit+0x74>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d125      	bne.n	8000824 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80007d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007dc:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80007de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007e2:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	4618      	mov	r0, r3
 80007ea:	f003 f9cb 	bl	8003b84 <HAL_RCCEx_PeriphCLKConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80007f4:	f7ff ff60 	bl	80006b8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80007f8:	f7ff ff63 	bl	80006c2 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80007fc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000800:	f7ff ff6f 	bl	80006e2 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8000804:	2200      	movs	r2, #0
 8000806:	2100      	movs	r1, #0
 8000808:	2002      	movs	r0, #2
 800080a:	f001 f8c2 	bl	8001992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 800080e:	2002      	movs	r0, #2
 8000810:	f001 f8d9 	bl	80019c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000814:	2200      	movs	r2, #0
 8000816:	2100      	movs	r1, #0
 8000818:	202a      	movs	r0, #42	; 0x2a
 800081a:	f001 f8ba 	bl	8001992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800081e:	202a      	movs	r0, #42	; 0x2a
 8000820:	f001 f8d1 	bl	80019c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000824:	bf00      	nop
 8000826:	3740      	adds	r7, #64	; 0x40
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40002800 	.word	0x40002800

08000830 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8000834:	4b03      	ldr	r3, [pc, #12]	; (8000844 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8000836:	2201      	movs	r2, #1
 8000838:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	58000400 	.word	0x58000400

08000848 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr

08000854 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr

08000860 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8000864:	f000 ff8e 	bl	8001784 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8000868:	f7ff ffe2 	bl	8000830 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 800086c:	2001      	movs	r0, #1
 800086e:	f001 ffab 	bl	80027c8 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}

08000876 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 800087a:	f000 ff91 	bl	80017a0 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 800087e:	f000 fe11 	bl	80014a4 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}

08000886 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 800088a:	f000 ff7b 	bl	8001784 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800088e:	2101      	movs	r1, #1
 8000890:	2000      	movs	r0, #0
 8000892:	f001 ff15 	bl	80026c0 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}

0800089a <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 800089e:	f000 ff7f 	bl	80017a0 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr

080008b2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <NMI_Handler+0x4>

080008b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <HardFault_Handler+0x4>

080008be <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c2:	e7fe      	b.n	80008c2 <MemManage_Handler+0x4>

080008c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <BusFault_Handler+0x4>

080008ca <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <UsageFault_Handler+0x4>

080008d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr

080008dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr

080008f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr

08000900 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8000904:	4802      	ldr	r0, [pc, #8]	; (8000910 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8000906:	f003 fd91 	bl	800442c <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000038 	.word	0x20000038

08000914 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000918:	4802      	ldr	r0, [pc, #8]	; (8000924 <DMA1_Channel1_IRQHandler+0x10>)
 800091a:	f001 faeb 	bl	8001ef4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000118 	.word	0x20000118

08000928 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800092c:	4802      	ldr	r0, [pc, #8]	; (8000938 <USART1_IRQHandler+0x10>)
 800092e:	f004 fbc7 	bl	80050c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000084 	.word	0x20000084

0800093c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8000940:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000944:	f001 fe8c 	bl	8002660 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}

0800094c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000950:	4802      	ldr	r0, [pc, #8]	; (800095c <RTC_Alarm_IRQHandler+0x10>)
 8000952:	f003 fc1b 	bl	800418c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000038 	.word	0x20000038

08000960 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000964:	4802      	ldr	r0, [pc, #8]	; (8000970 <SUBGHZ_Radio_IRQHandler+0x10>)
 8000966:	f004 f8cf 	bl	8004b08 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000070 	.word	0x20000070

08000974 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 800097c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000980:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000982:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4313      	orrs	r3, r2
 800098a:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 800098c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000990:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4013      	ands	r3, r2
 8000996:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000998:	68fb      	ldr	r3, [r7, #12]
}
 800099a:	bf00      	nop
 800099c:	3714      	adds	r7, #20
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr

080009a4 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_SUBGHZ_Init+0x20>)
 80009aa:	2208      	movs	r2, #8
 80009ac:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_SUBGHZ_Init+0x20>)
 80009b0:	f003 fe28 	bl	8004604 <HAL_SUBGHZ_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80009ba:	f7ff fe7d 	bl	80006b8 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000070 	.word	0x20000070

080009c8 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80009d0:	2001      	movs	r0, #1
 80009d2:	f7ff ffcf 	bl	8000974 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2100      	movs	r1, #0
 80009da:	2032      	movs	r0, #50	; 0x32
 80009dc:	f000 ffd9 	bl	8001992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80009e0:	2032      	movs	r0, #50	; 0x32
 80009e2:	f000 fff0 	bl	80019c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <LL_RCC_SetClkAfterWakeFromStop>:
{
 80009ee:	b480      	push	{r7}
 80009f0:	b083      	sub	sp, #12
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80009f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009fa:	689b      	ldr	r3, [r3, #8]
 80009fc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000a00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	608b      	str	r3, [r1, #8]
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr

08000a14 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f7ff ffe8 	bl	80009ee <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8000a1e:	f00a fce1 	bl	800b3e4 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8000a22:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <SystemApp_Init+0x38>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8000a28:	f000 f8b6 	bl	8000b98 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8000a2c:	f00a ff6a 	bl	800b904 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8000a30:	4807      	ldr	r0, [pc, #28]	; (8000a50 <SystemApp_Init+0x3c>)
 8000a32:	f00b f803 	bl	800ba3c <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8000a36:	2002      	movs	r0, #2
 8000a38:	f00b f80e 	bl	800ba58 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8000a3c:	f009 ffac 	bl	800a998 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8000a40:	2101      	movs	r1, #1
 8000a42:	2002      	movs	r0, #2
 8000a44:	f009 ffe8 	bl	800aa18 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	2000007c 	.word	0x2000007c
 8000a50:	08000a61 	.word	0x08000a61

08000a54 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8000a58:	f00a f80e 	bl	800aa78 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af02      	add	r7, sp, #8
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8000a6a:	f107 0308 	add.w	r3, r7, #8
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f00a f8ac 	bl	800abcc <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a7a:	9200      	str	r2, [sp, #0]
 8000a7c:	4a07      	ldr	r2, [pc, #28]	; (8000a9c <TimestampNow+0x3c>)
 8000a7e:	2110      	movs	r1, #16
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f000 f81d 	bl	8000ac0 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f7ff fb76 	bl	8000178 <strlen>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	b29a      	uxth	r2, r3
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8000a94:	bf00      	nop
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	0800beb8 	.word	0x0800beb8

08000aa0 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	2004      	movs	r0, #4
 8000aa8:	f009 ff86 	bl	800a9b8 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	2004      	movs	r0, #4
 8000ab8:	f009 ff7e 	bl	800a9b8 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8000ac0:	b40c      	push	{r2, r3}
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b084      	sub	sp, #16
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
 8000aca:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8000acc:	f107 031c 	add.w	r3, r7, #28
 8000ad0:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8000ad2:	6839      	ldr	r1, [r7, #0]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	69ba      	ldr	r2, [r7, #24]
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f00a f9c3 	bl	800ae64 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8000ade:	bf00      	nop
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ae8:	b002      	add	sp, #8
 8000aea:	4770      	bx	lr

08000aec <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8000af4:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr

08000b00 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_GetTick+0x24>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d002      	beq.n	8000b18 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8000b12:	f000 f963 	bl	8000ddc <TIMER_IF_GetTimerValue>
 8000b16:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8000b18:	687b      	ldr	r3, [r7, #4]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	2000007c 	.word	0x2000007c

08000b28 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 f9d9 	bl	8000eea <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <LL_AHB2_GRP1_EnableClock>:
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4013      	ands	r3, r2
 8000b62:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b64:	68fb      	ldr	r3, [r7, #12]
}
 8000b66:	bf00      	nop
 8000b68:	3714      	adds	r7, #20
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr

08000b70 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <LL_EXTI_EnableIT_32_63+0x24>)
 8000b7a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000b7e:	4905      	ldr	r1, [pc, #20]	; (8000b94 <LL_EXTI_EnableIT_32_63+0x24>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	58000800 	.word	0x58000800

08000b98 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8000b9e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000ba2:	f7ff ffe5 	bl	8000b70 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000ba6:	f000 fe09 	bl	80017bc <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000baa:	f000 fe0d 	bl	80017c8 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8000bae:	f000 fe11 	bl	80017d4 <HAL_DBGMCU_EnableDBGStandbyMode>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8000bcc:	2001      	movs	r0, #1
 8000bce:	f7ff ffb7 	bl	8000b40 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8000bd2:	2002      	movs	r0, #2
 8000bd4:	f7ff ffb4 	bl	8000b40 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 8000bd8:	2002      	movs	r0, #2
 8000bda:	f7ff ffb1 	bl	8000b40 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 8000bde:	2002      	movs	r0, #2
 8000be0:	f7ff ffae 	bl	8000b40 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8000be4:	2301      	movs	r3, #1
 8000be6:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	4619      	mov	r1, r3
 8000bec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf0:	f001 faf0 	bl	80021d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8000bf4:	2308      	movs	r3, #8
 8000bf6:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4815      	ldr	r0, [pc, #84]	; (8000c54 <DBG_Init+0xbc>)
 8000bfe:	f001 fae9 	bl	80021d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8000c02:	2310      	movs	r3, #16
 8000c04:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4812      	ldr	r0, [pc, #72]	; (8000c54 <DBG_Init+0xbc>)
 8000c0c:	f001 fae2 	bl	80021d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 8000c10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c14:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	4619      	mov	r1, r3
 8000c1a:	480e      	ldr	r0, [pc, #56]	; (8000c54 <DBG_Init+0xbc>)
 8000c1c:	f001 fada 	bl	80021d4 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2101      	movs	r1, #1
 8000c24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c28:	f001 fd02 	bl	8002630 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2108      	movs	r1, #8
 8000c30:	4808      	ldr	r0, [pc, #32]	; (8000c54 <DBG_Init+0xbc>)
 8000c32:	f001 fcfd 	bl	8002630 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2110      	movs	r1, #16
 8000c3a:	4806      	ldr	r0, [pc, #24]	; (8000c54 <DBG_Init+0xbc>)
 8000c3c:	f001 fcf8 	bl	8002630 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c46:	4803      	ldr	r0, [pc, #12]	; (8000c54 <DBG_Init+0xbc>)
 8000c48:	f001 fcf2 	bl	8002630 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8000c4c:	bf00      	nop
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	48000400 	.word	0x48000400

08000c58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr

08000c64 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	689b      	ldr	r3, [r3, #8]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr
	...

08000c7c <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000c82:	2300      	movs	r3, #0
 8000c84:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8000c86:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <TIMER_IF_Init+0x5c>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	f083 0301 	eor.w	r3, r3, #1
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d01b      	beq.n	8000ccc <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <TIMER_IF_Init+0x60>)
 8000c96:	f04f 32ff 	mov.w	r2, #4294967295
 8000c9a:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8000c9c:	f7ff fd3a 	bl	8000714 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8000ca0:	f000 f856 	bl	8000d50 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000ca4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ca8:	480c      	ldr	r0, [pc, #48]	; (8000cdc <TIMER_IF_Init+0x60>)
 8000caa:	f003 fa13 	bl	80040d4 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <TIMER_IF_Init+0x60>)
 8000cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb4:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8000cb6:	4809      	ldr	r0, [pc, #36]	; (8000cdc <TIMER_IF_Init+0x60>)
 8000cb8:	f003 fb4a 	bl	8004350 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f000 f9d3 	bl	8001068 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8000cc2:	f000 f85f 	bl	8000d84 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8000cc6:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <TIMER_IF_Init+0x5c>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	2000007d 	.word	0x2000007d
 8000cdc:	20000038 	.word	0x20000038

08000ce0 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08e      	sub	sp, #56	; 0x38
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8000cee:	f107 0308 	add.w	r3, r7, #8
 8000cf2:	222c      	movs	r2, #44	; 0x2c
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f00b f898 	bl	800be2c <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8000cfc:	f000 f828 	bl	8000d50 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8000d00:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <TIMER_IF_StartTimer+0x68>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	4413      	add	r3, r2
 8000d08:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	43db      	mvns	r3, r3
 8000d12:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8000d18:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000d1c:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000d1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d22:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000d24:	f107 0308 	add.w	r3, r7, #8
 8000d28:	2201      	movs	r2, #1
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4807      	ldr	r0, [pc, #28]	; (8000d4c <TIMER_IF_StartTimer+0x6c>)
 8000d2e:	f003 f8c5 	bl	8003ebc <HAL_RTC_SetAlarm_IT>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8000d38:	f7ff fcbe 	bl	80006b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8000d3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3738      	adds	r7, #56	; 0x38
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000080 	.word	0x20000080
 8000d4c:	20000038 	.word	0x20000038

08000d50 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000d56:	2300      	movs	r3, #0
 8000d58:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8000d5a:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <TIMER_IF_StopTimer+0x2c>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000d60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d64:	4806      	ldr	r0, [pc, #24]	; (8000d80 <TIMER_IF_StopTimer+0x30>)
 8000d66:	f003 f9b5 	bl	80040d4 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000d6a:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <TIMER_IF_StopTimer+0x30>)
 8000d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d70:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8000d72:	79fb      	ldrb	r3, [r7, #7]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40002800 	.word	0x40002800
 8000d80:	20000038 	.word	0x20000038

08000d84 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8000d88:	f000 f98e 	bl	80010a8 <GetTimerTicks>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	4a03      	ldr	r2, [pc, #12]	; (8000d9c <TIMER_IF_SetTimerContext+0x18>)
 8000d90:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8000d92:	4b02      	ldr	r3, [pc, #8]	; (8000d9c <TIMER_IF_SetTimerContext+0x18>)
 8000d94:	681b      	ldr	r3, [r3, #0]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000080 	.word	0x20000080

08000da0 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8000da4:	4b02      	ldr	r3, [pc, #8]	; (8000db0 <TIMER_IF_GetTimerContext+0x10>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr
 8000db0:	20000080 	.word	0x20000080

08000db4 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8000dbe:	f000 f973 	bl	80010a8 <GetTimerTicks>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8000dcc:	687b      	ldr	r3, [r7, #4]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000080 	.word	0x20000080

08000ddc <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <TIMER_IF_GetTimerValue+0x24>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d002      	beq.n	8000df4 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8000dee:	f000 f95b 	bl	80010a8 <GetTimerTicks>
 8000df2:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8000df4:	687b      	ldr	r3, [r7, #4]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	2000007d 	.word	0x2000007d

08000e04 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8000e0e:	2303      	movs	r3, #3
 8000e10:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8000e12:	687b      	ldr	r3, [r7, #4]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr

08000e1e <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8000e1e:	b5b0      	push	{r4, r5, r7, lr}
 8000e20:	b084      	sub	sp, #16
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8000e26:	2100      	movs	r1, #0
 8000e28:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8000e2a:	6879      	ldr	r1, [r7, #4]
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	460a      	mov	r2, r1
 8000e30:	4603      	mov	r3, r0
 8000e32:	0d95      	lsrs	r5, r2, #22
 8000e34:	0294      	lsls	r4, r2, #10
 8000e36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e3a:	f04f 0300 	mov.w	r3, #0
 8000e3e:	4620      	mov	r0, r4
 8000e40:	4629      	mov	r1, r5
 8000e42:	f7ff f9a1 	bl	8000188 <__aeabi_uldivmod>
 8000e46:	4602      	mov	r2, r0
 8000e48:	460b      	mov	r3, r1
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bdb0      	pop	{r4, r5, r7, pc}

08000e58 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8000e58:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000e5c:	b085      	sub	sp, #20
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8000e62:	2100      	movs	r1, #0
 8000e64:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	2000      	movs	r0, #0
 8000e6a:	460c      	mov	r4, r1
 8000e6c:	4605      	mov	r5, r0
 8000e6e:	4620      	mov	r0, r4
 8000e70:	4629      	mov	r1, r5
 8000e72:	f04f 0a00 	mov.w	sl, #0
 8000e76:	f04f 0b00 	mov.w	fp, #0
 8000e7a:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8000e7e:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8000e82:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8000e86:	4650      	mov	r0, sl
 8000e88:	4659      	mov	r1, fp
 8000e8a:	1b02      	subs	r2, r0, r4
 8000e8c:	eb61 0305 	sbc.w	r3, r1, r5
 8000e90:	f04f 0000 	mov.w	r0, #0
 8000e94:	f04f 0100 	mov.w	r1, #0
 8000e98:	0099      	lsls	r1, r3, #2
 8000e9a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000e9e:	0090      	lsls	r0, r2, #2
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	eb12 0804 	adds.w	r8, r2, r4
 8000ea8:	eb43 0905 	adc.w	r9, r3, r5
 8000eac:	f04f 0200 	mov.w	r2, #0
 8000eb0:	f04f 0300 	mov.w	r3, #0
 8000eb4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000eb8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000ebc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000ec0:	4690      	mov	r8, r2
 8000ec2:	4699      	mov	r9, r3
 8000ec4:	4640      	mov	r0, r8
 8000ec6:	4649      	mov	r1, r9
 8000ec8:	f04f 0200 	mov.w	r2, #0
 8000ecc:	f04f 0300 	mov.w	r3, #0
 8000ed0:	0a82      	lsrs	r2, r0, #10
 8000ed2:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8000ed6:	0a8b      	lsrs	r3, r1, #10
 8000ed8:	4613      	mov	r3, r2
 8000eda:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8000edc:	68fb      	ldr	r3, [r7, #12]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3714      	adds	r7, #20
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000ee8:	4770      	bx	lr

08000eea <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b084      	sub	sp, #16
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff ff93 	bl	8000e1e <TIMER_IF_Convert_ms2Tick>
 8000ef8:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8000efa:	f000 f8d5 	bl	80010a8 <GetTimerTicks>
 8000efe:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8000f00:	e000      	b.n	8000f04 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8000f02:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8000f04:	f000 f8d0 	bl	80010a8 <GetTimerTicks>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d8f6      	bhi.n	8000f02 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8000f26:	f00a fbab 	bl	800b680 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b084      	sub	sp, #16
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8000f3a:	f000 f8a5 	bl	8001088 <TIMER_IF_BkUp_Read_MSBticks>
 8000f3e:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	3301      	adds	r3, #1
 8000f44:	4618      	mov	r0, r3
 8000f46:	f000 f88f 	bl	8001068 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8000f4a:	bf00      	nop
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8000f52:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f56:	b08c      	sub	sp, #48	; 0x30
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8000f60:	f000 f8a2 	bl	80010a8 <GetTimerTicks>
 8000f64:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8000f66:	f000 f88f 	bl	8001088 <TIMER_IF_BkUp_Read_MSBticks>
 8000f6a:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	60fa      	str	r2, [r7, #12]
 8000f74:	f04f 0200 	mov.w	r2, #0
 8000f78:	f04f 0300 	mov.w	r3, #0
 8000f7c:	68b9      	ldr	r1, [r7, #8]
 8000f7e:	000b      	movs	r3, r1
 8000f80:	2200      	movs	r2, #0
 8000f82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000f84:	2000      	movs	r0, #0
 8000f86:	460c      	mov	r4, r1
 8000f88:	4605      	mov	r5, r0
 8000f8a:	eb12 0804 	adds.w	r8, r2, r4
 8000f8e:	eb43 0905 	adc.w	r9, r3, r5
 8000f92:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8000f96:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f9a:	f04f 0200 	mov.w	r2, #0
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	0a82      	lsrs	r2, r0, #10
 8000fa4:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8000fa8:	0a8b      	lsrs	r3, r1, #10
 8000faa:	4613      	mov	r3, r2
 8000fac:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	603b      	str	r3, [r7, #0]
 8000fb4:	607a      	str	r2, [r7, #4]
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8000fbc:	f04f 0b00 	mov.w	fp, #0
 8000fc0:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff ff46 	bl	8000e58 <TIMER_IF_Convert_Tick2ms>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8000fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3730      	adds	r7, #48	; 0x30
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000fe0 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	2100      	movs	r1, #0
 8000fec:	4803      	ldr	r0, [pc, #12]	; (8000ffc <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8000fee:	f003 fa41 	bl	8004474 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000038 	.word	0x20000038

08001000 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	2101      	movs	r1, #1
 800100c:	4803      	ldr	r0, [pc, #12]	; (800101c <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 800100e:	f003 fa31 	bl	8004474 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000038 	.word	0x20000038

08001020 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800102a:	2100      	movs	r1, #0
 800102c:	4804      	ldr	r0, [pc, #16]	; (8001040 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 800102e:	f003 fa39 	bl	80044a4 <HAL_RTCEx_BKUPRead>
 8001032:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8001034:	687b      	ldr	r3, [r7, #4]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000038 	.word	0x20000038

08001044 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 800104e:	2101      	movs	r1, #1
 8001050:	4804      	ldr	r0, [pc, #16]	; (8001064 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8001052:	f003 fa27 	bl	80044a4 <HAL_RTCEx_BKUPRead>
 8001056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8001058:	687b      	ldr	r3, [r7, #4]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000038 	.word	0x20000038

08001068 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	2102      	movs	r1, #2
 8001074:	4803      	ldr	r0, [pc, #12]	; (8001084 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8001076:	f003 f9fd 	bl	8004474 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000038 	.word	0x20000038

08001088 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 800108e:	2102      	movs	r1, #2
 8001090:	4804      	ldr	r0, [pc, #16]	; (80010a4 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8001092:	f003 fa07 	bl	80044a4 <HAL_RTCEx_BKUPRead>
 8001096:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8001098:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000038 	.word	0x20000038

080010a8 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80010ae:	480b      	ldr	r0, [pc, #44]	; (80010dc <GetTimerTicks+0x34>)
 80010b0:	f7ff fdd8 	bl	8000c64 <LL_RTC_TIME_GetSubSecond>
 80010b4:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80010b6:	e003      	b.n	80010c0 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80010b8:	4808      	ldr	r0, [pc, #32]	; (80010dc <GetTimerTicks+0x34>)
 80010ba:	f7ff fdd3 	bl	8000c64 <LL_RTC_TIME_GetSubSecond>
 80010be:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80010c0:	4806      	ldr	r0, [pc, #24]	; (80010dc <GetTimerTicks+0x34>)
 80010c2:	f7ff fdcf 	bl	8000c64 <LL_RTC_TIME_GetSubSecond>
 80010c6:	4602      	mov	r2, r0
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d1f4      	bne.n	80010b8 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40002800 	.word	0x40002800

080010e0 <LL_AHB2_GRP1_EnableClock>:
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80010e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80010f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4013      	ands	r3, r2
 8001102:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001104:	68fb      	ldr	r3, [r7, #12]
}
 8001106:	bf00      	nop
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr

08001110 <LL_APB2_GRP1_EnableClock>:
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800111c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800111e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4313      	orrs	r3, r2
 8001126:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800112c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4013      	ands	r3, r2
 8001132:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001134:	68fb      	ldr	r3, [r7, #12]
}
 8001136:	bf00      	nop
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr

08001140 <LL_APB2_GRP1_DisableClock>:
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800114c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	43db      	mvns	r3, r3
 8001152:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001156:	4013      	ands	r3, r2
 8001158:	660b      	str	r3, [r1, #96]	; 0x60
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr

08001164 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001168:	4b22      	ldr	r3, [pc, #136]	; (80011f4 <MX_USART1_UART_Init+0x90>)
 800116a:	4a23      	ldr	r2, [pc, #140]	; (80011f8 <MX_USART1_UART_Init+0x94>)
 800116c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800116e:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <MX_USART1_UART_Init+0x90>)
 8001170:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001174:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001176:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <MX_USART1_UART_Init+0x90>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800117c:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <MX_USART1_UART_Init+0x90>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001182:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <MX_USART1_UART_Init+0x90>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001188:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <MX_USART1_UART_Init+0x90>)
 800118a:	220c      	movs	r2, #12
 800118c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118e:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <MX_USART1_UART_Init+0x90>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001194:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <MX_USART1_UART_Init+0x90>)
 8001196:	2200      	movs	r2, #0
 8001198:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800119a:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <MX_USART1_UART_Init+0x90>)
 800119c:	2200      	movs	r2, #0
 800119e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011a0:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <MX_USART1_UART_Init+0x90>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011a6:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <MX_USART1_UART_Init+0x90>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011ac:	4811      	ldr	r0, [pc, #68]	; (80011f4 <MX_USART1_UART_Init+0x90>)
 80011ae:	f003 fe6a 	bl	8004e86 <HAL_UART_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80011b8:	f7ff fa7e 	bl	80006b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011bc:	2100      	movs	r1, #0
 80011be:	480d      	ldr	r0, [pc, #52]	; (80011f4 <MX_USART1_UART_Init+0x90>)
 80011c0:	f005 ff8d 	bl	80070de <HAL_UARTEx_SetTxFifoThreshold>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80011ca:	f7ff fa75 	bl	80006b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011ce:	2100      	movs	r1, #0
 80011d0:	4808      	ldr	r0, [pc, #32]	; (80011f4 <MX_USART1_UART_Init+0x90>)
 80011d2:	f005 ffc2 	bl	800715a <HAL_UARTEx_SetRxFifoThreshold>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80011dc:	f7ff fa6c 	bl	80006b8 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 80011e0:	4804      	ldr	r0, [pc, #16]	; (80011f4 <MX_USART1_UART_Init+0x90>)
 80011e2:	f005 ff41 	bl	8007068 <HAL_UARTEx_EnableFifoMode>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80011ec:	f7ff fa64 	bl	80006b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000084 	.word	0x20000084
 80011f8:	40013800 	.word	0x40013800

080011fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b096      	sub	sp, #88	; 0x58
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001214:	f107 030c 	add.w	r3, r7, #12
 8001218:	2238      	movs	r2, #56	; 0x38
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f00a fe05 	bl	800be2c <memset>
  if(uartHandle->Instance==USART1)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a2f      	ldr	r2, [pc, #188]	; (80012e4 <HAL_UART_MspInit+0xe8>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d156      	bne.n	80012da <HAL_UART_MspInit+0xde>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800122c:	2301      	movs	r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001230:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001234:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001236:	f107 030c 	add.w	r3, r7, #12
 800123a:	4618      	mov	r0, r3
 800123c:	f002 fca2 	bl	8003b84 <HAL_RCCEx_PeriphCLKConfig>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001246:	f7ff fa37 	bl	80006b8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800124a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800124e:	f7ff ff5f 	bl	8001110 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001252:	2002      	movs	r0, #2
 8001254:	f7ff ff44 	bl	80010e0 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8001258:	23c0      	movs	r3, #192	; 0xc0
 800125a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	2302      	movs	r3, #2
 800125e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001264:	2303      	movs	r3, #3
 8001266:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001268:	2307      	movs	r3, #7
 800126a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001270:	4619      	mov	r1, r3
 8001272:	481d      	ldr	r0, [pc, #116]	; (80012e8 <HAL_UART_MspInit+0xec>)
 8001274:	f000 ffae 	bl	80021d4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8001278:	4b1c      	ldr	r3, [pc, #112]	; (80012ec <HAL_UART_MspInit+0xf0>)
 800127a:	4a1d      	ldr	r2, [pc, #116]	; (80012f0 <HAL_UART_MspInit+0xf4>)
 800127c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800127e:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <HAL_UART_MspInit+0xf0>)
 8001280:	2212      	movs	r2, #18
 8001282:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001284:	4b19      	ldr	r3, [pc, #100]	; (80012ec <HAL_UART_MspInit+0xf0>)
 8001286:	2210      	movs	r2, #16
 8001288:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800128a:	4b18      	ldr	r3, [pc, #96]	; (80012ec <HAL_UART_MspInit+0xf0>)
 800128c:	2200      	movs	r2, #0
 800128e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001290:	4b16      	ldr	r3, [pc, #88]	; (80012ec <HAL_UART_MspInit+0xf0>)
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <HAL_UART_MspInit+0xf0>)
 8001298:	2200      	movs	r2, #0
 800129a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800129c:	4b13      	ldr	r3, [pc, #76]	; (80012ec <HAL_UART_MspInit+0xf0>)
 800129e:	2200      	movs	r2, #0
 80012a0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80012a2:	4b12      	ldr	r3, [pc, #72]	; (80012ec <HAL_UART_MspInit+0xf0>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012a8:	4b10      	ldr	r3, [pc, #64]	; (80012ec <HAL_UART_MspInit+0xf0>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80012ae:	480f      	ldr	r0, [pc, #60]	; (80012ec <HAL_UART_MspInit+0xf0>)
 80012b0:	f000 fba6 	bl	8001a00 <HAL_DMA_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 80012ba:	f7ff f9fd 	bl	80006b8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <HAL_UART_MspInit+0xf0>)
 80012c2:	67da      	str	r2, [r3, #124]	; 0x7c
 80012c4:	4a09      	ldr	r2, [pc, #36]	; (80012ec <HAL_UART_MspInit+0xf0>)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2102      	movs	r1, #2
 80012ce:	2024      	movs	r0, #36	; 0x24
 80012d0:	f000 fb5f 	bl	8001992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012d4:	2024      	movs	r0, #36	; 0x24
 80012d6:	f000 fb76 	bl	80019c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80012da:	bf00      	nop
 80012dc:	3758      	adds	r7, #88	; 0x58
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40013800 	.word	0x40013800
 80012e8:	48000400 	.word	0x48000400
 80012ec:	20000118 	.word	0x20000118
 80012f0:	40020008 	.word	0x40020008

080012f4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <HAL_UART_MspDeInit+0x3c>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d10f      	bne.n	8001326 <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001306:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800130a:	f7ff ff19 	bl	8001140 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 800130e:	21c0      	movs	r1, #192	; 0xc0
 8001310:	4808      	ldr	r0, [pc, #32]	; (8001334 <HAL_UART_MspDeInit+0x40>)
 8001312:	f001 f8bf 	bl	8002494 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800131a:	4618      	mov	r0, r3
 800131c:	f000 fc18 	bl	8001b50 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001320:	2024      	movs	r0, #36	; 0x24
 8001322:	f000 fb5e 	bl	80019e2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40013800 	.word	0x40013800
 8001334:	48000400 	.word	0x48000400

08001338 <LL_APB2_GRP1_ForceReset>:
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8001340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001344:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001346:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4313      	orrs	r3, r2
 800134e:	640b      	str	r3, [r1, #64]	; 0x40
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr

0800135a <LL_APB2_GRP1_ReleaseReset>:
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8001362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001366:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	43db      	mvns	r3, r3
 800136c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001370:	4013      	ands	r3, r2
 8001372:	640b      	str	r3, [r1, #64]	; 0x40
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr
	...

08001380 <LL_EXTI_EnableIT_0_31>:
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <LL_EXTI_EnableIT_0_31+0x24>)
 800138a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800138e:	4905      	ldr	r1, [pc, #20]	; (80013a4 <LL_EXTI_EnableIT_0_31+0x24>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4313      	orrs	r3, r2
 8001394:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	58000800 	.word	0x58000800

080013a8 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80013b0:	4a07      	ldr	r2, [pc, #28]	; (80013d0 <vcom_Init+0x28>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80013b6:	f7ff f87d 	bl	80004b4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80013ba:	f7ff fed3 	bl	8001164 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 80013be:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80013c2:	f7ff ffdd 	bl	8001380 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 80013c6:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	2000017c 	.word	0x2000017c

080013d4 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 80013d8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013dc:	f7ff ffac 	bl	8001338 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 80013e0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013e4:	f7ff ffb9 	bl	800135a <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 80013e8:	4804      	ldr	r0, [pc, #16]	; (80013fc <vcom_DeInit+0x28>)
 80013ea:	f7ff ff83 	bl	80012f4 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80013ee:	200f      	movs	r0, #15
 80013f0:	f000 faf7 	bl	80019e2 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 80013f4:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000084 	.word	0x20000084

08001400 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 800140c:	887b      	ldrh	r3, [r7, #2]
 800140e:	461a      	mov	r2, r3
 8001410:	6879      	ldr	r1, [r7, #4]
 8001412:	4804      	ldr	r0, [pc, #16]	; (8001424 <vcom_Trace_DMA+0x24>)
 8001414:	f003 fdd4 	bl	8004fc0 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8001418:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000084 	.word	0x20000084

08001428 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8001430:	4a19      	ldr	r2, [pc, #100]	; (8001498 <vcom_ReceiveInit+0x70>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8001436:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800143a:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 800143c:	f107 0308 	add.w	r3, r7, #8
 8001440:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001444:	4815      	ldr	r0, [pc, #84]	; (800149c <vcom_ReceiveInit+0x74>)
 8001446:	f005 fd82 	bl	8006f4e <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 800144a:	bf00      	nop
 800144c:	4b13      	ldr	r3, [pc, #76]	; (800149c <vcom_ReceiveInit+0x74>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800145a:	d0f7      	beq.n	800144c <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 800145c:	bf00      	nop
 800145e:	4b0f      	ldr	r3, [pc, #60]	; (800149c <vcom_ReceiveInit+0x74>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	69db      	ldr	r3, [r3, #28]
 8001464:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001468:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800146c:	d1f7      	bne.n	800145e <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 800146e:	4b0b      	ldr	r3, [pc, #44]	; (800149c <vcom_ReceiveInit+0x74>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	4b09      	ldr	r3, [pc, #36]	; (800149c <vcom_ReceiveInit+0x74>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800147c:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 800147e:	4807      	ldr	r0, [pc, #28]	; (800149c <vcom_ReceiveInit+0x74>)
 8001480:	f005 fdc0 	bl	8007004 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8001484:	2201      	movs	r2, #1
 8001486:	4906      	ldr	r1, [pc, #24]	; (80014a0 <vcom_ReceiveInit+0x78>)
 8001488:	4804      	ldr	r0, [pc, #16]	; (800149c <vcom_ReceiveInit+0x74>)
 800148a:	f003 fd4d 	bl	8004f28 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 800148e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8001490:	4618      	mov	r0, r3
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000180 	.word	0x20000180
 800149c:	20000084 	.word	0x20000084
 80014a0:	20000178 	.word	0x20000178

080014a4 <vcom_Resume>:

void vcom_Resume(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014a8:	4808      	ldr	r0, [pc, #32]	; (80014cc <vcom_Resume+0x28>)
 80014aa:	f003 fcec 	bl	8004e86 <HAL_UART_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <vcom_Resume+0x14>
  {
    Error_Handler();
 80014b4:	f7ff f900 	bl	80006b8 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80014b8:	4805      	ldr	r0, [pc, #20]	; (80014d0 <vcom_Resume+0x2c>)
 80014ba:	f000 faa1 	bl	8001a00 <HAL_DMA_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <vcom_Resume+0x24>
  {
    Error_Handler();
 80014c4:	f7ff f8f8 	bl	80006b8 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000084 	.word	0x20000084
 80014d0:	20000118 	.word	0x20000118

080014d4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a05      	ldr	r2, [pc, #20]	; (80014f8 <HAL_UART_TxCpltCallback+0x24>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d103      	bne.n	80014ee <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 80014e6:	4b05      	ldr	r3, [pc, #20]	; (80014fc <HAL_UART_TxCpltCallback+0x28>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2000      	movs	r0, #0
 80014ec:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40013800 	.word	0x40013800
 80014fc:	2000017c 	.word	0x2000017c

08001500 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a0d      	ldr	r2, [pc, #52]	; (8001544 <HAL_UART_RxCpltCallback+0x44>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d113      	bne.n	800153a <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8001512:	4b0d      	ldr	r3, [pc, #52]	; (8001548 <HAL_UART_RxCpltCallback+0x48>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d00a      	beq.n	8001530 <HAL_UART_RxCpltCallback+0x30>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001520:	2b00      	cmp	r3, #0
 8001522:	d105      	bne.n	8001530 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <HAL_UART_RxCpltCallback+0x48>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2200      	movs	r2, #0
 800152a:	2101      	movs	r1, #1
 800152c:	4807      	ldr	r0, [pc, #28]	; (800154c <HAL_UART_RxCpltCallback+0x4c>)
 800152e:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8001530:	2201      	movs	r2, #1
 8001532:	4906      	ldr	r1, [pc, #24]	; (800154c <HAL_UART_RxCpltCallback+0x4c>)
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f003 fcf7 	bl	8004f28 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40013800 	.word	0x40013800
 8001548:	20000180 	.word	0x20000180
 800154c:	20000178 	.word	0x20000178

08001550 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001550:	480d      	ldr	r0, [pc, #52]	; (8001588 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001552:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001554:	f7ff fb80 	bl	8000c58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001558:	480c      	ldr	r0, [pc, #48]	; (800158c <LoopForever+0x6>)
  ldr r1, =_edata
 800155a:	490d      	ldr	r1, [pc, #52]	; (8001590 <LoopForever+0xa>)
  ldr r2, =_sidata
 800155c:	4a0d      	ldr	r2, [pc, #52]	; (8001594 <LoopForever+0xe>)
  movs r3, #0
 800155e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001560:	e002      	b.n	8001568 <LoopCopyDataInit>

08001562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001566:	3304      	adds	r3, #4

08001568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800156a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800156c:	d3f9      	bcc.n	8001562 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800156e:	4a0a      	ldr	r2, [pc, #40]	; (8001598 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001570:	4c0a      	ldr	r4, [pc, #40]	; (800159c <LoopForever+0x16>)
  movs r3, #0
 8001572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001574:	e001      	b.n	800157a <LoopFillZerobss>

08001576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001578:	3204      	adds	r2, #4

0800157a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800157a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800157c:	d3fb      	bcc.n	8001576 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800157e:	f00a fc5d 	bl	800be3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001582:	f7ff f832 	bl	80005ea <main>

08001586 <LoopForever>:

LoopForever:
    b LoopForever
 8001586:	e7fe      	b.n	8001586 <LoopForever>
  ldr   r0, =_estack
 8001588:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800158c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001590:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001594:	0800c2e0 	.word	0x0800c2e0
  ldr r2, =_sbss
 8001598:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 800159c:	20000788 	.word	0x20000788

080015a0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015a0:	e7fe      	b.n	80015a0 <ADC_IRQHandler>

080015a2 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b086      	sub	sp, #24
 80015a6:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
 80015b4:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80015b6:	2310      	movs	r3, #16
 80015b8:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80015ba:	2301      	movs	r3, #1
 80015bc:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c2:	2303      	movs	r3, #3
 80015c4:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	4619      	mov	r1, r3
 80015ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ce:	f000 fe01 	bl	80021d4 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80015d2:	2320      	movs	r3, #32
 80015d4:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	4619      	mov	r1, r3
 80015da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015de:	f000 fdf9 	bl	80021d4 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80015e2:	2200      	movs	r2, #0
 80015e4:	2120      	movs	r1, #32
 80015e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ea:	f001 f821 	bl	8002630 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80015ee:	2200      	movs	r2, #0
 80015f0:	2110      	movs	r1, #16
 80015f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f6:	f001 f81b 	bl	8002630 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	2b03      	cmp	r3, #3
 8001612:	d83f      	bhi.n	8001694 <BSP_RADIO_ConfigRFSwitch+0x90>
 8001614:	a201      	add	r2, pc, #4	; (adr r2, 800161c <BSP_RADIO_ConfigRFSwitch+0x18>)
 8001616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161a:	bf00      	nop
 800161c:	0800162d 	.word	0x0800162d
 8001620:	08001647 	.word	0x08001647
 8001624:	08001661 	.word	0x08001661
 8001628:	0800167b 	.word	0x0800167b
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800162c:	2200      	movs	r2, #0
 800162e:	2110      	movs	r1, #16
 8001630:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001634:	f000 fffc 	bl	8002630 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8001638:	2200      	movs	r2, #0
 800163a:	2120      	movs	r1, #32
 800163c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001640:	f000 fff6 	bl	8002630 <HAL_GPIO_WritePin>
      break;      
 8001644:	e027      	b.n	8001696 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001646:	2201      	movs	r2, #1
 8001648:	2110      	movs	r1, #16
 800164a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164e:	f000 ffef 	bl	8002630 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001652:	2200      	movs	r2, #0
 8001654:	2120      	movs	r1, #32
 8001656:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800165a:	f000 ffe9 	bl	8002630 <HAL_GPIO_WritePin>
      break;
 800165e:	e01a      	b.n	8001696 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001660:	2201      	movs	r2, #1
 8001662:	2110      	movs	r1, #16
 8001664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001668:	f000 ffe2 	bl	8002630 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800166c:	2201      	movs	r2, #1
 800166e:	2120      	movs	r1, #32
 8001670:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001674:	f000 ffdc 	bl	8002630 <HAL_GPIO_WritePin>
      break;
 8001678:	e00d      	b.n	8001696 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800167a:	2200      	movs	r2, #0
 800167c:	2110      	movs	r1, #16
 800167e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001682:	f000 ffd5 	bl	8002630 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001686:	2201      	movs	r2, #1
 8001688:	2120      	movs	r1, #32
 800168a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168e:	f000 ffcf 	bl	8002630 <HAL_GPIO_WritePin>
      break;
 8001692:	e000      	b.n	8001696 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8001694:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 80016a4:	2302      	movs	r3, #2
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr

080016ae <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 80016b2:	2301      	movs	r3, #1
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr

080016bc <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80016c0:	2301      	movs	r3, #1
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr

080016ca <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b085      	sub	sp, #20
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	4603      	mov	r3, r0
 80016d2:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d102      	bne.n	80016e0 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 80016da:	230f      	movs	r3, #15
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	e001      	b.n	80016e4 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 80016e0:	2316      	movs	r3, #22
 80016e2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80016e4:	68fb      	ldr	r3, [r7, #12]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr

080016f0 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80016f4:	4b04      	ldr	r3, [pc, #16]	; (8001708 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	4a03      	ldr	r2, [pc, #12]	; (8001708 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	6053      	str	r3, [r2, #4]
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr
 8001708:	e0042000 	.word	0xe0042000

0800170c <LL_DBGMCU_EnableDBGStopMode>:
  *        in Stop mode even when this bit is enabled
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8001710:	4b04      	ldr	r3, [pc, #16]	; (8001724 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	4a03      	ldr	r2, [pc, #12]	; (8001724 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8001716:	f043 0302 	orr.w	r3, r3, #2
 800171a:	6053      	str	r3, [r2, #4]
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr
 8001724:	e0042000 	.word	0xe0042000

08001728 <LL_DBGMCU_EnableDBGStandbyMode>:
  *        in Standby mode even when this bit is enabled
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_EnableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStandbyMode(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 800172c:	4b04      	ldr	r3, [pc, #16]	; (8001740 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	4a03      	ldr	r2, [pc, #12]	; (8001740 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8001732:	f043 0304 	orr.w	r3, r3, #4
 8001736:	6053      	str	r3, [r2, #4]
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	e0042000 	.word	0xe0042000

08001744 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800174e:	2003      	movs	r0, #3
 8001750:	f000 f914 	bl	800197c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001754:	f002 f838 	bl	80037c8 <HAL_RCC_GetHCLKFreq>
 8001758:	4603      	mov	r3, r0
 800175a:	4a09      	ldr	r2, [pc, #36]	; (8001780 <HAL_Init+0x3c>)
 800175c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800175e:	200f      	movs	r0, #15
 8001760:	f7ff f9c4 	bl	8000aec <HAL_InitTick>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d002      	beq.n	8001770 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	71fb      	strb	r3, [r7, #7]
 800176e:	e001      	b.n	8001774 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001770:	f7ff f899 	bl	80008a6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001774:	79fb      	ldrb	r3, [r7, #7]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000000 	.word	0x20000000

08001784 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001788:	4b04      	ldr	r3, [pc, #16]	; (800179c <HAL_SuspendTick+0x18>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a03      	ldr	r2, [pc, #12]	; (800179c <HAL_SuspendTick+0x18>)
 800178e:	f023 0302 	bic.w	r3, r3, #2
 8001792:	6013      	str	r3, [r2, #0]
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	e000e010 	.word	0xe000e010

080017a0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80017a4:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <HAL_ResumeTick+0x18>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a03      	ldr	r2, [pc, #12]	; (80017b8 <HAL_ResumeTick+0x18>)
 80017aa:	f043 0302 	orr.w	r3, r3, #2
 80017ae:	6013      	str	r3, [r2, #0]
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr
 80017b8:	e000e010 	.word	0xe000e010

080017bc <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80017c0:	f7ff ff96 	bl	80016f0 <LL_DBGMCU_EnableDBGSleepMode>
}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80017cc:	f7ff ff9e 	bl	800170c <LL_DBGMCU_EnableDBGStopMode>
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 80017d8:	f7ff ffa6 	bl	8001728 <LL_DBGMCU_EnableDBGStandbyMode>
}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}

080017e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <__NVIC_SetPriorityGrouping+0x44>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017f6:	68ba      	ldr	r2, [r7, #8]
 80017f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017fc:	4013      	ands	r3, r2
 80017fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001808:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800180c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001812:	4a04      	ldr	r2, [pc, #16]	; (8001824 <__NVIC_SetPriorityGrouping+0x44>)
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	60d3      	str	r3, [r2, #12]
}
 8001818:	bf00      	nop
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800182c:	4b04      	ldr	r3, [pc, #16]	; (8001840 <__NVIC_GetPriorityGrouping+0x18>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	0a1b      	lsrs	r3, r3, #8
 8001832:	f003 0307 	and.w	r3, r3, #7
}
 8001836:	4618      	mov	r0, r3
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	2b00      	cmp	r3, #0
 8001854:	db0b      	blt.n	800186e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	f003 021f 	and.w	r2, r3, #31
 800185c:	4906      	ldr	r1, [pc, #24]	; (8001878 <__NVIC_EnableIRQ+0x34>)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	095b      	lsrs	r3, r3, #5
 8001864:	2001      	movs	r0, #1
 8001866:	fa00 f202 	lsl.w	r2, r0, r2
 800186a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr
 8001878:	e000e100 	.word	0xe000e100

0800187c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	2b00      	cmp	r3, #0
 800188c:	db12      	blt.n	80018b4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	f003 021f 	and.w	r2, r3, #31
 8001894:	490a      	ldr	r1, [pc, #40]	; (80018c0 <__NVIC_DisableIRQ+0x44>)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	095b      	lsrs	r3, r3, #5
 800189c:	2001      	movs	r0, #1
 800189e:	fa00 f202 	lsl.w	r2, r0, r2
 80018a2:	3320      	adds	r3, #32
 80018a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80018a8:	f3bf 8f4f 	dsb	sy
}
 80018ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018ae:	f3bf 8f6f 	isb	sy
}
 80018b2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	e000e100 	.word	0xe000e100

080018c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	6039      	str	r1, [r7, #0]
 80018ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	db0a      	blt.n	80018ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	490c      	ldr	r1, [pc, #48]	; (8001910 <__NVIC_SetPriority+0x4c>)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	0112      	lsls	r2, r2, #4
 80018e4:	b2d2      	uxtb	r2, r2
 80018e6:	440b      	add	r3, r1
 80018e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018ec:	e00a      	b.n	8001904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	4908      	ldr	r1, [pc, #32]	; (8001914 <__NVIC_SetPriority+0x50>)
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	3b04      	subs	r3, #4
 80018fc:	0112      	lsls	r2, r2, #4
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	440b      	add	r3, r1
 8001902:	761a      	strb	r2, [r3, #24]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000e100 	.word	0xe000e100
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001918:	b480      	push	{r7}
 800191a:	b089      	sub	sp, #36	; 0x24
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f1c3 0307 	rsb	r3, r3, #7
 8001932:	2b04      	cmp	r3, #4
 8001934:	bf28      	it	cs
 8001936:	2304      	movcs	r3, #4
 8001938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3304      	adds	r3, #4
 800193e:	2b06      	cmp	r3, #6
 8001940:	d902      	bls.n	8001948 <NVIC_EncodePriority+0x30>
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3b03      	subs	r3, #3
 8001946:	e000      	b.n	800194a <NVIC_EncodePriority+0x32>
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800194c:	f04f 32ff 	mov.w	r2, #4294967295
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43da      	mvns	r2, r3
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	401a      	ands	r2, r3
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001960:	f04f 31ff 	mov.w	r1, #4294967295
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	fa01 f303 	lsl.w	r3, r1, r3
 800196a:	43d9      	mvns	r1, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	4313      	orrs	r3, r2
         );
}
 8001972:	4618      	mov	r0, r3
 8001974:	3724      	adds	r7, #36	; 0x24
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr

0800197c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff ff2b 	bl	80017e0 <__NVIC_SetPriorityGrouping>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b086      	sub	sp, #24
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
 800199e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019a0:	f7ff ff42 	bl	8001828 <__NVIC_GetPriorityGrouping>
 80019a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	68b9      	ldr	r1, [r7, #8]
 80019aa:	6978      	ldr	r0, [r7, #20]
 80019ac:	f7ff ffb4 	bl	8001918 <NVIC_EncodePriority>
 80019b0:	4602      	mov	r2, r0
 80019b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff ff83 	bl	80018c4 <__NVIC_SetPriority>
}
 80019be:	bf00      	nop
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	4603      	mov	r3, r0
 80019ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff ff35 	bl	8001844 <__NVIC_EnableIRQ>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	4603      	mov	r3, r0
 80019ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80019ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ff43 	bl	800187c <__NVIC_DisableIRQ>
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e08e      	b.n	8001b30 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	461a      	mov	r2, r3
 8001a18:	4b47      	ldr	r3, [pc, #284]	; (8001b38 <HAL_DMA_Init+0x138>)
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d80f      	bhi.n	8001a3e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	4b45      	ldr	r3, [pc, #276]	; (8001b3c <HAL_DMA_Init+0x13c>)
 8001a26:	4413      	add	r3, r2
 8001a28:	4a45      	ldr	r2, [pc, #276]	; (8001b40 <HAL_DMA_Init+0x140>)
 8001a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2e:	091b      	lsrs	r3, r3, #4
 8001a30:	009a      	lsls	r2, r3, #2
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a42      	ldr	r2, [pc, #264]	; (8001b44 <HAL_DMA_Init+0x144>)
 8001a3a:	641a      	str	r2, [r3, #64]	; 0x40
 8001a3c:	e00e      	b.n	8001a5c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	461a      	mov	r2, r3
 8001a44:	4b40      	ldr	r3, [pc, #256]	; (8001b48 <HAL_DMA_Init+0x148>)
 8001a46:	4413      	add	r3, r2
 8001a48:	4a3d      	ldr	r2, [pc, #244]	; (8001b40 <HAL_DMA_Init+0x140>)
 8001a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4e:	091b      	lsrs	r3, r3, #4
 8001a50:	009a      	lsls	r2, r3, #2
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a3c      	ldr	r2, [pc, #240]	; (8001b4c <HAL_DMA_Init+0x14c>)
 8001a5a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2202      	movs	r2, #2
 8001a60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6812      	ldr	r2, [r2, #0]
 8001a6e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a76:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6819      	ldr	r1, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	431a      	orrs	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 fb24 	bl	80020fc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001abc:	d102      	bne.n	8001ac4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001acc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ad0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ada:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d010      	beq.n	8001b06 <HAL_DMA_Init+0x106>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d80c      	bhi.n	8001b06 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 fb4d 	bl	800218c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	e008      	b.n	8001b18 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40020407 	.word	0x40020407
 8001b3c:	bffdfff8 	.word	0xbffdfff8
 8001b40:	cccccccd 	.word	0xcccccccd
 8001b44:	40020000 	.word	0x40020000
 8001b48:	bffdfbf8 	.word	0xbffdfbf8
 8001b4c:	40020400 	.word	0x40020400

08001b50 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e07b      	b.n	8001c5a <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 0201 	bic.w	r2, r2, #1
 8001b70:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	461a      	mov	r2, r3
 8001b78:	4b3a      	ldr	r3, [pc, #232]	; (8001c64 <HAL_DMA_DeInit+0x114>)
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d80f      	bhi.n	8001b9e <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	461a      	mov	r2, r3
 8001b84:	4b38      	ldr	r3, [pc, #224]	; (8001c68 <HAL_DMA_DeInit+0x118>)
 8001b86:	4413      	add	r3, r2
 8001b88:	4a38      	ldr	r2, [pc, #224]	; (8001c6c <HAL_DMA_DeInit+0x11c>)
 8001b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8e:	091b      	lsrs	r3, r3, #4
 8001b90:	009a      	lsls	r2, r3, #2
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a35      	ldr	r2, [pc, #212]	; (8001c70 <HAL_DMA_DeInit+0x120>)
 8001b9a:	641a      	str	r2, [r3, #64]	; 0x40
 8001b9c:	e00e      	b.n	8001bbc <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	4b33      	ldr	r3, [pc, #204]	; (8001c74 <HAL_DMA_DeInit+0x124>)
 8001ba6:	4413      	add	r3, r2
 8001ba8:	4a30      	ldr	r2, [pc, #192]	; (8001c6c <HAL_DMA_DeInit+0x11c>)
 8001baa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bae:	091b      	lsrs	r3, r3, #4
 8001bb0:	009a      	lsls	r2, r3, #2
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a2f      	ldr	r2, [pc, #188]	; (8001c78 <HAL_DMA_DeInit+0x128>)
 8001bba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc8:	f003 021c 	and.w	r2, r3, #28
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd6:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 fa8f 	bl	80020fc <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001bee:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00f      	beq.n	8001c18 <HAL_DMA_DeInit+0xc8>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b04      	cmp	r3, #4
 8001bfe:	d80b      	bhi.n	8001c18 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 fac3 	bl	800218c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001c16:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40020407 	.word	0x40020407
 8001c68:	bffdfff8 	.word	0xbffdfff8
 8001c6c:	cccccccd 	.word	0xcccccccd
 8001c70:	40020000 	.word	0x40020000
 8001c74:	bffdfbf8 	.word	0xbffdfbf8
 8001c78:	40020400 	.word	0x40020400

08001c7c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
 8001c88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d101      	bne.n	8001c9c <HAL_DMA_Start_IT+0x20>
 8001c98:	2302      	movs	r3, #2
 8001c9a:	e069      	b.n	8001d70 <HAL_DMA_Start_IT+0xf4>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d155      	bne.n	8001d5c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0201 	bic.w	r2, r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	68b9      	ldr	r1, [r7, #8]
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f000 f9d3 	bl	8002080 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d008      	beq.n	8001cf4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f042 020e 	orr.w	r2, r2, #14
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	e00f      	b.n	8001d14 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0204 	bic.w	r2, r2, #4
 8001d02:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f042 020a 	orr.w	r2, r2, #10
 8001d12:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d007      	beq.n	8001d32 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d30:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d007      	beq.n	8001d4a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d48:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f042 0201 	orr.w	r2, r2, #1
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	e008      	b.n	8001d6e <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2280      	movs	r2, #128	; 0x80
 8001d60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e04f      	b.n	8001e2a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d008      	beq.n	8001da8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2204      	movs	r2, #4
 8001d9a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e040      	b.n	8001e2a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 020e 	bic.w	r2, r2, #14
 8001db6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dc2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dc6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0201 	bic.w	r2, r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ddc:	f003 021c 	and.w	r2, r3, #28
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de4:	2101      	movs	r1, #1
 8001de6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dea:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001df4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00c      	beq.n	8001e18 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e0c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001e16:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr

08001e34 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d005      	beq.n	8001e58 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2204      	movs	r2, #4
 8001e50:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	73fb      	strb	r3, [r7, #15]
 8001e56:	e047      	b.n	8001ee8 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 020e 	bic.w	r2, r2, #14
 8001e66:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0201 	bic.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8c:	f003 021c 	and.w	r2, r3, #28
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	2101      	movs	r1, #1
 8001e96:	fa01 f202 	lsl.w	r2, r1, r2
 8001e9a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ea4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00c      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ebc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001ec6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	4798      	blx	r3
    }
  }
  return status;
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f10:	f003 031c 	and.w	r3, r3, #28
 8001f14:	2204      	movs	r2, #4
 8001f16:	409a      	lsls	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d027      	beq.n	8001f70 <HAL_DMA_IRQHandler+0x7c>
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	f003 0304 	and.w	r3, r3, #4
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d022      	beq.n	8001f70 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0320 	and.w	r3, r3, #32
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d107      	bne.n	8001f48 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0204 	bic.w	r2, r2, #4
 8001f46:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4c:	f003 021c 	and.w	r2, r3, #28
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f54:	2104      	movs	r1, #4
 8001f56:	fa01 f202 	lsl.w	r2, r1, r2
 8001f5a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 8081 	beq.w	8002068 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001f6e:	e07b      	b.n	8002068 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f74:	f003 031c 	and.w	r3, r3, #28
 8001f78:	2202      	movs	r2, #2
 8001f7a:	409a      	lsls	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d03d      	beq.n	8002000 <HAL_DMA_IRQHandler+0x10c>
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d038      	beq.n	8002000 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0320 	and.w	r3, r3, #32
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10b      	bne.n	8001fb4 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 020a 	bic.w	r2, r2, #10
 8001faa:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4b2e      	ldr	r3, [pc, #184]	; (8002074 <HAL_DMA_IRQHandler+0x180>)
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d909      	bls.n	8001fd4 <HAL_DMA_IRQHandler+0xe0>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc4:	f003 031c 	and.w	r3, r3, #28
 8001fc8:	4a2b      	ldr	r2, [pc, #172]	; (8002078 <HAL_DMA_IRQHandler+0x184>)
 8001fca:	2102      	movs	r1, #2
 8001fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd0:	6053      	str	r3, [r2, #4]
 8001fd2:	e008      	b.n	8001fe6 <HAL_DMA_IRQHandler+0xf2>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd8:	f003 031c 	and.w	r3, r3, #28
 8001fdc:	4a27      	ldr	r2, [pc, #156]	; (800207c <HAL_DMA_IRQHandler+0x188>)
 8001fde:	2102      	movs	r1, #2
 8001fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe4:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d038      	beq.n	8002068 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001ffe:	e033      	b.n	8002068 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002004:	f003 031c 	and.w	r3, r3, #28
 8002008:	2208      	movs	r2, #8
 800200a:	409a      	lsls	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4013      	ands	r3, r2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d02a      	beq.n	800206a <HAL_DMA_IRQHandler+0x176>
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f003 0308 	and.w	r3, r3, #8
 800201a:	2b00      	cmp	r3, #0
 800201c:	d025      	beq.n	800206a <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 020e 	bic.w	r2, r2, #14
 800202c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	f003 021c 	and.w	r2, r3, #28
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	2101      	movs	r1, #1
 800203c:	fa01 f202 	lsl.w	r2, r1, r2
 8002040:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800205c:	2b00      	cmp	r3, #0
 800205e:	d004      	beq.n	800206a <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002068:	bf00      	nop
 800206a:	bf00      	nop
}
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40020080 	.word	0x40020080
 8002078:	40020400 	.word	0x40020400
 800207c:	40020000 	.word	0x40020000

08002080 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
 800208c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002096:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209c:	2b00      	cmp	r3, #0
 800209e:	d004      	beq.n	80020aa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80020a8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ae:	f003 021c 	and.w	r2, r3, #28
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	2101      	movs	r1, #1
 80020b8:	fa01 f202 	lsl.w	r2, r1, r2
 80020bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	2b10      	cmp	r3, #16
 80020cc:	d108      	bne.n	80020e0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80020de:	e007      	b.n	80020f0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	60da      	str	r2, [r3, #12]
}
 80020f0:	bf00      	nop
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr
	...

080020fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	461a      	mov	r2, r3
 800210a:	4b1c      	ldr	r3, [pc, #112]	; (800217c <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 800210c:	429a      	cmp	r2, r3
 800210e:	d813      	bhi.n	8002138 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002114:	089b      	lsrs	r3, r3, #2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800211c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	b2db      	uxtb	r3, r3
 800212a:	3b08      	subs	r3, #8
 800212c:	4a14      	ldr	r2, [pc, #80]	; (8002180 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800212e:	fba2 2303 	umull	r2, r3, r2, r3
 8002132:	091b      	lsrs	r3, r3, #4
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	e011      	b.n	800215c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213c:	089b      	lsrs	r3, r3, #2
 800213e:	009a      	lsls	r2, r3, #2
 8002140:	4b10      	ldr	r3, [pc, #64]	; (8002184 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8002142:	4413      	add	r3, r2
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	b2db      	uxtb	r3, r3
 800214e:	3b08      	subs	r3, #8
 8002150:	4a0b      	ldr	r2, [pc, #44]	; (8002180 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8002152:	fba2 2303 	umull	r2, r3, r2, r3
 8002156:	091b      	lsrs	r3, r3, #4
 8002158:	3307      	adds	r3, #7
 800215a:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a0a      	ldr	r2, [pc, #40]	; (8002188 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8002160:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f003 031f 	and.w	r3, r3, #31
 8002168:	2201      	movs	r2, #1
 800216a:	409a      	lsls	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002170:	bf00      	nop
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	40020407 	.word	0x40020407
 8002180:	cccccccd 	.word	0xcccccccd
 8002184:	4002081c 	.word	0x4002081c
 8002188:	40020880 	.word	0x40020880

0800218c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800219c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	4b0a      	ldr	r3, [pc, #40]	; (80021cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80021a2:	4413      	add	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	461a      	mov	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a08      	ldr	r2, [pc, #32]	; (80021d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80021b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	3b01      	subs	r3, #1
 80021b6:	f003 0303 	and.w	r3, r3, #3
 80021ba:	2201      	movs	r2, #1
 80021bc:	409a      	lsls	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80021c2:	bf00      	nop
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr
 80021cc:	1000823f 	.word	0x1000823f
 80021d0:	40020940 	.word	0x40020940

080021d4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b087      	sub	sp, #28
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021e2:	e140      	b.n	8002466 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	2101      	movs	r1, #1
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	fa01 f303 	lsl.w	r3, r1, r3
 80021f0:	4013      	ands	r3, r2
 80021f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f000 8132 	beq.w	8002460 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 0303 	and.w	r3, r3, #3
 8002204:	2b01      	cmp	r3, #1
 8002206:	d005      	beq.n	8002214 <HAL_GPIO_Init+0x40>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 0303 	and.w	r3, r3, #3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d130      	bne.n	8002276 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	2203      	movs	r2, #3
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	43db      	mvns	r3, r3
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	4013      	ands	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4313      	orrs	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800224a:	2201      	movs	r2, #1
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43db      	mvns	r3, r3
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	4013      	ands	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	091b      	lsrs	r3, r3, #4
 8002260:	f003 0201 	and.w	r2, r3, #1
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	4313      	orrs	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	2b03      	cmp	r3, #3
 8002280:	d017      	beq.n	80022b2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	2203      	movs	r2, #3
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4013      	ands	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d123      	bne.n	8002306 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	08da      	lsrs	r2, r3, #3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	3208      	adds	r2, #8
 80022c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	220f      	movs	r2, #15
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43db      	mvns	r3, r3
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	4013      	ands	r3, r2
 80022e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	691a      	ldr	r2, [r3, #16]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	08da      	lsrs	r2, r3, #3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3208      	adds	r2, #8
 8002300:	6939      	ldr	r1, [r7, #16]
 8002302:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	2203      	movs	r2, #3
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4013      	ands	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 0203 	and.w	r2, r3, #3
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 808c 	beq.w	8002460 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002348:	4a4e      	ldr	r2, [pc, #312]	; (8002484 <HAL_GPIO_Init+0x2b0>)
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	089b      	lsrs	r3, r3, #2
 800234e:	3302      	adds	r3, #2
 8002350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002354:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f003 0303 	and.w	r3, r3, #3
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	2207      	movs	r2, #7
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	4013      	ands	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002372:	d00d      	beq.n	8002390 <HAL_GPIO_Init+0x1bc>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a44      	ldr	r2, [pc, #272]	; (8002488 <HAL_GPIO_Init+0x2b4>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d007      	beq.n	800238c <HAL_GPIO_Init+0x1b8>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a43      	ldr	r2, [pc, #268]	; (800248c <HAL_GPIO_Init+0x2b8>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d101      	bne.n	8002388 <HAL_GPIO_Init+0x1b4>
 8002384:	2302      	movs	r3, #2
 8002386:	e004      	b.n	8002392 <HAL_GPIO_Init+0x1be>
 8002388:	2307      	movs	r3, #7
 800238a:	e002      	b.n	8002392 <HAL_GPIO_Init+0x1be>
 800238c:	2301      	movs	r3, #1
 800238e:	e000      	b.n	8002392 <HAL_GPIO_Init+0x1be>
 8002390:	2300      	movs	r3, #0
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	f002 0203 	and.w	r2, r2, #3
 8002398:	0092      	lsls	r2, r2, #2
 800239a:	4093      	lsls	r3, r2
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023a2:	4938      	ldr	r1, [pc, #224]	; (8002484 <HAL_GPIO_Init+0x2b0>)
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	089b      	lsrs	r3, r3, #2
 80023a8:	3302      	adds	r3, #2
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023b0:	4b37      	ldr	r3, [pc, #220]	; (8002490 <HAL_GPIO_Init+0x2bc>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	43db      	mvns	r3, r3
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023d4:	4a2e      	ldr	r2, [pc, #184]	; (8002490 <HAL_GPIO_Init+0x2bc>)
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80023da:	4b2d      	ldr	r3, [pc, #180]	; (8002490 <HAL_GPIO_Init+0x2bc>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	43db      	mvns	r3, r3
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	4013      	ands	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023fe:	4a24      	ldr	r2, [pc, #144]	; (8002490 <HAL_GPIO_Init+0x2bc>)
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002404:	4b22      	ldr	r3, [pc, #136]	; (8002490 <HAL_GPIO_Init+0x2bc>)
 8002406:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800240a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	43db      	mvns	r3, r3
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4013      	ands	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4313      	orrs	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800242a:	4a19      	ldr	r2, [pc, #100]	; (8002490 <HAL_GPIO_Init+0x2bc>)
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002432:	4b17      	ldr	r3, [pc, #92]	; (8002490 <HAL_GPIO_Init+0x2bc>)
 8002434:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002438:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	43db      	mvns	r3, r3
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002458:	4a0d      	ldr	r2, [pc, #52]	; (8002490 <HAL_GPIO_Init+0x2bc>)
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	3301      	adds	r3, #1
 8002464:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	fa22 f303 	lsr.w	r3, r2, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	f47f aeb7 	bne.w	80021e4 <HAL_GPIO_Init+0x10>
  }
}
 8002476:	bf00      	nop
 8002478:	bf00      	nop
 800247a:	371c      	adds	r7, #28
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	40010000 	.word	0x40010000
 8002488:	48000400 	.word	0x48000400
 800248c:	48000800 	.word	0x48000800
 8002490:	58000800 	.word	0x58000800

08002494 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002494:	b480      	push	{r7}
 8002496:	b087      	sub	sp, #28
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80024a2:	e0af      	b.n	8002604 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80024a4:	2201      	movs	r2, #1
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	4013      	ands	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 80a2 	beq.w	80025fe <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80024ba:	4a59      	ldr	r2, [pc, #356]	; (8002620 <HAL_GPIO_DeInit+0x18c>)
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	089b      	lsrs	r3, r3, #2
 80024c0:	3302      	adds	r3, #2
 80024c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	2207      	movs	r2, #7
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	4013      	ands	r3, r2
 80024da:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024e2:	d00d      	beq.n	8002500 <HAL_GPIO_DeInit+0x6c>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a4f      	ldr	r2, [pc, #316]	; (8002624 <HAL_GPIO_DeInit+0x190>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d007      	beq.n	80024fc <HAL_GPIO_DeInit+0x68>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a4e      	ldr	r2, [pc, #312]	; (8002628 <HAL_GPIO_DeInit+0x194>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d101      	bne.n	80024f8 <HAL_GPIO_DeInit+0x64>
 80024f4:	2302      	movs	r3, #2
 80024f6:	e004      	b.n	8002502 <HAL_GPIO_DeInit+0x6e>
 80024f8:	2307      	movs	r3, #7
 80024fa:	e002      	b.n	8002502 <HAL_GPIO_DeInit+0x6e>
 80024fc:	2301      	movs	r3, #1
 80024fe:	e000      	b.n	8002502 <HAL_GPIO_DeInit+0x6e>
 8002500:	2300      	movs	r3, #0
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	f002 0203 	and.w	r2, r2, #3
 8002508:	0092      	lsls	r2, r2, #2
 800250a:	4093      	lsls	r3, r2
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	429a      	cmp	r2, r3
 8002510:	d136      	bne.n	8002580 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8002512:	4b46      	ldr	r3, [pc, #280]	; (800262c <HAL_GPIO_DeInit+0x198>)
 8002514:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	43db      	mvns	r3, r3
 800251c:	4943      	ldr	r1, [pc, #268]	; (800262c <HAL_GPIO_DeInit+0x198>)
 800251e:	4013      	ands	r3, r2
 8002520:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8002524:	4b41      	ldr	r3, [pc, #260]	; (800262c <HAL_GPIO_DeInit+0x198>)
 8002526:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	43db      	mvns	r3, r3
 800252e:	493f      	ldr	r1, [pc, #252]	; (800262c <HAL_GPIO_DeInit+0x198>)
 8002530:	4013      	ands	r3, r2
 8002532:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002536:	4b3d      	ldr	r3, [pc, #244]	; (800262c <HAL_GPIO_DeInit+0x198>)
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	43db      	mvns	r3, r3
 800253e:	493b      	ldr	r1, [pc, #236]	; (800262c <HAL_GPIO_DeInit+0x198>)
 8002540:	4013      	ands	r3, r2
 8002542:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8002544:	4b39      	ldr	r3, [pc, #228]	; (800262c <HAL_GPIO_DeInit+0x198>)
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	43db      	mvns	r3, r3
 800254c:	4937      	ldr	r1, [pc, #220]	; (800262c <HAL_GPIO_DeInit+0x198>)
 800254e:	4013      	ands	r3, r2
 8002550:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f003 0303 	and.w	r3, r3, #3
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	2207      	movs	r2, #7
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002562:	4a2f      	ldr	r2, [pc, #188]	; (8002620 <HAL_GPIO_DeInit+0x18c>)
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	089b      	lsrs	r3, r3, #2
 8002568:	3302      	adds	r3, #2
 800256a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	43da      	mvns	r2, r3
 8002572:	482b      	ldr	r0, [pc, #172]	; (8002620 <HAL_GPIO_DeInit+0x18c>)
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	089b      	lsrs	r3, r3, #2
 8002578:	400a      	ands	r2, r1
 800257a:	3302      	adds	r3, #2
 800257c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	2103      	movs	r1, #3
 800258a:	fa01 f303 	lsl.w	r3, r1, r3
 800258e:	431a      	orrs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	08da      	lsrs	r2, r3, #3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3208      	adds	r2, #8
 800259c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	220f      	movs	r2, #15
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43db      	mvns	r3, r3
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	08d2      	lsrs	r2, r2, #3
 80025b4:	4019      	ands	r1, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	3208      	adds	r2, #8
 80025ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	2103      	movs	r1, #3
 80025c8:	fa01 f303 	lsl.w	r3, r1, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	401a      	ands	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	2101      	movs	r1, #1
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	fa01 f303 	lsl.w	r3, r1, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	401a      	ands	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68da      	ldr	r2, [r3, #12]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	2103      	movs	r1, #3
 80025f2:	fa01 f303 	lsl.w	r3, r1, r3
 80025f6:	43db      	mvns	r3, r3
 80025f8:	401a      	ands	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	60da      	str	r2, [r3, #12]
    }

    position++;
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	3301      	adds	r3, #1
 8002602:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	fa22 f303 	lsr.w	r3, r2, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	f47f af49 	bne.w	80024a4 <HAL_GPIO_DeInit+0x10>
  }
}
 8002612:	bf00      	nop
 8002614:	bf00      	nop
 8002616:	371c      	adds	r7, #28
 8002618:	46bd      	mov	sp, r7
 800261a:	bc80      	pop	{r7}
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	40010000 	.word	0x40010000
 8002624:	48000400 	.word	0x48000400
 8002628:	48000800 	.word	0x48000800
 800262c:	58000800 	.word	0x58000800

08002630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	460b      	mov	r3, r1
 800263a:	807b      	strh	r3, [r7, #2]
 800263c:	4613      	mov	r3, r2
 800263e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002640:	787b      	ldrb	r3, [r7, #1]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002646:	887a      	ldrh	r2, [r7, #2]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800264c:	e002      	b.n	8002654 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800264e:	887a      	ldrh	r2, [r7, #2]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr
	...

08002660 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800266a:	4b08      	ldr	r3, [pc, #32]	; (800268c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800266c:	68da      	ldr	r2, [r3, #12]
 800266e:	88fb      	ldrh	r3, [r7, #6]
 8002670:	4013      	ands	r3, r2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d006      	beq.n	8002684 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002676:	4a05      	ldr	r2, [pc, #20]	; (800268c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002678:	88fb      	ldrh	r3, [r7, #6]
 800267a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800267c:	88fb      	ldrh	r3, [r7, #6]
 800267e:	4618      	mov	r0, r3
 8002680:	f000 f806 	bl	8002690 <HAL_GPIO_EXTI_Callback>
  }
}
 8002684:	bf00      	nop
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	58000800 	.word	0x58000800

08002690 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr

080026a4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026a8:	4b04      	ldr	r3, [pc, #16]	; (80026bc <HAL_PWR_EnableBkUpAccess+0x18>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a03      	ldr	r2, [pc, #12]	; (80026bc <HAL_PWR_EnableBkUpAccess+0x18>)
 80026ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b2:	6013      	str	r3, [r2, #0]
}
 80026b4:	bf00      	nop
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr
 80026bc:	58000400 	.word	0x58000400

080026c0 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10c      	bne.n	80026ec <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80026d2:	4b13      	ldr	r3, [pc, #76]	; (8002720 <HAL_PWR_EnterSLEEPMode+0x60>)
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026de:	d10d      	bne.n	80026fc <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80026e0:	f000 f83c 	bl	800275c <HAL_PWREx_DisableLowPowerRunMode>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d008      	beq.n	80026fc <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 80026ea:	e015      	b.n	8002718 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 80026ec:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <HAL_PWR_EnterSLEEPMode+0x60>)
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80026f8:	f000 f822 	bl	8002740 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80026fc:	4b09      	ldr	r3, [pc, #36]	; (8002724 <HAL_PWR_EnterSLEEPMode+0x64>)
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	4a08      	ldr	r2, [pc, #32]	; (8002724 <HAL_PWR_EnterSLEEPMode+0x64>)
 8002702:	f023 0304 	bic.w	r3, r3, #4
 8002706:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002708:	78fb      	ldrb	r3, [r7, #3]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d101      	bne.n	8002712 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800270e:	bf30      	wfi
 8002710:	e002      	b.n	8002718 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002712:	bf40      	sev
    __WFE();
 8002714:	bf20      	wfe
    __WFE();
 8002716:	bf20      	wfe
  }
}
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	58000400 	.word	0x58000400
 8002724:	e000ed00 	.word	0xe000ed00

08002728 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800272c:	4b03      	ldr	r3, [pc, #12]	; (800273c <HAL_PWREx_GetVoltageRange+0x14>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002734:	4618      	mov	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr
 800273c:	58000400 	.word	0x58000400

08002740 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8002744:	4b04      	ldr	r3, [pc, #16]	; (8002758 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a03      	ldr	r2, [pc, #12]	; (8002758 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800274a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800274e:	6013      	str	r3, [r2, #0]
}
 8002750:	bf00      	nop
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr
 8002758:	58000400 	.word	0x58000400

0800275c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8002762:	4b16      	ldr	r3, [pc, #88]	; (80027bc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a15      	ldr	r2, [pc, #84]	; (80027bc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8002768:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800276c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800276e:	4b14      	ldr	r3, [pc, #80]	; (80027c0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2232      	movs	r2, #50	; 0x32
 8002774:	fb02 f303 	mul.w	r3, r2, r3
 8002778:	4a12      	ldr	r2, [pc, #72]	; (80027c4 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800277a:	fba2 2303 	umull	r2, r3, r2, r3
 800277e:	0c9b      	lsrs	r3, r3, #18
 8002780:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8002782:	e002      	b.n	800278a <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3b01      	subs	r3, #1
 8002788:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800278a:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002796:	d102      	bne.n	800279e <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f2      	bne.n	8002784 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800279e:	4b07      	ldr	r3, [pc, #28]	; (80027bc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027aa:	d101      	bne.n	80027b0 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e000      	b.n	80027b2 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr
 80027bc:	58000400 	.word	0x58000400
 80027c0:	20000000 	.word	0x20000000
 80027c4:	431bde83 	.word	0x431bde83

080027c8 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80027d2:	4b10      	ldr	r3, [pc, #64]	; (8002814 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 0307 	bic.w	r3, r3, #7
 80027da:	4a0e      	ldr	r2, [pc, #56]	; (8002814 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80027dc:	f043 0302 	orr.w	r3, r3, #2
 80027e0:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80027e2:	4b0d      	ldr	r3, [pc, #52]	; (8002818 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	4a0c      	ldr	r2, [pc, #48]	; (8002818 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80027e8:	f043 0304 	orr.w	r3, r3, #4
 80027ec:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80027f4:	bf30      	wfi
 80027f6:	e002      	b.n	80027fe <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80027f8:	bf40      	sev
    __WFE();
 80027fa:	bf20      	wfe
    __WFE();
 80027fc:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80027fe:	4b06      	ldr	r3, [pc, #24]	; (8002818 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	4a05      	ldr	r2, [pc, #20]	; (8002818 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002804:	f023 0304 	bic.w	r3, r3, #4
 8002808:	6113      	str	r3, [r2, #16]
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr
 8002814:	58000400 	.word	0x58000400
 8002818:	e000ed00 	.word	0xe000ed00

0800281c <LL_PWR_IsEnabledBkUpAccess>:
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800282c:	d101      	bne.n	8002832 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr
 800283c:	58000400 	.word	0x58000400

08002840 <LL_RCC_HSE_EnableTcxo>:
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800284e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002852:	6013      	str	r3, [r2, #0]
}
 8002854:	bf00      	nop
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <LL_RCC_HSE_DisableTcxo>:
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800286a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800286e:	6013      	str	r3, [r2, #0]
}
 8002870:	bf00      	nop
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr

08002878 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800287c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002886:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800288a:	d101      	bne.n	8002890 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800288c:	2301      	movs	r3, #1
 800288e:	e000      	b.n	8002892 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr

0800289a <LL_RCC_HSE_Enable>:
{
 800289a:	b480      	push	{r7}
 800289c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800289e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ac:	6013      	str	r3, [r2, #0]
}
 80028ae:	bf00      	nop
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr

080028b6 <LL_RCC_HSE_Disable>:
{
 80028b6:	b480      	push	{r7}
 80028b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80028ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c8:	6013      	str	r3, [r2, #0]
}
 80028ca:	bf00      	nop
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr

080028d2 <LL_RCC_HSE_IsReady>:
{
 80028d2:	b480      	push	{r7}
 80028d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80028d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028e4:	d101      	bne.n	80028ea <LL_RCC_HSE_IsReady+0x18>
 80028e6:	2301      	movs	r3, #1
 80028e8:	e000      	b.n	80028ec <LL_RCC_HSE_IsReady+0x1a>
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr

080028f4 <LL_RCC_HSI_Enable>:
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80028f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002906:	6013      	str	r3, [r2, #0]
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr

08002910 <LL_RCC_HSI_Disable>:
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800291e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002922:	6013      	str	r3, [r2, #0]
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr

0800292c <LL_RCC_HSI_IsReady>:
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800293a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800293e:	d101      	bne.n	8002944 <LL_RCC_HSI_IsReady+0x18>
 8002940:	2301      	movs	r3, #1
 8002942:	e000      	b.n	8002946 <LL_RCC_HSI_IsReady+0x1a>
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr

0800294e <LL_RCC_HSI_SetCalibTrimming>:
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	061b      	lsls	r3, r3, #24
 8002964:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002968:	4313      	orrs	r3, r2
 800296a:	604b      	str	r3, [r1, #4]
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr

08002976 <LL_RCC_LSE_IsReady>:
{
 8002976:	b480      	push	{r7}
 8002978:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800297a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800297e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b02      	cmp	r3, #2
 8002988:	d101      	bne.n	800298e <LL_RCC_LSE_IsReady+0x18>
 800298a:	2301      	movs	r3, #1
 800298c:	e000      	b.n	8002990 <LL_RCC_LSE_IsReady+0x1a>
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr

08002998 <LL_RCC_LSI_Enable>:
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800299c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80029b0:	bf00      	nop
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr

080029b8 <LL_RCC_LSI_Disable>:
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80029bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029c8:	f023 0301 	bic.w	r3, r3, #1
 80029cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80029d0:	bf00      	nop
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <LL_RCC_LSI_IsReady>:
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80029dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d101      	bne.n	80029f0 <LL_RCC_LSI_IsReady+0x18>
 80029ec:	2301      	movs	r3, #1
 80029ee:	e000      	b.n	80029f2 <LL_RCC_LSI_IsReady+0x1a>
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr

080029fa <LL_RCC_MSI_Enable>:
{
 80029fa:	b480      	push	{r7}
 80029fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80029fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	6013      	str	r3, [r2, #0]
}
 8002a0e:	bf00      	nop
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr

08002a16 <LL_RCC_MSI_Disable>:
{
 8002a16:	b480      	push	{r7}
 8002a18:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a24:	f023 0301 	bic.w	r3, r3, #1
 8002a28:	6013      	str	r3, [r2, #0]
}
 8002a2a:	bf00      	nop
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bc80      	pop	{r7}
 8002a30:	4770      	bx	lr

08002a32 <LL_RCC_MSI_IsReady>:
{
 8002a32:	b480      	push	{r7}
 8002a34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d101      	bne.n	8002a48 <LL_RCC_MSI_IsReady+0x16>
 8002a44:	2301      	movs	r3, #1
 8002a46:	e000      	b.n	8002a4a <LL_RCC_MSI_IsReady+0x18>
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr

08002a52 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8002a52:	b480      	push	{r7}
 8002a54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0308 	and.w	r3, r3, #8
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d101      	bne.n	8002a68 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002a64:	2301      	movs	r3, #1
 8002a66:	e000      	b.n	8002a6a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr

08002a72 <LL_RCC_MSI_GetRange>:
{
 8002a72:	b480      	push	{r7}
 8002a74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr

08002a88 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a94:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr

08002aa0 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	021b      	lsls	r3, r3, #8
 8002ab6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002aba:	4313      	orrs	r3, r2
 8002abc:	604b      	str	r3, [r1, #4]
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr

08002ac8 <LL_RCC_SetSysClkSource>:
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f023 0203 	bic.w	r2, r3, #3
 8002ada:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	608b      	str	r3, [r1, #8]
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr

08002aee <LL_RCC_GetSysClkSource>:
{
 8002aee:	b480      	push	{r7}
 8002af0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 030c 	and.w	r3, r3, #12
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr

08002b04 <LL_RCC_SetAHBPrescaler>:
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	608b      	str	r3, [r1, #8]
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bc80      	pop	{r7}
 8002b28:	4770      	bx	lr

08002b2a <LL_RCC_SetAHB3Prescaler>:
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b36:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b3a:	f023 020f 	bic.w	r2, r3, #15
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	091b      	lsrs	r3, r3, #4
 8002b42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr

08002b56 <LL_RCC_SetAPB1Prescaler>:
{
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	608b      	str	r3, [r1, #8]
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr

08002b7c <LL_RCC_SetAPB2Prescaler>:
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	608b      	str	r3, [r1, #8]
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr

08002ba2 <LL_RCC_GetAHBPrescaler>:
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr

08002bb8 <LL_RCC_GetAHB3Prescaler>:
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr

08002bd2 <LL_RCC_GetAPB1Prescaler>:
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr

08002be8 <LL_RCC_GetAPB2Prescaler>:
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr

08002bfe <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c10:	6013      	str	r3, [r2, #0]
}
 8002c12:	bf00      	nop
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr

08002c1a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c2c:	6013      	str	r3, [r2, #0]
}
 8002c2e:	bf00      	nop
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr

08002c36 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002c36:	b480      	push	{r7}
 8002c38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c48:	d101      	bne.n	8002c4e <LL_RCC_PLL_IsReady+0x18>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <LL_RCC_PLL_IsReady+0x1a>
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr

08002c58 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	0a1b      	lsrs	r3, r3, #8
 8002c64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bc80      	pop	{r7}
 8002c6e:	4770      	bx	lr

08002c70 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr

08002c86 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002c86:	b480      	push	{r7}
 8002c88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bc80      	pop	{r7}
 8002c9a:	4770      	bx	lr

08002c9c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f003 0303 	and.w	r3, r3, #3
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr

08002cb2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc4:	d101      	bne.n	8002cca <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cdc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce8:	d101      	bne.n	8002cee <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002cea:	2301      	movs	r3, #1
 8002cec:	e000      	b.n	8002cf0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr

08002cf8 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d0a:	d101      	bne.n	8002d10 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e000      	b.n	8002d12 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bc80      	pop	{r7}
 8002d18:	4770      	bx	lr

08002d1a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d2c:	d101      	bne.n	8002d32 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e000      	b.n	8002d34 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr

08002d3c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b088      	sub	sp, #32
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e36f      	b.n	800342e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d4e:	f7ff fece 	bl	8002aee <LL_RCC_GetSysClkSource>
 8002d52:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d54:	f7ff ffa2 	bl	8002c9c <LL_RCC_PLL_GetMainSource>
 8002d58:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0320 	and.w	r3, r3, #32
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 80c4 	beq.w	8002ef0 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d005      	beq.n	8002d7a <HAL_RCC_OscConfig+0x3e>
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	2b0c      	cmp	r3, #12
 8002d72:	d176      	bne.n	8002e62 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d173      	bne.n	8002e62 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e353      	b.n	800342e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <HAL_RCC_OscConfig+0x68>
 8002d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002da2:	e006      	b.n	8002db2 <HAL_RCC_OscConfig+0x76>
 8002da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dac:	091b      	lsrs	r3, r3, #4
 8002dae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d222      	bcs.n	8002dfc <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 fd3c 	bl	8003838 <RCC_SetFlashLatencyFromMSIRange>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e331      	b.n	800342e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dd4:	f043 0308 	orr.w	r3, r3, #8
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dec:	4313      	orrs	r3, r2
 8002dee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff fe53 	bl	8002aa0 <LL_RCC_MSI_SetCalibTrimming>
 8002dfa:	e021      	b.n	8002e40 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e06:	f043 0308 	orr.w	r3, r3, #8
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff fe3a 	bl	8002aa0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 fd01 	bl	8003838 <RCC_SetFlashLatencyFromMSIRange>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e2f6      	b.n	800342e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002e40:	f000 fcc2 	bl	80037c8 <HAL_RCC_GetHCLKFreq>
 8002e44:	4603      	mov	r3, r0
 8002e46:	4aa7      	ldr	r2, [pc, #668]	; (80030e4 <HAL_RCC_OscConfig+0x3a8>)
 8002e48:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002e4a:	4ba7      	ldr	r3, [pc, #668]	; (80030e8 <HAL_RCC_OscConfig+0x3ac>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fd fe4c 	bl	8000aec <HAL_InitTick>
 8002e54:	4603      	mov	r3, r0
 8002e56:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002e58:	7cfb      	ldrb	r3, [r7, #19]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d047      	beq.n	8002eee <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002e5e:	7cfb      	ldrb	r3, [r7, #19]
 8002e60:	e2e5      	b.n	800342e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d02c      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e6a:	f7ff fdc6 	bl	80029fa <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e6e:	f7fd fe47 	bl	8000b00 <HAL_GetTick>
 8002e72:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e76:	f7fd fe43 	bl	8000b00 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e2d2      	b.n	800342e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002e88:	f7ff fdd3 	bl	8002a32 <LL_RCC_MSI_IsReady>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d0f1      	beq.n	8002e76 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e9c:	f043 0308 	orr.w	r3, r3, #8
 8002ea0:	6013      	str	r3, [r2, #0]
 8002ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff fdef 	bl	8002aa0 <LL_RCC_MSI_SetCalibTrimming>
 8002ec2:	e015      	b.n	8002ef0 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ec4:	f7ff fda7 	bl	8002a16 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ec8:	f7fd fe1a 	bl	8000b00 <HAL_GetTick>
 8002ecc:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ed0:	f7fd fe16 	bl	8000b00 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e2a5      	b.n	800342e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002ee2:	f7ff fda6 	bl	8002a32 <LL_RCC_MSI_IsReady>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1f1      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x194>
 8002eec:	e000      	b.n	8002ef0 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002eee:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d058      	beq.n	8002fae <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	2b08      	cmp	r3, #8
 8002f00:	d005      	beq.n	8002f0e <HAL_RCC_OscConfig+0x1d2>
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	2b0c      	cmp	r3, #12
 8002f06:	d108      	bne.n	8002f1a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	2b03      	cmp	r3, #3
 8002f0c:	d105      	bne.n	8002f1a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d14b      	bne.n	8002fae <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e289      	b.n	800342e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f38:	d102      	bne.n	8002f40 <HAL_RCC_OscConfig+0x204>
 8002f3a:	f7ff fcae 	bl	800289a <LL_RCC_HSE_Enable>
 8002f3e:	e00d      	b.n	8002f5c <HAL_RCC_OscConfig+0x220>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002f48:	d104      	bne.n	8002f54 <HAL_RCC_OscConfig+0x218>
 8002f4a:	f7ff fc79 	bl	8002840 <LL_RCC_HSE_EnableTcxo>
 8002f4e:	f7ff fca4 	bl	800289a <LL_RCC_HSE_Enable>
 8002f52:	e003      	b.n	8002f5c <HAL_RCC_OscConfig+0x220>
 8002f54:	f7ff fcaf 	bl	80028b6 <LL_RCC_HSE_Disable>
 8002f58:	f7ff fc80 	bl	800285c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d012      	beq.n	8002f8a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f64:	f7fd fdcc 	bl	8000b00 <HAL_GetTick>
 8002f68:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f6c:	f7fd fdc8 	bl	8000b00 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b64      	cmp	r3, #100	; 0x64
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e257      	b.n	800342e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002f7e:	f7ff fca8 	bl	80028d2 <LL_RCC_HSE_IsReady>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0f1      	beq.n	8002f6c <HAL_RCC_OscConfig+0x230>
 8002f88:	e011      	b.n	8002fae <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8a:	f7fd fdb9 	bl	8000b00 <HAL_GetTick>
 8002f8e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f92:	f7fd fdb5 	bl	8000b00 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b64      	cmp	r3, #100	; 0x64
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e244      	b.n	800342e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002fa4:	f7ff fc95 	bl	80028d2 <LL_RCC_HSE_IsReady>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f1      	bne.n	8002f92 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d046      	beq.n	8003048 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d005      	beq.n	8002fcc <HAL_RCC_OscConfig+0x290>
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	2b0c      	cmp	r3, #12
 8002fc4:	d10e      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d10b      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e22a      	b.n	800342e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff fcb6 	bl	800294e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002fe2:	e031      	b.n	8003048 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d019      	beq.n	8003020 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fec:	f7ff fc82 	bl	80028f4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff0:	f7fd fd86 	bl	8000b00 <HAL_GetTick>
 8002ff4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ff8:	f7fd fd82 	bl	8000b00 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e211      	b.n	800342e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800300a:	f7ff fc8f 	bl	800292c <LL_RCC_HSI_IsReady>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0f1      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff fc98 	bl	800294e <LL_RCC_HSI_SetCalibTrimming>
 800301e:	e013      	b.n	8003048 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003020:	f7ff fc76 	bl	8002910 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003024:	f7fd fd6c 	bl	8000b00 <HAL_GetTick>
 8003028:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800302c:	f7fd fd68 	bl	8000b00 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e1f7      	b.n	800342e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800303e:	f7ff fc75 	bl	800292c <LL_RCC_HSI_IsReady>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1f1      	bne.n	800302c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0308 	and.w	r3, r3, #8
 8003050:	2b00      	cmp	r3, #0
 8003052:	d06e      	beq.n	8003132 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d056      	beq.n	800310a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 800305c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003060:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003064:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69da      	ldr	r2, [r3, #28]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f003 0310 	and.w	r3, r3, #16
 8003070:	429a      	cmp	r2, r3
 8003072:	d031      	beq.n	80030d8 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d006      	beq.n	800308c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e1d0      	b.n	800342e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d013      	beq.n	80030be <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8003096:	f7ff fc8f 	bl	80029b8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800309a:	f7fd fd31 	bl	8000b00 <HAL_GetTick>
 800309e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030a2:	f7fd fd2d 	bl	8000b00 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b11      	cmp	r3, #17
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e1bc      	b.n	800342e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80030b4:	f7ff fc90 	bl	80029d8 <LL_RCC_LSI_IsReady>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f1      	bne.n	80030a2 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80030be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030c6:	f023 0210 	bic.w	r2, r3, #16
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030d8:	f7ff fc5e 	bl	8002998 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030dc:	f7fd fd10 	bl	8000b00 <HAL_GetTick>
 80030e0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80030e2:	e00c      	b.n	80030fe <HAL_RCC_OscConfig+0x3c2>
 80030e4:	20000000 	.word	0x20000000
 80030e8:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ec:	f7fd fd08 	bl	8000b00 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b11      	cmp	r3, #17
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e197      	b.n	800342e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80030fe:	f7ff fc6b 	bl	80029d8 <LL_RCC_LSI_IsReady>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0f1      	beq.n	80030ec <HAL_RCC_OscConfig+0x3b0>
 8003108:	e013      	b.n	8003132 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800310a:	f7ff fc55 	bl	80029b8 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800310e:	f7fd fcf7 	bl	8000b00 <HAL_GetTick>
 8003112:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8003114:	e008      	b.n	8003128 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003116:	f7fd fcf3 	bl	8000b00 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b11      	cmp	r3, #17
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e182      	b.n	800342e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8003128:	f7ff fc56 	bl	80029d8 <LL_RCC_LSI_IsReady>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f1      	bne.n	8003116 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0304 	and.w	r3, r3, #4
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 80d8 	beq.w	80032f0 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003140:	f7ff fb6c 	bl	800281c <LL_PWR_IsEnabledBkUpAccess>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d113      	bne.n	8003172 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800314a:	f7ff faab 	bl	80026a4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800314e:	f7fd fcd7 	bl	8000b00 <HAL_GetTick>
 8003152:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003156:	f7fd fcd3 	bl	8000b00 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e162      	b.n	800342e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003168:	f7ff fb58 	bl	800281c <LL_PWR_IsEnabledBkUpAccess>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0f1      	beq.n	8003156 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d07b      	beq.n	8003272 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	2b85      	cmp	r3, #133	; 0x85
 8003180:	d003      	beq.n	800318a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	2b05      	cmp	r3, #5
 8003188:	d109      	bne.n	800319e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800318a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800318e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003192:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003196:	f043 0304 	orr.w	r3, r3, #4
 800319a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800319e:	f7fd fcaf 	bl	8000b00 <HAL_GetTick>
 80031a2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80031a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031b0:	f043 0301 	orr.w	r3, r3, #1
 80031b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80031b8:	e00a      	b.n	80031d0 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ba:	f7fd fca1 	bl	8000b00 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e12e      	b.n	800342e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80031d0:	f7ff fbd1 	bl	8002976 <LL_RCC_LSE_IsReady>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0ef      	beq.n	80031ba <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	2b81      	cmp	r3, #129	; 0x81
 80031e0:	d003      	beq.n	80031ea <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	2b85      	cmp	r3, #133	; 0x85
 80031e8:	d121      	bne.n	800322e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ea:	f7fd fc89 	bl	8000b00 <HAL_GetTick>
 80031ee:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80031f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003200:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003204:	e00a      	b.n	800321c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003206:	f7fd fc7b 	bl	8000b00 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	f241 3288 	movw	r2, #5000	; 0x1388
 8003214:	4293      	cmp	r3, r2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e108      	b.n	800342e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800321c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003224:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0ec      	beq.n	8003206 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800322c:	e060      	b.n	80032f0 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322e:	f7fd fc67 	bl	8000b00 <HAL_GetTick>
 8003232:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003240:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003248:	e00a      	b.n	8003260 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800324a:	f7fd fc59 	bl	8000b00 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	f241 3288 	movw	r2, #5000	; 0x1388
 8003258:	4293      	cmp	r3, r2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e0e6      	b.n	800342e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003268:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1ec      	bne.n	800324a <HAL_RCC_OscConfig+0x50e>
 8003270:	e03e      	b.n	80032f0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003272:	f7fd fc45 	bl	8000b00 <HAL_GetTick>
 8003276:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800327c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003280:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003284:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003288:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800328c:	e00a      	b.n	80032a4 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800328e:	f7fd fc37 	bl	8000b00 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	f241 3288 	movw	r2, #5000	; 0x1388
 800329c:	4293      	cmp	r3, r2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e0c4      	b.n	800342e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80032a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1ec      	bne.n	800328e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b4:	f7fd fc24 	bl	8000b00 <HAL_GetTick>
 80032b8:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80032ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032c6:	f023 0301 	bic.w	r3, r3, #1
 80032ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80032ce:	e00a      	b.n	80032e6 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d0:	f7fd fc16 	bl	8000b00 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	f241 3288 	movw	r2, #5000	; 0x1388
 80032de:	4293      	cmp	r3, r2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e0a3      	b.n	800342e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80032e6:	f7ff fb46 	bl	8002976 <LL_RCC_LSE_IsReady>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1ef      	bne.n	80032d0 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 8099 	beq.w	800342c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	2b0c      	cmp	r3, #12
 80032fe:	d06c      	beq.n	80033da <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003304:	2b02      	cmp	r3, #2
 8003306:	d14b      	bne.n	80033a0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003308:	f7ff fc87 	bl	8002c1a <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330c:	f7fd fbf8 	bl	8000b00 <HAL_GetTick>
 8003310:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003314:	f7fd fbf4 	bl	8000b00 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b0a      	cmp	r3, #10
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e083      	b.n	800342e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003326:	f7ff fc86 	bl	8002c36 <LL_RCC_PLL_IsReady>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1f1      	bne.n	8003314 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003334:	68da      	ldr	r2, [r3, #12]
 8003336:	4b40      	ldr	r3, [pc, #256]	; (8003438 <HAL_RCC_OscConfig+0x6fc>)
 8003338:	4013      	ands	r3, r2
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003342:	4311      	orrs	r1, r2
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003348:	0212      	lsls	r2, r2, #8
 800334a:	4311      	orrs	r1, r2
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003350:	4311      	orrs	r1, r2
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003356:	4311      	orrs	r1, r2
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800335c:	430a      	orrs	r2, r1
 800335e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003362:	4313      	orrs	r3, r2
 8003364:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003366:	f7ff fc4a 	bl	8002bfe <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800336a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003378:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337a:	f7fd fbc1 	bl	8000b00 <HAL_GetTick>
 800337e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003382:	f7fd fbbd 	bl	8000b00 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b0a      	cmp	r3, #10
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e04c      	b.n	800342e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003394:	f7ff fc4f 	bl	8002c36 <LL_RCC_PLL_IsReady>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0f1      	beq.n	8003382 <HAL_RCC_OscConfig+0x646>
 800339e:	e045      	b.n	800342c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033a0:	f7ff fc3b 	bl	8002c1a <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a4:	f7fd fbac 	bl	8000b00 <HAL_GetTick>
 80033a8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ac:	f7fd fba8 	bl	8000b00 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b0a      	cmp	r3, #10
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e037      	b.n	800342e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80033be:	f7ff fc3a 	bl	8002c36 <LL_RCC_PLL_IsReady>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1f1      	bne.n	80033ac <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80033c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033d2:	4b1a      	ldr	r3, [pc, #104]	; (800343c <HAL_RCC_OscConfig+0x700>)
 80033d4:	4013      	ands	r3, r2
 80033d6:	60cb      	str	r3, [r1, #12]
 80033d8:	e028      	b.n	800342c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d101      	bne.n	80033e6 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e023      	b.n	800342e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	f003 0203 	and.w	r2, r3, #3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d115      	bne.n	8003428 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003406:	429a      	cmp	r2, r3
 8003408:	d10e      	bne.n	8003428 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003414:	021b      	lsls	r3, r3, #8
 8003416:	429a      	cmp	r2, r3
 8003418:	d106      	bne.n	8003428 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003424:	429a      	cmp	r2, r3
 8003426:	d001      	beq.n	800342c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e000      	b.n	800342e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3720      	adds	r7, #32
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	11c1808c 	.word	0x11c1808c
 800343c:	eefefffc 	.word	0xeefefffc

08003440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e10f      	b.n	8003674 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003454:	4b89      	ldr	r3, [pc, #548]	; (800367c <HAL_RCC_ClockConfig+0x23c>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	429a      	cmp	r2, r3
 8003460:	d91b      	bls.n	800349a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003462:	4b86      	ldr	r3, [pc, #536]	; (800367c <HAL_RCC_ClockConfig+0x23c>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f023 0207 	bic.w	r2, r3, #7
 800346a:	4984      	ldr	r1, [pc, #528]	; (800367c <HAL_RCC_ClockConfig+0x23c>)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	4313      	orrs	r3, r2
 8003470:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003472:	f7fd fb45 	bl	8000b00 <HAL_GetTick>
 8003476:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003478:	e008      	b.n	800348c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800347a:	f7fd fb41 	bl	8000b00 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d901      	bls.n	800348c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e0f3      	b.n	8003674 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800348c:	4b7b      	ldr	r3, [pc, #492]	; (800367c <HAL_RCC_ClockConfig+0x23c>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	429a      	cmp	r2, r3
 8003498:	d1ef      	bne.n	800347a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d016      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7ff fb2a 	bl	8002b04 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80034b0:	f7fd fb26 	bl	8000b00 <HAL_GetTick>
 80034b4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034b8:	f7fd fb22 	bl	8000b00 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e0d4      	b.n	8003674 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80034ca:	f7ff fbf2 	bl	8002cb2 <LL_RCC_IsActiveFlag_HPRE>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0f1      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d016      	beq.n	800350e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff fb20 	bl	8002b2a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80034ea:	f7fd fb09 	bl	8000b00 <HAL_GetTick>
 80034ee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034f2:	f7fd fb05 	bl	8000b00 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e0b7      	b.n	8003674 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003504:	f7ff fbe6 	bl	8002cd4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0f1      	beq.n	80034f2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0304 	and.w	r3, r3, #4
 8003516:	2b00      	cmp	r3, #0
 8003518:	d016      	beq.n	8003548 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff fb19 	bl	8002b56 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003524:	f7fd faec 	bl	8000b00 <HAL_GetTick>
 8003528:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800352a:	e008      	b.n	800353e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800352c:	f7fd fae8 	bl	8000b00 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e09a      	b.n	8003674 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800353e:	f7ff fbdb 	bl	8002cf8 <LL_RCC_IsActiveFlag_PPRE1>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0f1      	beq.n	800352c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0308 	and.w	r3, r3, #8
 8003550:	2b00      	cmp	r3, #0
 8003552:	d017      	beq.n	8003584 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff fb0e 	bl	8002b7c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003560:	f7fd face 	bl	8000b00 <HAL_GetTick>
 8003564:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003566:	e008      	b.n	800357a <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003568:	f7fd faca 	bl	8000b00 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e07c      	b.n	8003674 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800357a:	f7ff fbce 	bl	8002d1a <LL_RCC_IsActiveFlag_PPRE2>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0f1      	beq.n	8003568 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	2b00      	cmp	r3, #0
 800358e:	d043      	beq.n	8003618 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2b02      	cmp	r3, #2
 8003596:	d106      	bne.n	80035a6 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003598:	f7ff f99b 	bl	80028d2 <LL_RCC_HSE_IsReady>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d11e      	bne.n	80035e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e066      	b.n	8003674 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b03      	cmp	r3, #3
 80035ac:	d106      	bne.n	80035bc <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80035ae:	f7ff fb42 	bl	8002c36 <LL_RCC_PLL_IsReady>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d113      	bne.n	80035e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e05b      	b.n	8003674 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d106      	bne.n	80035d2 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80035c4:	f7ff fa35 	bl	8002a32 <LL_RCC_MSI_IsReady>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d108      	bne.n	80035e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e050      	b.n	8003674 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80035d2:	f7ff f9ab 	bl	800292c <LL_RCC_HSI_IsReady>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e049      	b.n	8003674 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff fa6f 	bl	8002ac8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035ea:	f7fd fa89 	bl	8000b00 <HAL_GetTick>
 80035ee:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f0:	e00a      	b.n	8003608 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f2:	f7fd fa85 	bl	8000b00 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003600:	4293      	cmp	r3, r2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e035      	b.n	8003674 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003608:	f7ff fa71 	bl	8002aee <LL_RCC_GetSysClkSource>
 800360c:	4602      	mov	r2, r0
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	429a      	cmp	r2, r3
 8003616:	d1ec      	bne.n	80035f2 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003618:	4b18      	ldr	r3, [pc, #96]	; (800367c <HAL_RCC_ClockConfig+0x23c>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	429a      	cmp	r2, r3
 8003624:	d21b      	bcs.n	800365e <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003626:	4b15      	ldr	r3, [pc, #84]	; (800367c <HAL_RCC_ClockConfig+0x23c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f023 0207 	bic.w	r2, r3, #7
 800362e:	4913      	ldr	r1, [pc, #76]	; (800367c <HAL_RCC_ClockConfig+0x23c>)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	4313      	orrs	r3, r2
 8003634:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003636:	f7fd fa63 	bl	8000b00 <HAL_GetTick>
 800363a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800363c:	e008      	b.n	8003650 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800363e:	f7fd fa5f 	bl	8000b00 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e011      	b.n	8003674 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003650:	4b0a      	ldr	r3, [pc, #40]	; (800367c <HAL_RCC_ClockConfig+0x23c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	429a      	cmp	r2, r3
 800365c:	d1ef      	bne.n	800363e <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800365e:	f000 f8b3 	bl	80037c8 <HAL_RCC_GetHCLKFreq>
 8003662:	4603      	mov	r3, r0
 8003664:	4a06      	ldr	r2, [pc, #24]	; (8003680 <HAL_RCC_ClockConfig+0x240>)
 8003666:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8003668:	4b06      	ldr	r3, [pc, #24]	; (8003684 <HAL_RCC_ClockConfig+0x244>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4618      	mov	r0, r3
 800366e:	f7fd fa3d 	bl	8000aec <HAL_InitTick>
 8003672:	4603      	mov	r3, r0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	58004000 	.word	0x58004000
 8003680:	20000000 	.word	0x20000000
 8003684:	20000004 	.word	0x20000004

08003688 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003688:	b590      	push	{r4, r7, lr}
 800368a:	b087      	sub	sp, #28
 800368c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003692:	2300      	movs	r3, #0
 8003694:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003696:	f7ff fa2a 	bl	8002aee <LL_RCC_GetSysClkSource>
 800369a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800369c:	f7ff fafe 	bl	8002c9c <LL_RCC_PLL_GetMainSource>
 80036a0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d005      	beq.n	80036b4 <HAL_RCC_GetSysClockFreq+0x2c>
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2b0c      	cmp	r3, #12
 80036ac:	d139      	bne.n	8003722 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d136      	bne.n	8003722 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80036b4:	f7ff f9cd 	bl	8002a52 <LL_RCC_MSI_IsEnabledRangeSelect>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d115      	bne.n	80036ea <HAL_RCC_GetSysClockFreq+0x62>
 80036be:	f7ff f9c8 	bl	8002a52 <LL_RCC_MSI_IsEnabledRangeSelect>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d106      	bne.n	80036d6 <HAL_RCC_GetSysClockFreq+0x4e>
 80036c8:	f7ff f9d3 	bl	8002a72 <LL_RCC_MSI_GetRange>
 80036cc:	4603      	mov	r3, r0
 80036ce:	0a1b      	lsrs	r3, r3, #8
 80036d0:	f003 030f 	and.w	r3, r3, #15
 80036d4:	e005      	b.n	80036e2 <HAL_RCC_GetSysClockFreq+0x5a>
 80036d6:	f7ff f9d7 	bl	8002a88 <LL_RCC_MSI_GetRangeAfterStandby>
 80036da:	4603      	mov	r3, r0
 80036dc:	0a1b      	lsrs	r3, r3, #8
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	4a36      	ldr	r2, [pc, #216]	; (80037bc <HAL_RCC_GetSysClockFreq+0x134>)
 80036e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036e8:	e014      	b.n	8003714 <HAL_RCC_GetSysClockFreq+0x8c>
 80036ea:	f7ff f9b2 	bl	8002a52 <LL_RCC_MSI_IsEnabledRangeSelect>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d106      	bne.n	8003702 <HAL_RCC_GetSysClockFreq+0x7a>
 80036f4:	f7ff f9bd 	bl	8002a72 <LL_RCC_MSI_GetRange>
 80036f8:	4603      	mov	r3, r0
 80036fa:	091b      	lsrs	r3, r3, #4
 80036fc:	f003 030f 	and.w	r3, r3, #15
 8003700:	e005      	b.n	800370e <HAL_RCC_GetSysClockFreq+0x86>
 8003702:	f7ff f9c1 	bl	8002a88 <LL_RCC_MSI_GetRangeAfterStandby>
 8003706:	4603      	mov	r3, r0
 8003708:	091b      	lsrs	r3, r3, #4
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	4a2b      	ldr	r2, [pc, #172]	; (80037bc <HAL_RCC_GetSysClockFreq+0x134>)
 8003710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003714:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d115      	bne.n	8003748 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003720:	e012      	b.n	8003748 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2b04      	cmp	r3, #4
 8003726:	d102      	bne.n	800372e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003728:	4b25      	ldr	r3, [pc, #148]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x138>)
 800372a:	617b      	str	r3, [r7, #20]
 800372c:	e00c      	b.n	8003748 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	2b08      	cmp	r3, #8
 8003732:	d109      	bne.n	8003748 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003734:	f7ff f8a0 	bl	8002878 <LL_RCC_HSE_IsEnabledDiv2>
 8003738:	4603      	mov	r3, r0
 800373a:	2b01      	cmp	r3, #1
 800373c:	d102      	bne.n	8003744 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800373e:	4b20      	ldr	r3, [pc, #128]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	e001      	b.n	8003748 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003744:	4b1f      	ldr	r3, [pc, #124]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003746:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003748:	f7ff f9d1 	bl	8002aee <LL_RCC_GetSysClkSource>
 800374c:	4603      	mov	r3, r0
 800374e:	2b0c      	cmp	r3, #12
 8003750:	d12f      	bne.n	80037b2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003752:	f7ff faa3 	bl	8002c9c <LL_RCC_PLL_GetMainSource>
 8003756:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b02      	cmp	r3, #2
 800375c:	d003      	beq.n	8003766 <HAL_RCC_GetSysClockFreq+0xde>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b03      	cmp	r3, #3
 8003762:	d003      	beq.n	800376c <HAL_RCC_GetSysClockFreq+0xe4>
 8003764:	e00d      	b.n	8003782 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003766:	4b16      	ldr	r3, [pc, #88]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003768:	60fb      	str	r3, [r7, #12]
        break;
 800376a:	e00d      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800376c:	f7ff f884 	bl	8002878 <LL_RCC_HSE_IsEnabledDiv2>
 8003770:	4603      	mov	r3, r0
 8003772:	2b01      	cmp	r3, #1
 8003774:	d102      	bne.n	800377c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003776:	4b12      	ldr	r3, [pc, #72]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003778:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800377a:	e005      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800377c:	4b11      	ldr	r3, [pc, #68]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x13c>)
 800377e:	60fb      	str	r3, [r7, #12]
        break;
 8003780:	e002      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	60fb      	str	r3, [r7, #12]
        break;
 8003786:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003788:	f7ff fa66 	bl	8002c58 <LL_RCC_PLL_GetN>
 800378c:	4602      	mov	r2, r0
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	fb03 f402 	mul.w	r4, r3, r2
 8003794:	f7ff fa77 	bl	8002c86 <LL_RCC_PLL_GetDivider>
 8003798:	4603      	mov	r3, r0
 800379a:	091b      	lsrs	r3, r3, #4
 800379c:	3301      	adds	r3, #1
 800379e:	fbb4 f4f3 	udiv	r4, r4, r3
 80037a2:	f7ff fa65 	bl	8002c70 <LL_RCC_PLL_GetR>
 80037a6:	4603      	mov	r3, r0
 80037a8:	0f5b      	lsrs	r3, r3, #29
 80037aa:	3301      	adds	r3, #1
 80037ac:	fbb4 f3f3 	udiv	r3, r4, r3
 80037b0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80037b2:	697b      	ldr	r3, [r7, #20]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	371c      	adds	r7, #28
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd90      	pop	{r4, r7, pc}
 80037bc:	0800c0c8 	.word	0x0800c0c8
 80037c0:	00f42400 	.word	0x00f42400
 80037c4:	01e84800 	.word	0x01e84800

080037c8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037c8:	b598      	push	{r3, r4, r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80037cc:	f7ff ff5c 	bl	8003688 <HAL_RCC_GetSysClockFreq>
 80037d0:	4604      	mov	r4, r0
 80037d2:	f7ff f9e6 	bl	8002ba2 <LL_RCC_GetAHBPrescaler>
 80037d6:	4603      	mov	r3, r0
 80037d8:	091b      	lsrs	r3, r3, #4
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	4a03      	ldr	r2, [pc, #12]	; (80037ec <HAL_RCC_GetHCLKFreq+0x24>)
 80037e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037e4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	bd98      	pop	{r3, r4, r7, pc}
 80037ec:	0800c068 	.word	0x0800c068

080037f0 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037f0:	b598      	push	{r3, r4, r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80037f4:	f7ff ffe8 	bl	80037c8 <HAL_RCC_GetHCLKFreq>
 80037f8:	4604      	mov	r4, r0
 80037fa:	f7ff f9ea 	bl	8002bd2 <LL_RCC_GetAPB1Prescaler>
 80037fe:	4603      	mov	r3, r0
 8003800:	0a1b      	lsrs	r3, r3, #8
 8003802:	4a03      	ldr	r2, [pc, #12]	; (8003810 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003808:	fa24 f303 	lsr.w	r3, r4, r3
}
 800380c:	4618      	mov	r0, r3
 800380e:	bd98      	pop	{r3, r4, r7, pc}
 8003810:	0800c0a8 	.word	0x0800c0a8

08003814 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003814:	b598      	push	{r3, r4, r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003818:	f7ff ffd6 	bl	80037c8 <HAL_RCC_GetHCLKFreq>
 800381c:	4604      	mov	r4, r0
 800381e:	f7ff f9e3 	bl	8002be8 <LL_RCC_GetAPB2Prescaler>
 8003822:	4603      	mov	r3, r0
 8003824:	0adb      	lsrs	r3, r3, #11
 8003826:	4a03      	ldr	r2, [pc, #12]	; (8003834 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800382c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003830:	4618      	mov	r0, r3
 8003832:	bd98      	pop	{r3, r4, r7, pc}
 8003834:	0800c0a8 	.word	0x0800c0a8

08003838 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003838:	b590      	push	{r4, r7, lr}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	091b      	lsrs	r3, r3, #4
 8003844:	f003 030f 	and.w	r3, r3, #15
 8003848:	4a10      	ldr	r2, [pc, #64]	; (800388c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800384a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800384e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003850:	f7ff f9b2 	bl	8002bb8 <LL_RCC_GetAHB3Prescaler>
 8003854:	4603      	mov	r3, r0
 8003856:	091b      	lsrs	r3, r3, #4
 8003858:	f003 030f 	and.w	r3, r3, #15
 800385c:	4a0c      	ldr	r2, [pc, #48]	; (8003890 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800385e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	fbb2 f3f3 	udiv	r3, r2, r3
 8003868:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	4a09      	ldr	r2, [pc, #36]	; (8003894 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800386e:	fba2 2303 	umull	r2, r3, r2, r3
 8003872:	0c9c      	lsrs	r4, r3, #18
 8003874:	f7fe ff58 	bl	8002728 <HAL_PWREx_GetVoltageRange>
 8003878:	4603      	mov	r3, r0
 800387a:	4619      	mov	r1, r3
 800387c:	4620      	mov	r0, r4
 800387e:	f000 f80b 	bl	8003898 <RCC_SetFlashLatency>
 8003882:	4603      	mov	r3, r0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	bd90      	pop	{r4, r7, pc}
 800388c:	0800c0c8 	.word	0x0800c0c8
 8003890:	0800c068 	.word	0x0800c068
 8003894:	431bde83 	.word	0x431bde83

08003898 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b08e      	sub	sp, #56	; 0x38
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80038a2:	4a3a      	ldr	r2, [pc, #232]	; (800398c <RCC_SetFlashLatency+0xf4>)
 80038a4:	f107 0320 	add.w	r3, r7, #32
 80038a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038ac:	6018      	str	r0, [r3, #0]
 80038ae:	3304      	adds	r3, #4
 80038b0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80038b2:	4a37      	ldr	r2, [pc, #220]	; (8003990 <RCC_SetFlashLatency+0xf8>)
 80038b4:	f107 0318 	add.w	r3, r7, #24
 80038b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038bc:	6018      	str	r0, [r3, #0]
 80038be:	3304      	adds	r3, #4
 80038c0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80038c2:	4a34      	ldr	r2, [pc, #208]	; (8003994 <RCC_SetFlashLatency+0xfc>)
 80038c4:	f107 030c 	add.w	r3, r7, #12
 80038c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80038ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80038ce:	2300      	movs	r3, #0
 80038d0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038d8:	d11b      	bne.n	8003912 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80038da:	2300      	movs	r3, #0
 80038dc:	633b      	str	r3, [r7, #48]	; 0x30
 80038de:	e014      	b.n	800390a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80038e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	3338      	adds	r3, #56	; 0x38
 80038e6:	443b      	add	r3, r7
 80038e8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80038ec:	461a      	mov	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d807      	bhi.n	8003904 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80038f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	3338      	adds	r3, #56	; 0x38
 80038fa:	443b      	add	r3, r7
 80038fc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003900:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003902:	e021      	b.n	8003948 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003906:	3301      	adds	r3, #1
 8003908:	633b      	str	r3, [r7, #48]	; 0x30
 800390a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390c:	2b02      	cmp	r3, #2
 800390e:	d9e7      	bls.n	80038e0 <RCC_SetFlashLatency+0x48>
 8003910:	e01a      	b.n	8003948 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003912:	2300      	movs	r3, #0
 8003914:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003916:	e014      	b.n	8003942 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	3338      	adds	r3, #56	; 0x38
 800391e:	443b      	add	r3, r7
 8003920:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003924:	461a      	mov	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4293      	cmp	r3, r2
 800392a:	d807      	bhi.n	800393c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800392c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	3338      	adds	r3, #56	; 0x38
 8003932:	443b      	add	r3, r7
 8003934:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003938:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800393a:	e005      	b.n	8003948 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800393c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393e:	3301      	adds	r3, #1
 8003940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003944:	2b02      	cmp	r3, #2
 8003946:	d9e7      	bls.n	8003918 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003948:	4b13      	ldr	r3, [pc, #76]	; (8003998 <RCC_SetFlashLatency+0x100>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f023 0207 	bic.w	r2, r3, #7
 8003950:	4911      	ldr	r1, [pc, #68]	; (8003998 <RCC_SetFlashLatency+0x100>)
 8003952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003954:	4313      	orrs	r3, r2
 8003956:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003958:	f7fd f8d2 	bl	8000b00 <HAL_GetTick>
 800395c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800395e:	e008      	b.n	8003972 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003960:	f7fd f8ce 	bl	8000b00 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e007      	b.n	8003982 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003972:	4b09      	ldr	r3, [pc, #36]	; (8003998 <RCC_SetFlashLatency+0x100>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0307 	and.w	r3, r3, #7
 800397a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800397c:	429a      	cmp	r2, r3
 800397e:	d1ef      	bne.n	8003960 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3738      	adds	r7, #56	; 0x38
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	0800bec4 	.word	0x0800bec4
 8003990:	0800becc 	.word	0x0800becc
 8003994:	0800bed4 	.word	0x0800bed4
 8003998:	58004000 	.word	0x58004000

0800399c <LL_RCC_LSE_IsReady>:
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80039a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d101      	bne.n	80039b4 <LL_RCC_LSE_IsReady+0x18>
 80039b0:	2301      	movs	r3, #1
 80039b2:	e000      	b.n	80039b6 <LL_RCC_LSE_IsReady+0x1a>
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bc80      	pop	{r7}
 80039bc:	4770      	bx	lr

080039be <LL_RCC_SetUSARTClockSource>:
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80039c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	0c1b      	lsrs	r3, r3, #16
 80039d2:	43db      	mvns	r3, r3
 80039d4:	401a      	ands	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	b29b      	uxth	r3, r3
 80039da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039de:	4313      	orrs	r3, r2
 80039e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bc80      	pop	{r7}
 80039ec:	4770      	bx	lr

080039ee <LL_RCC_SetI2SClockSource>:
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80039f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a0e:	bf00      	nop
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bc80      	pop	{r7}
 8003a16:	4770      	bx	lr

08003a18 <LL_RCC_SetLPUARTClockSource>:
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a28:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bc80      	pop	{r7}
 8003a40:	4770      	bx	lr

08003a42 <LL_RCC_SetI2CClockSource>:
{
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a4e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	091b      	lsrs	r3, r3, #4
 8003a56:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003a5a:	43db      	mvns	r3, r3
 8003a5c:	401a      	ands	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	011b      	lsls	r3, r3, #4
 8003a62:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003a66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bc80      	pop	{r7}
 8003a78:	4770      	bx	lr

08003a7a <LL_RCC_SetLPTIMClockSource>:
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a86:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	0c1b      	lsrs	r3, r3, #16
 8003a8e:	041b      	lsls	r3, r3, #16
 8003a90:	43db      	mvns	r3, r3
 8003a92:	401a      	ands	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	041b      	lsls	r3, r3, #16
 8003a98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr

08003aac <LL_RCC_SetRNGClockSource>:
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003abc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003ac0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bc80      	pop	{r7}
 8003ad4:	4770      	bx	lr

08003ad6 <LL_RCC_SetADCClockSource>:
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b083      	sub	sp, #12
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003aea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003af6:	bf00      	nop
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bc80      	pop	{r7}
 8003afe:	4770      	bx	lr

08003b00 <LL_RCC_SetRTCClockSource>:
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr

08003b2a <LL_RCC_GetRTCClockSource>:
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bc80      	pop	{r7}
 8003b40:	4770      	bx	lr

08003b42 <LL_RCC_ForceBackupDomainReset>:
{
 8003b42:	b480      	push	{r7}
 8003b44:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003b5a:	bf00      	nop
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bc80      	pop	{r7}
 8003b60:	4770      	bx	lr

08003b62 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003b62:	b480      	push	{r7}
 8003b64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003b7a:	bf00      	nop
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bc80      	pop	{r7}
 8003b80:	4770      	bx	lr
	...

08003b84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003b90:	2300      	movs	r3, #0
 8003b92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003b94:	2300      	movs	r3, #0
 8003b96:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d058      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003ba4:	f7fe fd7e 	bl	80026a4 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ba8:	f7fc ffaa 	bl	8000b00 <HAL_GetTick>
 8003bac:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003bae:	e009      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb0:	f7fc ffa6 	bl	8000b00 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d902      	bls.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	74fb      	strb	r3, [r7, #19]
        break;
 8003bc2:	e006      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003bc4:	4b7b      	ldr	r3, [pc, #492]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bd0:	d1ee      	bne.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003bd2:	7cfb      	ldrb	r3, [r7, #19]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d13c      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003bd8:	f7ff ffa7 	bl	8003b2a <LL_RCC_GetRTCClockSource>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d00f      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bf2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bf4:	f7ff ffa5 	bl	8003b42 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bf8:	f7ff ffb3 	bl	8003b62 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d014      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c10:	f7fc ff76 	bl	8000b00 <HAL_GetTick>
 8003c14:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003c16:	e00b      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c18:	f7fc ff72 	bl	8000b00 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d902      	bls.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	74fb      	strb	r3, [r7, #19]
            break;
 8003c2e:	e004      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003c30:	f7ff feb4 	bl	800399c <LL_RCC_LSE_IsReady>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d1ee      	bne.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003c3a:	7cfb      	ldrb	r3, [r7, #19]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d105      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff ff5b 	bl	8003b00 <LL_RCC_SetRTCClockSource>
 8003c4a:	e004      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c4c:	7cfb      	ldrb	r3, [r7, #19]
 8003c4e:	74bb      	strb	r3, [r7, #18]
 8003c50:	e001      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c52:	7cfb      	ldrb	r3, [r7, #19]
 8003c54:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d004      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7ff fea9 	bl	80039be <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d004      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7ff fe9e 	bl	80039be <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0320 	and.w	r3, r3, #32
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d004      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7ff fec0 	bl	8003a18 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d004      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff fee6 	bl	8003a7a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d004      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7ff fedb 	bl	8003a7a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d004      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7ff fed0 	bl	8003a7a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d004      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7ff fea9 	bl	8003a42 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d004      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff fe9e 	bl	8003a42 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d004      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7ff fe93 	bl	8003a42 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0310 	and.w	r3, r3, #16
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d011      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff fe5e 	bl	80039ee <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d3a:	d107      	bne.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d4a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d010      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7ff fea5 	bl	8003aac <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d107      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d78:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d011      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff fea3 	bl	8003ad6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d98:	d107      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003da8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003daa:	7cbb      	ldrb	r3, [r7, #18]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3718      	adds	r7, #24
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	58000400 	.word	0x58000400

08003db8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d071      	beq.n	8003eae <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d106      	bne.n	8003de4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7fc fcea 	bl	80007b8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003dec:	4b32      	ldr	r3, [pc, #200]	; (8003eb8 <HAL_RTC_Init+0x100>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f003 0310 	and.w	r3, r3, #16
 8003df4:	2b10      	cmp	r3, #16
 8003df6:	d051      	beq.n	8003e9c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003df8:	4b2f      	ldr	r3, [pc, #188]	; (8003eb8 <HAL_RTC_Init+0x100>)
 8003dfa:	22ca      	movs	r2, #202	; 0xca
 8003dfc:	625a      	str	r2, [r3, #36]	; 0x24
 8003dfe:	4b2e      	ldr	r3, [pc, #184]	; (8003eb8 <HAL_RTC_Init+0x100>)
 8003e00:	2253      	movs	r2, #83	; 0x53
 8003e02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 fa11 	bl	800422c <RTC_EnterInitMode>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8003e0e:	7bfb      	ldrb	r3, [r7, #15]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d13f      	bne.n	8003e94 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003e14:	4b28      	ldr	r3, [pc, #160]	; (8003eb8 <HAL_RTC_Init+0x100>)
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	4a27      	ldr	r2, [pc, #156]	; (8003eb8 <HAL_RTC_Init+0x100>)
 8003e1a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8003e1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e22:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8003e24:	4b24      	ldr	r3, [pc, #144]	; (8003eb8 <HAL_RTC_Init+0x100>)
 8003e26:	699a      	ldr	r2, [r3, #24]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6859      	ldr	r1, [r3, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	4319      	orrs	r1, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	430b      	orrs	r3, r1
 8003e38:	491f      	ldr	r1, [pc, #124]	; (8003eb8 <HAL_RTC_Init+0x100>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	041b      	lsls	r3, r3, #16
 8003e48:	491b      	ldr	r1, [pc, #108]	; (8003eb8 <HAL_RTC_Init+0x100>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8003e4e:	4b1a      	ldr	r3, [pc, #104]	; (8003eb8 <HAL_RTC_Init+0x100>)
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5e:	430b      	orrs	r3, r1
 8003e60:	4915      	ldr	r1, [pc, #84]	; (8003eb8 <HAL_RTC_Init+0x100>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 fa14 	bl	8004294 <RTC_ExitInitMode>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8003e70:	7bfb      	ldrb	r3, [r7, #15]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10e      	bne.n	8003e94 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8003e76:	4b10      	ldr	r3, [pc, #64]	; (8003eb8 <HAL_RTC_Init+0x100>)
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a19      	ldr	r1, [r3, #32]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	4319      	orrs	r1, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	430b      	orrs	r3, r1
 8003e8e:	490a      	ldr	r1, [pc, #40]	; (8003eb8 <HAL_RTC_Init+0x100>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e94:	4b08      	ldr	r3, [pc, #32]	; (8003eb8 <HAL_RTC_Init+0x100>)
 8003e96:	22ff      	movs	r2, #255	; 0xff
 8003e98:	625a      	str	r2, [r3, #36]	; 0x24
 8003e9a:	e001      	b.n	8003ea0 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003ea0:	7bfb      	ldrb	r3, [r7, #15]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d103      	bne.n	8003eae <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8003eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40002800 	.word	0x40002800

08003ebc <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003ebc:	b590      	push	{r4, r7, lr}
 8003ebe:	b087      	sub	sp, #28
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d101      	bne.n	8003eda <HAL_RTC_SetAlarm_IT+0x1e>
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	e0f3      	b.n	80040c2 <HAL_RTC_SetAlarm_IT+0x206>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2202      	movs	r2, #2
 8003ee6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8003eea:	4b78      	ldr	r3, [pc, #480]	; (80040cc <HAL_RTC_SetAlarm_IT+0x210>)
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ef2:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003efa:	d06a      	beq.n	8003fd2 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d13a      	bne.n	8003f78 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003f02:	4b72      	ldr	r3, [pc, #456]	; (80040cc <HAL_RTC_SetAlarm_IT+0x210>)
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d102      	bne.n	8003f14 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	2200      	movs	r2, #0
 8003f12:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 f9f5 	bl	8004310 <RTC_ByteToBcd2>
 8003f26:	4603      	mov	r3, r0
 8003f28:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	785b      	ldrb	r3, [r3, #1]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 f9ee 	bl	8004310 <RTC_ByteToBcd2>
 8003f34:	4603      	mov	r3, r0
 8003f36:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003f38:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	789b      	ldrb	r3, [r3, #2]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 f9e6 	bl	8004310 <RTC_ByteToBcd2>
 8003f44:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003f46:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	78db      	ldrb	r3, [r3, #3]
 8003f4e:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003f50:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 f9d8 	bl	8004310 <RTC_ByteToBcd2>
 8003f60:	4603      	mov	r3, r0
 8003f62:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003f64:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003f6c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003f72:	4313      	orrs	r3, r2
 8003f74:	617b      	str	r3, [r7, #20]
 8003f76:	e02c      	b.n	8003fd2 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8003f80:	d00d      	beq.n	8003f9e <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f8a:	d008      	beq.n	8003f9e <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003f8c:	4b4f      	ldr	r3, [pc, #316]	; (80040cc <HAL_RTC_SetAlarm_IT+0x210>)
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d102      	bne.n	8003f9e <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	785b      	ldrb	r3, [r3, #1]
 8003fa8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003faa:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003fb0:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	78db      	ldrb	r3, [r3, #3]
 8003fb6:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003fb8:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fc0:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003fc2:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003fc8:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003fd2:	4b3e      	ldr	r3, [pc, #248]	; (80040cc <HAL_RTC_SetAlarm_IT+0x210>)
 8003fd4:	22ca      	movs	r2, #202	; 0xca
 8003fd6:	625a      	str	r2, [r3, #36]	; 0x24
 8003fd8:	4b3c      	ldr	r3, [pc, #240]	; (80040cc <HAL_RTC_SetAlarm_IT+0x210>)
 8003fda:	2253      	movs	r2, #83	; 0x53
 8003fdc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fe6:	d12c      	bne.n	8004042 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003fe8:	4b38      	ldr	r3, [pc, #224]	; (80040cc <HAL_RTC_SetAlarm_IT+0x210>)
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	4a37      	ldr	r2, [pc, #220]	; (80040cc <HAL_RTC_SetAlarm_IT+0x210>)
 8003fee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ff2:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003ff4:	4b35      	ldr	r3, [pc, #212]	; (80040cc <HAL_RTC_SetAlarm_IT+0x210>)
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004000:	d107      	bne.n	8004012 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	699a      	ldr	r2, [r3, #24]
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	4930      	ldr	r1, [pc, #192]	; (80040cc <HAL_RTC_SetAlarm_IT+0x210>)
 800400c:	4313      	orrs	r3, r2
 800400e:	644b      	str	r3, [r1, #68]	; 0x44
 8004010:	e006      	b.n	8004020 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8004012:	4a2e      	ldr	r2, [pc, #184]	; (80040cc <HAL_RTC_SetAlarm_IT+0x210>)
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8004018:	4a2c      	ldr	r2, [pc, #176]	; (80040cc <HAL_RTC_SetAlarm_IT+0x210>)
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8004020:	4a2a      	ldr	r2, [pc, #168]	; (80040cc <HAL_RTC_SetAlarm_IT+0x210>)
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402c:	f043 0201 	orr.w	r2, r3, #1
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004034:	4b25      	ldr	r3, [pc, #148]	; (80040cc <HAL_RTC_SetAlarm_IT+0x210>)
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	4a24      	ldr	r2, [pc, #144]	; (80040cc <HAL_RTC_SetAlarm_IT+0x210>)
 800403a:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 800403e:	6193      	str	r3, [r2, #24]
 8004040:	e02b      	b.n	800409a <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004042:	4b22      	ldr	r3, [pc, #136]	; (80040cc <HAL_RTC_SetAlarm_IT+0x210>)
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	4a21      	ldr	r2, [pc, #132]	; (80040cc <HAL_RTC_SetAlarm_IT+0x210>)
 8004048:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800404c:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800404e:	4b1f      	ldr	r3, [pc, #124]	; (80040cc <HAL_RTC_SetAlarm_IT+0x210>)
 8004050:	2202      	movs	r2, #2
 8004052:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800405a:	d107      	bne.n	800406c <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	699a      	ldr	r2, [r3, #24]
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	69db      	ldr	r3, [r3, #28]
 8004064:	4919      	ldr	r1, [pc, #100]	; (80040cc <HAL_RTC_SetAlarm_IT+0x210>)
 8004066:	4313      	orrs	r3, r2
 8004068:	64cb      	str	r3, [r1, #76]	; 0x4c
 800406a:	e006      	b.n	800407a <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 800406c:	4a17      	ldr	r2, [pc, #92]	; (80040cc <HAL_RTC_SetAlarm_IT+0x210>)
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8004072:	4a16      	ldr	r2, [pc, #88]	; (80040cc <HAL_RTC_SetAlarm_IT+0x210>)
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800407a:	4a14      	ldr	r2, [pc, #80]	; (80040cc <HAL_RTC_SetAlarm_IT+0x210>)
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004086:	f043 0202 	orr.w	r2, r3, #2
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800408e:	4b0f      	ldr	r3, [pc, #60]	; (80040cc <HAL_RTC_SetAlarm_IT+0x210>)
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	4a0e      	ldr	r2, [pc, #56]	; (80040cc <HAL_RTC_SetAlarm_IT+0x210>)
 8004094:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8004098:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800409a:	4b0d      	ldr	r3, [pc, #52]	; (80040d0 <HAL_RTC_SetAlarm_IT+0x214>)
 800409c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040a0:	4a0b      	ldr	r2, [pc, #44]	; (80040d0 <HAL_RTC_SetAlarm_IT+0x214>)
 80040a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040a6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040aa:	4b08      	ldr	r3, [pc, #32]	; (80040cc <HAL_RTC_SetAlarm_IT+0x210>)
 80040ac:	22ff      	movs	r2, #255	; 0xff
 80040ae:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	371c      	adds	r7, #28
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd90      	pop	{r4, r7, pc}
 80040ca:	bf00      	nop
 80040cc:	40002800 	.word	0x40002800
 80040d0:	58000800 	.word	0x58000800

080040d4 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d101      	bne.n	80040ec <HAL_RTC_DeactivateAlarm+0x18>
 80040e8:	2302      	movs	r3, #2
 80040ea:	e048      	b.n	800417e <HAL_RTC_DeactivateAlarm+0xaa>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2202      	movs	r2, #2
 80040f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80040fc:	4b22      	ldr	r3, [pc, #136]	; (8004188 <HAL_RTC_DeactivateAlarm+0xb4>)
 80040fe:	22ca      	movs	r2, #202	; 0xca
 8004100:	625a      	str	r2, [r3, #36]	; 0x24
 8004102:	4b21      	ldr	r3, [pc, #132]	; (8004188 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004104:	2253      	movs	r2, #83	; 0x53
 8004106:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800410e:	d115      	bne.n	800413c <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004110:	4b1d      	ldr	r3, [pc, #116]	; (8004188 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	4a1c      	ldr	r2, [pc, #112]	; (8004188 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004116:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800411a:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 800411c:	4b1a      	ldr	r3, [pc, #104]	; (8004188 <HAL_RTC_DeactivateAlarm+0xb4>)
 800411e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004120:	4a19      	ldr	r2, [pc, #100]	; (8004188 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004122:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004126:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412c:	f023 0201 	bic.w	r2, r3, #1
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004134:	4b14      	ldr	r3, [pc, #80]	; (8004188 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004136:	2201      	movs	r2, #1
 8004138:	65da      	str	r2, [r3, #92]	; 0x5c
 800413a:	e014      	b.n	8004166 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800413c:	4b12      	ldr	r3, [pc, #72]	; (8004188 <HAL_RTC_DeactivateAlarm+0xb4>)
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	4a11      	ldr	r2, [pc, #68]	; (8004188 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004142:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8004146:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8004148:	4b0f      	ldr	r3, [pc, #60]	; (8004188 <HAL_RTC_DeactivateAlarm+0xb4>)
 800414a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800414c:	4a0e      	ldr	r2, [pc, #56]	; (8004188 <HAL_RTC_DeactivateAlarm+0xb4>)
 800414e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004152:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004158:	f023 0202 	bic.w	r2, r3, #2
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004160:	4b09      	ldr	r3, [pc, #36]	; (8004188 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004162:	2202      	movs	r2, #2
 8004164:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004166:	4b08      	ldr	r3, [pc, #32]	; (8004188 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004168:	22ff      	movs	r2, #255	; 0xff
 800416a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	bc80      	pop	{r7}
 8004186:	4770      	bx	lr
 8004188:	40002800 	.word	0x40002800

0800418c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8004194:	4b11      	ldr	r3, [pc, #68]	; (80041dc <HAL_RTC_AlarmIRQHandler+0x50>)
 8004196:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419c:	4013      	ands	r3, r2
 800419e:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d005      	beq.n	80041b6 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80041aa:	4b0c      	ldr	r3, [pc, #48]	; (80041dc <HAL_RTC_AlarmIRQHandler+0x50>)
 80041ac:	2201      	movs	r2, #1
 80041ae:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7fc feb4 	bl	8000f1e <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d005      	beq.n	80041cc <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80041c0:	4b06      	ldr	r3, [pc, #24]	; (80041dc <HAL_RTC_AlarmIRQHandler+0x50>)
 80041c2:	2202      	movs	r2, #2
 80041c4:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f94a 	bl	8004460 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80041d4:	bf00      	nop
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	40002800 	.word	0x40002800

080041e0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80041e8:	4b0f      	ldr	r3, [pc, #60]	; (8004228 <HAL_RTC_WaitForSynchro+0x48>)
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	4a0e      	ldr	r2, [pc, #56]	; (8004228 <HAL_RTC_WaitForSynchro+0x48>)
 80041ee:	f023 0320 	bic.w	r3, r3, #32
 80041f2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80041f4:	f7fc fc84 	bl	8000b00 <HAL_GetTick>
 80041f8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80041fa:	e009      	b.n	8004210 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80041fc:	f7fc fc80 	bl	8000b00 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800420a:	d901      	bls.n	8004210 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e006      	b.n	800421e <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004210:	4b05      	ldr	r3, [pc, #20]	; (8004228 <HAL_RTC_WaitForSynchro+0x48>)
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f003 0320 	and.w	r3, r3, #32
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0ef      	beq.n	80041fc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	40002800 	.word	0x40002800

0800422c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004234:	2300      	movs	r3, #0
 8004236:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004238:	4b15      	ldr	r3, [pc, #84]	; (8004290 <RTC_EnterInitMode+0x64>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004240:	2b00      	cmp	r3, #0
 8004242:	d120      	bne.n	8004286 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004244:	4b12      	ldr	r3, [pc, #72]	; (8004290 <RTC_EnterInitMode+0x64>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	4a11      	ldr	r2, [pc, #68]	; (8004290 <RTC_EnterInitMode+0x64>)
 800424a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800424e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8004250:	f7fc fc56 	bl	8000b00 <HAL_GetTick>
 8004254:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004256:	e00d      	b.n	8004274 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004258:	f7fc fc52 	bl	8000b00 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004266:	d905      	bls.n	8004274 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2203      	movs	r2, #3
 8004270:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004274:	4b06      	ldr	r3, [pc, #24]	; (8004290 <RTC_EnterInitMode+0x64>)
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800427c:	2b00      	cmp	r3, #0
 800427e:	d102      	bne.n	8004286 <RTC_EnterInitMode+0x5a>
 8004280:	7bfb      	ldrb	r3, [r7, #15]
 8004282:	2b03      	cmp	r3, #3
 8004284:	d1e8      	bne.n	8004258 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8004286:	7bfb      	ldrb	r3, [r7, #15]
}
 8004288:	4618      	mov	r0, r3
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	40002800 	.word	0x40002800

08004294 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800429c:	2300      	movs	r3, #0
 800429e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80042a0:	4b1a      	ldr	r3, [pc, #104]	; (800430c <RTC_ExitInitMode+0x78>)
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	4a19      	ldr	r2, [pc, #100]	; (800430c <RTC_ExitInitMode+0x78>)
 80042a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042aa:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80042ac:	4b17      	ldr	r3, [pc, #92]	; (800430c <RTC_ExitInitMode+0x78>)
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	f003 0320 	and.w	r3, r3, #32
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10c      	bne.n	80042d2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7ff ff91 	bl	80041e0 <HAL_RTC_WaitForSynchro>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d01e      	beq.n	8004302 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2203      	movs	r2, #3
 80042c8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	73fb      	strb	r3, [r7, #15]
 80042d0:	e017      	b.n	8004302 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80042d2:	4b0e      	ldr	r3, [pc, #56]	; (800430c <RTC_ExitInitMode+0x78>)
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	4a0d      	ldr	r2, [pc, #52]	; (800430c <RTC_ExitInitMode+0x78>)
 80042d8:	f023 0320 	bic.w	r3, r3, #32
 80042dc:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7ff ff7e 	bl	80041e0 <HAL_RTC_WaitForSynchro>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d005      	beq.n	80042f6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2203      	movs	r2, #3
 80042ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80042f6:	4b05      	ldr	r3, [pc, #20]	; (800430c <RTC_ExitInitMode+0x78>)
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	4a04      	ldr	r2, [pc, #16]	; (800430c <RTC_ExitInitMode+0x78>)
 80042fc:	f043 0320 	orr.w	r3, r3, #32
 8004300:	6193      	str	r3, [r2, #24]
  }

  return status;
 8004302:	7bfb      	ldrb	r3, [r7, #15]
}
 8004304:	4618      	mov	r0, r3
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40002800 	.word	0x40002800

08004310 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	4603      	mov	r3, r0
 8004318:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800431a:	2300      	movs	r3, #0
 800431c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800431e:	79fb      	ldrb	r3, [r7, #7]
 8004320:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8004322:	e005      	b.n	8004330 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	3301      	adds	r3, #1
 8004328:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800432a:	7afb      	ldrb	r3, [r7, #11]
 800432c:	3b0a      	subs	r3, #10
 800432e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8004330:	7afb      	ldrb	r3, [r7, #11]
 8004332:	2b09      	cmp	r3, #9
 8004334:	d8f6      	bhi.n	8004324 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	b2db      	uxtb	r3, r3
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	b2da      	uxtb	r2, r3
 800433e:	7afb      	ldrb	r3, [r7, #11]
 8004340:	4313      	orrs	r3, r2
 8004342:	b2db      	uxtb	r3, r3
}
 8004344:	4618      	mov	r0, r3
 8004346:	3714      	adds	r7, #20
 8004348:	46bd      	mov	sp, r7
 800434a:	bc80      	pop	{r7}
 800434c:	4770      	bx	lr
	...

08004350 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800435e:	2b01      	cmp	r3, #1
 8004360:	d101      	bne.n	8004366 <HAL_RTCEx_EnableBypassShadow+0x16>
 8004362:	2302      	movs	r3, #2
 8004364:	e01f      	b.n	80043a6 <HAL_RTCEx_EnableBypassShadow+0x56>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2202      	movs	r2, #2
 8004372:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004376:	4b0e      	ldr	r3, [pc, #56]	; (80043b0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004378:	22ca      	movs	r2, #202	; 0xca
 800437a:	625a      	str	r2, [r3, #36]	; 0x24
 800437c:	4b0c      	ldr	r3, [pc, #48]	; (80043b0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800437e:	2253      	movs	r2, #83	; 0x53
 8004380:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004382:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	4a0a      	ldr	r2, [pc, #40]	; (80043b0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004388:	f043 0320 	orr.w	r3, r3, #32
 800438c:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800438e:	4b08      	ldr	r3, [pc, #32]	; (80043b0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004390:	22ff      	movs	r2, #255	; 0xff
 8004392:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bc80      	pop	{r7}
 80043ae:	4770      	bx	lr
 80043b0:	40002800 	.word	0x40002800

080043b4 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d101      	bne.n	80043ca <HAL_RTCEx_SetSSRU_IT+0x16>
 80043c6:	2302      	movs	r3, #2
 80043c8:	e027      	b.n	800441a <HAL_RTCEx_SetSSRU_IT+0x66>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2202      	movs	r2, #2
 80043d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043da:	4b12      	ldr	r3, [pc, #72]	; (8004424 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80043dc:	22ca      	movs	r2, #202	; 0xca
 80043de:	625a      	str	r2, [r3, #36]	; 0x24
 80043e0:	4b10      	ldr	r3, [pc, #64]	; (8004424 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80043e2:	2253      	movs	r2, #83	; 0x53
 80043e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80043e6:	4b0f      	ldr	r3, [pc, #60]	; (8004424 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	4a0e      	ldr	r2, [pc, #56]	; (8004424 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80043ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043f0:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80043f2:	4b0d      	ldr	r3, [pc, #52]	; (8004428 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80043f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043f8:	4a0b      	ldr	r2, [pc, #44]	; (8004428 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80043fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043fe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004402:	4b08      	ldr	r3, [pc, #32]	; (8004424 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004404:	22ff      	movs	r2, #255	; 0xff
 8004406:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	bc80      	pop	{r7}
 8004422:	4770      	bx	lr
 8004424:	40002800 	.word	0x40002800
 8004428:	58000800 	.word	0x58000800

0800442c <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8004434:	4b09      	ldr	r3, [pc, #36]	; (800445c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8004436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443c:	2b00      	cmp	r3, #0
 800443e:	d005      	beq.n	800444c <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8004440:	4b06      	ldr	r3, [pc, #24]	; (800445c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8004442:	2240      	movs	r2, #64	; 0x40
 8004444:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7fc fd73 	bl	8000f32 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8004454:	bf00      	nop
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40002800 	.word	0x40002800

08004460 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	bc80      	pop	{r7}
 8004470:	4770      	bx	lr
	...

08004474 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8004474:	b480      	push	{r7}
 8004476:	b087      	sub	sp, #28
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8004480:	4b07      	ldr	r3, [pc, #28]	; (80044a0 <HAL_RTCEx_BKUPWrite+0x2c>)
 8004482:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	4413      	add	r3, r2
 800448c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	601a      	str	r2, [r3, #0]
}
 8004494:	bf00      	nop
 8004496:	371c      	adds	r7, #28
 8004498:	46bd      	mov	sp, r7
 800449a:	bc80      	pop	{r7}
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	4000b100 	.word	0x4000b100

080044a4 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80044ae:	4b07      	ldr	r3, [pc, #28]	; (80044cc <HAL_RTCEx_BKUPRead+0x28>)
 80044b0:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	4413      	add	r3, r2
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3714      	adds	r7, #20
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bc80      	pop	{r7}
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	4000b100 	.word	0x4000b100

080044d0 <LL_PWR_SetRadioBusyTrigger>:
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80044d8:	4b06      	ldr	r3, [pc, #24]	; (80044f4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80044e0:	4904      	ldr	r1, [pc, #16]	; (80044f4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	608b      	str	r3, [r1, #8]
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bc80      	pop	{r7}
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	58000400 	.word	0x58000400

080044f8 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80044fc:	4b05      	ldr	r3, [pc, #20]	; (8004514 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80044fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004502:	4a04      	ldr	r2, [pc, #16]	; (8004514 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8004504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800450c:	bf00      	nop
 800450e:	46bd      	mov	sp, r7
 8004510:	bc80      	pop	{r7}
 8004512:	4770      	bx	lr
 8004514:	58000400 	.word	0x58000400

08004518 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800451c:	4b05      	ldr	r3, [pc, #20]	; (8004534 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800451e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004522:	4a04      	ldr	r2, [pc, #16]	; (8004534 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8004524:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004528:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800452c:	bf00      	nop
 800452e:	46bd      	mov	sp, r7
 8004530:	bc80      	pop	{r7}
 8004532:	4770      	bx	lr
 8004534:	58000400 	.word	0x58000400

08004538 <LL_PWR_ClearFlag_RFBUSY>:
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 800453c:	4b03      	ldr	r3, [pc, #12]	; (800454c <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800453e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004542:	619a      	str	r2, [r3, #24]
}
 8004544:	bf00      	nop
 8004546:	46bd      	mov	sp, r7
 8004548:	bc80      	pop	{r7}
 800454a:	4770      	bx	lr
 800454c:	58000400 	.word	0x58000400

08004550 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8004550:	b480      	push	{r7}
 8004552:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8004554:	4b06      	ldr	r3, [pc, #24]	; (8004570 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b02      	cmp	r3, #2
 800455e:	d101      	bne.n	8004564 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8004560:	2301      	movs	r3, #1
 8004562:	e000      	b.n	8004566 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	46bd      	mov	sp, r7
 800456a:	bc80      	pop	{r7}
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	58000400 	.word	0x58000400

08004574 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8004578:	4b06      	ldr	r3, [pc, #24]	; (8004594 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b04      	cmp	r3, #4
 8004582:	d101      	bne.n	8004588 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8004584:	2301      	movs	r3, #1
 8004586:	e000      	b.n	800458a <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	46bd      	mov	sp, r7
 800458e:	bc80      	pop	{r7}
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	58000400 	.word	0x58000400

08004598 <LL_RCC_RF_DisableReset>:
{
 8004598:	b480      	push	{r7}
 800459a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 800459c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80045ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80045b0:	bf00      	nop
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bc80      	pop	{r7}
 80045b6:	4770      	bx	lr

080045b8 <LL_RCC_IsRFUnderReset>:
{
 80045b8:	b480      	push	{r7}
 80045ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80045bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045cc:	d101      	bne.n	80045d2 <LL_RCC_IsRFUnderReset+0x1a>
 80045ce:	2301      	movs	r3, #1
 80045d0:	e000      	b.n	80045d4 <LL_RCC_IsRFUnderReset+0x1c>
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bc80      	pop	{r7}
 80045da:	4770      	bx	lr

080045dc <LL_EXTI_EnableIT_32_63>:
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80045e4:	4b06      	ldr	r3, [pc, #24]	; (8004600 <LL_EXTI_EnableIT_32_63+0x24>)
 80045e6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80045ea:	4905      	ldr	r1, [pc, #20]	; (8004600 <LL_EXTI_EnableIT_32_63+0x24>)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bc80      	pop	{r7}
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	58000800 	.word	0x58000800

08004604 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d103      	bne.n	800461a <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	73fb      	strb	r3, [r7, #15]
    return status;
 8004616:	7bfb      	ldrb	r3, [r7, #15]
 8004618:	e052      	b.n	80046c0 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 800461a:	2300      	movs	r3, #0
 800461c:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	799b      	ldrb	r3, [r3, #6]
 8004622:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8004624:	7bbb      	ldrb	r3, [r7, #14]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d002      	beq.n	8004630 <HAL_SUBGHZ_Init+0x2c>
 800462a:	7bbb      	ldrb	r3, [r7, #14]
 800462c:	2b03      	cmp	r3, #3
 800462e:	d109      	bne.n	8004644 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7fc f9c6 	bl	80009c8 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 800463c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004640:	f7ff ffcc 	bl	80045dc <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8004644:	7bbb      	ldrb	r3, [r7, #14]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d126      	bne.n	8004698 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2202      	movs	r2, #2
 800464e:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8004650:	f7ff ffa2 	bl	8004598 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004654:	4b1c      	ldr	r3, [pc, #112]	; (80046c8 <HAL_SUBGHZ_Init+0xc4>)
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	4613      	mov	r3, r2
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	1a9b      	subs	r3, r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	0cdb      	lsrs	r3, r3, #19
 8004662:	2264      	movs	r2, #100	; 0x64
 8004664:	fb02 f303 	mul.w	r3, r2, r3
 8004668:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d105      	bne.n	800467c <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	609a      	str	r2, [r3, #8]
        break;
 800467a:	e007      	b.n	800468c <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	3b01      	subs	r3, #1
 8004680:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8004682:	f7ff ff99 	bl	80045b8 <LL_RCC_IsRFUnderReset>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1ee      	bne.n	800466a <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800468c:	f7ff ff34 	bl	80044f8 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8004690:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004694:	f7ff ff1c 	bl	80044d0 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8004698:	f7ff ff4e 	bl	8004538 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 800469c:	7bfb      	ldrb	r3, [r7, #15]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10a      	bne.n	80046b8 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f000 faac 	bl	8004c04 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	719a      	strb	r2, [r3, #6]

  return status;
 80046be:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	20000000 	.word	0x20000000

080046cc <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	607a      	str	r2, [r7, #4]
 80046d6:	461a      	mov	r2, r3
 80046d8:	460b      	mov	r3, r1
 80046da:	817b      	strh	r3, [r7, #10]
 80046dc:	4613      	mov	r3, r2
 80046de:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	799b      	ldrb	r3, [r3, #6]
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d14a      	bne.n	8004780 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	795b      	ldrb	r3, [r3, #5]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d101      	bne.n	80046f6 <HAL_SUBGHZ_WriteRegisters+0x2a>
 80046f2:	2302      	movs	r3, #2
 80046f4:	e045      	b.n	8004782 <HAL_SUBGHZ_WriteRegisters+0xb6>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2201      	movs	r2, #1
 80046fa:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2202      	movs	r2, #2
 8004700:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f000 fb4c 	bl	8004da0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004708:	f7ff ff06 	bl	8004518 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 800470c:	210d      	movs	r1, #13
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 fa98 	bl	8004c44 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004714:	897b      	ldrh	r3, [r7, #10]
 8004716:	0a1b      	lsrs	r3, r3, #8
 8004718:	b29b      	uxth	r3, r3
 800471a:	b2db      	uxtb	r3, r3
 800471c:	4619      	mov	r1, r3
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f000 fa90 	bl	8004c44 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004724:	897b      	ldrh	r3, [r7, #10]
 8004726:	b2db      	uxtb	r3, r3
 8004728:	4619      	mov	r1, r3
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 fa8a 	bl	8004c44 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004730:	2300      	movs	r3, #0
 8004732:	82bb      	strh	r3, [r7, #20]
 8004734:	e00a      	b.n	800474c <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004736:	8abb      	ldrh	r3, [r7, #20]
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	4413      	add	r3, r2
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	4619      	mov	r1, r3
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f000 fa7f 	bl	8004c44 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004746:	8abb      	ldrh	r3, [r7, #20]
 8004748:	3301      	adds	r3, #1
 800474a:	82bb      	strh	r3, [r7, #20]
 800474c:	8aba      	ldrh	r2, [r7, #20]
 800474e:	893b      	ldrh	r3, [r7, #8]
 8004750:	429a      	cmp	r2, r3
 8004752:	d3f0      	bcc.n	8004736 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004754:	f7ff fed0 	bl	80044f8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f000 fb45 	bl	8004de8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d002      	beq.n	800476c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	75fb      	strb	r3, [r7, #23]
 800476a:	e001      	b.n	8004770 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 800476c:	2300      	movs	r3, #0
 800476e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2201      	movs	r2, #1
 8004774:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	715a      	strb	r2, [r3, #5]

    return status;
 800477c:	7dfb      	ldrb	r3, [r7, #23]
 800477e:	e000      	b.n	8004782 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004780:	2302      	movs	r3, #2
  }
}
 8004782:	4618      	mov	r0, r3
 8004784:	3718      	adds	r7, #24
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b088      	sub	sp, #32
 800478e:	af00      	add	r7, sp, #0
 8004790:	60f8      	str	r0, [r7, #12]
 8004792:	607a      	str	r2, [r7, #4]
 8004794:	461a      	mov	r2, r3
 8004796:	460b      	mov	r3, r1
 8004798:	817b      	strh	r3, [r7, #10]
 800479a:	4613      	mov	r3, r2
 800479c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	799b      	ldrb	r3, [r3, #6]
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d14a      	bne.n	8004842 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	795b      	ldrb	r3, [r3, #5]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d101      	bne.n	80047b8 <HAL_SUBGHZ_ReadRegisters+0x2e>
 80047b4:	2302      	movs	r3, #2
 80047b6:	e045      	b.n	8004844 <HAL_SUBGHZ_ReadRegisters+0xba>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2201      	movs	r2, #1
 80047bc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f000 faee 	bl	8004da0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80047c4:	f7ff fea8 	bl	8004518 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80047c8:	211d      	movs	r1, #29
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 fa3a 	bl	8004c44 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80047d0:	897b      	ldrh	r3, [r7, #10]
 80047d2:	0a1b      	lsrs	r3, r3, #8
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	4619      	mov	r1, r3
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f000 fa32 	bl	8004c44 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80047e0:	897b      	ldrh	r3, [r7, #10]
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	4619      	mov	r1, r3
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f000 fa2c 	bl	8004c44 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80047ec:	2100      	movs	r1, #0
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f000 fa28 	bl	8004c44 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80047f4:	2300      	movs	r3, #0
 80047f6:	82fb      	strh	r3, [r7, #22]
 80047f8:	e009      	b.n	800480e <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80047fa:	69b9      	ldr	r1, [r7, #24]
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f000 fa77 	bl	8004cf0 <SUBGHZSPI_Receive>
      pData++;
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	3301      	adds	r3, #1
 8004806:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004808:	8afb      	ldrh	r3, [r7, #22]
 800480a:	3301      	adds	r3, #1
 800480c:	82fb      	strh	r3, [r7, #22]
 800480e:	8afa      	ldrh	r2, [r7, #22]
 8004810:	893b      	ldrh	r3, [r7, #8]
 8004812:	429a      	cmp	r2, r3
 8004814:	d3f1      	bcc.n	80047fa <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004816:	f7ff fe6f 	bl	80044f8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 fae4 	bl	8004de8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d002      	beq.n	800482e <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	77fb      	strb	r3, [r7, #31]
 800482c:	e001      	b.n	8004832 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800482e:	2300      	movs	r3, #0
 8004830:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2201      	movs	r2, #1
 8004836:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	715a      	strb	r2, [r3, #5]

    return status;
 800483e:	7ffb      	ldrb	r3, [r7, #31]
 8004840:	e000      	b.n	8004844 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8004842:	2302      	movs	r3, #2
  }
}
 8004844:	4618      	mov	r0, r3
 8004846:	3720      	adds	r7, #32
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	607a      	str	r2, [r7, #4]
 8004856:	461a      	mov	r2, r3
 8004858:	460b      	mov	r3, r1
 800485a:	72fb      	strb	r3, [r7, #11]
 800485c:	4613      	mov	r3, r2
 800485e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	799b      	ldrb	r3, [r3, #6]
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b01      	cmp	r3, #1
 8004868:	d14a      	bne.n	8004900 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	795b      	ldrb	r3, [r3, #5]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d101      	bne.n	8004876 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8004872:	2302      	movs	r3, #2
 8004874:	e045      	b.n	8004902 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2201      	movs	r2, #1
 800487a:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 fa8f 	bl	8004da0 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8004882:	7afb      	ldrb	r3, [r7, #11]
 8004884:	2b84      	cmp	r3, #132	; 0x84
 8004886:	d002      	beq.n	800488e <HAL_SUBGHZ_ExecSetCmd+0x42>
 8004888:	7afb      	ldrb	r3, [r7, #11]
 800488a:	2b94      	cmp	r3, #148	; 0x94
 800488c:	d103      	bne.n	8004896 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2201      	movs	r2, #1
 8004892:	711a      	strb	r2, [r3, #4]
 8004894:	e002      	b.n	800489c <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800489c:	f7ff fe3c 	bl	8004518 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80048a0:	7afb      	ldrb	r3, [r7, #11]
 80048a2:	4619      	mov	r1, r3
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f000 f9cd 	bl	8004c44 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80048aa:	2300      	movs	r3, #0
 80048ac:	82bb      	strh	r3, [r7, #20]
 80048ae:	e00a      	b.n	80048c6 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80048b0:	8abb      	ldrh	r3, [r7, #20]
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	4413      	add	r3, r2
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	4619      	mov	r1, r3
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 f9c2 	bl	8004c44 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80048c0:	8abb      	ldrh	r3, [r7, #20]
 80048c2:	3301      	adds	r3, #1
 80048c4:	82bb      	strh	r3, [r7, #20]
 80048c6:	8aba      	ldrh	r2, [r7, #20]
 80048c8:	893b      	ldrh	r3, [r7, #8]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d3f0      	bcc.n	80048b0 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80048ce:	f7ff fe13 	bl	80044f8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80048d2:	7afb      	ldrb	r3, [r7, #11]
 80048d4:	2b84      	cmp	r3, #132	; 0x84
 80048d6:	d002      	beq.n	80048de <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f000 fa85 	bl	8004de8 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d002      	beq.n	80048ec <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	75fb      	strb	r3, [r7, #23]
 80048ea:	e001      	b.n	80048f0 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80048ec:	2300      	movs	r3, #0
 80048ee:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2201      	movs	r2, #1
 80048f4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	715a      	strb	r2, [r3, #5]

    return status;
 80048fc:	7dfb      	ldrb	r3, [r7, #23]
 80048fe:	e000      	b.n	8004902 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004900:	2302      	movs	r3, #2
  }
}
 8004902:	4618      	mov	r0, r3
 8004904:	3718      	adds	r7, #24
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b088      	sub	sp, #32
 800490e:	af00      	add	r7, sp, #0
 8004910:	60f8      	str	r0, [r7, #12]
 8004912:	607a      	str	r2, [r7, #4]
 8004914:	461a      	mov	r2, r3
 8004916:	460b      	mov	r3, r1
 8004918:	72fb      	strb	r3, [r7, #11]
 800491a:	4613      	mov	r3, r2
 800491c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	799b      	ldrb	r3, [r3, #6]
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b01      	cmp	r3, #1
 800492a:	d13d      	bne.n	80049a8 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	795b      	ldrb	r3, [r3, #5]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d101      	bne.n	8004938 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8004934:	2302      	movs	r3, #2
 8004936:	e038      	b.n	80049aa <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2201      	movs	r2, #1
 800493c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 fa2e 	bl	8004da0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004944:	f7ff fde8 	bl	8004518 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004948:	7afb      	ldrb	r3, [r7, #11]
 800494a:	4619      	mov	r1, r3
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f000 f979 	bl	8004c44 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004952:	2100      	movs	r1, #0
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f000 f975 	bl	8004c44 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800495a:	2300      	movs	r3, #0
 800495c:	82fb      	strh	r3, [r7, #22]
 800495e:	e009      	b.n	8004974 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004960:	69b9      	ldr	r1, [r7, #24]
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f000 f9c4 	bl	8004cf0 <SUBGHZSPI_Receive>
      pData++;
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	3301      	adds	r3, #1
 800496c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800496e:	8afb      	ldrh	r3, [r7, #22]
 8004970:	3301      	adds	r3, #1
 8004972:	82fb      	strh	r3, [r7, #22]
 8004974:	8afa      	ldrh	r2, [r7, #22]
 8004976:	893b      	ldrh	r3, [r7, #8]
 8004978:	429a      	cmp	r2, r3
 800497a:	d3f1      	bcc.n	8004960 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800497c:	f7ff fdbc 	bl	80044f8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 fa31 	bl	8004de8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d002      	beq.n	8004994 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	77fb      	strb	r3, [r7, #31]
 8004992:	e001      	b.n	8004998 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8004994:	2300      	movs	r3, #0
 8004996:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2201      	movs	r2, #1
 800499c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	715a      	strb	r2, [r3, #5]

    return status;
 80049a4:	7ffb      	ldrb	r3, [r7, #31]
 80049a6:	e000      	b.n	80049aa <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80049a8:	2302      	movs	r3, #2
  }
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3720      	adds	r7, #32
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b086      	sub	sp, #24
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	60f8      	str	r0, [r7, #12]
 80049ba:	607a      	str	r2, [r7, #4]
 80049bc:	461a      	mov	r2, r3
 80049be:	460b      	mov	r3, r1
 80049c0:	72fb      	strb	r3, [r7, #11]
 80049c2:	4613      	mov	r3, r2
 80049c4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	799b      	ldrb	r3, [r3, #6]
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d13e      	bne.n	8004a4e <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	795b      	ldrb	r3, [r3, #5]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d101      	bne.n	80049dc <HAL_SUBGHZ_WriteBuffer+0x2a>
 80049d8:	2302      	movs	r3, #2
 80049da:	e039      	b.n	8004a50 <HAL_SUBGHZ_WriteBuffer+0x9e>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2201      	movs	r2, #1
 80049e0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f000 f9dc 	bl	8004da0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80049e8:	f7ff fd96 	bl	8004518 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80049ec:	210e      	movs	r1, #14
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 f928 	bl	8004c44 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80049f4:	7afb      	ldrb	r3, [r7, #11]
 80049f6:	4619      	mov	r1, r3
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 f923 	bl	8004c44 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80049fe:	2300      	movs	r3, #0
 8004a00:	82bb      	strh	r3, [r7, #20]
 8004a02:	e00a      	b.n	8004a1a <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004a04:	8abb      	ldrh	r3, [r7, #20]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	4413      	add	r3, r2
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f000 f918 	bl	8004c44 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004a14:	8abb      	ldrh	r3, [r7, #20]
 8004a16:	3301      	adds	r3, #1
 8004a18:	82bb      	strh	r3, [r7, #20]
 8004a1a:	8aba      	ldrh	r2, [r7, #20]
 8004a1c:	893b      	ldrh	r3, [r7, #8]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d3f0      	bcc.n	8004a04 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004a22:	f7ff fd69 	bl	80044f8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 f9de 	bl	8004de8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d002      	beq.n	8004a3a <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	75fb      	strb	r3, [r7, #23]
 8004a38:	e001      	b.n	8004a3e <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2201      	movs	r2, #1
 8004a42:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	715a      	strb	r2, [r3, #5]

    return status;
 8004a4a:	7dfb      	ldrb	r3, [r7, #23]
 8004a4c:	e000      	b.n	8004a50 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004a4e:	2302      	movs	r3, #2
  }
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3718      	adds	r7, #24
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b088      	sub	sp, #32
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	607a      	str	r2, [r7, #4]
 8004a62:	461a      	mov	r2, r3
 8004a64:	460b      	mov	r3, r1
 8004a66:	72fb      	strb	r3, [r7, #11]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	799b      	ldrb	r3, [r3, #6]
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d141      	bne.n	8004afe <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	795b      	ldrb	r3, [r3, #5]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d101      	bne.n	8004a86 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8004a82:	2302      	movs	r3, #2
 8004a84:	e03c      	b.n	8004b00 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f000 f987 	bl	8004da0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004a92:	f7ff fd41 	bl	8004518 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8004a96:	211e      	movs	r1, #30
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 f8d3 	bl	8004c44 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004a9e:	7afb      	ldrb	r3, [r7, #11]
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f000 f8ce 	bl	8004c44 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 f8ca 	bl	8004c44 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	82fb      	strh	r3, [r7, #22]
 8004ab4:	e009      	b.n	8004aca <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004ab6:	69b9      	ldr	r1, [r7, #24]
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 f919 	bl	8004cf0 <SUBGHZSPI_Receive>
      pData++;
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004ac4:	8afb      	ldrh	r3, [r7, #22]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	82fb      	strh	r3, [r7, #22]
 8004aca:	8afa      	ldrh	r2, [r7, #22]
 8004acc:	893b      	ldrh	r3, [r7, #8]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d3f1      	bcc.n	8004ab6 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004ad2:	f7ff fd11 	bl	80044f8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 f986 	bl	8004de8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d002      	beq.n	8004aea <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	77fb      	strb	r3, [r7, #31]
 8004ae8:	e001      	b.n	8004aee <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8004aea:	2300      	movs	r3, #0
 8004aec:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2201      	movs	r2, #1
 8004af2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	715a      	strb	r2, [r3, #5]

    return status;
 8004afa:	7ffb      	ldrb	r3, [r7, #31]
 8004afc:	e000      	b.n	8004b00 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004afe:	2302      	movs	r3, #2
  }
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3720      	adds	r7, #32
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8004b10:	2300      	movs	r3, #0
 8004b12:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8004b14:	f107 020c 	add.w	r2, r7, #12
 8004b18:	2302      	movs	r3, #2
 8004b1a:	2112      	movs	r1, #18
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f7ff fef4 	bl	800490a <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8004b22:	7b3b      	ldrb	r3, [r7, #12]
 8004b24:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8004b26:	89fb      	ldrh	r3, [r7, #14]
 8004b28:	021b      	lsls	r3, r3, #8
 8004b2a:	b21a      	sxth	r2, r3
 8004b2c:	7b7b      	ldrb	r3, [r7, #13]
 8004b2e:	b21b      	sxth	r3, r3
 8004b30:	4313      	orrs	r3, r2
 8004b32:	b21b      	sxth	r3, r3
 8004b34:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8004b36:	f107 020c 	add.w	r2, r7, #12
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	2102      	movs	r1, #2
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7ff fe84 	bl	800484c <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8004b44:	89fb      	ldrh	r3, [r7, #14]
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d002      	beq.n	8004b54 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f005 fbf6 	bl	800a340 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8004b54:	89fb      	ldrh	r3, [r7, #14]
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f005 fbfc 	bl	800a35c <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8004b64:	89fb      	ldrh	r3, [r7, #14]
 8004b66:	f003 0304 	and.w	r3, r3, #4
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d002      	beq.n	8004b74 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f005 fc4c 	bl	800a40c <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8004b74:	89fb      	ldrh	r3, [r7, #14]
 8004b76:	f003 0308 	and.w	r3, r3, #8
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d002      	beq.n	8004b84 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f005 fc52 	bl	800a428 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8004b84:	89fb      	ldrh	r3, [r7, #14]
 8004b86:	f003 0310 	and.w	r3, r3, #16
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d002      	beq.n	8004b94 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f005 fc58 	bl	800a444 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8004b94:	89fb      	ldrh	r3, [r7, #14]
 8004b96:	f003 0320 	and.w	r3, r3, #32
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d002      	beq.n	8004ba4 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f005 fc26 	bl	800a3f0 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8004ba4:	89fb      	ldrh	r3, [r7, #14]
 8004ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d002      	beq.n	8004bb4 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f005 fbe2 	bl	800a378 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8004bb4:	89fb      	ldrh	r3, [r7, #14]
 8004bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00d      	beq.n	8004bda <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8004bbe:	89fb      	ldrh	r3, [r7, #14]
 8004bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d004      	beq.n	8004bd2 <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8004bc8:	2101      	movs	r1, #1
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f005 fbe2 	bl	800a394 <HAL_SUBGHZ_CADStatusCallback>
 8004bd0:	e003      	b.n	8004bda <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f005 fbdd 	bl	800a394 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8004bda:	89fb      	ldrh	r3, [r7, #14]
 8004bdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d002      	beq.n	8004bea <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f005 fbf3 	bl	800a3d0 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8004bea:	89fb      	ldrh	r3, [r7, #14]
 8004bec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f005 fc33 	bl	800a460 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8004bfa:	bf00      	nop
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
	...

08004c04 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004c0c:	4b0c      	ldr	r3, [pc, #48]	; (8004c40 <SUBGHZSPI_Init+0x3c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a0b      	ldr	r2, [pc, #44]	; (8004c40 <SUBGHZSPI_Init+0x3c>)
 8004c12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c16:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8004c18:	4a09      	ldr	r2, [pc, #36]	; (8004c40 <SUBGHZSPI_Init+0x3c>)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8004c20:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8004c22:	4b07      	ldr	r3, [pc, #28]	; (8004c40 <SUBGHZSPI_Init+0x3c>)
 8004c24:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8004c28:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004c2a:	4b05      	ldr	r3, [pc, #20]	; (8004c40 <SUBGHZSPI_Init+0x3c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a04      	ldr	r2, [pc, #16]	; (8004c40 <SUBGHZSPI_Init+0x3c>)
 8004c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c34:	6013      	str	r3, [r2, #0]
}
 8004c36:	bf00      	nop
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bc80      	pop	{r7}
 8004c3e:	4770      	bx	lr
 8004c40:	58010000 	.word	0x58010000

08004c44 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b087      	sub	sp, #28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004c50:	2300      	movs	r3, #0
 8004c52:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004c54:	4b23      	ldr	r3, [pc, #140]	; (8004ce4 <SUBGHZSPI_Transmit+0xa0>)
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	00db      	lsls	r3, r3, #3
 8004c5c:	1a9b      	subs	r3, r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	0cdb      	lsrs	r3, r3, #19
 8004c62:	2264      	movs	r2, #100	; 0x64
 8004c64:	fb02 f303 	mul.w	r3, r2, r3
 8004c68:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d105      	bne.n	8004c7c <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	609a      	str	r2, [r3, #8]
      break;
 8004c7a:	e008      	b.n	8004c8e <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004c82:	4b19      	ldr	r3, [pc, #100]	; (8004ce8 <SUBGHZSPI_Transmit+0xa4>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d1ed      	bne.n	8004c6a <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004c8e:	4b17      	ldr	r3, [pc, #92]	; (8004cec <SUBGHZSPI_Transmit+0xa8>)
 8004c90:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	78fa      	ldrb	r2, [r7, #3]
 8004c96:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004c98:	4b12      	ldr	r3, [pc, #72]	; (8004ce4 <SUBGHZSPI_Transmit+0xa0>)
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	1a9b      	subs	r3, r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	0cdb      	lsrs	r3, r3, #19
 8004ca6:	2264      	movs	r2, #100	; 0x64
 8004ca8:	fb02 f303 	mul.w	r3, r2, r3
 8004cac:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d105      	bne.n	8004cc0 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	609a      	str	r2, [r3, #8]
      break;
 8004cbe:	e008      	b.n	8004cd2 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004cc6:	4b08      	ldr	r3, [pc, #32]	; (8004ce8 <SUBGHZSPI_Transmit+0xa4>)
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d1ed      	bne.n	8004cae <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8004cd2:	4b05      	ldr	r3, [pc, #20]	; (8004ce8 <SUBGHZSPI_Transmit+0xa4>)
 8004cd4:	68db      	ldr	r3, [r3, #12]

  return status;
 8004cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	371c      	adds	r7, #28
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bc80      	pop	{r7}
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	20000000 	.word	0x20000000
 8004ce8:	58010000 	.word	0x58010000
 8004cec:	5801000c 	.word	0x5801000c

08004cf0 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b087      	sub	sp, #28
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004cfe:	4b25      	ldr	r3, [pc, #148]	; (8004d94 <SUBGHZSPI_Receive+0xa4>)
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	4613      	mov	r3, r2
 8004d04:	00db      	lsls	r3, r3, #3
 8004d06:	1a9b      	subs	r3, r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	0cdb      	lsrs	r3, r3, #19
 8004d0c:	2264      	movs	r2, #100	; 0x64
 8004d0e:	fb02 f303 	mul.w	r3, r2, r3
 8004d12:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d105      	bne.n	8004d26 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	609a      	str	r2, [r3, #8]
      break;
 8004d24:	e008      	b.n	8004d38 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004d2c:	4b1a      	ldr	r3, [pc, #104]	; (8004d98 <SUBGHZSPI_Receive+0xa8>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d1ed      	bne.n	8004d14 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004d38:	4b18      	ldr	r3, [pc, #96]	; (8004d9c <SUBGHZSPI_Receive+0xac>)
 8004d3a:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	22ff      	movs	r2, #255	; 0xff
 8004d40:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004d42:	4b14      	ldr	r3, [pc, #80]	; (8004d94 <SUBGHZSPI_Receive+0xa4>)
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	4613      	mov	r3, r2
 8004d48:	00db      	lsls	r3, r3, #3
 8004d4a:	1a9b      	subs	r3, r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	0cdb      	lsrs	r3, r3, #19
 8004d50:	2264      	movs	r2, #100	; 0x64
 8004d52:	fb02 f303 	mul.w	r3, r2, r3
 8004d56:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d105      	bne.n	8004d6a <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	609a      	str	r2, [r3, #8]
      break;
 8004d68:	e008      	b.n	8004d7c <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004d70:	4b09      	ldr	r3, [pc, #36]	; (8004d98 <SUBGHZSPI_Receive+0xa8>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d1ed      	bne.n	8004d58 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004d7c:	4b06      	ldr	r3, [pc, #24]	; (8004d98 <SUBGHZSPI_Receive+0xa8>)
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	b2da      	uxtb	r2, r3
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	701a      	strb	r2, [r3, #0]

  return status;
 8004d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	371c      	adds	r7, #28
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bc80      	pop	{r7}
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	20000000 	.word	0x20000000
 8004d98:	58010000 	.word	0x58010000
 8004d9c:	5801000c 	.word	0x5801000c

08004da0 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	791b      	ldrb	r3, [r3, #4]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d111      	bne.n	8004dd4 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8004db0:	4b0c      	ldr	r3, [pc, #48]	; (8004de4 <SUBGHZ_CheckDeviceReady+0x44>)
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	4613      	mov	r3, r2
 8004db6:	005b      	lsls	r3, r3, #1
 8004db8:	4413      	add	r3, r2
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	0c1b      	lsrs	r3, r3, #16
 8004dbe:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004dc0:	f7ff fbaa 	bl	8004518 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1f9      	bne.n	8004dc4 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004dd0:	f7ff fb92 	bl	80044f8 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f807 	bl	8004de8 <SUBGHZ_WaitOnBusy>
 8004dda:	4603      	mov	r3, r0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3710      	adds	r7, #16
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	20000000 	.word	0x20000000

08004de8 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8004df0:	2300      	movs	r3, #0
 8004df2:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8004df4:	4b12      	ldr	r3, [pc, #72]	; (8004e40 <SUBGHZ_WaitOnBusy+0x58>)
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	005b      	lsls	r3, r3, #1
 8004dfc:	4413      	add	r3, r2
 8004dfe:	00db      	lsls	r3, r3, #3
 8004e00:	0d1b      	lsrs	r3, r3, #20
 8004e02:	2264      	movs	r2, #100	; 0x64
 8004e04:	fb02 f303 	mul.w	r3, r2, r3
 8004e08:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8004e0a:	f7ff fbb3 	bl	8004574 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8004e0e:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d105      	bne.n	8004e22 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	609a      	str	r2, [r3, #8]
      break;
 8004e20:	e009      	b.n	8004e36 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	3b01      	subs	r3, #1
 8004e26:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004e28:	f7ff fb92 	bl	8004550 <LL_PWR_IsActiveFlag_RFBUSYS>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	4013      	ands	r3, r2
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d0e9      	beq.n	8004e0a <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8004e36:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3718      	adds	r7, #24
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	20000000 	.word	0x20000000

08004e44 <LL_RCC_GetUSARTClockSource>:
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e50:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	401a      	ands	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	041b      	lsls	r3, r3, #16
 8004e5c:	4313      	orrs	r3, r2
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bc80      	pop	{r7}
 8004e66:	4770      	bx	lr

08004e68 <LL_RCC_GetLPUARTClockSource>:
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e74:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4013      	ands	r3, r2
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bc80      	pop	{r7}
 8004e84:	4770      	bx	lr

08004e86 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b082      	sub	sp, #8
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e042      	b.n	8004f1e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d106      	bne.n	8004eb0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7fc f9a6 	bl	80011fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2224      	movs	r2, #36	; 0x24
 8004eb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 0201 	bic.w	r2, r2, #1
 8004ec6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 fc3b 	bl	8005744 <UART_SetConfig>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d101      	bne.n	8004ed8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e022      	b.n	8004f1e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d002      	beq.n	8004ee6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 fea3 	bl	8005c2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ef4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f04:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f042 0201 	orr.w	r2, r2, #1
 8004f14:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 ff29 	bl	8005d6e <UART_CheckIdleState>
 8004f1c:	4603      	mov	r3, r0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
	...

08004f28 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b08a      	sub	sp, #40	; 0x28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	4613      	mov	r3, r2
 8004f34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f3c:	2b20      	cmp	r3, #32
 8004f3e:	d137      	bne.n	8004fb0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d002      	beq.n	8004f4c <HAL_UART_Receive_IT+0x24>
 8004f46:	88fb      	ldrh	r3, [r7, #6]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d101      	bne.n	8004f50 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e030      	b.n	8004fb2 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a18      	ldr	r2, [pc, #96]	; (8004fbc <HAL_UART_Receive_IT+0x94>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d01f      	beq.n	8004fa0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d018      	beq.n	8004fa0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	e853 3f00 	ldrex	r3, [r3]
 8004f7a:	613b      	str	r3, [r7, #16]
   return(result);
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f82:	627b      	str	r3, [r7, #36]	; 0x24
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	461a      	mov	r2, r3
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8c:	623b      	str	r3, [r7, #32]
 8004f8e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f90:	69f9      	ldr	r1, [r7, #28]
 8004f92:	6a3a      	ldr	r2, [r7, #32]
 8004f94:	e841 2300 	strex	r3, r2, [r1]
 8004f98:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1e6      	bne.n	8004f6e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004fa0:	88fb      	ldrh	r3, [r7, #6]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	68b9      	ldr	r1, [r7, #8]
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f000 fff8 	bl	8005f9c <UART_Start_Receive_IT>
 8004fac:	4603      	mov	r3, r0
 8004fae:	e000      	b.n	8004fb2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004fb0:	2302      	movs	r3, #2
  }
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3728      	adds	r7, #40	; 0x28
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	40008000 	.word	0x40008000

08004fc0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b08a      	sub	sp, #40	; 0x28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd4:	2b20      	cmp	r3, #32
 8004fd6:	d167      	bne.n	80050a8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d002      	beq.n	8004fe4 <HAL_UART_Transmit_DMA+0x24>
 8004fde:	88fb      	ldrh	r3, [r7, #6]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d101      	bne.n	8004fe8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e060      	b.n	80050aa <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	88fa      	ldrh	r2, [r7, #6]
 8004ff2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	88fa      	ldrh	r2, [r7, #6]
 8004ffa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2221      	movs	r2, #33	; 0x21
 800500a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005012:	2b00      	cmp	r3, #0
 8005014:	d028      	beq.n	8005068 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800501a:	4a26      	ldr	r2, [pc, #152]	; (80050b4 <HAL_UART_Transmit_DMA+0xf4>)
 800501c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005022:	4a25      	ldr	r2, [pc, #148]	; (80050b8 <HAL_UART_Transmit_DMA+0xf8>)
 8005024:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800502a:	4a24      	ldr	r2, [pc, #144]	; (80050bc <HAL_UART_Transmit_DMA+0xfc>)
 800502c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005032:	2200      	movs	r2, #0
 8005034:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800503e:	4619      	mov	r1, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	3328      	adds	r3, #40	; 0x28
 8005046:	461a      	mov	r2, r3
 8005048:	88fb      	ldrh	r3, [r7, #6]
 800504a:	f7fc fe17 	bl	8001c7c <HAL_DMA_Start_IT>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d009      	beq.n	8005068 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2210      	movs	r2, #16
 8005058:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2220      	movs	r2, #32
 8005060:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e020      	b.n	80050aa <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2240      	movs	r2, #64	; 0x40
 800506e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	3308      	adds	r3, #8
 8005076:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	e853 3f00 	ldrex	r3, [r3]
 800507e:	613b      	str	r3, [r7, #16]
   return(result);
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005086:	627b      	str	r3, [r7, #36]	; 0x24
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	3308      	adds	r3, #8
 800508e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005090:	623a      	str	r2, [r7, #32]
 8005092:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005094:	69f9      	ldr	r1, [r7, #28]
 8005096:	6a3a      	ldr	r2, [r7, #32]
 8005098:	e841 2300 	strex	r3, r2, [r1]
 800509c:	61bb      	str	r3, [r7, #24]
   return(result);
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1e5      	bne.n	8005070 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80050a4:	2300      	movs	r3, #0
 80050a6:	e000      	b.n	80050aa <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80050a8:	2302      	movs	r3, #2
  }
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3728      	adds	r7, #40	; 0x28
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	08006327 	.word	0x08006327
 80050b8:	080063c1 	.word	0x080063c1
 80050bc:	080063dd 	.word	0x080063dd

080050c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b0ba      	sub	sp, #232	; 0xe8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80050e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80050ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80050ee:	4013      	ands	r3, r2
 80050f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80050f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d11b      	bne.n	8005134 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80050fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005100:	f003 0320 	and.w	r3, r3, #32
 8005104:	2b00      	cmp	r3, #0
 8005106:	d015      	beq.n	8005134 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800510c:	f003 0320 	and.w	r3, r3, #32
 8005110:	2b00      	cmp	r3, #0
 8005112:	d105      	bne.n	8005120 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d009      	beq.n	8005134 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005124:	2b00      	cmp	r3, #0
 8005126:	f000 82e3 	beq.w	80056f0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	4798      	blx	r3
      }
      return;
 8005132:	e2dd      	b.n	80056f0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005134:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 8123 	beq.w	8005384 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800513e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005142:	4b8d      	ldr	r3, [pc, #564]	; (8005378 <HAL_UART_IRQHandler+0x2b8>)
 8005144:	4013      	ands	r3, r2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d106      	bne.n	8005158 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800514a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800514e:	4b8b      	ldr	r3, [pc, #556]	; (800537c <HAL_UART_IRQHandler+0x2bc>)
 8005150:	4013      	ands	r3, r2
 8005152:	2b00      	cmp	r3, #0
 8005154:	f000 8116 	beq.w	8005384 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b00      	cmp	r3, #0
 8005162:	d011      	beq.n	8005188 <HAL_UART_IRQHandler+0xc8>
 8005164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00b      	beq.n	8005188 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2201      	movs	r2, #1
 8005176:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800517e:	f043 0201 	orr.w	r2, r3, #1
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d011      	beq.n	80051b8 <HAL_UART_IRQHandler+0xf8>
 8005194:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005198:	f003 0301 	and.w	r3, r3, #1
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00b      	beq.n	80051b8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2202      	movs	r2, #2
 80051a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ae:	f043 0204 	orr.w	r2, r3, #4
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051bc:	f003 0304 	and.w	r3, r3, #4
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d011      	beq.n	80051e8 <HAL_UART_IRQHandler+0x128>
 80051c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00b      	beq.n	80051e8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2204      	movs	r2, #4
 80051d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051de:	f043 0202 	orr.w	r2, r3, #2
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80051e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ec:	f003 0308 	and.w	r3, r3, #8
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d017      	beq.n	8005224 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80051f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051f8:	f003 0320 	and.w	r3, r3, #32
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d105      	bne.n	800520c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005200:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005204:	4b5c      	ldr	r3, [pc, #368]	; (8005378 <HAL_UART_IRQHandler+0x2b8>)
 8005206:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00b      	beq.n	8005224 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2208      	movs	r2, #8
 8005212:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800521a:	f043 0208 	orr.w	r2, r3, #8
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005228:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800522c:	2b00      	cmp	r3, #0
 800522e:	d012      	beq.n	8005256 <HAL_UART_IRQHandler+0x196>
 8005230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005234:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00c      	beq.n	8005256 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005244:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800524c:	f043 0220 	orr.w	r2, r3, #32
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800525c:	2b00      	cmp	r3, #0
 800525e:	f000 8249 	beq.w	80056f4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005266:	f003 0320 	and.w	r3, r3, #32
 800526a:	2b00      	cmp	r3, #0
 800526c:	d013      	beq.n	8005296 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800526e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005272:	f003 0320 	and.w	r3, r3, #32
 8005276:	2b00      	cmp	r3, #0
 8005278:	d105      	bne.n	8005286 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800527a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800527e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d007      	beq.n	8005296 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052aa:	2b40      	cmp	r3, #64	; 0x40
 80052ac:	d005      	beq.n	80052ba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80052ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d054      	beq.n	8005364 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 ffce 	bl	800625c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ca:	2b40      	cmp	r3, #64	; 0x40
 80052cc:	d146      	bne.n	800535c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3308      	adds	r3, #8
 80052d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052dc:	e853 3f00 	ldrex	r3, [r3]
 80052e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80052e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	3308      	adds	r3, #8
 80052f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80052fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80052fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005302:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005306:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800530a:	e841 2300 	strex	r3, r2, [r1]
 800530e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005312:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1d9      	bne.n	80052ce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005320:	2b00      	cmp	r3, #0
 8005322:	d017      	beq.n	8005354 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800532a:	4a15      	ldr	r2, [pc, #84]	; (8005380 <HAL_UART_IRQHandler+0x2c0>)
 800532c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005334:	4618      	mov	r0, r3
 8005336:	f7fc fd7d 	bl	8001e34 <HAL_DMA_Abort_IT>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d019      	beq.n	8005374 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800534e:	4610      	mov	r0, r2
 8005350:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005352:	e00f      	b.n	8005374 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 f9e0 	bl	800571a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800535a:	e00b      	b.n	8005374 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f9dc 	bl	800571a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005362:	e007      	b.n	8005374 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f9d8 	bl	800571a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8005372:	e1bf      	b.n	80056f4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005374:	bf00      	nop
    return;
 8005376:	e1bd      	b.n	80056f4 <HAL_UART_IRQHandler+0x634>
 8005378:	10000001 	.word	0x10000001
 800537c:	04000120 	.word	0x04000120
 8005380:	0800645d 	.word	0x0800645d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005388:	2b01      	cmp	r3, #1
 800538a:	f040 8153 	bne.w	8005634 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800538e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005392:	f003 0310 	and.w	r3, r3, #16
 8005396:	2b00      	cmp	r3, #0
 8005398:	f000 814c 	beq.w	8005634 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800539c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053a0:	f003 0310 	and.w	r3, r3, #16
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f000 8145 	beq.w	8005634 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2210      	movs	r2, #16
 80053b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053bc:	2b40      	cmp	r3, #64	; 0x40
 80053be:	f040 80bb 	bne.w	8005538 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f000 818f 	beq.w	80056f8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80053e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80053e4:	429a      	cmp	r2, r3
 80053e6:	f080 8187 	bcs.w	80056f8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80053f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0320 	and.w	r3, r3, #32
 8005402:	2b00      	cmp	r3, #0
 8005404:	f040 8087 	bne.w	8005516 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005410:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005414:	e853 3f00 	ldrex	r3, [r3]
 8005418:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800541c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005420:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005424:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	461a      	mov	r2, r3
 800542e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005432:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005436:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800543e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005442:	e841 2300 	strex	r3, r2, [r1]
 8005446:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800544a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1da      	bne.n	8005408 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	3308      	adds	r3, #8
 8005458:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800545c:	e853 3f00 	ldrex	r3, [r3]
 8005460:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005462:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005464:	f023 0301 	bic.w	r3, r3, #1
 8005468:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	3308      	adds	r3, #8
 8005472:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005476:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800547a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800547e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005482:	e841 2300 	strex	r3, r2, [r1]
 8005486:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005488:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1e1      	bne.n	8005452 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	3308      	adds	r3, #8
 8005494:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005496:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005498:	e853 3f00 	ldrex	r3, [r3]
 800549c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800549e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	3308      	adds	r3, #8
 80054ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80054b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80054b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80054b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80054ba:	e841 2300 	strex	r3, r2, [r1]
 80054be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80054c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1e3      	bne.n	800548e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2220      	movs	r2, #32
 80054ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054dc:	e853 3f00 	ldrex	r3, [r3]
 80054e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80054e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054e4:	f023 0310 	bic.w	r3, r3, #16
 80054e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	461a      	mov	r2, r3
 80054f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80054f8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80054fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054fe:	e841 2300 	strex	r3, r2, [r1]
 8005502:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005504:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1e4      	bne.n	80054d4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005510:	4618      	mov	r0, r3
 8005512:	f7fc fc31 	bl	8001d78 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2202      	movs	r2, #2
 800551a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005528:	b29b      	uxth	r3, r3
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	b29b      	uxth	r3, r3
 800552e:	4619      	mov	r1, r3
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 f8fb 	bl	800572c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005536:	e0df      	b.n	80056f8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005544:	b29b      	uxth	r3, r3
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005552:	b29b      	uxth	r3, r3
 8005554:	2b00      	cmp	r3, #0
 8005556:	f000 80d1 	beq.w	80056fc <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800555a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800555e:	2b00      	cmp	r3, #0
 8005560:	f000 80cc 	beq.w	80056fc <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556c:	e853 3f00 	ldrex	r3, [r3]
 8005570:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005574:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005578:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	461a      	mov	r2, r3
 8005582:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005586:	647b      	str	r3, [r7, #68]	; 0x44
 8005588:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800558c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800558e:	e841 2300 	strex	r3, r2, [r1]
 8005592:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1e4      	bne.n	8005564 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	3308      	adds	r3, #8
 80055a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	e853 3f00 	ldrex	r3, [r3]
 80055a8:	623b      	str	r3, [r7, #32]
   return(result);
 80055aa:	6a3b      	ldr	r3, [r7, #32]
 80055ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055b0:	f023 0301 	bic.w	r3, r3, #1
 80055b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	3308      	adds	r3, #8
 80055be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80055c2:	633a      	str	r2, [r7, #48]	; 0x30
 80055c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ca:	e841 2300 	strex	r3, r2, [r1]
 80055ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1e1      	bne.n	800559a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2220      	movs	r2, #32
 80055da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	e853 3f00 	ldrex	r3, [r3]
 80055f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f023 0310 	bic.w	r3, r3, #16
 80055fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	461a      	mov	r2, r3
 8005608:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800560c:	61fb      	str	r3, [r7, #28]
 800560e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005610:	69b9      	ldr	r1, [r7, #24]
 8005612:	69fa      	ldr	r2, [r7, #28]
 8005614:	e841 2300 	strex	r3, r2, [r1]
 8005618:	617b      	str	r3, [r7, #20]
   return(result);
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1e4      	bne.n	80055ea <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005626:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800562a:	4619      	mov	r1, r3
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 f87d 	bl	800572c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005632:	e063      	b.n	80056fc <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005638:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00e      	beq.n	800565e <HAL_UART_IRQHandler+0x59e>
 8005640:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005644:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d008      	beq.n	800565e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005654:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f001 fc5e 	bl	8006f18 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800565c:	e051      	b.n	8005702 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800565e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005666:	2b00      	cmp	r3, #0
 8005668:	d014      	beq.n	8005694 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800566a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800566e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005672:	2b00      	cmp	r3, #0
 8005674:	d105      	bne.n	8005682 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005676:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800567a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d008      	beq.n	8005694 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005686:	2b00      	cmp	r3, #0
 8005688:	d03a      	beq.n	8005700 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	4798      	blx	r3
    }
    return;
 8005692:	e035      	b.n	8005700 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569c:	2b00      	cmp	r3, #0
 800569e:	d009      	beq.n	80056b4 <HAL_UART_IRQHandler+0x5f4>
 80056a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d003      	beq.n	80056b4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 feeb 	bl	8006488 <UART_EndTransmit_IT>
    return;
 80056b2:	e026      	b.n	8005702 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80056b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d009      	beq.n	80056d4 <HAL_UART_IRQHandler+0x614>
 80056c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d003      	beq.n	80056d4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f001 fc35 	bl	8006f3c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80056d2:	e016      	b.n	8005702 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80056d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d010      	beq.n	8005702 <HAL_UART_IRQHandler+0x642>
 80056e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	da0c      	bge.n	8005702 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f001 fc1e 	bl	8006f2a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80056ee:	e008      	b.n	8005702 <HAL_UART_IRQHandler+0x642>
      return;
 80056f0:	bf00      	nop
 80056f2:	e006      	b.n	8005702 <HAL_UART_IRQHandler+0x642>
    return;
 80056f4:	bf00      	nop
 80056f6:	e004      	b.n	8005702 <HAL_UART_IRQHandler+0x642>
      return;
 80056f8:	bf00      	nop
 80056fa:	e002      	b.n	8005702 <HAL_UART_IRQHandler+0x642>
      return;
 80056fc:	bf00      	nop
 80056fe:	e000      	b.n	8005702 <HAL_UART_IRQHandler+0x642>
    return;
 8005700:	bf00      	nop
  }
}
 8005702:	37e8      	adds	r7, #232	; 0xe8
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005710:	bf00      	nop
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	bc80      	pop	{r7}
 8005718:	4770      	bx	lr

0800571a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800571a:	b480      	push	{r7}
 800571c:	b083      	sub	sp, #12
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005722:	bf00      	nop
 8005724:	370c      	adds	r7, #12
 8005726:	46bd      	mov	sp, r7
 8005728:	bc80      	pop	{r7}
 800572a:	4770      	bx	lr

0800572c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	460b      	mov	r3, r1
 8005736:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005738:	bf00      	nop
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	bc80      	pop	{r7}
 8005740:	4770      	bx	lr
	...

08005744 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005748:	b08c      	sub	sp, #48	; 0x30
 800574a:	af00      	add	r7, sp, #0
 800574c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800574e:	2300      	movs	r3, #0
 8005750:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	431a      	orrs	r2, r3
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	431a      	orrs	r2, r3
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	69db      	ldr	r3, [r3, #28]
 8005768:	4313      	orrs	r3, r2
 800576a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	4b94      	ldr	r3, [pc, #592]	; (80059c4 <UART_SetConfig+0x280>)
 8005774:	4013      	ands	r3, r2
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	6812      	ldr	r2, [r2, #0]
 800577a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800577c:	430b      	orrs	r3, r1
 800577e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	68da      	ldr	r2, [r3, #12]
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	430a      	orrs	r2, r1
 8005794:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a89      	ldr	r2, [pc, #548]	; (80059c8 <UART_SetConfig+0x284>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d004      	beq.n	80057b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057ac:	4313      	orrs	r3, r2
 80057ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80057ba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	6812      	ldr	r2, [r2, #0]
 80057c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057c4:	430b      	orrs	r3, r1
 80057c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ce:	f023 010f 	bic.w	r1, r3, #15
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	430a      	orrs	r2, r1
 80057dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a7a      	ldr	r2, [pc, #488]	; (80059cc <UART_SetConfig+0x288>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d127      	bne.n	8005838 <UART_SetConfig+0xf4>
 80057e8:	2003      	movs	r0, #3
 80057ea:	f7ff fb2b 	bl	8004e44 <LL_RCC_GetUSARTClockSource>
 80057ee:	4603      	mov	r3, r0
 80057f0:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80057f4:	2b03      	cmp	r3, #3
 80057f6:	d81b      	bhi.n	8005830 <UART_SetConfig+0xec>
 80057f8:	a201      	add	r2, pc, #4	; (adr r2, 8005800 <UART_SetConfig+0xbc>)
 80057fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057fe:	bf00      	nop
 8005800:	08005811 	.word	0x08005811
 8005804:	08005821 	.word	0x08005821
 8005808:	08005819 	.word	0x08005819
 800580c:	08005829 	.word	0x08005829
 8005810:	2301      	movs	r3, #1
 8005812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005816:	e080      	b.n	800591a <UART_SetConfig+0x1d6>
 8005818:	2302      	movs	r3, #2
 800581a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800581e:	e07c      	b.n	800591a <UART_SetConfig+0x1d6>
 8005820:	2304      	movs	r3, #4
 8005822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005826:	e078      	b.n	800591a <UART_SetConfig+0x1d6>
 8005828:	2308      	movs	r3, #8
 800582a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800582e:	e074      	b.n	800591a <UART_SetConfig+0x1d6>
 8005830:	2310      	movs	r3, #16
 8005832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005836:	e070      	b.n	800591a <UART_SetConfig+0x1d6>
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a64      	ldr	r2, [pc, #400]	; (80059d0 <UART_SetConfig+0x28c>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d138      	bne.n	80058b4 <UART_SetConfig+0x170>
 8005842:	200c      	movs	r0, #12
 8005844:	f7ff fafe 	bl	8004e44 <LL_RCC_GetUSARTClockSource>
 8005848:	4603      	mov	r3, r0
 800584a:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800584e:	2b0c      	cmp	r3, #12
 8005850:	d82c      	bhi.n	80058ac <UART_SetConfig+0x168>
 8005852:	a201      	add	r2, pc, #4	; (adr r2, 8005858 <UART_SetConfig+0x114>)
 8005854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005858:	0800588d 	.word	0x0800588d
 800585c:	080058ad 	.word	0x080058ad
 8005860:	080058ad 	.word	0x080058ad
 8005864:	080058ad 	.word	0x080058ad
 8005868:	0800589d 	.word	0x0800589d
 800586c:	080058ad 	.word	0x080058ad
 8005870:	080058ad 	.word	0x080058ad
 8005874:	080058ad 	.word	0x080058ad
 8005878:	08005895 	.word	0x08005895
 800587c:	080058ad 	.word	0x080058ad
 8005880:	080058ad 	.word	0x080058ad
 8005884:	080058ad 	.word	0x080058ad
 8005888:	080058a5 	.word	0x080058a5
 800588c:	2300      	movs	r3, #0
 800588e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005892:	e042      	b.n	800591a <UART_SetConfig+0x1d6>
 8005894:	2302      	movs	r3, #2
 8005896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800589a:	e03e      	b.n	800591a <UART_SetConfig+0x1d6>
 800589c:	2304      	movs	r3, #4
 800589e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058a2:	e03a      	b.n	800591a <UART_SetConfig+0x1d6>
 80058a4:	2308      	movs	r3, #8
 80058a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058aa:	e036      	b.n	800591a <UART_SetConfig+0x1d6>
 80058ac:	2310      	movs	r3, #16
 80058ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058b2:	e032      	b.n	800591a <UART_SetConfig+0x1d6>
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a43      	ldr	r2, [pc, #268]	; (80059c8 <UART_SetConfig+0x284>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d12a      	bne.n	8005914 <UART_SetConfig+0x1d0>
 80058be:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80058c2:	f7ff fad1 	bl	8004e68 <LL_RCC_GetLPUARTClockSource>
 80058c6:	4603      	mov	r3, r0
 80058c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058cc:	d01a      	beq.n	8005904 <UART_SetConfig+0x1c0>
 80058ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058d2:	d81b      	bhi.n	800590c <UART_SetConfig+0x1c8>
 80058d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058d8:	d00c      	beq.n	80058f4 <UART_SetConfig+0x1b0>
 80058da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058de:	d815      	bhi.n	800590c <UART_SetConfig+0x1c8>
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d003      	beq.n	80058ec <UART_SetConfig+0x1a8>
 80058e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058e8:	d008      	beq.n	80058fc <UART_SetConfig+0x1b8>
 80058ea:	e00f      	b.n	800590c <UART_SetConfig+0x1c8>
 80058ec:	2300      	movs	r3, #0
 80058ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058f2:	e012      	b.n	800591a <UART_SetConfig+0x1d6>
 80058f4:	2302      	movs	r3, #2
 80058f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058fa:	e00e      	b.n	800591a <UART_SetConfig+0x1d6>
 80058fc:	2304      	movs	r3, #4
 80058fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005902:	e00a      	b.n	800591a <UART_SetConfig+0x1d6>
 8005904:	2308      	movs	r3, #8
 8005906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800590a:	e006      	b.n	800591a <UART_SetConfig+0x1d6>
 800590c:	2310      	movs	r3, #16
 800590e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005912:	e002      	b.n	800591a <UART_SetConfig+0x1d6>
 8005914:	2310      	movs	r3, #16
 8005916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a2a      	ldr	r2, [pc, #168]	; (80059c8 <UART_SetConfig+0x284>)
 8005920:	4293      	cmp	r3, r2
 8005922:	f040 80a4 	bne.w	8005a6e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005926:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800592a:	2b08      	cmp	r3, #8
 800592c:	d823      	bhi.n	8005976 <UART_SetConfig+0x232>
 800592e:	a201      	add	r2, pc, #4	; (adr r2, 8005934 <UART_SetConfig+0x1f0>)
 8005930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005934:	08005959 	.word	0x08005959
 8005938:	08005977 	.word	0x08005977
 800593c:	08005961 	.word	0x08005961
 8005940:	08005977 	.word	0x08005977
 8005944:	08005967 	.word	0x08005967
 8005948:	08005977 	.word	0x08005977
 800594c:	08005977 	.word	0x08005977
 8005950:	08005977 	.word	0x08005977
 8005954:	0800596f 	.word	0x0800596f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005958:	f7fd ff4a 	bl	80037f0 <HAL_RCC_GetPCLK1Freq>
 800595c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800595e:	e010      	b.n	8005982 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005960:	4b1c      	ldr	r3, [pc, #112]	; (80059d4 <UART_SetConfig+0x290>)
 8005962:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005964:	e00d      	b.n	8005982 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005966:	f7fd fe8f 	bl	8003688 <HAL_RCC_GetSysClockFreq>
 800596a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800596c:	e009      	b.n	8005982 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800596e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005972:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005974:	e005      	b.n	8005982 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8005976:	2300      	movs	r3, #0
 8005978:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005980:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	2b00      	cmp	r3, #0
 8005986:	f000 8137 	beq.w	8005bf8 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598e:	4a12      	ldr	r2, [pc, #72]	; (80059d8 <UART_SetConfig+0x294>)
 8005990:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005994:	461a      	mov	r2, r3
 8005996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005998:	fbb3 f3f2 	udiv	r3, r3, r2
 800599c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	685a      	ldr	r2, [r3, #4]
 80059a2:	4613      	mov	r3, r2
 80059a4:	005b      	lsls	r3, r3, #1
 80059a6:	4413      	add	r3, r2
 80059a8:	69ba      	ldr	r2, [r7, #24]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d305      	bcc.n	80059ba <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d910      	bls.n	80059dc <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80059c0:	e11a      	b.n	8005bf8 <UART_SetConfig+0x4b4>
 80059c2:	bf00      	nop
 80059c4:	cfff69f3 	.word	0xcfff69f3
 80059c8:	40008000 	.word	0x40008000
 80059cc:	40013800 	.word	0x40013800
 80059d0:	40004400 	.word	0x40004400
 80059d4:	00f42400 	.word	0x00f42400
 80059d8:	0800c158 	.word	0x0800c158
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059de:	2200      	movs	r2, #0
 80059e0:	60bb      	str	r3, [r7, #8]
 80059e2:	60fa      	str	r2, [r7, #12]
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e8:	4a8e      	ldr	r2, [pc, #568]	; (8005c24 <UART_SetConfig+0x4e0>)
 80059ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	2200      	movs	r2, #0
 80059f2:	603b      	str	r3, [r7, #0]
 80059f4:	607a      	str	r2, [r7, #4]
 80059f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80059fe:	f7fa fbc3 	bl	8000188 <__aeabi_uldivmod>
 8005a02:	4602      	mov	r2, r0
 8005a04:	460b      	mov	r3, r1
 8005a06:	4610      	mov	r0, r2
 8005a08:	4619      	mov	r1, r3
 8005a0a:	f04f 0200 	mov.w	r2, #0
 8005a0e:	f04f 0300 	mov.w	r3, #0
 8005a12:	020b      	lsls	r3, r1, #8
 8005a14:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005a18:	0202      	lsls	r2, r0, #8
 8005a1a:	6979      	ldr	r1, [r7, #20]
 8005a1c:	6849      	ldr	r1, [r1, #4]
 8005a1e:	0849      	lsrs	r1, r1, #1
 8005a20:	2000      	movs	r0, #0
 8005a22:	460c      	mov	r4, r1
 8005a24:	4605      	mov	r5, r0
 8005a26:	eb12 0804 	adds.w	r8, r2, r4
 8005a2a:	eb43 0905 	adc.w	r9, r3, r5
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	469a      	mov	sl, r3
 8005a36:	4693      	mov	fp, r2
 8005a38:	4652      	mov	r2, sl
 8005a3a:	465b      	mov	r3, fp
 8005a3c:	4640      	mov	r0, r8
 8005a3e:	4649      	mov	r1, r9
 8005a40:	f7fa fba2 	bl	8000188 <__aeabi_uldivmod>
 8005a44:	4602      	mov	r2, r0
 8005a46:	460b      	mov	r3, r1
 8005a48:	4613      	mov	r3, r2
 8005a4a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a4c:	6a3b      	ldr	r3, [r7, #32]
 8005a4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a52:	d308      	bcc.n	8005a66 <UART_SetConfig+0x322>
 8005a54:	6a3b      	ldr	r3, [r7, #32]
 8005a56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a5a:	d204      	bcs.n	8005a66 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6a3a      	ldr	r2, [r7, #32]
 8005a62:	60da      	str	r2, [r3, #12]
 8005a64:	e0c8      	b.n	8005bf8 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005a6c:	e0c4      	b.n	8005bf8 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a76:	d167      	bne.n	8005b48 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8005a78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a7c:	2b08      	cmp	r3, #8
 8005a7e:	d828      	bhi.n	8005ad2 <UART_SetConfig+0x38e>
 8005a80:	a201      	add	r2, pc, #4	; (adr r2, 8005a88 <UART_SetConfig+0x344>)
 8005a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a86:	bf00      	nop
 8005a88:	08005aad 	.word	0x08005aad
 8005a8c:	08005ab5 	.word	0x08005ab5
 8005a90:	08005abd 	.word	0x08005abd
 8005a94:	08005ad3 	.word	0x08005ad3
 8005a98:	08005ac3 	.word	0x08005ac3
 8005a9c:	08005ad3 	.word	0x08005ad3
 8005aa0:	08005ad3 	.word	0x08005ad3
 8005aa4:	08005ad3 	.word	0x08005ad3
 8005aa8:	08005acb 	.word	0x08005acb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005aac:	f7fd fea0 	bl	80037f0 <HAL_RCC_GetPCLK1Freq>
 8005ab0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ab2:	e014      	b.n	8005ade <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ab4:	f7fd feae 	bl	8003814 <HAL_RCC_GetPCLK2Freq>
 8005ab8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005aba:	e010      	b.n	8005ade <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005abc:	4b5a      	ldr	r3, [pc, #360]	; (8005c28 <UART_SetConfig+0x4e4>)
 8005abe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ac0:	e00d      	b.n	8005ade <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ac2:	f7fd fde1 	bl	8003688 <HAL_RCC_GetSysClockFreq>
 8005ac6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ac8:	e009      	b.n	8005ade <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ace:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ad0:	e005      	b.n	8005ade <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005adc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 8089 	beq.w	8005bf8 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aea:	4a4e      	ldr	r2, [pc, #312]	; (8005c24 <UART_SetConfig+0x4e0>)
 8005aec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005af0:	461a      	mov	r2, r3
 8005af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005af8:	005a      	lsls	r2, r3, #1
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	085b      	lsrs	r3, r3, #1
 8005b00:	441a      	add	r2, r3
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b0a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b0c:	6a3b      	ldr	r3, [r7, #32]
 8005b0e:	2b0f      	cmp	r3, #15
 8005b10:	d916      	bls.n	8005b40 <UART_SetConfig+0x3fc>
 8005b12:	6a3b      	ldr	r3, [r7, #32]
 8005b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b18:	d212      	bcs.n	8005b40 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	f023 030f 	bic.w	r3, r3, #15
 8005b22:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b24:	6a3b      	ldr	r3, [r7, #32]
 8005b26:	085b      	lsrs	r3, r3, #1
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	f003 0307 	and.w	r3, r3, #7
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	8bfb      	ldrh	r3, [r7, #30]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	8bfa      	ldrh	r2, [r7, #30]
 8005b3c:	60da      	str	r2, [r3, #12]
 8005b3e:	e05b      	b.n	8005bf8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005b46:	e057      	b.n	8005bf8 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b4c:	2b08      	cmp	r3, #8
 8005b4e:	d828      	bhi.n	8005ba2 <UART_SetConfig+0x45e>
 8005b50:	a201      	add	r2, pc, #4	; (adr r2, 8005b58 <UART_SetConfig+0x414>)
 8005b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b56:	bf00      	nop
 8005b58:	08005b7d 	.word	0x08005b7d
 8005b5c:	08005b85 	.word	0x08005b85
 8005b60:	08005b8d 	.word	0x08005b8d
 8005b64:	08005ba3 	.word	0x08005ba3
 8005b68:	08005b93 	.word	0x08005b93
 8005b6c:	08005ba3 	.word	0x08005ba3
 8005b70:	08005ba3 	.word	0x08005ba3
 8005b74:	08005ba3 	.word	0x08005ba3
 8005b78:	08005b9b 	.word	0x08005b9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b7c:	f7fd fe38 	bl	80037f0 <HAL_RCC_GetPCLK1Freq>
 8005b80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b82:	e014      	b.n	8005bae <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b84:	f7fd fe46 	bl	8003814 <HAL_RCC_GetPCLK2Freq>
 8005b88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b8a:	e010      	b.n	8005bae <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b8c:	4b26      	ldr	r3, [pc, #152]	; (8005c28 <UART_SetConfig+0x4e4>)
 8005b8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b90:	e00d      	b.n	8005bae <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b92:	f7fd fd79 	bl	8003688 <HAL_RCC_GetSysClockFreq>
 8005b96:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b98:	e009      	b.n	8005bae <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ba0:	e005      	b.n	8005bae <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005bac:	bf00      	nop
    }

    if (pclk != 0U)
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d021      	beq.n	8005bf8 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb8:	4a1a      	ldr	r2, [pc, #104]	; (8005c24 <UART_SetConfig+0x4e0>)
 8005bba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc2:	fbb3 f2f2 	udiv	r2, r3, r2
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	085b      	lsrs	r3, r3, #1
 8005bcc:	441a      	add	r2, r3
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bd8:	6a3b      	ldr	r3, [r7, #32]
 8005bda:	2b0f      	cmp	r3, #15
 8005bdc:	d909      	bls.n	8005bf2 <UART_SetConfig+0x4ae>
 8005bde:	6a3b      	ldr	r3, [r7, #32]
 8005be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005be4:	d205      	bcs.n	8005bf2 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	60da      	str	r2, [r3, #12]
 8005bf0:	e002      	b.n	8005bf8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	2200      	movs	r2, #0
 8005c12:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005c14:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3730      	adds	r7, #48	; 0x30
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c22:	bf00      	nop
 8005c24:	0800c158 	.word	0x0800c158
 8005c28:	00f42400 	.word	0x00f42400

08005c2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00a      	beq.n	8005c56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	430a      	orrs	r2, r1
 8005c54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5a:	f003 0302 	and.w	r3, r3, #2
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00a      	beq.n	8005c78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	430a      	orrs	r2, r1
 8005c76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7c:	f003 0304 	and.w	r3, r3, #4
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00a      	beq.n	8005c9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9e:	f003 0308 	and.w	r3, r3, #8
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00a      	beq.n	8005cbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc0:	f003 0310 	and.w	r3, r3, #16
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00a      	beq.n	8005cde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce2:	f003 0320 	and.w	r3, r3, #32
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00a      	beq.n	8005d00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d01a      	beq.n	8005d42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d2a:	d10a      	bne.n	8005d42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00a      	beq.n	8005d64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	605a      	str	r2, [r3, #4]
  }
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bc80      	pop	{r7}
 8005d6c:	4770      	bx	lr

08005d6e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b086      	sub	sp, #24
 8005d72:	af02      	add	r7, sp, #8
 8005d74:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d7e:	f7fa febf 	bl	8000b00 <HAL_GetTick>
 8005d82:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0308 	and.w	r3, r3, #8
 8005d8e:	2b08      	cmp	r3, #8
 8005d90:	d10e      	bne.n	8005db0 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d96:	9300      	str	r3, [sp, #0]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 f832 	bl	8005e0a <UART_WaitOnFlagUntilTimeout>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d001      	beq.n	8005db0 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e028      	b.n	8005e02 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0304 	and.w	r3, r3, #4
 8005dba:	2b04      	cmp	r3, #4
 8005dbc:	d10e      	bne.n	8005ddc <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dbe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005dc2:	9300      	str	r3, [sp, #0]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 f81c 	bl	8005e0a <UART_WaitOnFlagUntilTimeout>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d001      	beq.n	8005ddc <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e012      	b.n	8005e02 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2220      	movs	r2, #32
 8005de0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2220      	movs	r2, #32
 8005de8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b09c      	sub	sp, #112	; 0x70
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	60f8      	str	r0, [r7, #12]
 8005e12:	60b9      	str	r1, [r7, #8]
 8005e14:	603b      	str	r3, [r7, #0]
 8005e16:	4613      	mov	r3, r2
 8005e18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e1a:	e0a9      	b.n	8005f70 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e22:	f000 80a5 	beq.w	8005f70 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e26:	f7fa fe6b 	bl	8000b00 <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d302      	bcc.n	8005e3c <UART_WaitOnFlagUntilTimeout+0x32>
 8005e36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d140      	bne.n	8005ebe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e44:	e853 3f00 	ldrex	r3, [r3]
 8005e48:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e50:	667b      	str	r3, [r7, #100]	; 0x64
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	461a      	mov	r2, r3
 8005e58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e5c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005e60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005e62:	e841 2300 	strex	r3, r2, [r1]
 8005e66:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1e6      	bne.n	8005e3c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	3308      	adds	r3, #8
 8005e74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e78:	e853 3f00 	ldrex	r3, [r3]
 8005e7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e80:	f023 0301 	bic.w	r3, r3, #1
 8005e84:	663b      	str	r3, [r7, #96]	; 0x60
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	3308      	adds	r3, #8
 8005e8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e8e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005e90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e96:	e841 2300 	strex	r3, r2, [r1]
 8005e9a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1e5      	bne.n	8005e6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2220      	movs	r2, #32
 8005eae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e069      	b.n	8005f92 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0304 	and.w	r3, r3, #4
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d051      	beq.n	8005f70 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	69db      	ldr	r3, [r3, #28]
 8005ed2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ed6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eda:	d149      	bne.n	8005f70 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ee4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eee:	e853 3f00 	ldrex	r3, [r3]
 8005ef2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005efa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	461a      	mov	r2, r3
 8005f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f04:	637b      	str	r3, [r7, #52]	; 0x34
 8005f06:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f0c:	e841 2300 	strex	r3, r2, [r1]
 8005f10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1e6      	bne.n	8005ee6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	3308      	adds	r3, #8
 8005f1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	e853 3f00 	ldrex	r3, [r3]
 8005f26:	613b      	str	r3, [r7, #16]
   return(result);
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	f023 0301 	bic.w	r3, r3, #1
 8005f2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	3308      	adds	r3, #8
 8005f36:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f38:	623a      	str	r2, [r7, #32]
 8005f3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3c:	69f9      	ldr	r1, [r7, #28]
 8005f3e:	6a3a      	ldr	r2, [r7, #32]
 8005f40:	e841 2300 	strex	r3, r2, [r1]
 8005f44:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1e5      	bne.n	8005f18 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2220      	movs	r2, #32
 8005f50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2220      	movs	r2, #32
 8005f58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2220      	movs	r2, #32
 8005f60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e010      	b.n	8005f92 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	69da      	ldr	r2, [r3, #28]
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	4013      	ands	r3, r2
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	bf0c      	ite	eq
 8005f80:	2301      	moveq	r3, #1
 8005f82:	2300      	movne	r3, #0
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	461a      	mov	r2, r3
 8005f88:	79fb      	ldrb	r3, [r7, #7]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	f43f af46 	beq.w	8005e1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3770      	adds	r7, #112	; 0x70
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
	...

08005f9c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b0a3      	sub	sp, #140	; 0x8c
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	88fa      	ldrh	r2, [r7, #6]
 8005fb4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	88fa      	ldrh	r2, [r7, #6]
 8005fbc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fce:	d10e      	bne.n	8005fee <UART_Start_Receive_IT+0x52>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d105      	bne.n	8005fe4 <UART_Start_Receive_IT+0x48>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005fde:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005fe2:	e02d      	b.n	8006040 <UART_Start_Receive_IT+0xa4>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	22ff      	movs	r2, #255	; 0xff
 8005fe8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005fec:	e028      	b.n	8006040 <UART_Start_Receive_IT+0xa4>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10d      	bne.n	8006012 <UART_Start_Receive_IT+0x76>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d104      	bne.n	8006008 <UART_Start_Receive_IT+0x6c>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	22ff      	movs	r2, #255	; 0xff
 8006002:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006006:	e01b      	b.n	8006040 <UART_Start_Receive_IT+0xa4>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	227f      	movs	r2, #127	; 0x7f
 800600c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006010:	e016      	b.n	8006040 <UART_Start_Receive_IT+0xa4>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800601a:	d10d      	bne.n	8006038 <UART_Start_Receive_IT+0x9c>
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d104      	bne.n	800602e <UART_Start_Receive_IT+0x92>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	227f      	movs	r2, #127	; 0x7f
 8006028:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800602c:	e008      	b.n	8006040 <UART_Start_Receive_IT+0xa4>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	223f      	movs	r2, #63	; 0x3f
 8006032:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006036:	e003      	b.n	8006040 <UART_Start_Receive_IT+0xa4>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2222      	movs	r2, #34	; 0x22
 800604c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	3308      	adds	r3, #8
 8006056:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006058:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800605a:	e853 3f00 	ldrex	r3, [r3]
 800605e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006060:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006062:	f043 0301 	orr.w	r3, r3, #1
 8006066:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	3308      	adds	r3, #8
 8006070:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006074:	673a      	str	r2, [r7, #112]	; 0x70
 8006076:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006078:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800607a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800607c:	e841 2300 	strex	r3, r2, [r1]
 8006080:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006082:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006084:	2b00      	cmp	r3, #0
 8006086:	d1e3      	bne.n	8006050 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800608c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006090:	d14f      	bne.n	8006132 <UART_Start_Receive_IT+0x196>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006098:	88fa      	ldrh	r2, [r7, #6]
 800609a:	429a      	cmp	r2, r3
 800609c:	d349      	bcc.n	8006132 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060a6:	d107      	bne.n	80060b8 <UART_Start_Receive_IT+0x11c>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d103      	bne.n	80060b8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	4a46      	ldr	r2, [pc, #280]	; (80061cc <UART_Start_Receive_IT+0x230>)
 80060b4:	675a      	str	r2, [r3, #116]	; 0x74
 80060b6:	e002      	b.n	80060be <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	4a45      	ldr	r2, [pc, #276]	; (80061d0 <UART_Start_Receive_IT+0x234>)
 80060bc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d01a      	beq.n	80060fc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060ce:	e853 3f00 	ldrex	r3, [r3]
 80060d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80060d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	461a      	mov	r2, r3
 80060e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80060e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060ea:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80060ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80060f0:	e841 2300 	strex	r3, r2, [r1]
 80060f4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80060f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1e4      	bne.n	80060c6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	3308      	adds	r3, #8
 8006102:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006106:	e853 3f00 	ldrex	r3, [r3]
 800610a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800610c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006112:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	3308      	adds	r3, #8
 800611a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800611c:	64ba      	str	r2, [r7, #72]	; 0x48
 800611e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006120:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006122:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006124:	e841 2300 	strex	r3, r2, [r1]
 8006128:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800612a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800612c:	2b00      	cmp	r3, #0
 800612e:	d1e5      	bne.n	80060fc <UART_Start_Receive_IT+0x160>
 8006130:	e046      	b.n	80061c0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800613a:	d107      	bne.n	800614c <UART_Start_Receive_IT+0x1b0>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d103      	bne.n	800614c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	4a23      	ldr	r2, [pc, #140]	; (80061d4 <UART_Start_Receive_IT+0x238>)
 8006148:	675a      	str	r2, [r3, #116]	; 0x74
 800614a:	e002      	b.n	8006152 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	4a22      	ldr	r2, [pc, #136]	; (80061d8 <UART_Start_Receive_IT+0x23c>)
 8006150:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d019      	beq.n	800618e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006162:	e853 3f00 	ldrex	r3, [r3]
 8006166:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800616e:	677b      	str	r3, [r7, #116]	; 0x74
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	461a      	mov	r2, r3
 8006176:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006178:	637b      	str	r3, [r7, #52]	; 0x34
 800617a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800617e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006180:	e841 2300 	strex	r3, r2, [r1]
 8006184:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1e6      	bne.n	800615a <UART_Start_Receive_IT+0x1be>
 800618c:	e018      	b.n	80061c0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	e853 3f00 	ldrex	r3, [r3]
 800619a:	613b      	str	r3, [r7, #16]
   return(result);
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	f043 0320 	orr.w	r3, r3, #32
 80061a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	461a      	mov	r2, r3
 80061aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061ac:	623b      	str	r3, [r7, #32]
 80061ae:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b0:	69f9      	ldr	r1, [r7, #28]
 80061b2:	6a3a      	ldr	r2, [r7, #32]
 80061b4:	e841 2300 	strex	r3, r2, [r1]
 80061b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1e6      	bne.n	800618e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	378c      	adds	r7, #140	; 0x8c
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bc80      	pop	{r7}
 80061ca:	4770      	bx	lr
 80061cc:	08006bb1 	.word	0x08006bb1
 80061d0:	08006851 	.word	0x08006851
 80061d4:	08006699 	.word	0x08006699
 80061d8:	080064e1 	.word	0x080064e1

080061dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80061dc:	b480      	push	{r7}
 80061de:	b08f      	sub	sp, #60	; 0x3c
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ea:	6a3b      	ldr	r3, [r7, #32]
 80061ec:	e853 3f00 	ldrex	r3, [r3]
 80061f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80061f8:	637b      	str	r3, [r7, #52]	; 0x34
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	461a      	mov	r2, r3
 8006200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006202:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006204:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006206:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006208:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800620a:	e841 2300 	strex	r3, r2, [r1]
 800620e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1e6      	bne.n	80061e4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	3308      	adds	r3, #8
 800621c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	e853 3f00 	ldrex	r3, [r3]
 8006224:	60bb      	str	r3, [r7, #8]
   return(result);
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800622c:	633b      	str	r3, [r7, #48]	; 0x30
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	3308      	adds	r3, #8
 8006234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006236:	61ba      	str	r2, [r7, #24]
 8006238:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623a:	6979      	ldr	r1, [r7, #20]
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	e841 2300 	strex	r3, r2, [r1]
 8006242:	613b      	str	r3, [r7, #16]
   return(result);
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1e5      	bne.n	8006216 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2220      	movs	r2, #32
 800624e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8006252:	bf00      	nop
 8006254:	373c      	adds	r7, #60	; 0x3c
 8006256:	46bd      	mov	sp, r7
 8006258:	bc80      	pop	{r7}
 800625a:	4770      	bx	lr

0800625c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800625c:	b480      	push	{r7}
 800625e:	b095      	sub	sp, #84	; 0x54
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800626c:	e853 3f00 	ldrex	r3, [r3]
 8006270:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006274:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006278:	64fb      	str	r3, [r7, #76]	; 0x4c
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	461a      	mov	r2, r3
 8006280:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006282:	643b      	str	r3, [r7, #64]	; 0x40
 8006284:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006286:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006288:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800628a:	e841 2300 	strex	r3, r2, [r1]
 800628e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1e6      	bne.n	8006264 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	3308      	adds	r3, #8
 800629c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629e:	6a3b      	ldr	r3, [r7, #32]
 80062a0:	e853 3f00 	ldrex	r3, [r3]
 80062a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062ac:	f023 0301 	bic.w	r3, r3, #1
 80062b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	3308      	adds	r3, #8
 80062b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062c2:	e841 2300 	strex	r3, r2, [r1]
 80062c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1e3      	bne.n	8006296 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d118      	bne.n	8006308 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	e853 3f00 	ldrex	r3, [r3]
 80062e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	f023 0310 	bic.w	r3, r3, #16
 80062ea:	647b      	str	r3, [r7, #68]	; 0x44
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	461a      	mov	r2, r3
 80062f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062f4:	61bb      	str	r3, [r7, #24]
 80062f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f8:	6979      	ldr	r1, [r7, #20]
 80062fa:	69ba      	ldr	r2, [r7, #24]
 80062fc:	e841 2300 	strex	r3, r2, [r1]
 8006300:	613b      	str	r3, [r7, #16]
   return(result);
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1e6      	bne.n	80062d6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2220      	movs	r2, #32
 800630c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800631c:	bf00      	nop
 800631e:	3754      	adds	r7, #84	; 0x54
 8006320:	46bd      	mov	sp, r7
 8006322:	bc80      	pop	{r7}
 8006324:	4770      	bx	lr

08006326 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b090      	sub	sp, #64	; 0x40
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006332:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0320 	and.w	r3, r3, #32
 800633e:	2b00      	cmp	r3, #0
 8006340:	d137      	bne.n	80063b2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006344:	2200      	movs	r2, #0
 8006346:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800634a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	3308      	adds	r3, #8
 8006350:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006354:	e853 3f00 	ldrex	r3, [r3]
 8006358:	623b      	str	r3, [r7, #32]
   return(result);
 800635a:	6a3b      	ldr	r3, [r7, #32]
 800635c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006360:	63bb      	str	r3, [r7, #56]	; 0x38
 8006362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	3308      	adds	r3, #8
 8006368:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800636a:	633a      	str	r2, [r7, #48]	; 0x30
 800636c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006372:	e841 2300 	strex	r3, r2, [r1]
 8006376:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1e5      	bne.n	800634a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800637e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	e853 3f00 	ldrex	r3, [r3]
 800638a:	60fb      	str	r3, [r7, #12]
   return(result);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006392:	637b      	str	r3, [r7, #52]	; 0x34
 8006394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	461a      	mov	r2, r3
 800639a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800639c:	61fb      	str	r3, [r7, #28]
 800639e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a0:	69b9      	ldr	r1, [r7, #24]
 80063a2:	69fa      	ldr	r2, [r7, #28]
 80063a4:	e841 2300 	strex	r3, r2, [r1]
 80063a8:	617b      	str	r3, [r7, #20]
   return(result);
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1e6      	bne.n	800637e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80063b0:	e002      	b.n	80063b8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80063b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80063b4:	f7fb f88e 	bl	80014d4 <HAL_UART_TxCpltCallback>
}
 80063b8:	bf00      	nop
 80063ba:	3740      	adds	r7, #64	; 0x40
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063cc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f7ff f99a 	bl	8005708 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063d4:	bf00      	nop
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b086      	sub	sp, #24
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063f0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063f8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006404:	2b80      	cmp	r3, #128	; 0x80
 8006406:	d109      	bne.n	800641c <UART_DMAError+0x40>
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	2b21      	cmp	r3, #33	; 0x21
 800640c:	d106      	bne.n	800641c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	2200      	movs	r2, #0
 8006412:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006416:	6978      	ldr	r0, [r7, #20]
 8006418:	f7ff fee0 	bl	80061dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006426:	2b40      	cmp	r3, #64	; 0x40
 8006428:	d109      	bne.n	800643e <UART_DMAError+0x62>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2b22      	cmp	r3, #34	; 0x22
 800642e:	d106      	bne.n	800643e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	2200      	movs	r2, #0
 8006434:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006438:	6978      	ldr	r0, [r7, #20]
 800643a:	f7ff ff0f 	bl	800625c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006444:	f043 0210 	orr.w	r2, r3, #16
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800644e:	6978      	ldr	r0, [r7, #20]
 8006450:	f7ff f963 	bl	800571a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006454:	bf00      	nop
 8006456:	3718      	adds	r7, #24
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006468:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f7ff f94d 	bl	800571a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006480:	bf00      	nop
 8006482:	3710      	adds	r7, #16
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b088      	sub	sp, #32
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	e853 3f00 	ldrex	r3, [r3]
 800649c:	60bb      	str	r3, [r7, #8]
   return(result);
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064a4:	61fb      	str	r3, [r7, #28]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	461a      	mov	r2, r3
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	61bb      	str	r3, [r7, #24]
 80064b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b2:	6979      	ldr	r1, [r7, #20]
 80064b4:	69ba      	ldr	r2, [r7, #24]
 80064b6:	e841 2300 	strex	r3, r2, [r1]
 80064ba:	613b      	str	r3, [r7, #16]
   return(result);
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1e6      	bne.n	8006490 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2220      	movs	r2, #32
 80064c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f7fa ffff 	bl	80014d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064d6:	bf00      	nop
 80064d8:	3720      	adds	r7, #32
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
	...

080064e0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b09c      	sub	sp, #112	; 0x70
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80064ee:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064f8:	2b22      	cmp	r3, #34	; 0x22
 80064fa:	f040 80be 	bne.w	800667a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006504:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006508:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800650c:	b2d9      	uxtb	r1, r3
 800650e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006512:	b2da      	uxtb	r2, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006518:	400a      	ands	r2, r1
 800651a:	b2d2      	uxtb	r2, r2
 800651c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006522:	1c5a      	adds	r2, r3, #1
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800652e:	b29b      	uxth	r3, r3
 8006530:	3b01      	subs	r3, #1
 8006532:	b29a      	uxth	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006540:	b29b      	uxth	r3, r3
 8006542:	2b00      	cmp	r3, #0
 8006544:	f040 80a1 	bne.w	800668a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006550:	e853 3f00 	ldrex	r3, [r3]
 8006554:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006558:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800655c:	66bb      	str	r3, [r7, #104]	; 0x68
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	461a      	mov	r2, r3
 8006564:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006566:	65bb      	str	r3, [r7, #88]	; 0x58
 8006568:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800656c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800656e:	e841 2300 	strex	r3, r2, [r1]
 8006572:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1e6      	bne.n	8006548 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	3308      	adds	r3, #8
 8006580:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006584:	e853 3f00 	ldrex	r3, [r3]
 8006588:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800658a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800658c:	f023 0301 	bic.w	r3, r3, #1
 8006590:	667b      	str	r3, [r7, #100]	; 0x64
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	3308      	adds	r3, #8
 8006598:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800659a:	647a      	str	r2, [r7, #68]	; 0x44
 800659c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065a2:	e841 2300 	strex	r3, r2, [r1]
 80065a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1e5      	bne.n	800657a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2220      	movs	r2, #32
 80065b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a33      	ldr	r2, [pc, #204]	; (8006694 <UART_RxISR_8BIT+0x1b4>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d01f      	beq.n	800660c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d018      	beq.n	800660c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e2:	e853 3f00 	ldrex	r3, [r3]
 80065e6:	623b      	str	r3, [r7, #32]
   return(result);
 80065e8:	6a3b      	ldr	r3, [r7, #32]
 80065ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80065ee:	663b      	str	r3, [r7, #96]	; 0x60
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	461a      	mov	r2, r3
 80065f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065f8:	633b      	str	r3, [r7, #48]	; 0x30
 80065fa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006600:	e841 2300 	strex	r3, r2, [r1]
 8006604:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1e6      	bne.n	80065da <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006610:	2b01      	cmp	r3, #1
 8006612:	d12e      	bne.n	8006672 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	e853 3f00 	ldrex	r3, [r3]
 8006626:	60fb      	str	r3, [r7, #12]
   return(result);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f023 0310 	bic.w	r3, r3, #16
 800662e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	461a      	mov	r2, r3
 8006636:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006638:	61fb      	str	r3, [r7, #28]
 800663a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663c:	69b9      	ldr	r1, [r7, #24]
 800663e:	69fa      	ldr	r2, [r7, #28]
 8006640:	e841 2300 	strex	r3, r2, [r1]
 8006644:	617b      	str	r3, [r7, #20]
   return(result);
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1e6      	bne.n	800661a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	f003 0310 	and.w	r3, r3, #16
 8006656:	2b10      	cmp	r3, #16
 8006658:	d103      	bne.n	8006662 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2210      	movs	r2, #16
 8006660:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006668:	4619      	mov	r1, r3
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f7ff f85e 	bl	800572c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006670:	e00b      	b.n	800668a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f7fa ff44 	bl	8001500 <HAL_UART_RxCpltCallback>
}
 8006678:	e007      	b.n	800668a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	699a      	ldr	r2, [r3, #24]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f042 0208 	orr.w	r2, r2, #8
 8006688:	619a      	str	r2, [r3, #24]
}
 800668a:	bf00      	nop
 800668c:	3770      	adds	r7, #112	; 0x70
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	40008000 	.word	0x40008000

08006698 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b09c      	sub	sp, #112	; 0x70
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80066a6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066b0:	2b22      	cmp	r3, #34	; 0x22
 80066b2:	f040 80be 	bne.w	8006832 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066bc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066c4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80066c6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80066ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80066ce:	4013      	ands	r3, r2
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066d4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066da:	1c9a      	adds	r2, r3, #2
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	3b01      	subs	r3, #1
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	f040 80a1 	bne.w	8006842 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006708:	e853 3f00 	ldrex	r3, [r3]
 800670c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800670e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006710:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006714:	667b      	str	r3, [r7, #100]	; 0x64
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	461a      	mov	r2, r3
 800671c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800671e:	657b      	str	r3, [r7, #84]	; 0x54
 8006720:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006722:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006724:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006726:	e841 2300 	strex	r3, r2, [r1]
 800672a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800672c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1e6      	bne.n	8006700 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	3308      	adds	r3, #8
 8006738:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800673c:	e853 3f00 	ldrex	r3, [r3]
 8006740:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006744:	f023 0301 	bic.w	r3, r3, #1
 8006748:	663b      	str	r3, [r7, #96]	; 0x60
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	3308      	adds	r3, #8
 8006750:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006752:	643a      	str	r2, [r7, #64]	; 0x40
 8006754:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006756:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006758:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800675a:	e841 2300 	strex	r3, r2, [r1]
 800675e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1e5      	bne.n	8006732 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2220      	movs	r2, #32
 800676a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a33      	ldr	r2, [pc, #204]	; (800684c <UART_RxISR_16BIT+0x1b4>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d01f      	beq.n	80067c4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d018      	beq.n	80067c4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006798:	6a3b      	ldr	r3, [r7, #32]
 800679a:	e853 3f00 	ldrex	r3, [r3]
 800679e:	61fb      	str	r3, [r7, #28]
   return(result);
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80067a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	461a      	mov	r2, r3
 80067ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067b2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067b8:	e841 2300 	strex	r3, r2, [r1]
 80067bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1e6      	bne.n	8006792 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d12e      	bne.n	800682a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	e853 3f00 	ldrex	r3, [r3]
 80067de:	60bb      	str	r3, [r7, #8]
   return(result);
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	f023 0310 	bic.w	r3, r3, #16
 80067e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	461a      	mov	r2, r3
 80067ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067f0:	61bb      	str	r3, [r7, #24]
 80067f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f4:	6979      	ldr	r1, [r7, #20]
 80067f6:	69ba      	ldr	r2, [r7, #24]
 80067f8:	e841 2300 	strex	r3, r2, [r1]
 80067fc:	613b      	str	r3, [r7, #16]
   return(result);
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1e6      	bne.n	80067d2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	69db      	ldr	r3, [r3, #28]
 800680a:	f003 0310 	and.w	r3, r3, #16
 800680e:	2b10      	cmp	r3, #16
 8006810:	d103      	bne.n	800681a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2210      	movs	r2, #16
 8006818:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006820:	4619      	mov	r1, r3
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f7fe ff82 	bl	800572c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006828:	e00b      	b.n	8006842 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7fa fe68 	bl	8001500 <HAL_UART_RxCpltCallback>
}
 8006830:	e007      	b.n	8006842 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	699a      	ldr	r2, [r3, #24]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f042 0208 	orr.w	r2, r2, #8
 8006840:	619a      	str	r2, [r3, #24]
}
 8006842:	bf00      	nop
 8006844:	3770      	adds	r7, #112	; 0x70
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	40008000 	.word	0x40008000

08006850 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b0ac      	sub	sp, #176	; 0xb0
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800685e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	69db      	ldr	r3, [r3, #28]
 8006868:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006886:	2b22      	cmp	r3, #34	; 0x22
 8006888:	f040 8182 	bne.w	8006b90 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006892:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006896:	e125      	b.n	8006ae4 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80068a2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80068a6:	b2d9      	uxtb	r1, r3
 80068a8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80068ac:	b2da      	uxtb	r2, r3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068b2:	400a      	ands	r2, r1
 80068b4:	b2d2      	uxtb	r2, r2
 80068b6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068bc:	1c5a      	adds	r2, r3, #1
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	3b01      	subs	r3, #1
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	69db      	ldr	r3, [r3, #28]
 80068da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80068de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068e2:	f003 0307 	and.w	r3, r3, #7
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d053      	beq.n	8006992 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80068ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d011      	beq.n	800691a <UART_RxISR_8BIT_FIFOEN+0xca>
 80068f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80068fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00b      	beq.n	800691a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2201      	movs	r2, #1
 8006908:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006910:	f043 0201 	orr.w	r2, r3, #1
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800691a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	2b00      	cmp	r3, #0
 8006924:	d011      	beq.n	800694a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006926:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800692a:	f003 0301 	and.w	r3, r3, #1
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00b      	beq.n	800694a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2202      	movs	r2, #2
 8006938:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006940:	f043 0204 	orr.w	r2, r3, #4
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800694a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800694e:	f003 0304 	and.w	r3, r3, #4
 8006952:	2b00      	cmp	r3, #0
 8006954:	d011      	beq.n	800697a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006956:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800695a:	f003 0301 	and.w	r3, r3, #1
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00b      	beq.n	800697a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2204      	movs	r2, #4
 8006968:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006970:	f043 0202 	orr.w	r2, r3, #2
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006980:	2b00      	cmp	r3, #0
 8006982:	d006      	beq.n	8006992 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f7fe fec8 	bl	800571a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006998:	b29b      	uxth	r3, r3
 800699a:	2b00      	cmp	r3, #0
 800699c:	f040 80a2 	bne.w	8006ae4 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069a8:	e853 3f00 	ldrex	r3, [r3]
 80069ac:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80069ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	461a      	mov	r2, r3
 80069be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80069c4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80069c8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80069ca:	e841 2300 	strex	r3, r2, [r1]
 80069ce:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80069d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1e4      	bne.n	80069a0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	3308      	adds	r3, #8
 80069dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069e0:	e853 3f00 	ldrex	r3, [r3]
 80069e4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80069e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069ec:	f023 0301 	bic.w	r3, r3, #1
 80069f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	3308      	adds	r3, #8
 80069fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80069fe:	66ba      	str	r2, [r7, #104]	; 0x68
 8006a00:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a02:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006a04:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a06:	e841 2300 	strex	r3, r2, [r1]
 8006a0a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006a0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1e1      	bne.n	80069d6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2220      	movs	r2, #32
 8006a16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a5f      	ldr	r2, [pc, #380]	; (8006ba8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d021      	beq.n	8006a74 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d01a      	beq.n	8006a74 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a46:	e853 3f00 	ldrex	r3, [r3]
 8006a4a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a60:	657b      	str	r3, [r7, #84]	; 0x54
 8006a62:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a64:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006a66:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a68:	e841 2300 	strex	r3, r2, [r1]
 8006a6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d1e4      	bne.n	8006a3e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d130      	bne.n	8006ade <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a8a:	e853 3f00 	ldrex	r3, [r3]
 8006a8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a92:	f023 0310 	bic.w	r3, r3, #16
 8006a96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006aa4:	643b      	str	r3, [r7, #64]	; 0x40
 8006aa6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006aaa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006aac:	e841 2300 	strex	r3, r2, [r1]
 8006ab0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d1e4      	bne.n	8006a82 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	69db      	ldr	r3, [r3, #28]
 8006abe:	f003 0310 	and.w	r3, r3, #16
 8006ac2:	2b10      	cmp	r3, #16
 8006ac4:	d103      	bne.n	8006ace <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2210      	movs	r2, #16
 8006acc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f7fe fe28 	bl	800572c <HAL_UARTEx_RxEventCallback>
 8006adc:	e002      	b.n	8006ae4 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7fa fd0e 	bl	8001500 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006ae4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d006      	beq.n	8006afa <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8006aec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006af0:	f003 0320 	and.w	r3, r3, #32
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f47f aecf 	bne.w	8006898 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b00:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006b04:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d049      	beq.n	8006ba0 <UART_RxISR_8BIT_FIFOEN+0x350>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006b12:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d242      	bcs.n	8006ba0 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	3308      	adds	r3, #8
 8006b20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b22:	6a3b      	ldr	r3, [r7, #32]
 8006b24:	e853 3f00 	ldrex	r3, [r3]
 8006b28:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	3308      	adds	r3, #8
 8006b3a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006b3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b46:	e841 2300 	strex	r3, r2, [r1]
 8006b4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1e3      	bne.n	8006b1a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a15      	ldr	r2, [pc, #84]	; (8006bac <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006b56:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	e853 3f00 	ldrex	r3, [r3]
 8006b64:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	f043 0320 	orr.w	r3, r3, #32
 8006b6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	461a      	mov	r2, r3
 8006b76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b7a:	61bb      	str	r3, [r7, #24]
 8006b7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7e:	6979      	ldr	r1, [r7, #20]
 8006b80:	69ba      	ldr	r2, [r7, #24]
 8006b82:	e841 2300 	strex	r3, r2, [r1]
 8006b86:	613b      	str	r3, [r7, #16]
   return(result);
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1e4      	bne.n	8006b58 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b8e:	e007      	b.n	8006ba0 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	699a      	ldr	r2, [r3, #24]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f042 0208 	orr.w	r2, r2, #8
 8006b9e:	619a      	str	r2, [r3, #24]
}
 8006ba0:	bf00      	nop
 8006ba2:	37b0      	adds	r7, #176	; 0xb0
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	40008000 	.word	0x40008000
 8006bac:	080064e1 	.word	0x080064e1

08006bb0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b0ae      	sub	sp, #184	; 0xb8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006bbe:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	69db      	ldr	r3, [r3, #28]
 8006bc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006be6:	2b22      	cmp	r3, #34	; 0x22
 8006be8:	f040 8186 	bne.w	8006ef8 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006bf2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006bf6:	e129      	b.n	8006e4c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfe:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006c0a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8006c0e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8006c12:	4013      	ands	r3, r2
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c1a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c20:	1c9a      	adds	r2, r3, #2
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	b29a      	uxth	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	69db      	ldr	r3, [r3, #28]
 8006c3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006c42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006c46:	f003 0307 	and.w	r3, r3, #7
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d053      	beq.n	8006cf6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006c52:	f003 0301 	and.w	r3, r3, #1
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d011      	beq.n	8006c7e <UART_RxISR_16BIT_FIFOEN+0xce>
 8006c5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00b      	beq.n	8006c7e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c74:	f043 0201 	orr.w	r2, r3, #1
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006c82:	f003 0302 	and.w	r3, r3, #2
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d011      	beq.n	8006cae <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006c8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c8e:	f003 0301 	and.w	r3, r3, #1
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00b      	beq.n	8006cae <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ca4:	f043 0204 	orr.w	r2, r3, #4
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006cb2:	f003 0304 	and.w	r3, r3, #4
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d011      	beq.n	8006cde <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006cba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00b      	beq.n	8006cde <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2204      	movs	r2, #4
 8006ccc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cd4:	f043 0202 	orr.w	r2, r3, #2
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d006      	beq.n	8006cf6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f7fe fd16 	bl	800571a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	f040 80a4 	bne.w	8006e4c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d0c:	e853 3f00 	ldrex	r3, [r3]
 8006d10:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006d12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	461a      	mov	r2, r3
 8006d22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d2a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006d2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006d32:	e841 2300 	strex	r3, r2, [r1]
 8006d36:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006d38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1e2      	bne.n	8006d04 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	3308      	adds	r3, #8
 8006d44:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d48:	e853 3f00 	ldrex	r3, [r3]
 8006d4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006d4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d54:	f023 0301 	bic.w	r3, r3, #1
 8006d58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	3308      	adds	r3, #8
 8006d62:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006d66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006d68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006d6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d6e:	e841 2300 	strex	r3, r2, [r1]
 8006d72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006d74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d1e1      	bne.n	8006d3e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2220      	movs	r2, #32
 8006d7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a5f      	ldr	r2, [pc, #380]	; (8006f10 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d021      	beq.n	8006ddc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d01a      	beq.n	8006ddc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dae:	e853 3f00 	ldrex	r3, [r3]
 8006db2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006db4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006db6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006dba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006dc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8006dca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dcc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006dce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006dd0:	e841 2300 	strex	r3, r2, [r1]
 8006dd4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006dd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1e4      	bne.n	8006da6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d130      	bne.n	8006e46 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df2:	e853 3f00 	ldrex	r3, [r3]
 8006df6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dfa:	f023 0310 	bic.w	r3, r3, #16
 8006dfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	461a      	mov	r2, r3
 8006e08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e0c:	647b      	str	r3, [r7, #68]	; 0x44
 8006e0e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e14:	e841 2300 	strex	r3, r2, [r1]
 8006e18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1e4      	bne.n	8006dea <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	69db      	ldr	r3, [r3, #28]
 8006e26:	f003 0310 	and.w	r3, r3, #16
 8006e2a:	2b10      	cmp	r3, #16
 8006e2c:	d103      	bne.n	8006e36 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2210      	movs	r2, #16
 8006e34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7fe fc74 	bl	800572c <HAL_UARTEx_RxEventCallback>
 8006e44:	e002      	b.n	8006e4c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f7fa fb5a 	bl	8001500 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006e4c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d006      	beq.n	8006e62 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8006e54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e58:	f003 0320 	and.w	r3, r3, #32
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f47f aecb 	bne.w	8006bf8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e68:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006e6c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d049      	beq.n	8006f08 <UART_RxISR_16BIT_FIFOEN+0x358>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006e7a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d242      	bcs.n	8006f08 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	3308      	adds	r3, #8
 8006e88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8c:	e853 3f00 	ldrex	r3, [r3]
 8006e90:	623b      	str	r3, [r7, #32]
   return(result);
 8006e92:	6a3b      	ldr	r3, [r7, #32]
 8006e94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	3308      	adds	r3, #8
 8006ea2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006ea6:	633a      	str	r2, [r7, #48]	; 0x30
 8006ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006eac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eae:	e841 2300 	strex	r3, r2, [r1]
 8006eb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1e3      	bne.n	8006e82 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a15      	ldr	r2, [pc, #84]	; (8006f14 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8006ebe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	e853 3f00 	ldrex	r3, [r3]
 8006ecc:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f043 0320 	orr.w	r3, r3, #32
 8006ed4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	461a      	mov	r2, r3
 8006ede:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ee2:	61fb      	str	r3, [r7, #28]
 8006ee4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee6:	69b9      	ldr	r1, [r7, #24]
 8006ee8:	69fa      	ldr	r2, [r7, #28]
 8006eea:	e841 2300 	strex	r3, r2, [r1]
 8006eee:	617b      	str	r3, [r7, #20]
   return(result);
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1e4      	bne.n	8006ec0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ef6:	e007      	b.n	8006f08 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	699a      	ldr	r2, [r3, #24]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f042 0208 	orr.w	r2, r2, #8
 8006f06:	619a      	str	r2, [r3, #24]
}
 8006f08:	bf00      	nop
 8006f0a:	37b8      	adds	r7, #184	; 0xb8
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	40008000 	.word	0x40008000
 8006f14:	08006699 	.word	0x08006699

08006f18 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bc80      	pop	{r7}
 8006f28:	4770      	bx	lr

08006f2a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b083      	sub	sp, #12
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006f32:	bf00      	nop
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bc80      	pop	{r7}
 8006f3a:	4770      	bx	lr

08006f3c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bc80      	pop	{r7}
 8006f4c:	4770      	bx	lr

08006f4e <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b088      	sub	sp, #32
 8006f52:	af02      	add	r7, sp, #8
 8006f54:	60f8      	str	r0, [r7, #12]
 8006f56:	1d3b      	adds	r3, r7, #4
 8006f58:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d101      	bne.n	8006f6e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8006f6a:	2302      	movs	r3, #2
 8006f6c:	e046      	b.n	8006ffc <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2201      	movs	r2, #1
 8006f72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2224      	movs	r2, #36	; 0x24
 8006f7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f022 0201 	bic.w	r2, r2, #1
 8006f8c:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	430a      	orrs	r2, r1
 8006fa0:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d105      	bne.n	8006fb4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8006fa8:	1d3b      	adds	r3, r7, #4
 8006faa:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f000 f911 	bl	80071d6 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f042 0201 	orr.w	r2, r2, #1
 8006fc2:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fc4:	f7f9 fd9c 	bl	8000b00 <HAL_GetTick>
 8006fc8:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fce:	9300      	str	r3, [sp, #0]
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f7fe ff16 	bl	8005e0a <UART_WaitOnFlagUntilTimeout>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d002      	beq.n	8006fea <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	75fb      	strb	r3, [r7, #23]
 8006fe8:	e003      	b.n	8006ff2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2220      	movs	r2, #32
 8006fee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return status;
 8006ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3718      	adds	r7, #24
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8007004:	b480      	push	{r7}
 8007006:	b089      	sub	sp, #36	; 0x24
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007012:	2b01      	cmp	r3, #1
 8007014:	d101      	bne.n	800701a <HAL_UARTEx_EnableStopMode+0x16>
 8007016:	2302      	movs	r3, #2
 8007018:	e021      	b.n	800705e <HAL_UARTEx_EnableStopMode+0x5a>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2201      	movs	r2, #1
 800701e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	e853 3f00 	ldrex	r3, [r3]
 800702e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	f043 0302 	orr.w	r3, r3, #2
 8007036:	61fb      	str	r3, [r7, #28]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	461a      	mov	r2, r3
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	61bb      	str	r3, [r7, #24]
 8007042:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007044:	6979      	ldr	r1, [r7, #20]
 8007046:	69ba      	ldr	r2, [r7, #24]
 8007048:	e841 2300 	strex	r3, r2, [r1]
 800704c:	613b      	str	r3, [r7, #16]
   return(result);
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d1e6      	bne.n	8007022 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3724      	adds	r7, #36	; 0x24
 8007062:	46bd      	mov	sp, r7
 8007064:	bc80      	pop	{r7}
 8007066:	4770      	bx	lr

08007068 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007076:	2b01      	cmp	r3, #1
 8007078:	d101      	bne.n	800707e <HAL_UARTEx_EnableFifoMode+0x16>
 800707a:	2302      	movs	r3, #2
 800707c:	e02b      	b.n	80070d6 <HAL_UARTEx_EnableFifoMode+0x6e>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2201      	movs	r2, #1
 8007082:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2224      	movs	r2, #36	; 0x24
 800708a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f022 0201 	bic.w	r2, r2, #1
 80070a4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80070ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80070b4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f8ac 	bl	800721c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2220      	movs	r2, #32
 80070c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b084      	sub	sp, #16
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
 80070e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d101      	bne.n	80070f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80070f2:	2302      	movs	r3, #2
 80070f4:	e02d      	b.n	8007152 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2224      	movs	r2, #36	; 0x24
 8007102:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f022 0201 	bic.w	r2, r2, #1
 800711c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	683a      	ldr	r2, [r7, #0]
 800712e:	430a      	orrs	r2, r1
 8007130:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f872 	bl	800721c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2220      	movs	r2, #32
 8007144:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3710      	adds	r7, #16
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b084      	sub	sp, #16
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
 8007162:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800716a:	2b01      	cmp	r3, #1
 800716c:	d101      	bne.n	8007172 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800716e:	2302      	movs	r3, #2
 8007170:	e02d      	b.n	80071ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2224      	movs	r2, #36	; 0x24
 800717e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f022 0201 	bic.w	r2, r2, #1
 8007198:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	683a      	ldr	r2, [r7, #0]
 80071aa:	430a      	orrs	r2, r1
 80071ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f834 	bl	800721c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2220      	movs	r2, #32
 80071c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80071d6:	b480      	push	{r7}
 80071d8:	b085      	sub	sp, #20
 80071da:	af00      	add	r7, sp, #0
 80071dc:	60f8      	str	r0, [r7, #12]
 80071de:	1d3b      	adds	r3, r7, #4
 80071e0:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	f023 0210 	bic.w	r2, r3, #16
 80071ee:	893b      	ldrh	r3, [r7, #8]
 80071f0:	4619      	mov	r1, r3
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	430a      	orrs	r2, r1
 80071f8:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 8007204:	7abb      	ldrb	r3, [r7, #10]
 8007206:	061a      	lsls	r2, r3, #24
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	430a      	orrs	r2, r1
 800720e:	605a      	str	r2, [r3, #4]
}
 8007210:	bf00      	nop
 8007212:	3714      	adds	r7, #20
 8007214:	46bd      	mov	sp, r7
 8007216:	bc80      	pop	{r7}
 8007218:	4770      	bx	lr
	...

0800721c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800721c:	b480      	push	{r7}
 800721e:	b085      	sub	sp, #20
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007228:	2b00      	cmp	r3, #0
 800722a:	d108      	bne.n	800723e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800723c:	e031      	b.n	80072a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800723e:	2308      	movs	r3, #8
 8007240:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007242:	2308      	movs	r3, #8
 8007244:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	0e5b      	lsrs	r3, r3, #25
 800724e:	b2db      	uxtb	r3, r3
 8007250:	f003 0307 	and.w	r3, r3, #7
 8007254:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	0f5b      	lsrs	r3, r3, #29
 800725e:	b2db      	uxtb	r3, r3
 8007260:	f003 0307 	and.w	r3, r3, #7
 8007264:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007266:	7bbb      	ldrb	r3, [r7, #14]
 8007268:	7b3a      	ldrb	r2, [r7, #12]
 800726a:	4910      	ldr	r1, [pc, #64]	; (80072ac <UARTEx_SetNbDataToProcess+0x90>)
 800726c:	5c8a      	ldrb	r2, [r1, r2]
 800726e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007272:	7b3a      	ldrb	r2, [r7, #12]
 8007274:	490e      	ldr	r1, [pc, #56]	; (80072b0 <UARTEx_SetNbDataToProcess+0x94>)
 8007276:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007278:	fb93 f3f2 	sdiv	r3, r3, r2
 800727c:	b29a      	uxth	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007284:	7bfb      	ldrb	r3, [r7, #15]
 8007286:	7b7a      	ldrb	r2, [r7, #13]
 8007288:	4908      	ldr	r1, [pc, #32]	; (80072ac <UARTEx_SetNbDataToProcess+0x90>)
 800728a:	5c8a      	ldrb	r2, [r1, r2]
 800728c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007290:	7b7a      	ldrb	r2, [r7, #13]
 8007292:	4907      	ldr	r1, [pc, #28]	; (80072b0 <UARTEx_SetNbDataToProcess+0x94>)
 8007294:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007296:	fb93 f3f2 	sdiv	r3, r3, r2
 800729a:	b29a      	uxth	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80072a2:	bf00      	nop
 80072a4:	3714      	adds	r7, #20
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bc80      	pop	{r7}
 80072aa:	4770      	bx	lr
 80072ac:	0800c170 	.word	0x0800c170
 80072b0:	0800c178 	.word	0x0800c178

080072b4 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af02      	add	r7, sp, #8
 80072ba:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 80072bc:	4a24      	ldr	r2, [pc, #144]	; (8007350 <RadioInit+0x9c>)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 80072c2:	4b24      	ldr	r3, [pc, #144]	; (8007354 <RadioInit+0xa0>)
 80072c4:	2200      	movs	r2, #0
 80072c6:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 80072c8:	4b22      	ldr	r3, [pc, #136]	; (8007354 <RadioInit+0xa0>)
 80072ca:	2200      	movs	r2, #0
 80072cc:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 80072ce:	4b21      	ldr	r3, [pc, #132]	; (8007354 <RadioInit+0xa0>)
 80072d0:	2200      	movs	r2, #0
 80072d2:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80072d4:	4b1f      	ldr	r3, [pc, #124]	; (8007354 <RadioInit+0xa0>)
 80072d6:	2200      	movs	r2, #0
 80072d8:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 80072da:	481f      	ldr	r0, [pc, #124]	; (8007358 <RadioInit+0xa4>)
 80072dc:	f001 ffc2 	bl	8009264 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 80072e0:	4b1c      	ldr	r3, [pc, #112]	; (8007354 <RadioInit+0xa0>)
 80072e2:	2200      	movs	r2, #0
 80072e4:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 80072e6:	4b1b      	ldr	r3, [pc, #108]	; (8007354 <RadioInit+0xa0>)
 80072e8:	2200      	movs	r2, #0
 80072ea:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 80072ec:	f002 fa56 	bl	800979c <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80072f0:	2100      	movs	r1, #0
 80072f2:	2000      	movs	r0, #0
 80072f4:	f002 fe22 	bl	8009f3c <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 80072f8:	2204      	movs	r2, #4
 80072fa:	2100      	movs	r1, #0
 80072fc:	2001      	movs	r0, #1
 80072fe:	f002 fbdf 	bl	8009ac0 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8007302:	2300      	movs	r3, #0
 8007304:	2200      	movs	r2, #0
 8007306:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800730a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800730e:	f002 fb0f 	bl	8009930 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8007312:	f000 fe99 	bl	8008048 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8007316:	2300      	movs	r3, #0
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	4b10      	ldr	r3, [pc, #64]	; (800735c <RadioInit+0xa8>)
 800731c:	2200      	movs	r2, #0
 800731e:	f04f 31ff 	mov.w	r1, #4294967295
 8007322:	480f      	ldr	r0, [pc, #60]	; (8007360 <RadioInit+0xac>)
 8007324:	f004 f86e 	bl	800b404 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8007328:	2300      	movs	r3, #0
 800732a:	9300      	str	r3, [sp, #0]
 800732c:	4b0d      	ldr	r3, [pc, #52]	; (8007364 <RadioInit+0xb0>)
 800732e:	2200      	movs	r2, #0
 8007330:	f04f 31ff 	mov.w	r1, #4294967295
 8007334:	480c      	ldr	r0, [pc, #48]	; (8007368 <RadioInit+0xb4>)
 8007336:	f004 f865 	bl	800b404 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 800733a:	4809      	ldr	r0, [pc, #36]	; (8007360 <RadioInit+0xac>)
 800733c:	f004 f906 	bl	800b54c <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8007340:	4809      	ldr	r0, [pc, #36]	; (8007368 <RadioInit+0xb4>)
 8007342:	f004 f903 	bl	800b54c <UTIL_TIMER_Stop>
}
 8007346:	bf00      	nop
 8007348:	3708      	adds	r7, #8
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	20000284 	.word	0x20000284
 8007354:	20000288 	.word	0x20000288
 8007358:	08008441 	.word	0x08008441
 800735c:	080083c9 	.word	0x080083c9
 8007360:	200002e4 	.word	0x200002e4
 8007364:	080083dd 	.word	0x080083dd
 8007368:	200002fc 	.word	0x200002fc

0800736c <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 800736c:	b580      	push	{r7, lr}
 800736e:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8007370:	f001 ffc0 	bl	80092f4 <SUBGRF_GetOperatingMode>
 8007374:	4603      	mov	r3, r0
 8007376:	2b07      	cmp	r3, #7
 8007378:	d00a      	beq.n	8007390 <RadioGetStatus+0x24>
 800737a:	2b07      	cmp	r3, #7
 800737c:	dc0a      	bgt.n	8007394 <RadioGetStatus+0x28>
 800737e:	2b04      	cmp	r3, #4
 8007380:	d002      	beq.n	8007388 <RadioGetStatus+0x1c>
 8007382:	2b05      	cmp	r3, #5
 8007384:	d002      	beq.n	800738c <RadioGetStatus+0x20>
 8007386:	e005      	b.n	8007394 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8007388:	2302      	movs	r3, #2
 800738a:	e004      	b.n	8007396 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 800738c:	2301      	movs	r3, #1
 800738e:	e002      	b.n	8007396 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8007390:	2303      	movs	r3, #3
 8007392:	e000      	b.n	8007396 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8007394:	2300      	movs	r3, #0
    }
}
 8007396:	4618      	mov	r0, r3
 8007398:	bd80      	pop	{r7, pc}
	...

0800739c <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	4603      	mov	r3, r0
 80073a4:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 80073a6:	4a2a      	ldr	r2, [pc, #168]	; (8007450 <RadioSetModem+0xb4>)
 80073a8:	79fb      	ldrb	r3, [r7, #7]
 80073aa:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 80073ac:	79fb      	ldrb	r3, [r7, #7]
 80073ae:	4618      	mov	r0, r3
 80073b0:	f003 f997 	bl	800a6e2 <RFW_SetRadioModem>
    switch( modem )
 80073b4:	79fb      	ldrb	r3, [r7, #7]
 80073b6:	2b05      	cmp	r3, #5
 80073b8:	d80e      	bhi.n	80073d8 <RadioSetModem+0x3c>
 80073ba:	a201      	add	r2, pc, #4	; (adr r2, 80073c0 <RadioSetModem+0x24>)
 80073bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c0:	080073e7 	.word	0x080073e7
 80073c4:	080073f5 	.word	0x080073f5
 80073c8:	080073d9 	.word	0x080073d9
 80073cc:	0800741b 	.word	0x0800741b
 80073d0:	08007429 	.word	0x08007429
 80073d4:	08007437 	.word	0x08007437
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 80073d8:	2003      	movs	r0, #3
 80073da:	f002 fb4b 	bl	8009a74 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80073de:	4b1c      	ldr	r3, [pc, #112]	; (8007450 <RadioSetModem+0xb4>)
 80073e0:	2200      	movs	r2, #0
 80073e2:	735a      	strb	r2, [r3, #13]
        break;
 80073e4:	e02f      	b.n	8007446 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80073e6:	2000      	movs	r0, #0
 80073e8:	f002 fb44 	bl	8009a74 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80073ec:	4b18      	ldr	r3, [pc, #96]	; (8007450 <RadioSetModem+0xb4>)
 80073ee:	2200      	movs	r2, #0
 80073f0:	735a      	strb	r2, [r3, #13]
        break;
 80073f2:	e028      	b.n	8007446 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80073f4:	2001      	movs	r0, #1
 80073f6:	f002 fb3d 	bl	8009a74 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80073fa:	4b15      	ldr	r3, [pc, #84]	; (8007450 <RadioSetModem+0xb4>)
 80073fc:	7b5a      	ldrb	r2, [r3, #13]
 80073fe:	4b14      	ldr	r3, [pc, #80]	; (8007450 <RadioSetModem+0xb4>)
 8007400:	7b1b      	ldrb	r3, [r3, #12]
 8007402:	429a      	cmp	r2, r3
 8007404:	d01e      	beq.n	8007444 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8007406:	4b12      	ldr	r3, [pc, #72]	; (8007450 <RadioSetModem+0xb4>)
 8007408:	7b1a      	ldrb	r2, [r3, #12]
 800740a:	4b11      	ldr	r3, [pc, #68]	; (8007450 <RadioSetModem+0xb4>)
 800740c:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 800740e:	4b10      	ldr	r3, [pc, #64]	; (8007450 <RadioSetModem+0xb4>)
 8007410:	7b5b      	ldrb	r3, [r3, #13]
 8007412:	4618      	mov	r0, r3
 8007414:	f000 ffa2 	bl	800835c <RadioSetPublicNetwork>
        }
        break;
 8007418:	e014      	b.n	8007444 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800741a:	2002      	movs	r0, #2
 800741c:	f002 fb2a 	bl	8009a74 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007420:	4b0b      	ldr	r3, [pc, #44]	; (8007450 <RadioSetModem+0xb4>)
 8007422:	2200      	movs	r2, #0
 8007424:	735a      	strb	r2, [r3, #13]
        break;
 8007426:	e00e      	b.n	8007446 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8007428:	2002      	movs	r0, #2
 800742a:	f002 fb23 	bl	8009a74 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800742e:	4b08      	ldr	r3, [pc, #32]	; (8007450 <RadioSetModem+0xb4>)
 8007430:	2200      	movs	r2, #0
 8007432:	735a      	strb	r2, [r3, #13]
        break;
 8007434:	e007      	b.n	8007446 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8007436:	2000      	movs	r0, #0
 8007438:	f002 fb1c 	bl	8009a74 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800743c:	4b04      	ldr	r3, [pc, #16]	; (8007450 <RadioSetModem+0xb4>)
 800743e:	2200      	movs	r2, #0
 8007440:	735a      	strb	r2, [r3, #13]
        break;
 8007442:	e000      	b.n	8007446 <RadioSetModem+0xaa>
        break;
 8007444:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8007446:	bf00      	nop
 8007448:	3708      	adds	r7, #8
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	20000288 	.word	0x20000288

08007454 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f002 fac3 	bl	80099e8 <SUBGRF_SetRfFrequency>
}
 8007462:	bf00      	nop
 8007464:	3708      	adds	r7, #8
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b090      	sub	sp, #64	; 0x40
 800746e:	af0a      	add	r7, sp, #40	; 0x28
 8007470:	60f8      	str	r0, [r7, #12]
 8007472:	60b9      	str	r1, [r7, #8]
 8007474:	603b      	str	r3, [r7, #0]
 8007476:	4613      	mov	r3, r2
 8007478:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 800747a:	2301      	movs	r3, #1
 800747c:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 800747e:	2300      	movs	r3, #0
 8007480:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8007482:	2300      	movs	r3, #0
 8007484:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8007486:	f000 fdf2 	bl	800806e <RadioStandby>

    RadioSetModem( MODEM_FSK );
 800748a:	2000      	movs	r0, #0
 800748c:	f7ff ff86 	bl	800739c <RadioSetModem>

    RadioSetChannel( freq );
 8007490:	68f8      	ldr	r0, [r7, #12]
 8007492:	f7ff ffdf 	bl	8007454 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8007496:	2301      	movs	r3, #1
 8007498:	9309      	str	r3, [sp, #36]	; 0x24
 800749a:	2300      	movs	r3, #0
 800749c:	9308      	str	r3, [sp, #32]
 800749e:	2300      	movs	r3, #0
 80074a0:	9307      	str	r3, [sp, #28]
 80074a2:	2300      	movs	r3, #0
 80074a4:	9306      	str	r3, [sp, #24]
 80074a6:	2300      	movs	r3, #0
 80074a8:	9305      	str	r3, [sp, #20]
 80074aa:	2300      	movs	r3, #0
 80074ac:	9304      	str	r3, [sp, #16]
 80074ae:	2300      	movs	r3, #0
 80074b0:	9303      	str	r3, [sp, #12]
 80074b2:	2300      	movs	r3, #0
 80074b4:	9302      	str	r3, [sp, #8]
 80074b6:	2303      	movs	r3, #3
 80074b8:	9301      	str	r3, [sp, #4]
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	9300      	str	r3, [sp, #0]
 80074be:	2300      	movs	r3, #0
 80074c0:	f44f 7216 	mov.w	r2, #600	; 0x258
 80074c4:	68b9      	ldr	r1, [r7, #8]
 80074c6:	2000      	movs	r0, #0
 80074c8:	f000 f83c 	bl	8007544 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 80074cc:	2000      	movs	r0, #0
 80074ce:	f000 fdd5 	bl	800807c <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80074d2:	f000 ff71 	bl	80083b8 <RadioGetWakeupTime>
 80074d6:	4603      	mov	r3, r0
 80074d8:	4618      	mov	r0, r3
 80074da:	f7f9 fb25 	bl	8000b28 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80074de:	f004 f94f 	bl	800b780 <UTIL_TIMER_GetCurrentTime>
 80074e2:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80074e4:	e00d      	b.n	8007502 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 80074e6:	2000      	movs	r0, #0
 80074e8:	f000 feb6 	bl	8008258 <RadioRssi>
 80074ec:	4603      	mov	r3, r0
 80074ee:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 80074f0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80074f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	dd02      	ble.n	8007502 <RadioIsChannelFree+0x98>
        {
            status = false;
 80074fc:	2300      	movs	r3, #0
 80074fe:	75fb      	strb	r3, [r7, #23]
            break;
 8007500:	e006      	b.n	8007510 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8007502:	6938      	ldr	r0, [r7, #16]
 8007504:	f004 f94e 	bl	800b7a4 <UTIL_TIMER_GetElapsedTime>
 8007508:	4602      	mov	r2, r0
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	4293      	cmp	r3, r2
 800750e:	d8ea      	bhi.n	80074e6 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8007510:	f000 fdad 	bl	800806e <RadioStandby>

    return status;
 8007514:	7dfb      	ldrb	r3, [r7, #23]
}
 8007516:	4618      	mov	r0, r3
 8007518:	3718      	adds	r7, #24
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <RadioRandom>:

static uint32_t RadioRandom( void )
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b082      	sub	sp, #8
 8007522:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8007524:	2300      	movs	r3, #0
 8007526:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8007528:	2300      	movs	r3, #0
 800752a:	2200      	movs	r2, #0
 800752c:	2100      	movs	r1, #0
 800752e:	2000      	movs	r0, #0
 8007530:	f002 f9fe 	bl	8009930 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8007534:	f001 ffaf 	bl	8009496 <SUBGRF_GetRandom>
 8007538:	6078      	str	r0, [r7, #4]

    return rnd;
 800753a:	687b      	ldr	r3, [r7, #4]
}
 800753c:	4618      	mov	r0, r3
 800753e:	3708      	adds	r7, #8
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b08a      	sub	sp, #40	; 0x28
 8007548:	af00      	add	r7, sp, #0
 800754a:	60b9      	str	r1, [r7, #8]
 800754c:	607a      	str	r2, [r7, #4]
 800754e:	461a      	mov	r2, r3
 8007550:	4603      	mov	r3, r0
 8007552:	73fb      	strb	r3, [r7, #15]
 8007554:	4613      	mov	r3, r2
 8007556:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8007558:	4ab9      	ldr	r2, [pc, #740]	; (8007840 <RadioSetRxConfig+0x2fc>)
 800755a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800755e:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8007560:	f003 f87d 	bl	800a65e <RFW_DeInit>
    if( rxContinuous == true )
 8007564:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8007568:	2b00      	cmp	r3, #0
 800756a:	d001      	beq.n	8007570 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 800756c:	2300      	movs	r3, #0
 800756e:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8007570:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007574:	2b00      	cmp	r3, #0
 8007576:	d004      	beq.n	8007582 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8007578:	4ab2      	ldr	r2, [pc, #712]	; (8007844 <RadioSetRxConfig+0x300>)
 800757a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800757e:	7013      	strb	r3, [r2, #0]
 8007580:	e002      	b.n	8007588 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8007582:	4bb0      	ldr	r3, [pc, #704]	; (8007844 <RadioSetRxConfig+0x300>)
 8007584:	22ff      	movs	r2, #255	; 0xff
 8007586:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8007588:	7bfb      	ldrb	r3, [r7, #15]
 800758a:	2b05      	cmp	r3, #5
 800758c:	d009      	beq.n	80075a2 <RadioSetRxConfig+0x5e>
 800758e:	2b05      	cmp	r3, #5
 8007590:	f300 81d7 	bgt.w	8007942 <RadioSetRxConfig+0x3fe>
 8007594:	2b00      	cmp	r3, #0
 8007596:	f000 80bf 	beq.w	8007718 <RadioSetRxConfig+0x1d4>
 800759a:	2b01      	cmp	r3, #1
 800759c:	f000 8124 	beq.w	80077e8 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 80075a0:	e1cf      	b.n	8007942 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 80075a2:	2001      	movs	r0, #1
 80075a4:	f002 f8bc 	bl	8009720 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80075a8:	4ba5      	ldr	r3, [pc, #660]	; (8007840 <RadioSetRxConfig+0x2fc>)
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80075b0:	4aa3      	ldr	r2, [pc, #652]	; (8007840 <RadioSetRxConfig+0x2fc>)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 80075b6:	4ba2      	ldr	r3, [pc, #648]	; (8007840 <RadioSetRxConfig+0x2fc>)
 80075b8:	2209      	movs	r2, #9
 80075ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 80075be:	4ba0      	ldr	r3, [pc, #640]	; (8007840 <RadioSetRxConfig+0x2fc>)
 80075c0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80075c4:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80075c6:	68b8      	ldr	r0, [r7, #8]
 80075c8:	f002 ff7c 	bl	800a4c4 <SUBGRF_GetFskBandwidthRegValue>
 80075cc:	4603      	mov	r3, r0
 80075ce:	461a      	mov	r2, r3
 80075d0:	4b9b      	ldr	r3, [pc, #620]	; (8007840 <RadioSetRxConfig+0x2fc>)
 80075d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80075d6:	4b9a      	ldr	r3, [pc, #616]	; (8007840 <RadioSetRxConfig+0x2fc>)
 80075d8:	2200      	movs	r2, #0
 80075da:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80075dc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80075de:	00db      	lsls	r3, r3, #3
 80075e0:	b29a      	uxth	r2, r3
 80075e2:	4b97      	ldr	r3, [pc, #604]	; (8007840 <RadioSetRxConfig+0x2fc>)
 80075e4:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 80075e6:	4b96      	ldr	r3, [pc, #600]	; (8007840 <RadioSetRxConfig+0x2fc>)
 80075e8:	2200      	movs	r2, #0
 80075ea:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80075ec:	4b94      	ldr	r3, [pc, #592]	; (8007840 <RadioSetRxConfig+0x2fc>)
 80075ee:	2210      	movs	r2, #16
 80075f0:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80075f2:	4b93      	ldr	r3, [pc, #588]	; (8007840 <RadioSetRxConfig+0x2fc>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80075f8:	4b91      	ldr	r3, [pc, #580]	; (8007840 <RadioSetRxConfig+0x2fc>)
 80075fa:	2200      	movs	r2, #0
 80075fc:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80075fe:	4b91      	ldr	r3, [pc, #580]	; (8007844 <RadioSetRxConfig+0x300>)
 8007600:	781a      	ldrb	r2, [r3, #0]
 8007602:	4b8f      	ldr	r3, [pc, #572]	; (8007840 <RadioSetRxConfig+0x2fc>)
 8007604:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8007606:	4b8e      	ldr	r3, [pc, #568]	; (8007840 <RadioSetRxConfig+0x2fc>)
 8007608:	2201      	movs	r2, #1
 800760a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 800760c:	4b8c      	ldr	r3, [pc, #560]	; (8007840 <RadioSetRxConfig+0x2fc>)
 800760e:	2200      	movs	r2, #0
 8007610:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8007612:	2005      	movs	r0, #5
 8007614:	f7ff fec2 	bl	800739c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007618:	488b      	ldr	r0, [pc, #556]	; (8007848 <RadioSetRxConfig+0x304>)
 800761a:	f002 fb1f 	bl	8009c5c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800761e:	488b      	ldr	r0, [pc, #556]	; (800784c <RadioSetRxConfig+0x308>)
 8007620:	f002 fbee 	bl	8009e00 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8007624:	4a8a      	ldr	r2, [pc, #552]	; (8007850 <RadioSetRxConfig+0x30c>)
 8007626:	f107 031c 	add.w	r3, r7, #28
 800762a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800762e:	e883 0003 	stmia.w	r3, {r0, r1}
 8007632:	f107 031c 	add.w	r3, r7, #28
 8007636:	4618      	mov	r0, r3
 8007638:	f001 feab 	bl	8009392 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800763c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007640:	f001 fef6 	bl	8009430 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8007644:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8007648:	f000 fe25 	bl	8008296 <RadioRead>
 800764c:	4603      	mov	r3, r0
 800764e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8007652:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007656:	f023 0310 	bic.w	r3, r3, #16
 800765a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 800765e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007662:	4619      	mov	r1, r3
 8007664:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8007668:	f000 fe03 	bl	8008272 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 800766c:	2104      	movs	r1, #4
 800766e:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8007672:	f000 fdfe 	bl	8008272 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8007676:	f640 009b 	movw	r0, #2203	; 0x89b
 800767a:	f000 fe0c 	bl	8008296 <RadioRead>
 800767e:	4603      	mov	r3, r0
 8007680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8007684:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007688:	f023 031c 	bic.w	r3, r3, #28
 800768c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8007690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007694:	f043 0308 	orr.w	r3, r3, #8
 8007698:	b2db      	uxtb	r3, r3
 800769a:	4619      	mov	r1, r3
 800769c:	f640 009b 	movw	r0, #2203	; 0x89b
 80076a0:	f000 fde7 	bl	8008272 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 80076a4:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80076a8:	f000 fdf5 	bl	8008296 <RadioRead>
 80076ac:	4603      	mov	r3, r0
 80076ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80076b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076b6:	f023 0318 	bic.w	r3, r3, #24
 80076ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 80076be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076c2:	f043 0318 	orr.w	r3, r3, #24
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	4619      	mov	r1, r3
 80076ca:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80076ce:	f000 fdd0 	bl	8008272 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 80076d2:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80076d6:	f000 fdde 	bl	8008296 <RadioRead>
 80076da:	4603      	mov	r3, r0
 80076dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80076e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 80076ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076f0:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	4619      	mov	r1, r3
 80076f8:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80076fc:	f000 fdb9 	bl	8008272 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8007700:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007702:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007706:	fb02 f303 	mul.w	r3, r2, r3
 800770a:	461a      	mov	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007712:	4a4b      	ldr	r2, [pc, #300]	; (8007840 <RadioSetRxConfig+0x2fc>)
 8007714:	6093      	str	r3, [r2, #8]
            break;
 8007716:	e115      	b.n	8007944 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8007718:	2000      	movs	r0, #0
 800771a:	f002 f801 	bl	8009720 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800771e:	4b48      	ldr	r3, [pc, #288]	; (8007840 <RadioSetRxConfig+0x2fc>)
 8007720:	2200      	movs	r2, #0
 8007722:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8007726:	4a46      	ldr	r2, [pc, #280]	; (8007840 <RadioSetRxConfig+0x2fc>)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800772c:	4b44      	ldr	r3, [pc, #272]	; (8007840 <RadioSetRxConfig+0x2fc>)
 800772e:	220b      	movs	r2, #11
 8007730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8007734:	68b8      	ldr	r0, [r7, #8]
 8007736:	f002 fec5 	bl	800a4c4 <SUBGRF_GetFskBandwidthRegValue>
 800773a:	4603      	mov	r3, r0
 800773c:	461a      	mov	r2, r3
 800773e:	4b40      	ldr	r3, [pc, #256]	; (8007840 <RadioSetRxConfig+0x2fc>)
 8007740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007744:	4b3e      	ldr	r3, [pc, #248]	; (8007840 <RadioSetRxConfig+0x2fc>)
 8007746:	2200      	movs	r2, #0
 8007748:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800774a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800774c:	00db      	lsls	r3, r3, #3
 800774e:	b29a      	uxth	r2, r3
 8007750:	4b3b      	ldr	r3, [pc, #236]	; (8007840 <RadioSetRxConfig+0x2fc>)
 8007752:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8007754:	4b3a      	ldr	r3, [pc, #232]	; (8007840 <RadioSetRxConfig+0x2fc>)
 8007756:	2204      	movs	r2, #4
 8007758:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800775a:	4b39      	ldr	r3, [pc, #228]	; (8007840 <RadioSetRxConfig+0x2fc>)
 800775c:	2218      	movs	r2, #24
 800775e:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8007760:	4b37      	ldr	r3, [pc, #220]	; (8007840 <RadioSetRxConfig+0x2fc>)
 8007762:	2200      	movs	r2, #0
 8007764:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8007766:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800776a:	f083 0301 	eor.w	r3, r3, #1
 800776e:	b2db      	uxtb	r3, r3
 8007770:	461a      	mov	r2, r3
 8007772:	4b33      	ldr	r3, [pc, #204]	; (8007840 <RadioSetRxConfig+0x2fc>)
 8007774:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8007776:	4b33      	ldr	r3, [pc, #204]	; (8007844 <RadioSetRxConfig+0x300>)
 8007778:	781a      	ldrb	r2, [r3, #0]
 800777a:	4b31      	ldr	r3, [pc, #196]	; (8007840 <RadioSetRxConfig+0x2fc>)
 800777c:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 800777e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8007782:	2b00      	cmp	r3, #0
 8007784:	d003      	beq.n	800778e <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8007786:	4b2e      	ldr	r3, [pc, #184]	; (8007840 <RadioSetRxConfig+0x2fc>)
 8007788:	22f2      	movs	r2, #242	; 0xf2
 800778a:	75da      	strb	r2, [r3, #23]
 800778c:	e002      	b.n	8007794 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800778e:	4b2c      	ldr	r3, [pc, #176]	; (8007840 <RadioSetRxConfig+0x2fc>)
 8007790:	2201      	movs	r2, #1
 8007792:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8007794:	4b2a      	ldr	r3, [pc, #168]	; (8007840 <RadioSetRxConfig+0x2fc>)
 8007796:	2201      	movs	r2, #1
 8007798:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800779a:	f000 fc68 	bl	800806e <RadioStandby>
            RadioSetModem( MODEM_FSK );
 800779e:	2000      	movs	r0, #0
 80077a0:	f7ff fdfc 	bl	800739c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80077a4:	4828      	ldr	r0, [pc, #160]	; (8007848 <RadioSetRxConfig+0x304>)
 80077a6:	f002 fa59 	bl	8009c5c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80077aa:	4828      	ldr	r0, [pc, #160]	; (800784c <RadioSetRxConfig+0x308>)
 80077ac:	f002 fb28 	bl	8009e00 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80077b0:	4a28      	ldr	r2, [pc, #160]	; (8007854 <RadioSetRxConfig+0x310>)
 80077b2:	f107 0314 	add.w	r3, r7, #20
 80077b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80077ba:	e883 0003 	stmia.w	r3, {r0, r1}
 80077be:	f107 0314 	add.w	r3, r7, #20
 80077c2:	4618      	mov	r0, r3
 80077c4:	f001 fde5 	bl	8009392 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80077c8:	f240 10ff 	movw	r0, #511	; 0x1ff
 80077cc:	f001 fe30 	bl	8009430 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80077d0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80077d2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80077d6:	fb02 f303 	mul.w	r3, r2, r3
 80077da:	461a      	mov	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	fbb2 f3f3 	udiv	r3, r2, r3
 80077e2:	4a17      	ldr	r2, [pc, #92]	; (8007840 <RadioSetRxConfig+0x2fc>)
 80077e4:	6093      	str	r3, [r2, #8]
            break;
 80077e6:	e0ad      	b.n	8007944 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80077e8:	2000      	movs	r0, #0
 80077ea:	f001 ff99 	bl	8009720 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80077ee:	4b14      	ldr	r3, [pc, #80]	; (8007840 <RadioSetRxConfig+0x2fc>)
 80077f0:	2201      	movs	r2, #1
 80077f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	b2da      	uxtb	r2, r3
 80077fa:	4b11      	ldr	r3, [pc, #68]	; (8007840 <RadioSetRxConfig+0x2fc>)
 80077fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8007800:	4a15      	ldr	r2, [pc, #84]	; (8007858 <RadioSetRxConfig+0x314>)
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	4413      	add	r3, r2
 8007806:	781a      	ldrb	r2, [r3, #0]
 8007808:	4b0d      	ldr	r3, [pc, #52]	; (8007840 <RadioSetRxConfig+0x2fc>)
 800780a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800780e:	4a0c      	ldr	r2, [pc, #48]	; (8007840 <RadioSetRxConfig+0x2fc>)
 8007810:	7bbb      	ldrb	r3, [r7, #14]
 8007812:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d105      	bne.n	8007828 <RadioSetRxConfig+0x2e4>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2b0b      	cmp	r3, #11
 8007820:	d008      	beq.n	8007834 <RadioSetRxConfig+0x2f0>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2b0c      	cmp	r3, #12
 8007826:	d005      	beq.n	8007834 <RadioSetRxConfig+0x2f0>
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	2b01      	cmp	r3, #1
 800782c:	d116      	bne.n	800785c <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2b0c      	cmp	r3, #12
 8007832:	d113      	bne.n	800785c <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8007834:	4b02      	ldr	r3, [pc, #8]	; (8007840 <RadioSetRxConfig+0x2fc>)
 8007836:	2201      	movs	r2, #1
 8007838:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800783c:	e012      	b.n	8007864 <RadioSetRxConfig+0x320>
 800783e:	bf00      	nop
 8007840:	20000288 	.word	0x20000288
 8007844:	20000008 	.word	0x20000008
 8007848:	200002c0 	.word	0x200002c0
 800784c:	20000296 	.word	0x20000296
 8007850:	0800bee0 	.word	0x0800bee0
 8007854:	0800bee8 	.word	0x0800bee8
 8007858:	0800c20c 	.word	0x0800c20c
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800785c:	4b3b      	ldr	r3, [pc, #236]	; (800794c <RadioSetRxConfig+0x408>)
 800785e:	2200      	movs	r2, #0
 8007860:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007864:	4b39      	ldr	r3, [pc, #228]	; (800794c <RadioSetRxConfig+0x408>)
 8007866:	2201      	movs	r2, #1
 8007868:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800786a:	4b38      	ldr	r3, [pc, #224]	; (800794c <RadioSetRxConfig+0x408>)
 800786c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007870:	2b05      	cmp	r3, #5
 8007872:	d004      	beq.n	800787e <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8007874:	4b35      	ldr	r3, [pc, #212]	; (800794c <RadioSetRxConfig+0x408>)
 8007876:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800787a:	2b06      	cmp	r3, #6
 800787c:	d10a      	bne.n	8007894 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 800787e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007880:	2b0b      	cmp	r3, #11
 8007882:	d803      	bhi.n	800788c <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8007884:	4b31      	ldr	r3, [pc, #196]	; (800794c <RadioSetRxConfig+0x408>)
 8007886:	220c      	movs	r2, #12
 8007888:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800788a:	e006      	b.n	800789a <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800788c:	4a2f      	ldr	r2, [pc, #188]	; (800794c <RadioSetRxConfig+0x408>)
 800788e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007890:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8007892:	e002      	b.n	800789a <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007894:	4a2d      	ldr	r2, [pc, #180]	; (800794c <RadioSetRxConfig+0x408>)
 8007896:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007898:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800789a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800789e:	4b2b      	ldr	r3, [pc, #172]	; (800794c <RadioSetRxConfig+0x408>)
 80078a0:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80078a2:	4b2b      	ldr	r3, [pc, #172]	; (8007950 <RadioSetRxConfig+0x40c>)
 80078a4:	781a      	ldrb	r2, [r3, #0]
 80078a6:	4b29      	ldr	r3, [pc, #164]	; (800794c <RadioSetRxConfig+0x408>)
 80078a8:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80078aa:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80078ae:	4b27      	ldr	r3, [pc, #156]	; (800794c <RadioSetRxConfig+0x408>)
 80078b0:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80078b4:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80078b8:	4b24      	ldr	r3, [pc, #144]	; (800794c <RadioSetRxConfig+0x408>)
 80078ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80078be:	f000 fbd6 	bl	800806e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80078c2:	2001      	movs	r0, #1
 80078c4:	f7ff fd6a 	bl	800739c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80078c8:	4822      	ldr	r0, [pc, #136]	; (8007954 <RadioSetRxConfig+0x410>)
 80078ca:	f002 f9c7 	bl	8009c5c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80078ce:	4822      	ldr	r0, [pc, #136]	; (8007958 <RadioSetRxConfig+0x414>)
 80078d0:	f002 fa96 	bl	8009e00 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80078d4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	4618      	mov	r0, r3
 80078da:	f001 ff30 	bl	800973e <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 80078de:	f640 00a3 	movw	r0, #2211	; 0x8a3
 80078e2:	f002 fbe9 	bl	800a0b8 <SUBGRF_ReadRegister>
 80078e6:	4603      	mov	r3, r0
 80078e8:	f003 0301 	and.w	r3, r3, #1
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	4619      	mov	r1, r3
 80078f0:	f640 00a3 	movw	r0, #2211	; 0x8a3
 80078f4:	f002 fbcc 	bl	800a090 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80078f8:	4b14      	ldr	r3, [pc, #80]	; (800794c <RadioSetRxConfig+0x408>)
 80078fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d10d      	bne.n	800791e <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8007902:	f240 7036 	movw	r0, #1846	; 0x736
 8007906:	f002 fbd7 	bl	800a0b8 <SUBGRF_ReadRegister>
 800790a:	4603      	mov	r3, r0
 800790c:	f023 0304 	bic.w	r3, r3, #4
 8007910:	b2db      	uxtb	r3, r3
 8007912:	4619      	mov	r1, r3
 8007914:	f240 7036 	movw	r0, #1846	; 0x736
 8007918:	f002 fbba 	bl	800a090 <SUBGRF_WriteRegister>
 800791c:	e00c      	b.n	8007938 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800791e:	f240 7036 	movw	r0, #1846	; 0x736
 8007922:	f002 fbc9 	bl	800a0b8 <SUBGRF_ReadRegister>
 8007926:	4603      	mov	r3, r0
 8007928:	f043 0304 	orr.w	r3, r3, #4
 800792c:	b2db      	uxtb	r3, r3
 800792e:	4619      	mov	r1, r3
 8007930:	f240 7036 	movw	r0, #1846	; 0x736
 8007934:	f002 fbac 	bl	800a090 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8007938:	4b04      	ldr	r3, [pc, #16]	; (800794c <RadioSetRxConfig+0x408>)
 800793a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800793e:	609a      	str	r2, [r3, #8]
            break;
 8007940:	e000      	b.n	8007944 <RadioSetRxConfig+0x400>
            break;
 8007942:	bf00      	nop
    }
}
 8007944:	bf00      	nop
 8007946:	3728      	adds	r7, #40	; 0x28
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	20000288 	.word	0x20000288
 8007950:	20000008 	.word	0x20000008
 8007954:	200002c0 	.word	0x200002c0
 8007958:	20000296 	.word	0x20000296

0800795c <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b086      	sub	sp, #24
 8007960:	af00      	add	r7, sp, #0
 8007962:	60ba      	str	r2, [r7, #8]
 8007964:	607b      	str	r3, [r7, #4]
 8007966:	4603      	mov	r3, r0
 8007968:	73fb      	strb	r3, [r7, #15]
 800796a:	460b      	mov	r3, r1
 800796c:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 800796e:	f002 fe76 	bl	800a65e <RFW_DeInit>
    switch( modem )
 8007972:	7bfb      	ldrb	r3, [r7, #15]
 8007974:	2b04      	cmp	r3, #4
 8007976:	f000 80c7 	beq.w	8007b08 <RadioSetTxConfig+0x1ac>
 800797a:	2b04      	cmp	r3, #4
 800797c:	f300 80d6 	bgt.w	8007b2c <RadioSetTxConfig+0x1d0>
 8007980:	2b00      	cmp	r3, #0
 8007982:	d002      	beq.n	800798a <RadioSetTxConfig+0x2e>
 8007984:	2b01      	cmp	r3, #1
 8007986:	d059      	beq.n	8007a3c <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8007988:	e0d0      	b.n	8007b2c <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800798a:	4b77      	ldr	r3, [pc, #476]	; (8007b68 <RadioSetTxConfig+0x20c>)
 800798c:	2200      	movs	r2, #0
 800798e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8007992:	4a75      	ldr	r2, [pc, #468]	; (8007b68 <RadioSetTxConfig+0x20c>)
 8007994:	6a3b      	ldr	r3, [r7, #32]
 8007996:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8007998:	4b73      	ldr	r3, [pc, #460]	; (8007b68 <RadioSetTxConfig+0x20c>)
 800799a:	220b      	movs	r2, #11
 800799c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f002 fd8f 	bl	800a4c4 <SUBGRF_GetFskBandwidthRegValue>
 80079a6:	4603      	mov	r3, r0
 80079a8:	461a      	mov	r2, r3
 80079aa:	4b6f      	ldr	r3, [pc, #444]	; (8007b68 <RadioSetTxConfig+0x20c>)
 80079ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80079b0:	4a6d      	ldr	r2, [pc, #436]	; (8007b68 <RadioSetTxConfig+0x20c>)
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80079b6:	4b6c      	ldr	r3, [pc, #432]	; (8007b68 <RadioSetTxConfig+0x20c>)
 80079b8:	2200      	movs	r2, #0
 80079ba:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80079bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80079be:	00db      	lsls	r3, r3, #3
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	4b69      	ldr	r3, [pc, #420]	; (8007b68 <RadioSetTxConfig+0x20c>)
 80079c4:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80079c6:	4b68      	ldr	r3, [pc, #416]	; (8007b68 <RadioSetTxConfig+0x20c>)
 80079c8:	2204      	movs	r2, #4
 80079ca:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80079cc:	4b66      	ldr	r3, [pc, #408]	; (8007b68 <RadioSetTxConfig+0x20c>)
 80079ce:	2218      	movs	r2, #24
 80079d0:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80079d2:	4b65      	ldr	r3, [pc, #404]	; (8007b68 <RadioSetTxConfig+0x20c>)
 80079d4:	2200      	movs	r2, #0
 80079d6:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80079d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80079dc:	f083 0301 	eor.w	r3, r3, #1
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	461a      	mov	r2, r3
 80079e4:	4b60      	ldr	r3, [pc, #384]	; (8007b68 <RadioSetTxConfig+0x20c>)
 80079e6:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 80079e8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d003      	beq.n	80079f8 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80079f0:	4b5d      	ldr	r3, [pc, #372]	; (8007b68 <RadioSetTxConfig+0x20c>)
 80079f2:	22f2      	movs	r2, #242	; 0xf2
 80079f4:	75da      	strb	r2, [r3, #23]
 80079f6:	e002      	b.n	80079fe <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80079f8:	4b5b      	ldr	r3, [pc, #364]	; (8007b68 <RadioSetTxConfig+0x20c>)
 80079fa:	2201      	movs	r2, #1
 80079fc:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80079fe:	4b5a      	ldr	r3, [pc, #360]	; (8007b68 <RadioSetTxConfig+0x20c>)
 8007a00:	2201      	movs	r2, #1
 8007a02:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8007a04:	f000 fb33 	bl	800806e <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8007a08:	2000      	movs	r0, #0
 8007a0a:	f7ff fcc7 	bl	800739c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007a0e:	4857      	ldr	r0, [pc, #348]	; (8007b6c <RadioSetTxConfig+0x210>)
 8007a10:	f002 f924 	bl	8009c5c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007a14:	4856      	ldr	r0, [pc, #344]	; (8007b70 <RadioSetTxConfig+0x214>)
 8007a16:	f002 f9f3 	bl	8009e00 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8007a1a:	4a56      	ldr	r2, [pc, #344]	; (8007b74 <RadioSetTxConfig+0x218>)
 8007a1c:	f107 0310 	add.w	r3, r7, #16
 8007a20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007a24:	e883 0003 	stmia.w	r3, {r0, r1}
 8007a28:	f107 0310 	add.w	r3, r7, #16
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f001 fcb0 	bl	8009392 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8007a32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007a36:	f001 fcfb 	bl	8009430 <SUBGRF_SetWhiteningSeed>
            break;
 8007a3a:	e078      	b.n	8007b2e <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8007a3c:	4b4a      	ldr	r3, [pc, #296]	; (8007b68 <RadioSetTxConfig+0x20c>)
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8007a44:	6a3b      	ldr	r3, [r7, #32]
 8007a46:	b2da      	uxtb	r2, r3
 8007a48:	4b47      	ldr	r3, [pc, #284]	; (8007b68 <RadioSetTxConfig+0x20c>)
 8007a4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8007a4e:	4a4a      	ldr	r2, [pc, #296]	; (8007b78 <RadioSetTxConfig+0x21c>)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4413      	add	r3, r2
 8007a54:	781a      	ldrb	r2, [r3, #0]
 8007a56:	4b44      	ldr	r3, [pc, #272]	; (8007b68 <RadioSetTxConfig+0x20c>)
 8007a58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8007a5c:	4a42      	ldr	r2, [pc, #264]	; (8007b68 <RadioSetTxConfig+0x20c>)
 8007a5e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007a62:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d105      	bne.n	8007a78 <RadioSetTxConfig+0x11c>
 8007a6c:	6a3b      	ldr	r3, [r7, #32]
 8007a6e:	2b0b      	cmp	r3, #11
 8007a70:	d008      	beq.n	8007a84 <RadioSetTxConfig+0x128>
 8007a72:	6a3b      	ldr	r3, [r7, #32]
 8007a74:	2b0c      	cmp	r3, #12
 8007a76:	d005      	beq.n	8007a84 <RadioSetTxConfig+0x128>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d107      	bne.n	8007a8e <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8007a7e:	6a3b      	ldr	r3, [r7, #32]
 8007a80:	2b0c      	cmp	r3, #12
 8007a82:	d104      	bne.n	8007a8e <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8007a84:	4b38      	ldr	r3, [pc, #224]	; (8007b68 <RadioSetTxConfig+0x20c>)
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8007a8c:	e003      	b.n	8007a96 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8007a8e:	4b36      	ldr	r3, [pc, #216]	; (8007b68 <RadioSetTxConfig+0x20c>)
 8007a90:	2200      	movs	r2, #0
 8007a92:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007a96:	4b34      	ldr	r3, [pc, #208]	; (8007b68 <RadioSetTxConfig+0x20c>)
 8007a98:	2201      	movs	r2, #1
 8007a9a:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007a9c:	4b32      	ldr	r3, [pc, #200]	; (8007b68 <RadioSetTxConfig+0x20c>)
 8007a9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007aa2:	2b05      	cmp	r3, #5
 8007aa4:	d004      	beq.n	8007ab0 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8007aa6:	4b30      	ldr	r3, [pc, #192]	; (8007b68 <RadioSetTxConfig+0x20c>)
 8007aa8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007aac:	2b06      	cmp	r3, #6
 8007aae:	d10a      	bne.n	8007ac6 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8007ab0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007ab2:	2b0b      	cmp	r3, #11
 8007ab4:	d803      	bhi.n	8007abe <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8007ab6:	4b2c      	ldr	r3, [pc, #176]	; (8007b68 <RadioSetTxConfig+0x20c>)
 8007ab8:	220c      	movs	r2, #12
 8007aba:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8007abc:	e006      	b.n	8007acc <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007abe:	4a2a      	ldr	r2, [pc, #168]	; (8007b68 <RadioSetTxConfig+0x20c>)
 8007ac0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007ac2:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8007ac4:	e002      	b.n	8007acc <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007ac6:	4a28      	ldr	r2, [pc, #160]	; (8007b68 <RadioSetTxConfig+0x20c>)
 8007ac8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007aca:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8007acc:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8007ad0:	4b25      	ldr	r3, [pc, #148]	; (8007b68 <RadioSetTxConfig+0x20c>)
 8007ad2:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8007ad4:	4b29      	ldr	r3, [pc, #164]	; (8007b7c <RadioSetTxConfig+0x220>)
 8007ad6:	781a      	ldrb	r2, [r3, #0]
 8007ad8:	4b23      	ldr	r3, [pc, #140]	; (8007b68 <RadioSetTxConfig+0x20c>)
 8007ada:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8007adc:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8007ae0:	4b21      	ldr	r3, [pc, #132]	; (8007b68 <RadioSetTxConfig+0x20c>)
 8007ae2:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8007ae6:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8007aea:	4b1f      	ldr	r3, [pc, #124]	; (8007b68 <RadioSetTxConfig+0x20c>)
 8007aec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8007af0:	f000 fabd 	bl	800806e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8007af4:	2001      	movs	r0, #1
 8007af6:	f7ff fc51 	bl	800739c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007afa:	481c      	ldr	r0, [pc, #112]	; (8007b6c <RadioSetTxConfig+0x210>)
 8007afc:	f002 f8ae 	bl	8009c5c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007b00:	481b      	ldr	r0, [pc, #108]	; (8007b70 <RadioSetTxConfig+0x214>)
 8007b02:	f002 f97d 	bl	8009e00 <SUBGRF_SetPacketParams>
            break;
 8007b06:	e012      	b.n	8007b2e <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8007b08:	2004      	movs	r0, #4
 8007b0a:	f7ff fc47 	bl	800739c <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8007b0e:	4b16      	ldr	r3, [pc, #88]	; (8007b68 <RadioSetTxConfig+0x20c>)
 8007b10:	2202      	movs	r2, #2
 8007b12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8007b16:	4a14      	ldr	r2, [pc, #80]	; (8007b68 <RadioSetTxConfig+0x20c>)
 8007b18:	6a3b      	ldr	r3, [r7, #32]
 8007b1a:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8007b1c:	4b12      	ldr	r3, [pc, #72]	; (8007b68 <RadioSetTxConfig+0x20c>)
 8007b1e:	2216      	movs	r2, #22
 8007b20:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007b24:	4811      	ldr	r0, [pc, #68]	; (8007b6c <RadioSetTxConfig+0x210>)
 8007b26:	f002 f899 	bl	8009c5c <SUBGRF_SetModulationParams>
            break;
 8007b2a:	e000      	b.n	8007b2e <RadioSetTxConfig+0x1d2>
            break;
 8007b2c:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8007b2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b32:	4618      	mov	r0, r3
 8007b34:	f002 fbc8 	bl	800a2c8 <SUBGRF_SetRfTxPower>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	4b0a      	ldr	r3, [pc, #40]	; (8007b68 <RadioSetTxConfig+0x20c>)
 8007b3e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8007b42:	210e      	movs	r1, #14
 8007b44:	f640 101f 	movw	r0, #2335	; 0x91f
 8007b48:	f002 faa2 	bl	800a090 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8007b4c:	4b06      	ldr	r3, [pc, #24]	; (8007b68 <RadioSetTxConfig+0x20c>)
 8007b4e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007b52:	4618      	mov	r0, r3
 8007b54:	f002 fd97 	bl	800a686 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8007b58:	4a03      	ldr	r2, [pc, #12]	; (8007b68 <RadioSetTxConfig+0x20c>)
 8007b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b5c:	6053      	str	r3, [r2, #4]
}
 8007b5e:	bf00      	nop
 8007b60:	3718      	adds	r7, #24
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	20000288 	.word	0x20000288
 8007b6c:	200002c0 	.word	0x200002c0
 8007b70:	20000296 	.word	0x20000296
 8007b74:	0800bee8 	.word	0x0800bee8
 8007b78:	0800c20c 	.word	0x0800c20c
 8007b7c:	20000008 	.word	0x20000008

08007b80 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
    return true;
 8007b88:	2301      	movs	r3, #1
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	370c      	adds	r7, #12
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bc80      	pop	{r7}
 8007b92:	4770      	bx	lr

08007b94 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8007b94:	b480      	push	{r7}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8007ba2:	79fb      	ldrb	r3, [r7, #7]
 8007ba4:	2b0a      	cmp	r3, #10
 8007ba6:	d83e      	bhi.n	8007c26 <RadioGetLoRaBandwidthInHz+0x92>
 8007ba8:	a201      	add	r2, pc, #4	; (adr r2, 8007bb0 <RadioGetLoRaBandwidthInHz+0x1c>)
 8007baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bae:	bf00      	nop
 8007bb0:	08007bdd 	.word	0x08007bdd
 8007bb4:	08007bed 	.word	0x08007bed
 8007bb8:	08007bfd 	.word	0x08007bfd
 8007bbc:	08007c0d 	.word	0x08007c0d
 8007bc0:	08007c15 	.word	0x08007c15
 8007bc4:	08007c1b 	.word	0x08007c1b
 8007bc8:	08007c21 	.word	0x08007c21
 8007bcc:	08007c27 	.word	0x08007c27
 8007bd0:	08007be5 	.word	0x08007be5
 8007bd4:	08007bf5 	.word	0x08007bf5
 8007bd8:	08007c05 	.word	0x08007c05
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8007bdc:	f641 6384 	movw	r3, #7812	; 0x1e84
 8007be0:	60fb      	str	r3, [r7, #12]
        break;
 8007be2:	e020      	b.n	8007c26 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8007be4:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8007be8:	60fb      	str	r3, [r7, #12]
        break;
 8007bea:	e01c      	b.n	8007c26 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8007bec:	f643 5309 	movw	r3, #15625	; 0x3d09
 8007bf0:	60fb      	str	r3, [r7, #12]
        break;
 8007bf2:	e018      	b.n	8007c26 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8007bf4:	f245 1361 	movw	r3, #20833	; 0x5161
 8007bf8:	60fb      	str	r3, [r7, #12]
        break;
 8007bfa:	e014      	b.n	8007c26 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8007bfc:	f647 2312 	movw	r3, #31250	; 0x7a12
 8007c00:	60fb      	str	r3, [r7, #12]
        break;
 8007c02:	e010      	b.n	8007c26 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8007c04:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8007c08:	60fb      	str	r3, [r7, #12]
        break;
 8007c0a:	e00c      	b.n	8007c26 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8007c0c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007c10:	60fb      	str	r3, [r7, #12]
        break;
 8007c12:	e008      	b.n	8007c26 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8007c14:	4b07      	ldr	r3, [pc, #28]	; (8007c34 <RadioGetLoRaBandwidthInHz+0xa0>)
 8007c16:	60fb      	str	r3, [r7, #12]
        break;
 8007c18:	e005      	b.n	8007c26 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8007c1a:	4b07      	ldr	r3, [pc, #28]	; (8007c38 <RadioGetLoRaBandwidthInHz+0xa4>)
 8007c1c:	60fb      	str	r3, [r7, #12]
        break;
 8007c1e:	e002      	b.n	8007c26 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8007c20:	4b06      	ldr	r3, [pc, #24]	; (8007c3c <RadioGetLoRaBandwidthInHz+0xa8>)
 8007c22:	60fb      	str	r3, [r7, #12]
        break;
 8007c24:	bf00      	nop
    }

    return bandwidthInHz;
 8007c26:	68fb      	ldr	r3, [r7, #12]
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3714      	adds	r7, #20
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bc80      	pop	{r7}
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop
 8007c34:	0001e848 	.word	0x0001e848
 8007c38:	0003d090 	.word	0x0003d090
 8007c3c:	0007a120 	.word	0x0007a120

08007c40 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	4608      	mov	r0, r1
 8007c4a:	4611      	mov	r1, r2
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	4603      	mov	r3, r0
 8007c50:	70fb      	strb	r3, [r7, #3]
 8007c52:	460b      	mov	r3, r1
 8007c54:	803b      	strh	r3, [r7, #0]
 8007c56:	4613      	mov	r3, r2
 8007c58:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8007c5a:	883b      	ldrh	r3, [r7, #0]
 8007c5c:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007c5e:	78ba      	ldrb	r2, [r7, #2]
 8007c60:	f082 0201 	eor.w	r2, r2, #1
 8007c64:	b2d2      	uxtb	r2, r2
 8007c66:	2a00      	cmp	r2, #0
 8007c68:	d001      	beq.n	8007c6e <RadioGetGfskTimeOnAirNumerator+0x2e>
 8007c6a:	2208      	movs	r2, #8
 8007c6c:	e000      	b.n	8007c70 <RadioGetGfskTimeOnAirNumerator+0x30>
 8007c6e:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8007c70:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007c72:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8007c76:	7c3b      	ldrb	r3, [r7, #16]
 8007c78:	7d39      	ldrb	r1, [r7, #20]
 8007c7a:	2900      	cmp	r1, #0
 8007c7c:	d001      	beq.n	8007c82 <RadioGetGfskTimeOnAirNumerator+0x42>
 8007c7e:	2102      	movs	r1, #2
 8007c80:	e000      	b.n	8007c84 <RadioGetGfskTimeOnAirNumerator+0x44>
 8007c82:	2100      	movs	r1, #0
 8007c84:	440b      	add	r3, r1
 8007c86:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007c88:	4413      	add	r3, r2
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	370c      	adds	r7, #12
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bc80      	pop	{r7}
 8007c92:	4770      	bx	lr

08007c94 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8007c94:	b480      	push	{r7}
 8007c96:	b08b      	sub	sp, #44	; 0x2c
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	4611      	mov	r1, r2
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	71fb      	strb	r3, [r7, #7]
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8007caa:	79fb      	ldrb	r3, [r7, #7]
 8007cac:	3304      	adds	r3, #4
 8007cae:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	2b05      	cmp	r3, #5
 8007cba:	d002      	beq.n	8007cc2 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	2b06      	cmp	r3, #6
 8007cc0:	d104      	bne.n	8007ccc <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8007cc2:	88bb      	ldrh	r3, [r7, #4]
 8007cc4:	2b0b      	cmp	r3, #11
 8007cc6:	d801      	bhi.n	8007ccc <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8007cc8:	230c      	movs	r3, #12
 8007cca:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d105      	bne.n	8007cde <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	2b0b      	cmp	r3, #11
 8007cd6:	d008      	beq.n	8007cea <RadioGetLoRaTimeOnAirNumerator+0x56>
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	2b0c      	cmp	r3, #12
 8007cdc:	d005      	beq.n	8007cea <RadioGetLoRaTimeOnAirNumerator+0x56>
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d105      	bne.n	8007cf0 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	2b0c      	cmp	r3, #12
 8007ce8:	d102      	bne.n	8007cf0 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8007cea:	2301      	movs	r3, #1
 8007cec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007cf0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007cf4:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8007cf6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007cfa:	2a00      	cmp	r2, #0
 8007cfc:	d001      	beq.n	8007d02 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8007cfe:	2210      	movs	r2, #16
 8007d00:	e000      	b.n	8007d04 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8007d02:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007d04:	4413      	add	r3, r2
 8007d06:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8007d0c:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8007d0e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8007d12:	2a00      	cmp	r2, #0
 8007d14:	d001      	beq.n	8007d1a <RadioGetLoRaTimeOnAirNumerator+0x86>
 8007d16:	2200      	movs	r2, #0
 8007d18:	e000      	b.n	8007d1c <RadioGetLoRaTimeOnAirNumerator+0x88>
 8007d1a:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8007d1c:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007d1e:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	2b06      	cmp	r3, #6
 8007d24:	d803      	bhi.n	8007d2e <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	623b      	str	r3, [r7, #32]
 8007d2c:	e00e      	b.n	8007d4c <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	3308      	adds	r3, #8
 8007d32:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8007d34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d004      	beq.n	8007d46 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	3b02      	subs	r3, #2
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	623b      	str	r3, [r7, #32]
 8007d44:	e002      	b.n	8007d4c <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	da01      	bge.n	8007d56 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8007d52:	2300      	movs	r3, #0
 8007d54:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8007d56:	69fa      	ldr	r2, [r7, #28]
 8007d58:	6a3b      	ldr	r3, [r7, #32]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	1e5a      	subs	r2, r3, #1
 8007d5e:	6a3b      	ldr	r3, [r7, #32]
 8007d60:	fb92 f3f3 	sdiv	r3, r2, r3
 8007d64:	697a      	ldr	r2, [r7, #20]
 8007d66:	fb03 f202 	mul.w	r2, r3, r2
 8007d6a:	88bb      	ldrh	r3, [r7, #4]
 8007d6c:	4413      	add	r3, r2
    int32_t intermediate =
 8007d6e:	330c      	adds	r3, #12
 8007d70:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	2b06      	cmp	r3, #6
 8007d76:	d802      	bhi.n	8007d7e <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8007d78:	69bb      	ldr	r3, [r7, #24]
 8007d7a:	3302      	adds	r3, #2
 8007d7c:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	1c5a      	adds	r2, r3, #1
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	3b02      	subs	r3, #2
 8007d88:	fa02 f303 	lsl.w	r3, r2, r3
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	372c      	adds	r7, #44	; 0x2c
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bc80      	pop	{r7}
 8007d94:	4770      	bx	lr
	...

08007d98 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b08a      	sub	sp, #40	; 0x28
 8007d9c:	af04      	add	r7, sp, #16
 8007d9e:	60b9      	str	r1, [r7, #8]
 8007da0:	607a      	str	r2, [r7, #4]
 8007da2:	461a      	mov	r2, r3
 8007da4:	4603      	mov	r3, r0
 8007da6:	73fb      	strb	r3, [r7, #15]
 8007da8:	4613      	mov	r3, r2
 8007daa:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8007dac:	2300      	movs	r3, #0
 8007dae:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8007db0:	2301      	movs	r3, #1
 8007db2:	613b      	str	r3, [r7, #16]

    switch( modem )
 8007db4:	7bfb      	ldrb	r3, [r7, #15]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d002      	beq.n	8007dc0 <RadioTimeOnAir+0x28>
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d017      	beq.n	8007dee <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8007dbe:	e035      	b.n	8007e2c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8007dc0:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8007dc4:	8c3a      	ldrh	r2, [r7, #32]
 8007dc6:	7bb9      	ldrb	r1, [r7, #14]
 8007dc8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007dcc:	9301      	str	r3, [sp, #4]
 8007dce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007dd2:	9300      	str	r3, [sp, #0]
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f7ff ff32 	bl	8007c40 <RadioGetGfskTimeOnAirNumerator>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007de2:	fb02 f303 	mul.w	r3, r2, r3
 8007de6:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	613b      	str	r3, [r7, #16]
        break;
 8007dec:	e01e      	b.n	8007e2c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8007dee:	8c39      	ldrh	r1, [r7, #32]
 8007df0:	7bba      	ldrb	r2, [r7, #14]
 8007df2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007df6:	9302      	str	r3, [sp, #8]
 8007df8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007dfc:	9301      	str	r3, [sp, #4]
 8007dfe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007e02:	9300      	str	r3, [sp, #0]
 8007e04:	460b      	mov	r3, r1
 8007e06:	6879      	ldr	r1, [r7, #4]
 8007e08:	68b8      	ldr	r0, [r7, #8]
 8007e0a:	f7ff ff43 	bl	8007c94 <RadioGetLoRaTimeOnAirNumerator>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007e14:	fb02 f303 	mul.w	r3, r2, r3
 8007e18:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8007e1a:	4a0a      	ldr	r2, [pc, #40]	; (8007e44 <RadioTimeOnAir+0xac>)
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	4413      	add	r3, r2
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	4618      	mov	r0, r3
 8007e24:	f7ff feb6 	bl	8007b94 <RadioGetLoRaBandwidthInHz>
 8007e28:	6138      	str	r0, [r7, #16]
        break;
 8007e2a:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8007e2c:	697a      	ldr	r2, [r7, #20]
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	4413      	add	r3, r2
 8007e32:	1e5a      	subs	r2, r3, #1
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3718      	adds	r7, #24
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	0800c20c 	.word	0x0800c20c

08007e48 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	460b      	mov	r3, r1
 8007e52:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8007e54:	2300      	movs	r3, #0
 8007e56:	2200      	movs	r2, #0
 8007e58:	f240 2101 	movw	r1, #513	; 0x201
 8007e5c:	f240 2001 	movw	r0, #513	; 0x201
 8007e60:	f001 fd66 	bl	8009930 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8007e64:	4b73      	ldr	r3, [pc, #460]	; (8008034 <RadioSend+0x1ec>)
 8007e66:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007e6a:	2101      	movs	r1, #1
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f002 fa03 	bl	800a278 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8007e72:	4b70      	ldr	r3, [pc, #448]	; (8008034 <RadioSend+0x1ec>)
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d112      	bne.n	8007ea0 <RadioSend+0x58>
 8007e7a:	4b6e      	ldr	r3, [pc, #440]	; (8008034 <RadioSend+0x1ec>)
 8007e7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e80:	2b06      	cmp	r3, #6
 8007e82:	d10d      	bne.n	8007ea0 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8007e84:	f640 0089 	movw	r0, #2185	; 0x889
 8007e88:	f002 f916 	bl	800a0b8 <SUBGRF_ReadRegister>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	f023 0304 	bic.w	r3, r3, #4
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	4619      	mov	r1, r3
 8007e96:	f640 0089 	movw	r0, #2185	; 0x889
 8007e9a:	f002 f8f9 	bl	800a090 <SUBGRF_WriteRegister>
 8007e9e:	e00c      	b.n	8007eba <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8007ea0:	f640 0089 	movw	r0, #2185	; 0x889
 8007ea4:	f002 f908 	bl	800a0b8 <SUBGRF_ReadRegister>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	f043 0304 	orr.w	r3, r3, #4
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	f640 0089 	movw	r0, #2185	; 0x889
 8007eb6:	f002 f8eb 	bl	800a090 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8007eba:	4b5e      	ldr	r3, [pc, #376]	; (8008034 <RadioSend+0x1ec>)
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	2b04      	cmp	r3, #4
 8007ec0:	f200 80a8 	bhi.w	8008014 <RadioSend+0x1cc>
 8007ec4:	a201      	add	r2, pc, #4	; (adr r2, 8007ecc <RadioSend+0x84>)
 8007ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eca:	bf00      	nop
 8007ecc:	08007efb 	.word	0x08007efb
 8007ed0:	08007ee1 	.word	0x08007ee1
 8007ed4:	08007efb 	.word	0x08007efb
 8007ed8:	08007f5d 	.word	0x08007f5d
 8007edc:	08007f7d 	.word	0x08007f7d
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8007ee0:	4a54      	ldr	r2, [pc, #336]	; (8008034 <RadioSend+0x1ec>)
 8007ee2:	78fb      	ldrb	r3, [r7, #3]
 8007ee4:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007ee6:	4854      	ldr	r0, [pc, #336]	; (8008038 <RadioSend+0x1f0>)
 8007ee8:	f001 ff8a 	bl	8009e00 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8007eec:	78fb      	ldrb	r3, [r7, #3]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f001 fa3a 	bl	800936c <SUBGRF_SendPayload>
            break;
 8007ef8:	e08d      	b.n	8008016 <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8007efa:	f002 fbb6 	bl	800a66a <RFW_Is_Init>
 8007efe:	4603      	mov	r3, r0
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d11e      	bne.n	8007f42 <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8007f04:	f107 020d 	add.w	r2, r7, #13
 8007f08:	78fb      	ldrb	r3, [r7, #3]
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f002 fbc4 	bl	800a69a <RFW_TransmitInit>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d10c      	bne.n	8007f32 <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8007f18:	7b7a      	ldrb	r2, [r7, #13]
 8007f1a:	4b46      	ldr	r3, [pc, #280]	; (8008034 <RadioSend+0x1ec>)
 8007f1c:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007f1e:	4846      	ldr	r0, [pc, #280]	; (8008038 <RadioSend+0x1f0>)
 8007f20:	f001 ff6e 	bl	8009e00 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8007f24:	7b7b      	ldrb	r3, [r7, #13]
 8007f26:	2200      	movs	r2, #0
 8007f28:	4619      	mov	r1, r3
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f001 fa1e 	bl	800936c <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8007f30:	e071      	b.n	8008016 <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 8007f32:	4b42      	ldr	r3, [pc, #264]	; (800803c <RadioSend+0x1f4>)
 8007f34:	2201      	movs	r2, #1
 8007f36:	2100      	movs	r1, #0
 8007f38:	2002      	movs	r0, #2
 8007f3a:	f003 fcff 	bl	800b93c <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	e073      	b.n	800802a <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8007f42:	4a3c      	ldr	r2, [pc, #240]	; (8008034 <RadioSend+0x1ec>)
 8007f44:	78fb      	ldrb	r3, [r7, #3]
 8007f46:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007f48:	483b      	ldr	r0, [pc, #236]	; (8008038 <RadioSend+0x1f0>)
 8007f4a:	f001 ff59 	bl	8009e00 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8007f4e:	78fb      	ldrb	r3, [r7, #3]
 8007f50:	2200      	movs	r2, #0
 8007f52:	4619      	mov	r1, r3
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f001 fa09 	bl	800936c <SUBGRF_SendPayload>
            break;
 8007f5a:	e05c      	b.n	8008016 <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8007f5c:	4b35      	ldr	r3, [pc, #212]	; (8008034 <RadioSend+0x1ec>)
 8007f5e:	2202      	movs	r2, #2
 8007f60:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8007f62:	4a34      	ldr	r2, [pc, #208]	; (8008034 <RadioSend+0x1ec>)
 8007f64:	78fb      	ldrb	r3, [r7, #3]
 8007f66:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007f68:	4833      	ldr	r0, [pc, #204]	; (8008038 <RadioSend+0x1f0>)
 8007f6a:	f001 ff49 	bl	8009e00 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8007f6e:	78fb      	ldrb	r3, [r7, #3]
 8007f70:	2200      	movs	r2, #0
 8007f72:	4619      	mov	r1, r3
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f001 f9f9 	bl	800936c <SUBGRF_SendPayload>
            break;
 8007f7a:	e04c      	b.n	8008016 <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8007f7c:	78fb      	ldrb	r3, [r7, #3]
 8007f7e:	461a      	mov	r2, r3
 8007f80:	6879      	ldr	r1, [r7, #4]
 8007f82:	482f      	ldr	r0, [pc, #188]	; (8008040 <RadioSend+0x1f8>)
 8007f84:	f000 fccc 	bl	8008920 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8007f88:	4b2a      	ldr	r3, [pc, #168]	; (8008034 <RadioSend+0x1ec>)
 8007f8a:	2202      	movs	r2, #2
 8007f8c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8007f8e:	78fb      	ldrb	r3, [r7, #3]
 8007f90:	3301      	adds	r3, #1
 8007f92:	b2da      	uxtb	r2, r3
 8007f94:	4b27      	ldr	r3, [pc, #156]	; (8008034 <RadioSend+0x1ec>)
 8007f96:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007f98:	4827      	ldr	r0, [pc, #156]	; (8008038 <RadioSend+0x1f0>)
 8007f9a:	f001 ff31 	bl	8009e00 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8007f9e:	2100      	movs	r1, #0
 8007fa0:	20f1      	movs	r0, #241	; 0xf1
 8007fa2:	f000 f966 	bl	8008272 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8007fa6:	2100      	movs	r1, #0
 8007fa8:	20f0      	movs	r0, #240	; 0xf0
 8007faa:	f000 f962 	bl	8008272 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8007fae:	4b21      	ldr	r3, [pc, #132]	; (8008034 <RadioSend+0x1ec>)
 8007fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fb2:	2b64      	cmp	r3, #100	; 0x64
 8007fb4:	d108      	bne.n	8007fc8 <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8007fb6:	2170      	movs	r1, #112	; 0x70
 8007fb8:	20f3      	movs	r0, #243	; 0xf3
 8007fba:	f000 f95a 	bl	8008272 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8007fbe:	211d      	movs	r1, #29
 8007fc0:	20f2      	movs	r0, #242	; 0xf2
 8007fc2:	f000 f956 	bl	8008272 <RadioWrite>
 8007fc6:	e007      	b.n	8007fd8 <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8007fc8:	21e1      	movs	r1, #225	; 0xe1
 8007fca:	20f3      	movs	r0, #243	; 0xf3
 8007fcc:	f000 f951 	bl	8008272 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8007fd0:	2104      	movs	r1, #4
 8007fd2:	20f2      	movs	r0, #242	; 0xf2
 8007fd4:	f000 f94d 	bl	8008272 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8007fd8:	78fb      	ldrb	r3, [r7, #3]
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	00db      	lsls	r3, r3, #3
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	3302      	adds	r3, #2
 8007fe2:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8007fe4:	89fb      	ldrh	r3, [r7, #14]
 8007fe6:	0a1b      	lsrs	r3, r3, #8
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	4619      	mov	r1, r3
 8007fee:	20f4      	movs	r0, #244	; 0xf4
 8007ff0:	f000 f93f 	bl	8008272 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8007ff4:	89fb      	ldrh	r3, [r7, #14]
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	20f5      	movs	r0, #245	; 0xf5
 8007ffc:	f000 f939 	bl	8008272 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8008000:	78fb      	ldrb	r3, [r7, #3]
 8008002:	3301      	adds	r3, #1
 8008004:	b2db      	uxtb	r3, r3
 8008006:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800800a:	4619      	mov	r1, r3
 800800c:	480c      	ldr	r0, [pc, #48]	; (8008040 <RadioSend+0x1f8>)
 800800e:	f001 f9ad 	bl	800936c <SUBGRF_SendPayload>
            break;
 8008012:	e000      	b.n	8008016 <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8008014:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8008016:	4b07      	ldr	r3, [pc, #28]	; (8008034 <RadioSend+0x1ec>)
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	4619      	mov	r1, r3
 800801c:	4809      	ldr	r0, [pc, #36]	; (8008044 <RadioSend+0x1fc>)
 800801e:	f003 fb05 	bl	800b62c <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8008022:	4808      	ldr	r0, [pc, #32]	; (8008044 <RadioSend+0x1fc>)
 8008024:	f003 fa24 	bl	800b470 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	20000288 	.word	0x20000288
 8008038:	20000296 	.word	0x20000296
 800803c:	0800bef0 	.word	0x0800bef0
 8008040:	20000184 	.word	0x20000184
 8008044:	200002e4 	.word	0x200002e4

08008048 <RadioSleep>:

static void RadioSleep( void )
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 800804e:	2300      	movs	r3, #0
 8008050:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8008052:	793b      	ldrb	r3, [r7, #4]
 8008054:	f043 0304 	orr.w	r3, r3, #4
 8008058:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 800805a:	7938      	ldrb	r0, [r7, #4]
 800805c:	f001 fa62 	bl	8009524 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8008060:	2002      	movs	r0, #2
 8008062:	f7f8 fd61 	bl	8000b28 <HAL_Delay>
}
 8008066:	bf00      	nop
 8008068:	3708      	adds	r7, #8
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <RadioStandby>:

static void RadioStandby( void )
{
 800806e:	b580      	push	{r7, lr}
 8008070:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8008072:	2000      	movs	r0, #0
 8008074:	f001 fa88 	bl	8009588 <SUBGRF_SetStandby>
}
 8008078:	bf00      	nop
 800807a:	bd80      	pop	{r7, pc}

0800807c <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8008084:	f002 faf1 	bl	800a66a <RFW_Is_Init>
 8008088:	4603      	mov	r3, r0
 800808a:	2b01      	cmp	r3, #1
 800808c:	d102      	bne.n	8008094 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 800808e:	f002 fb14 	bl	800a6ba <RFW_ReceiveInit>
 8008092:	e007      	b.n	80080a4 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8008094:	2300      	movs	r3, #0
 8008096:	2200      	movs	r2, #0
 8008098:	f240 2162 	movw	r1, #610	; 0x262
 800809c:	f240 2062 	movw	r0, #610	; 0x262
 80080a0:	f001 fc46 	bl	8009930 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d006      	beq.n	80080b8 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80080aa:	6879      	ldr	r1, [r7, #4]
 80080ac:	4811      	ldr	r0, [pc, #68]	; (80080f4 <RadioRx+0x78>)
 80080ae:	f003 fabd 	bl	800b62c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80080b2:	4810      	ldr	r0, [pc, #64]	; (80080f4 <RadioRx+0x78>)
 80080b4:	f003 f9dc 	bl	800b470 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80080b8:	4b0f      	ldr	r3, [pc, #60]	; (80080f8 <RadioRx+0x7c>)
 80080ba:	2200      	movs	r2, #0
 80080bc:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80080be:	4b0e      	ldr	r3, [pc, #56]	; (80080f8 <RadioRx+0x7c>)
 80080c0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80080c4:	2100      	movs	r1, #0
 80080c6:	4618      	mov	r0, r3
 80080c8:	f002 f8d6 	bl	800a278 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80080cc:	4b0a      	ldr	r3, [pc, #40]	; (80080f8 <RadioRx+0x7c>)
 80080ce:	785b      	ldrb	r3, [r3, #1]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d004      	beq.n	80080de <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80080d4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80080d8:	f001 fa92 	bl	8009600 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 80080dc:	e005      	b.n	80080ea <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 80080de:	4b06      	ldr	r3, [pc, #24]	; (80080f8 <RadioRx+0x7c>)
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	019b      	lsls	r3, r3, #6
 80080e4:	4618      	mov	r0, r3
 80080e6:	f001 fa8b 	bl	8009600 <SUBGRF_SetRx>
}
 80080ea:	bf00      	nop
 80080ec:	3708      	adds	r7, #8
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop
 80080f4:	200002fc 	.word	0x200002fc
 80080f8:	20000288 	.word	0x20000288

080080fc <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8008104:	f002 fab1 	bl	800a66a <RFW_Is_Init>
 8008108:	4603      	mov	r3, r0
 800810a:	2b01      	cmp	r3, #1
 800810c:	d102      	bne.n	8008114 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 800810e:	f002 fad4 	bl	800a6ba <RFW_ReceiveInit>
 8008112:	e007      	b.n	8008124 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8008114:	2300      	movs	r3, #0
 8008116:	2200      	movs	r2, #0
 8008118:	f240 2162 	movw	r1, #610	; 0x262
 800811c:	f240 2062 	movw	r0, #610	; 0x262
 8008120:	f001 fc06 	bl	8009930 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d006      	beq.n	8008138 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800812a:	6879      	ldr	r1, [r7, #4]
 800812c:	4811      	ldr	r0, [pc, #68]	; (8008174 <RadioRxBoosted+0x78>)
 800812e:	f003 fa7d 	bl	800b62c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8008132:	4810      	ldr	r0, [pc, #64]	; (8008174 <RadioRxBoosted+0x78>)
 8008134:	f003 f99c 	bl	800b470 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008138:	4b0f      	ldr	r3, [pc, #60]	; (8008178 <RadioRxBoosted+0x7c>)
 800813a:	2200      	movs	r2, #0
 800813c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800813e:	4b0e      	ldr	r3, [pc, #56]	; (8008178 <RadioRxBoosted+0x7c>)
 8008140:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008144:	2100      	movs	r1, #0
 8008146:	4618      	mov	r0, r3
 8008148:	f002 f896 	bl	800a278 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 800814c:	4b0a      	ldr	r3, [pc, #40]	; (8008178 <RadioRxBoosted+0x7c>)
 800814e:	785b      	ldrb	r3, [r3, #1]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d004      	beq.n	800815e <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8008154:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008158:	f001 fa72 	bl	8009640 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 800815c:	e005      	b.n	800816a <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 800815e:	4b06      	ldr	r3, [pc, #24]	; (8008178 <RadioRxBoosted+0x7c>)
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	019b      	lsls	r3, r3, #6
 8008164:	4618      	mov	r0, r3
 8008166:	f001 fa6b 	bl	8009640 <SUBGRF_SetRxBoosted>
}
 800816a:	bf00      	nop
 800816c:	3708      	adds	r7, #8
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	200002fc 	.word	0x200002fc
 8008178:	20000288 	.word	0x20000288

0800817c <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	005a      	lsls	r2, r3, #1
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	4413      	add	r3, r2
 800818e:	4a0c      	ldr	r2, [pc, #48]	; (80081c0 <RadioSetRxDutyCycle+0x44>)
 8008190:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8008192:	2300      	movs	r3, #0
 8008194:	2200      	movs	r2, #0
 8008196:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800819a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800819e:	f001 fbc7 	bl	8009930 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80081a2:	4b07      	ldr	r3, [pc, #28]	; (80081c0 <RadioSetRxDutyCycle+0x44>)
 80081a4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80081a8:	2100      	movs	r1, #0
 80081aa:	4618      	mov	r0, r3
 80081ac:	f002 f864 	bl	800a278 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 80081b0:	6839      	ldr	r1, [r7, #0]
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f001 fa68 	bl	8009688 <SUBGRF_SetRxDutyCycle>
}
 80081b8:	bf00      	nop
 80081ba:	3708      	adds	r7, #8
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}
 80081c0:	20000288 	.word	0x20000288

080081c4 <RadioStartCad>:

static void RadioStartCad( void )
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80081c8:	4b09      	ldr	r3, [pc, #36]	; (80081f0 <RadioStartCad+0x2c>)
 80081ca:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80081ce:	2100      	movs	r1, #0
 80081d0:	4618      	mov	r0, r3
 80081d2:	f002 f851 	bl	800a278 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 80081d6:	2300      	movs	r3, #0
 80081d8:	2200      	movs	r2, #0
 80081da:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80081de:	f44f 70c0 	mov.w	r0, #384	; 0x180
 80081e2:	f001 fba5 	bl	8009930 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 80081e6:	f001 fa7b 	bl	80096e0 <SUBGRF_SetCad>
}
 80081ea:	bf00      	nop
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	20000288 	.word	0x20000288

080081f4 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	460b      	mov	r3, r1
 80081fe:	70fb      	strb	r3, [r7, #3]
 8008200:	4613      	mov	r3, r2
 8008202:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8008204:	883b      	ldrh	r3, [r7, #0]
 8008206:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800820a:	fb02 f303 	mul.w	r3, r2, r3
 800820e:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f001 fbe9 	bl	80099e8 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8008216:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800821a:	4618      	mov	r0, r3
 800821c:	f002 f854 	bl	800a2c8 <SUBGRF_SetRfTxPower>
 8008220:	4603      	mov	r3, r0
 8008222:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8008224:	210e      	movs	r1, #14
 8008226:	f640 101f 	movw	r0, #2335	; 0x91f
 800822a:	f001 ff31 	bl	800a090 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 800822e:	7afb      	ldrb	r3, [r7, #11]
 8008230:	2101      	movs	r1, #1
 8008232:	4618      	mov	r0, r3
 8008234:	f002 f820 	bl	800a278 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8008238:	f001 fa60 	bl	80096fc <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 800823c:	68f9      	ldr	r1, [r7, #12]
 800823e:	4805      	ldr	r0, [pc, #20]	; (8008254 <RadioSetTxContinuousWave+0x60>)
 8008240:	f003 f9f4 	bl	800b62c <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8008244:	4803      	ldr	r0, [pc, #12]	; (8008254 <RadioSetTxContinuousWave+0x60>)
 8008246:	f003 f913 	bl	800b470 <UTIL_TIMER_Start>
}
 800824a:	bf00      	nop
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	200002e4 	.word	0x200002e4

08008258 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	4603      	mov	r3, r0
 8008260:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8008262:	f001 fe82 	bl	8009f6a <SUBGRF_GetRssiInst>
 8008266:	4603      	mov	r3, r0
 8008268:	b21b      	sxth	r3, r3
}
 800826a:	4618      	mov	r0, r3
 800826c:	3708      	adds	r7, #8
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b082      	sub	sp, #8
 8008276:	af00      	add	r7, sp, #0
 8008278:	4603      	mov	r3, r0
 800827a:	460a      	mov	r2, r1
 800827c:	80fb      	strh	r3, [r7, #6]
 800827e:	4613      	mov	r3, r2
 8008280:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8008282:	797a      	ldrb	r2, [r7, #5]
 8008284:	88fb      	ldrh	r3, [r7, #6]
 8008286:	4611      	mov	r1, r2
 8008288:	4618      	mov	r0, r3
 800828a:	f001 ff01 	bl	800a090 <SUBGRF_WriteRegister>
}
 800828e:	bf00      	nop
 8008290:	3708      	adds	r7, #8
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b082      	sub	sp, #8
 800829a:	af00      	add	r7, sp, #0
 800829c:	4603      	mov	r3, r0
 800829e:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 80082a0:	88fb      	ldrh	r3, [r7, #6]
 80082a2:	4618      	mov	r0, r3
 80082a4:	f001 ff08 	bl	800a0b8 <SUBGRF_ReadRegister>
 80082a8:	4603      	mov	r3, r0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3708      	adds	r7, #8
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b082      	sub	sp, #8
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	4603      	mov	r3, r0
 80082ba:	6039      	str	r1, [r7, #0]
 80082bc:	80fb      	strh	r3, [r7, #6]
 80082be:	4613      	mov	r3, r2
 80082c0:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 80082c2:	797b      	ldrb	r3, [r7, #5]
 80082c4:	b29a      	uxth	r2, r3
 80082c6:	88fb      	ldrh	r3, [r7, #6]
 80082c8:	6839      	ldr	r1, [r7, #0]
 80082ca:	4618      	mov	r0, r3
 80082cc:	f001 ff08 	bl	800a0e0 <SUBGRF_WriteRegisters>
}
 80082d0:	bf00      	nop
 80082d2:	3708      	adds	r7, #8
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
 80082de:	4603      	mov	r3, r0
 80082e0:	6039      	str	r1, [r7, #0]
 80082e2:	80fb      	strh	r3, [r7, #6]
 80082e4:	4613      	mov	r3, r2
 80082e6:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 80082e8:	797b      	ldrb	r3, [r7, #5]
 80082ea:	b29a      	uxth	r2, r3
 80082ec:	88fb      	ldrh	r3, [r7, #6]
 80082ee:	6839      	ldr	r1, [r7, #0]
 80082f0:	4618      	mov	r0, r3
 80082f2:	f001 ff17 	bl	800a124 <SUBGRF_ReadRegisters>
}
 80082f6:	bf00      	nop
 80082f8:	3708      	adds	r7, #8
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
	...

08008300 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	4603      	mov	r3, r0
 8008308:	460a      	mov	r2, r1
 800830a:	71fb      	strb	r3, [r7, #7]
 800830c:	4613      	mov	r3, r2
 800830e:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8008310:	79fb      	ldrb	r3, [r7, #7]
 8008312:	2b01      	cmp	r3, #1
 8008314:	d10a      	bne.n	800832c <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8008316:	4a0e      	ldr	r2, [pc, #56]	; (8008350 <RadioSetMaxPayloadLength+0x50>)
 8008318:	79bb      	ldrb	r3, [r7, #6]
 800831a:	7013      	strb	r3, [r2, #0]
 800831c:	4b0c      	ldr	r3, [pc, #48]	; (8008350 <RadioSetMaxPayloadLength+0x50>)
 800831e:	781a      	ldrb	r2, [r3, #0]
 8008320:	4b0c      	ldr	r3, [pc, #48]	; (8008354 <RadioSetMaxPayloadLength+0x54>)
 8008322:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008324:	480c      	ldr	r0, [pc, #48]	; (8008358 <RadioSetMaxPayloadLength+0x58>)
 8008326:	f001 fd6b 	bl	8009e00 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 800832a:	e00d      	b.n	8008348 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800832c:	4b09      	ldr	r3, [pc, #36]	; (8008354 <RadioSetMaxPayloadLength+0x54>)
 800832e:	7d5b      	ldrb	r3, [r3, #21]
 8008330:	2b01      	cmp	r3, #1
 8008332:	d109      	bne.n	8008348 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8008334:	4a06      	ldr	r2, [pc, #24]	; (8008350 <RadioSetMaxPayloadLength+0x50>)
 8008336:	79bb      	ldrb	r3, [r7, #6]
 8008338:	7013      	strb	r3, [r2, #0]
 800833a:	4b05      	ldr	r3, [pc, #20]	; (8008350 <RadioSetMaxPayloadLength+0x50>)
 800833c:	781a      	ldrb	r2, [r3, #0]
 800833e:	4b05      	ldr	r3, [pc, #20]	; (8008354 <RadioSetMaxPayloadLength+0x54>)
 8008340:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008342:	4805      	ldr	r0, [pc, #20]	; (8008358 <RadioSetMaxPayloadLength+0x58>)
 8008344:	f001 fd5c 	bl	8009e00 <SUBGRF_SetPacketParams>
}
 8008348:	bf00      	nop
 800834a:	3708      	adds	r7, #8
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}
 8008350:	20000008 	.word	0x20000008
 8008354:	20000288 	.word	0x20000288
 8008358:	20000296 	.word	0x20000296

0800835c <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
 8008362:	4603      	mov	r3, r0
 8008364:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8008366:	4a13      	ldr	r2, [pc, #76]	; (80083b4 <RadioSetPublicNetwork+0x58>)
 8008368:	79fb      	ldrb	r3, [r7, #7]
 800836a:	7313      	strb	r3, [r2, #12]
 800836c:	4b11      	ldr	r3, [pc, #68]	; (80083b4 <RadioSetPublicNetwork+0x58>)
 800836e:	7b1a      	ldrb	r2, [r3, #12]
 8008370:	4b10      	ldr	r3, [pc, #64]	; (80083b4 <RadioSetPublicNetwork+0x58>)
 8008372:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8008374:	2001      	movs	r0, #1
 8008376:	f7ff f811 	bl	800739c <RadioSetModem>
    if( enable == true )
 800837a:	79fb      	ldrb	r3, [r7, #7]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00a      	beq.n	8008396 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8008380:	2134      	movs	r1, #52	; 0x34
 8008382:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8008386:	f001 fe83 	bl	800a090 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800838a:	2144      	movs	r1, #68	; 0x44
 800838c:	f240 7041 	movw	r0, #1857	; 0x741
 8008390:	f001 fe7e 	bl	800a090 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8008394:	e009      	b.n	80083aa <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8008396:	2114      	movs	r1, #20
 8008398:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800839c:	f001 fe78 	bl	800a090 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80083a0:	2124      	movs	r1, #36	; 0x24
 80083a2:	f240 7041 	movw	r0, #1857	; 0x741
 80083a6:	f001 fe73 	bl	800a090 <SUBGRF_WriteRegister>
}
 80083aa:	bf00      	nop
 80083ac:	3708      	adds	r7, #8
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	20000288 	.word	0x20000288

080083b8 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80083bc:	f001 ffb8 	bl	800a330 <SUBGRF_GetRadioWakeUpTime>
 80083c0:	4603      	mov	r3, r0
 80083c2:	3303      	adds	r3, #3
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 80083d0:	f000 f80e 	bl	80083f0 <RadioOnTxTimeoutProcess>
}
 80083d4:	bf00      	nop
 80083d6:	3708      	adds	r7, #8
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 80083e4:	f000 f818 	bl	8008418 <RadioOnRxTimeoutProcess>
}
 80083e8:	bf00      	nop
 80083ea:	3708      	adds	r7, #8
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80083f4:	4b07      	ldr	r3, [pc, #28]	; (8008414 <RadioOnTxTimeoutProcess+0x24>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d008      	beq.n	800840e <RadioOnTxTimeoutProcess+0x1e>
 80083fc:	4b05      	ldr	r3, [pc, #20]	; (8008414 <RadioOnTxTimeoutProcess+0x24>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d003      	beq.n	800840e <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8008406:	4b03      	ldr	r3, [pc, #12]	; (8008414 <RadioOnTxTimeoutProcess+0x24>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	4798      	blx	r3
    }
}
 800840e:	bf00      	nop
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	20000284 	.word	0x20000284

08008418 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8008418:	b580      	push	{r7, lr}
 800841a:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800841c:	4b07      	ldr	r3, [pc, #28]	; (800843c <RadioOnRxTimeoutProcess+0x24>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d008      	beq.n	8008436 <RadioOnRxTimeoutProcess+0x1e>
 8008424:	4b05      	ldr	r3, [pc, #20]	; (800843c <RadioOnRxTimeoutProcess+0x24>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	68db      	ldr	r3, [r3, #12]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d003      	beq.n	8008436 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 800842e:	4b03      	ldr	r3, [pc, #12]	; (800843c <RadioOnRxTimeoutProcess+0x24>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	4798      	blx	r3
    }
}
 8008436:	bf00      	nop
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	20000284 	.word	0x20000284

08008440 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	4603      	mov	r3, r0
 8008448:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 800844a:	4a05      	ldr	r2, [pc, #20]	; (8008460 <RadioOnDioIrq+0x20>)
 800844c:	88fb      	ldrh	r3, [r7, #6]
 800844e:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 8008452:	f000 f807 	bl	8008464 <RadioIrqProcess>
}
 8008456:	bf00      	nop
 8008458:	3708      	adds	r7, #8
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	20000288 	.word	0x20000288

08008464 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8008464:	b5b0      	push	{r4, r5, r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 800846a:	2300      	movs	r3, #0
 800846c:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 800846e:	2300      	movs	r3, #0
 8008470:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8008472:	4ba8      	ldr	r3, [pc, #672]	; (8008714 <RadioIrqProcess+0x2b0>)
 8008474:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800847c:	f000 810d 	beq.w	800869a <RadioIrqProcess+0x236>
 8008480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008484:	f300 81e8 	bgt.w	8008858 <RadioIrqProcess+0x3f4>
 8008488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800848c:	f000 80f1 	beq.w	8008672 <RadioIrqProcess+0x20e>
 8008490:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008494:	f300 81e0 	bgt.w	8008858 <RadioIrqProcess+0x3f4>
 8008498:	2b80      	cmp	r3, #128	; 0x80
 800849a:	f000 80d6 	beq.w	800864a <RadioIrqProcess+0x1e6>
 800849e:	2b80      	cmp	r3, #128	; 0x80
 80084a0:	f300 81da 	bgt.w	8008858 <RadioIrqProcess+0x3f4>
 80084a4:	2b20      	cmp	r3, #32
 80084a6:	dc49      	bgt.n	800853c <RadioIrqProcess+0xd8>
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f340 81d5 	ble.w	8008858 <RadioIrqProcess+0x3f4>
 80084ae:	3b01      	subs	r3, #1
 80084b0:	2b1f      	cmp	r3, #31
 80084b2:	f200 81d1 	bhi.w	8008858 <RadioIrqProcess+0x3f4>
 80084b6:	a201      	add	r2, pc, #4	; (adr r2, 80084bc <RadioIrqProcess+0x58>)
 80084b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084bc:	08008545 	.word	0x08008545
 80084c0:	0800857f 	.word	0x0800857f
 80084c4:	08008859 	.word	0x08008859
 80084c8:	08008735 	.word	0x08008735
 80084cc:	08008859 	.word	0x08008859
 80084d0:	08008859 	.word	0x08008859
 80084d4:	08008859 	.word	0x08008859
 80084d8:	080087b1 	.word	0x080087b1
 80084dc:	08008859 	.word	0x08008859
 80084e0:	08008859 	.word	0x08008859
 80084e4:	08008859 	.word	0x08008859
 80084e8:	08008859 	.word	0x08008859
 80084ec:	08008859 	.word	0x08008859
 80084f0:	08008859 	.word	0x08008859
 80084f4:	08008859 	.word	0x08008859
 80084f8:	080087cd 	.word	0x080087cd
 80084fc:	08008859 	.word	0x08008859
 8008500:	08008859 	.word	0x08008859
 8008504:	08008859 	.word	0x08008859
 8008508:	08008859 	.word	0x08008859
 800850c:	08008859 	.word	0x08008859
 8008510:	08008859 	.word	0x08008859
 8008514:	08008859 	.word	0x08008859
 8008518:	08008859 	.word	0x08008859
 800851c:	08008859 	.word	0x08008859
 8008520:	08008859 	.word	0x08008859
 8008524:	08008859 	.word	0x08008859
 8008528:	08008859 	.word	0x08008859
 800852c:	08008859 	.word	0x08008859
 8008530:	08008859 	.word	0x08008859
 8008534:	08008859 	.word	0x08008859
 8008538:	080087db 	.word	0x080087db
 800853c:	2b40      	cmp	r3, #64	; 0x40
 800853e:	f000 816d 	beq.w	800881c <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8008542:	e189      	b.n	8008858 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 8008544:	4874      	ldr	r0, [pc, #464]	; (8008718 <RadioIrqProcess+0x2b4>)
 8008546:	f003 f801 	bl	800b54c <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800854a:	2000      	movs	r0, #0
 800854c:	f001 f81c 	bl	8009588 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8008550:	f002 f892 	bl	800a678 <RFW_Is_LongPacketModeEnabled>
 8008554:	4603      	mov	r3, r0
 8008556:	2b01      	cmp	r3, #1
 8008558:	d101      	bne.n	800855e <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 800855a:	f002 f8b6 	bl	800a6ca <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800855e:	4b6f      	ldr	r3, [pc, #444]	; (800871c <RadioIrqProcess+0x2b8>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	f000 817a 	beq.w	800885c <RadioIrqProcess+0x3f8>
 8008568:	4b6c      	ldr	r3, [pc, #432]	; (800871c <RadioIrqProcess+0x2b8>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	2b00      	cmp	r3, #0
 8008570:	f000 8174 	beq.w	800885c <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 8008574:	4b69      	ldr	r3, [pc, #420]	; (800871c <RadioIrqProcess+0x2b8>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4798      	blx	r3
        break;
 800857c:	e16e      	b.n	800885c <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 800857e:	4868      	ldr	r0, [pc, #416]	; (8008720 <RadioIrqProcess+0x2bc>)
 8008580:	f002 ffe4 	bl	800b54c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8008584:	4b63      	ldr	r3, [pc, #396]	; (8008714 <RadioIrqProcess+0x2b0>)
 8008586:	785b      	ldrb	r3, [r3, #1]
 8008588:	f083 0301 	eor.w	r3, r3, #1
 800858c:	b2db      	uxtb	r3, r3
 800858e:	2b00      	cmp	r3, #0
 8008590:	d014      	beq.n	80085bc <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8008592:	2000      	movs	r0, #0
 8008594:	f000 fff8 	bl	8009588 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8008598:	2100      	movs	r1, #0
 800859a:	f640 1002 	movw	r0, #2306	; 0x902
 800859e:	f001 fd77 	bl	800a090 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 80085a2:	f640 1044 	movw	r0, #2372	; 0x944
 80085a6:	f001 fd87 	bl	800a0b8 <SUBGRF_ReadRegister>
 80085aa:	4603      	mov	r3, r0
 80085ac:	f043 0302 	orr.w	r3, r3, #2
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	4619      	mov	r1, r3
 80085b4:	f640 1044 	movw	r0, #2372	; 0x944
 80085b8:	f001 fd6a 	bl	800a090 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 80085bc:	1dfb      	adds	r3, r7, #7
 80085be:	22ff      	movs	r2, #255	; 0xff
 80085c0:	4619      	mov	r1, r3
 80085c2:	4858      	ldr	r0, [pc, #352]	; (8008724 <RadioIrqProcess+0x2c0>)
 80085c4:	f000 feb0 	bl	8009328 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 80085c8:	4857      	ldr	r0, [pc, #348]	; (8008728 <RadioIrqProcess+0x2c4>)
 80085ca:	f001 fd0f 	bl	8009fec <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80085ce:	4b53      	ldr	r3, [pc, #332]	; (800871c <RadioIrqProcess+0x2b8>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	f000 8144 	beq.w	8008860 <RadioIrqProcess+0x3fc>
 80085d8:	4b50      	ldr	r3, [pc, #320]	; (800871c <RadioIrqProcess+0x2b8>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	f000 813e 	beq.w	8008860 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 80085e4:	4b4b      	ldr	r3, [pc, #300]	; (8008714 <RadioIrqProcess+0x2b0>)
 80085e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d10e      	bne.n	800860c <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 80085ee:	4b4b      	ldr	r3, [pc, #300]	; (800871c <RadioIrqProcess+0x2b8>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	689c      	ldr	r4, [r3, #8]
 80085f4:	79fb      	ldrb	r3, [r7, #7]
 80085f6:	b299      	uxth	r1, r3
 80085f8:	4b46      	ldr	r3, [pc, #280]	; (8008714 <RadioIrqProcess+0x2b0>)
 80085fa:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 80085fe:	b21a      	sxth	r2, r3
 8008600:	4b44      	ldr	r3, [pc, #272]	; (8008714 <RadioIrqProcess+0x2b0>)
 8008602:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8008606:	4847      	ldr	r0, [pc, #284]	; (8008724 <RadioIrqProcess+0x2c0>)
 8008608:	47a0      	blx	r4
                break;
 800860a:	e01d      	b.n	8008648 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800860c:	4b41      	ldr	r3, [pc, #260]	; (8008714 <RadioIrqProcess+0x2b0>)
 800860e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008610:	463a      	mov	r2, r7
 8008612:	4611      	mov	r1, r2
 8008614:	4618      	mov	r0, r3
 8008616:	f001 ff7d 	bl	800a514 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 800861a:	4b40      	ldr	r3, [pc, #256]	; (800871c <RadioIrqProcess+0x2b8>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	689c      	ldr	r4, [r3, #8]
 8008620:	79fb      	ldrb	r3, [r7, #7]
 8008622:	b299      	uxth	r1, r3
 8008624:	4b3b      	ldr	r3, [pc, #236]	; (8008714 <RadioIrqProcess+0x2b0>)
 8008626:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 800862a:	b218      	sxth	r0, r3
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008632:	4a3e      	ldr	r2, [pc, #248]	; (800872c <RadioIrqProcess+0x2c8>)
 8008634:	fb82 5203 	smull	r5, r2, r2, r3
 8008638:	1192      	asrs	r2, r2, #6
 800863a:	17db      	asrs	r3, r3, #31
 800863c:	1ad3      	subs	r3, r2, r3
 800863e:	b25b      	sxtb	r3, r3
 8008640:	4602      	mov	r2, r0
 8008642:	4838      	ldr	r0, [pc, #224]	; (8008724 <RadioIrqProcess+0x2c0>)
 8008644:	47a0      	blx	r4
                break;
 8008646:	bf00      	nop
        break;
 8008648:	e10a      	b.n	8008860 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 800864a:	2000      	movs	r0, #0
 800864c:	f000 ff9c 	bl	8009588 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8008650:	4b32      	ldr	r3, [pc, #200]	; (800871c <RadioIrqProcess+0x2b8>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2b00      	cmp	r3, #0
 8008656:	f000 8105 	beq.w	8008864 <RadioIrqProcess+0x400>
 800865a:	4b30      	ldr	r3, [pc, #192]	; (800871c <RadioIrqProcess+0x2b8>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	699b      	ldr	r3, [r3, #24]
 8008660:	2b00      	cmp	r3, #0
 8008662:	f000 80ff 	beq.w	8008864 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 8008666:	4b2d      	ldr	r3, [pc, #180]	; (800871c <RadioIrqProcess+0x2b8>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	699b      	ldr	r3, [r3, #24]
 800866c:	2000      	movs	r0, #0
 800866e:	4798      	blx	r3
        break;
 8008670:	e0f8      	b.n	8008864 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 8008672:	2000      	movs	r0, #0
 8008674:	f000 ff88 	bl	8009588 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8008678:	4b28      	ldr	r3, [pc, #160]	; (800871c <RadioIrqProcess+0x2b8>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	f000 80f3 	beq.w	8008868 <RadioIrqProcess+0x404>
 8008682:	4b26      	ldr	r3, [pc, #152]	; (800871c <RadioIrqProcess+0x2b8>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	699b      	ldr	r3, [r3, #24]
 8008688:	2b00      	cmp	r3, #0
 800868a:	f000 80ed 	beq.w	8008868 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 800868e:	4b23      	ldr	r3, [pc, #140]	; (800871c <RadioIrqProcess+0x2b8>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	699b      	ldr	r3, [r3, #24]
 8008694:	2001      	movs	r0, #1
 8008696:	4798      	blx	r3
        break;
 8008698:	e0e6      	b.n	8008868 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 800869a:	4b25      	ldr	r3, [pc, #148]	; (8008730 <RadioIrqProcess+0x2cc>)
 800869c:	2201      	movs	r2, #1
 800869e:	2100      	movs	r1, #0
 80086a0:	2002      	movs	r0, #2
 80086a2:	f003 f94b 	bl	800b93c <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 80086a6:	f000 fe25 	bl	80092f4 <SUBGRF_GetOperatingMode>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b04      	cmp	r3, #4
 80086ae:	d115      	bne.n	80086dc <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 80086b0:	4819      	ldr	r0, [pc, #100]	; (8008718 <RadioIrqProcess+0x2b4>)
 80086b2:	f002 ff4b 	bl	800b54c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80086b6:	2000      	movs	r0, #0
 80086b8:	f000 ff66 	bl	8009588 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80086bc:	4b17      	ldr	r3, [pc, #92]	; (800871c <RadioIrqProcess+0x2b8>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	f000 80d3 	beq.w	800886c <RadioIrqProcess+0x408>
 80086c6:	4b15      	ldr	r3, [pc, #84]	; (800871c <RadioIrqProcess+0x2b8>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f000 80cd 	beq.w	800886c <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 80086d2:	4b12      	ldr	r3, [pc, #72]	; (800871c <RadioIrqProcess+0x2b8>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	4798      	blx	r3
        break;
 80086da:	e0c7      	b.n	800886c <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 80086dc:	f000 fe0a 	bl	80092f4 <SUBGRF_GetOperatingMode>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b05      	cmp	r3, #5
 80086e4:	f040 80c2 	bne.w	800886c <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 80086e8:	480d      	ldr	r0, [pc, #52]	; (8008720 <RadioIrqProcess+0x2bc>)
 80086ea:	f002 ff2f 	bl	800b54c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80086ee:	2000      	movs	r0, #0
 80086f0:	f000 ff4a 	bl	8009588 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80086f4:	4b09      	ldr	r3, [pc, #36]	; (800871c <RadioIrqProcess+0x2b8>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f000 80b7 	beq.w	800886c <RadioIrqProcess+0x408>
 80086fe:	4b07      	ldr	r3, [pc, #28]	; (800871c <RadioIrqProcess+0x2b8>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	2b00      	cmp	r3, #0
 8008706:	f000 80b1 	beq.w	800886c <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 800870a:	4b04      	ldr	r3, [pc, #16]	; (800871c <RadioIrqProcess+0x2b8>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	4798      	blx	r3
        break;
 8008712:	e0ab      	b.n	800886c <RadioIrqProcess+0x408>
 8008714:	20000288 	.word	0x20000288
 8008718:	200002e4 	.word	0x200002e4
 800871c:	20000284 	.word	0x20000284
 8008720:	200002fc 	.word	0x200002fc
 8008724:	20000184 	.word	0x20000184
 8008728:	200002ac 	.word	0x200002ac
 800872c:	10624dd3 	.word	0x10624dd3
 8008730:	0800bf08 	.word	0x0800bf08
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8008734:	4b54      	ldr	r3, [pc, #336]	; (8008888 <RadioIrqProcess+0x424>)
 8008736:	2201      	movs	r2, #1
 8008738:	2100      	movs	r1, #0
 800873a:	2002      	movs	r0, #2
 800873c:	f003 f8fe 	bl	800b93c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8008740:	4b52      	ldr	r3, [pc, #328]	; (800888c <RadioIrqProcess+0x428>)
 8008742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008744:	2b00      	cmp	r3, #0
 8008746:	f000 8093 	beq.w	8008870 <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 800874a:	4a51      	ldr	r2, [pc, #324]	; (8008890 <RadioIrqProcess+0x42c>)
 800874c:	4b4f      	ldr	r3, [pc, #316]	; (800888c <RadioIrqProcess+0x428>)
 800874e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008750:	0c1b      	lsrs	r3, r3, #16
 8008752:	b2db      	uxtb	r3, r3
 8008754:	4619      	mov	r1, r3
 8008756:	f640 1003 	movw	r0, #2307	; 0x903
 800875a:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 800875c:	4a4c      	ldr	r2, [pc, #304]	; (8008890 <RadioIrqProcess+0x42c>)
 800875e:	4b4b      	ldr	r3, [pc, #300]	; (800888c <RadioIrqProcess+0x428>)
 8008760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008762:	0a1b      	lsrs	r3, r3, #8
 8008764:	b2db      	uxtb	r3, r3
 8008766:	4619      	mov	r1, r3
 8008768:	f640 1004 	movw	r0, #2308	; 0x904
 800876c:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 800876e:	4a48      	ldr	r2, [pc, #288]	; (8008890 <RadioIrqProcess+0x42c>)
 8008770:	4b46      	ldr	r3, [pc, #280]	; (800888c <RadioIrqProcess+0x428>)
 8008772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008774:	b2db      	uxtb	r3, r3
 8008776:	4619      	mov	r1, r3
 8008778:	f640 1005 	movw	r0, #2309	; 0x905
 800877c:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 800877e:	4c44      	ldr	r4, [pc, #272]	; (8008890 <RadioIrqProcess+0x42c>)
 8008780:	4b44      	ldr	r3, [pc, #272]	; (8008894 <RadioIrqProcess+0x430>)
 8008782:	f640 1002 	movw	r0, #2306	; 0x902
 8008786:	4798      	blx	r3
 8008788:	4603      	mov	r3, r0
 800878a:	f043 0301 	orr.w	r3, r3, #1
 800878e:	b2db      	uxtb	r3, r3
 8008790:	4619      	mov	r1, r3
 8008792:	f640 1002 	movw	r0, #2306	; 0x902
 8008796:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8008798:	4b3c      	ldr	r3, [pc, #240]	; (800888c <RadioIrqProcess+0x428>)
 800879a:	2200      	movs	r2, #0
 800879c:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800879e:	2300      	movs	r3, #0
 80087a0:	2200      	movs	r2, #0
 80087a2:	f240 2162 	movw	r1, #610	; 0x262
 80087a6:	f240 2062 	movw	r0, #610	; 0x262
 80087aa:	f001 f8c1 	bl	8009930 <SUBGRF_SetDioIrqParams>
        break;
 80087ae:	e05f      	b.n	8008870 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 80087b0:	4b39      	ldr	r3, [pc, #228]	; (8008898 <RadioIrqProcess+0x434>)
 80087b2:	2201      	movs	r2, #1
 80087b4:	2100      	movs	r1, #0
 80087b6:	2002      	movs	r0, #2
 80087b8:	f003 f8c0 	bl	800b93c <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 80087bc:	f001 ff55 	bl	800a66a <RFW_Is_Init>
 80087c0:	4603      	mov	r3, r0
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d156      	bne.n	8008874 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 80087c6:	f001 ff86 	bl	800a6d6 <RFW_ReceivePayload>
        break;
 80087ca:	e053      	b.n	8008874 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 80087cc:	4b33      	ldr	r3, [pc, #204]	; (800889c <RadioIrqProcess+0x438>)
 80087ce:	2201      	movs	r2, #1
 80087d0:	2100      	movs	r1, #0
 80087d2:	2002      	movs	r0, #2
 80087d4:	f003 f8b2 	bl	800b93c <UTIL_ADV_TRACE_COND_FSend>
        break;
 80087d8:	e051      	b.n	800887e <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 80087da:	4831      	ldr	r0, [pc, #196]	; (80088a0 <RadioIrqProcess+0x43c>)
 80087dc:	f002 feb6 	bl	800b54c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80087e0:	4b2a      	ldr	r3, [pc, #168]	; (800888c <RadioIrqProcess+0x428>)
 80087e2:	785b      	ldrb	r3, [r3, #1]
 80087e4:	f083 0301 	eor.w	r3, r3, #1
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d002      	beq.n	80087f4 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 80087ee:	2000      	movs	r0, #0
 80087f0:	f000 feca 	bl	8009588 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80087f4:	4b2b      	ldr	r3, [pc, #172]	; (80088a4 <RadioIrqProcess+0x440>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d03d      	beq.n	8008878 <RadioIrqProcess+0x414>
 80087fc:	4b29      	ldr	r3, [pc, #164]	; (80088a4 <RadioIrqProcess+0x440>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d038      	beq.n	8008878 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 8008806:	4b27      	ldr	r3, [pc, #156]	; (80088a4 <RadioIrqProcess+0x440>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 800880e:	4b26      	ldr	r3, [pc, #152]	; (80088a8 <RadioIrqProcess+0x444>)
 8008810:	2201      	movs	r2, #1
 8008812:	2100      	movs	r1, #0
 8008814:	2002      	movs	r0, #2
 8008816:	f003 f891 	bl	800b93c <UTIL_ADV_TRACE_COND_FSend>
        break;
 800881a:	e02d      	b.n	8008878 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 800881c:	4b23      	ldr	r3, [pc, #140]	; (80088ac <RadioIrqProcess+0x448>)
 800881e:	2201      	movs	r2, #1
 8008820:	2100      	movs	r1, #0
 8008822:	2002      	movs	r0, #2
 8008824:	f003 f88a 	bl	800b93c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8008828:	4b18      	ldr	r3, [pc, #96]	; (800888c <RadioIrqProcess+0x428>)
 800882a:	785b      	ldrb	r3, [r3, #1]
 800882c:	f083 0301 	eor.w	r3, r3, #1
 8008830:	b2db      	uxtb	r3, r3
 8008832:	2b00      	cmp	r3, #0
 8008834:	d002      	beq.n	800883c <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 8008836:	2000      	movs	r0, #0
 8008838:	f000 fea6 	bl	8009588 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800883c:	4b19      	ldr	r3, [pc, #100]	; (80088a4 <RadioIrqProcess+0x440>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d01b      	beq.n	800887c <RadioIrqProcess+0x418>
 8008844:	4b17      	ldr	r3, [pc, #92]	; (80088a4 <RadioIrqProcess+0x440>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	691b      	ldr	r3, [r3, #16]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d016      	beq.n	800887c <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 800884e:	4b15      	ldr	r3, [pc, #84]	; (80088a4 <RadioIrqProcess+0x440>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	691b      	ldr	r3, [r3, #16]
 8008854:	4798      	blx	r3
        break;
 8008856:	e011      	b.n	800887c <RadioIrqProcess+0x418>
        break;
 8008858:	bf00      	nop
 800885a:	e010      	b.n	800887e <RadioIrqProcess+0x41a>
        break;
 800885c:	bf00      	nop
 800885e:	e00e      	b.n	800887e <RadioIrqProcess+0x41a>
        break;
 8008860:	bf00      	nop
 8008862:	e00c      	b.n	800887e <RadioIrqProcess+0x41a>
        break;
 8008864:	bf00      	nop
 8008866:	e00a      	b.n	800887e <RadioIrqProcess+0x41a>
        break;
 8008868:	bf00      	nop
 800886a:	e008      	b.n	800887e <RadioIrqProcess+0x41a>
        break;
 800886c:	bf00      	nop
 800886e:	e006      	b.n	800887e <RadioIrqProcess+0x41a>
        break;
 8008870:	bf00      	nop
 8008872:	e004      	b.n	800887e <RadioIrqProcess+0x41a>
        break;
 8008874:	bf00      	nop
 8008876:	e002      	b.n	800887e <RadioIrqProcess+0x41a>
        break;
 8008878:	bf00      	nop
 800887a:	e000      	b.n	800887e <RadioIrqProcess+0x41a>
        break;
 800887c:	bf00      	nop
    }
}
 800887e:	bf00      	nop
 8008880:	3708      	adds	r7, #8
 8008882:	46bd      	mov	sp, r7
 8008884:	bdb0      	pop	{r4, r5, r7, pc}
 8008886:	bf00      	nop
 8008888:	0800bf1c 	.word	0x0800bf1c
 800888c:	20000288 	.word	0x20000288
 8008890:	08008273 	.word	0x08008273
 8008894:	08008297 	.word	0x08008297
 8008898:	0800bf28 	.word	0x0800bf28
 800889c:	0800bf34 	.word	0x0800bf34
 80088a0:	200002fc 	.word	0x200002fc
 80088a4:	20000284 	.word	0x20000284
 80088a8:	0800bf40 	.word	0x0800bf40
 80088ac:	0800bf4c 	.word	0x0800bf4c

080088b0 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80088b4:	4b09      	ldr	r3, [pc, #36]	; (80088dc <RadioTxPrbs+0x2c>)
 80088b6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80088ba:	2101      	movs	r1, #1
 80088bc:	4618      	mov	r0, r3
 80088be:	f001 fcdb 	bl	800a278 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 80088c2:	4b07      	ldr	r3, [pc, #28]	; (80088e0 <RadioTxPrbs+0x30>)
 80088c4:	212d      	movs	r1, #45	; 0x2d
 80088c6:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80088ca:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 80088cc:	f000 ff1f 	bl	800970e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80088d0:	4804      	ldr	r0, [pc, #16]	; (80088e4 <RadioTxPrbs+0x34>)
 80088d2:	f000 fe75 	bl	80095c0 <SUBGRF_SetTx>
}
 80088d6:	bf00      	nop
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop
 80088dc:	20000288 	.word	0x20000288
 80088e0:	08008273 	.word	0x08008273
 80088e4:	000fffff 	.word	0x000fffff

080088e8 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	4603      	mov	r3, r0
 80088f0:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 80088f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088f6:	4618      	mov	r0, r3
 80088f8:	f001 fce6 	bl	800a2c8 <SUBGRF_SetRfTxPower>
 80088fc:	4603      	mov	r3, r0
 80088fe:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8008900:	210e      	movs	r1, #14
 8008902:	f640 101f 	movw	r0, #2335	; 0x91f
 8008906:	f001 fbc3 	bl	800a090 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800890a:	7bfb      	ldrb	r3, [r7, #15]
 800890c:	2101      	movs	r1, #1
 800890e:	4618      	mov	r0, r3
 8008910:	f001 fcb2 	bl	800a278 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8008914:	f000 fef2 	bl	80096fc <SUBGRF_SetTxContinuousWave>
}
 8008918:	bf00      	nop
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8008920:	b480      	push	{r7}
 8008922:	b089      	sub	sp, #36	; 0x24
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	4613      	mov	r3, r2
 800892c:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 800892e:	2300      	movs	r3, #0
 8008930:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8008932:	2300      	movs	r3, #0
 8008934:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8008936:	2300      	movs	r3, #0
 8008938:	61bb      	str	r3, [r7, #24]
 800893a:	e011      	b.n	8008960 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800893c:	69bb      	ldr	r3, [r7, #24]
 800893e:	68ba      	ldr	r2, [r7, #8]
 8008940:	4413      	add	r3, r2
 8008942:	781a      	ldrb	r2, [r3, #0]
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	68b9      	ldr	r1, [r7, #8]
 8008948:	440b      	add	r3, r1
 800894a:	43d2      	mvns	r2, r2
 800894c:	b2d2      	uxtb	r2, r2
 800894e:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	68fa      	ldr	r2, [r7, #12]
 8008954:	4413      	add	r3, r2
 8008956:	2200      	movs	r2, #0
 8008958:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	3301      	adds	r3, #1
 800895e:	61bb      	str	r3, [r7, #24]
 8008960:	79fb      	ldrb	r3, [r7, #7]
 8008962:	69ba      	ldr	r2, [r7, #24]
 8008964:	429a      	cmp	r2, r3
 8008966:	dbe9      	blt.n	800893c <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8008968:	2300      	movs	r3, #0
 800896a:	61bb      	str	r3, [r7, #24]
 800896c:	e049      	b.n	8008a02 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 800896e:	69bb      	ldr	r3, [r7, #24]
 8008970:	425a      	negs	r2, r3
 8008972:	f003 0307 	and.w	r3, r3, #7
 8008976:	f002 0207 	and.w	r2, r2, #7
 800897a:	bf58      	it	pl
 800897c:	4253      	negpl	r3, r2
 800897e:	b2db      	uxtb	r3, r3
 8008980:	f1c3 0307 	rsb	r3, r3, #7
 8008984:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8008986:	69bb      	ldr	r3, [r7, #24]
 8008988:	2b00      	cmp	r3, #0
 800898a:	da00      	bge.n	800898e <payload_integration+0x6e>
 800898c:	3307      	adds	r3, #7
 800898e:	10db      	asrs	r3, r3, #3
 8008990:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	3301      	adds	r3, #1
 8008996:	425a      	negs	r2, r3
 8008998:	f003 0307 	and.w	r3, r3, #7
 800899c:	f002 0207 	and.w	r2, r2, #7
 80089a0:	bf58      	it	pl
 80089a2:	4253      	negpl	r3, r2
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	f1c3 0307 	rsb	r3, r3, #7
 80089aa:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	3301      	adds	r3, #1
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	da00      	bge.n	80089b6 <payload_integration+0x96>
 80089b4:	3307      	adds	r3, #7
 80089b6:	10db      	asrs	r3, r3, #3
 80089b8:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 80089ba:	7dbb      	ldrb	r3, [r7, #22]
 80089bc:	68ba      	ldr	r2, [r7, #8]
 80089be:	4413      	add	r3, r2
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	461a      	mov	r2, r3
 80089c4:	7dfb      	ldrb	r3, [r7, #23]
 80089c6:	fa42 f303 	asr.w	r3, r2, r3
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	f003 0301 	and.w	r3, r3, #1
 80089d0:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 80089d2:	7ffa      	ldrb	r2, [r7, #31]
 80089d4:	7cfb      	ldrb	r3, [r7, #19]
 80089d6:	4053      	eors	r3, r2
 80089d8:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 80089da:	7d3b      	ldrb	r3, [r7, #20]
 80089dc:	68fa      	ldr	r2, [r7, #12]
 80089de:	4413      	add	r3, r2
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	b25a      	sxtb	r2, r3
 80089e4:	7ff9      	ldrb	r1, [r7, #31]
 80089e6:	7d7b      	ldrb	r3, [r7, #21]
 80089e8:	fa01 f303 	lsl.w	r3, r1, r3
 80089ec:	b25b      	sxtb	r3, r3
 80089ee:	4313      	orrs	r3, r2
 80089f0:	b259      	sxtb	r1, r3
 80089f2:	7d3b      	ldrb	r3, [r7, #20]
 80089f4:	68fa      	ldr	r2, [r7, #12]
 80089f6:	4413      	add	r3, r2
 80089f8:	b2ca      	uxtb	r2, r1
 80089fa:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 80089fc:	69bb      	ldr	r3, [r7, #24]
 80089fe:	3301      	adds	r3, #1
 8008a00:	61bb      	str	r3, [r7, #24]
 8008a02:	79fb      	ldrb	r3, [r7, #7]
 8008a04:	00db      	lsls	r3, r3, #3
 8008a06:	69ba      	ldr	r2, [r7, #24]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	dbb0      	blt.n	800896e <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8008a0c:	7ffb      	ldrb	r3, [r7, #31]
 8008a0e:	01db      	lsls	r3, r3, #7
 8008a10:	b25a      	sxtb	r2, r3
 8008a12:	7ffb      	ldrb	r3, [r7, #31]
 8008a14:	019b      	lsls	r3, r3, #6
 8008a16:	b25b      	sxtb	r3, r3
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	b25b      	sxtb	r3, r3
 8008a1c:	7ffa      	ldrb	r2, [r7, #31]
 8008a1e:	2a00      	cmp	r2, #0
 8008a20:	d101      	bne.n	8008a26 <payload_integration+0x106>
 8008a22:	2220      	movs	r2, #32
 8008a24:	e000      	b.n	8008a28 <payload_integration+0x108>
 8008a26:	2200      	movs	r2, #0
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	b259      	sxtb	r1, r3
 8008a2c:	79fb      	ldrb	r3, [r7, #7]
 8008a2e:	68fa      	ldr	r2, [r7, #12]
 8008a30:	4413      	add	r3, r2
 8008a32:	b2ca      	uxtb	r2, r1
 8008a34:	701a      	strb	r2, [r3, #0]
}
 8008a36:	bf00      	nop
 8008a38:	3724      	adds	r7, #36	; 0x24
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bc80      	pop	{r7}
 8008a3e:	4770      	bx	lr

08008a40 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b08c      	sub	sp, #48	; 0x30
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	60b9      	str	r1, [r7, #8]
 8008a48:	607a      	str	r2, [r7, #4]
 8008a4a:	603b      	str	r3, [r7, #0]
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8008a50:	2300      	movs	r3, #0
 8008a52:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 8008a54:	2300      	movs	r3, #0
 8008a56:	623b      	str	r3, [r7, #32]
 8008a58:	2300      	movs	r3, #0
 8008a5a:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8008a5c:	f001 fdff 	bl	800a65e <RFW_DeInit>

    if( rxContinuous != 0 )
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d001      	beq.n	8008a6a <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8008a66:	2300      	movs	r3, #0
 8008a68:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	bf14      	ite	ne
 8008a70:	2301      	movne	r3, #1
 8008a72:	2300      	moveq	r3, #0
 8008a74:	b2da      	uxtb	r2, r3
 8008a76:	4ba3      	ldr	r3, [pc, #652]	; (8008d04 <RadioSetRxGenericConfig+0x2c4>)
 8008a78:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8008a7a:	7bfb      	ldrb	r3, [r7, #15]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d003      	beq.n	8008a88 <RadioSetRxGenericConfig+0x48>
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	f000 80dc 	beq.w	8008c3e <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8008a86:	e194      	b.n	8008db2 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d003      	beq.n	8008a98 <RadioSetRxGenericConfig+0x58>
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d102      	bne.n	8008a9e <RadioSetRxGenericConfig+0x5e>
            return -1;
 8008a98:	f04f 33ff 	mov.w	r3, #4294967295
 8008a9c:	e18a      	b.n	8008db4 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	7f9b      	ldrb	r3, [r3, #30]
 8008aa2:	2b08      	cmp	r3, #8
 8008aa4:	d902      	bls.n	8008aac <RadioSetRxGenericConfig+0x6c>
            return -1;
 8008aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8008aaa:	e183      	b.n	8008db4 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	6919      	ldr	r1, [r3, #16]
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	7f9b      	ldrb	r3, [r3, #30]
 8008ab4:	b29a      	uxth	r2, r3
 8008ab6:	f107 0320 	add.w	r3, r7, #32
 8008aba:	4618      	mov	r0, r3
 8008abc:	f002 f812 	bl	800aae4 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	bf14      	ite	ne
 8008ac8:	2301      	movne	r3, #1
 8008aca:	2300      	moveq	r3, #0
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f000 fe26 	bl	8009720 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008ad4:	4b8b      	ldr	r3, [pc, #556]	; (8008d04 <RadioSetRxGenericConfig+0x2c4>)
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	4a88      	ldr	r2, [pc, #544]	; (8008d04 <RadioSetRxGenericConfig+0x2c4>)
 8008ae2:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	f893 2020 	ldrb.w	r2, [r3, #32]
 8008aea:	4b86      	ldr	r3, [pc, #536]	; (8008d04 <RadioSetRxGenericConfig+0x2c4>)
 8008aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	4618      	mov	r0, r3
 8008af6:	f001 fce5 	bl	800a4c4 <SUBGRF_GetFskBandwidthRegValue>
 8008afa:	4603      	mov	r3, r0
 8008afc:	461a      	mov	r2, r3
 8008afe:	4b81      	ldr	r3, [pc, #516]	; (8008d04 <RadioSetRxGenericConfig+0x2c4>)
 8008b00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008b04:	4b7f      	ldr	r3, [pc, #508]	; (8008d04 <RadioSetRxGenericConfig+0x2c4>)
 8008b06:	2200      	movs	r2, #0
 8008b08:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	00db      	lsls	r3, r3, #3
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	4b7b      	ldr	r3, [pc, #492]	; (8008d04 <RadioSetRxGenericConfig+0x2c4>)
 8008b16:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	7fda      	ldrb	r2, [r3, #31]
 8008b1c:	4b79      	ldr	r3, [pc, #484]	; (8008d04 <RadioSetRxGenericConfig+0x2c4>)
 8008b1e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	7f9b      	ldrb	r3, [r3, #30]
 8008b24:	00db      	lsls	r3, r3, #3
 8008b26:	b2da      	uxtb	r2, r3
 8008b28:	4b76      	ldr	r3, [pc, #472]	; (8008d04 <RadioSetRxGenericConfig+0x2c4>)
 8008b2a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8008b32:	4b74      	ldr	r3, [pc, #464]	; (8008d04 <RadioSetRxGenericConfig+0x2c4>)
 8008b34:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d105      	bne.n	8008b4c <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	695b      	ldr	r3, [r3, #20]
 8008b44:	b2da      	uxtb	r2, r3
 8008b46:	4b6f      	ldr	r3, [pc, #444]	; (8008d04 <RadioSetRxGenericConfig+0x2c4>)
 8008b48:	759a      	strb	r2, [r3, #22]
 8008b4a:	e00b      	b.n	8008b64 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008b52:	2b02      	cmp	r3, #2
 8008b54:	d103      	bne.n	8008b5e <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8008b56:	4b6b      	ldr	r3, [pc, #428]	; (8008d04 <RadioSetRxGenericConfig+0x2c4>)
 8008b58:	22ff      	movs	r2, #255	; 0xff
 8008b5a:	759a      	strb	r2, [r3, #22]
 8008b5c:	e002      	b.n	8008b64 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8008b5e:	4b69      	ldr	r3, [pc, #420]	; (8008d04 <RadioSetRxGenericConfig+0x2c4>)
 8008b60:	22ff      	movs	r2, #255	; 0xff
 8008b62:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	d004      	beq.n	8008b78 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008b74:	2b02      	cmp	r3, #2
 8008b76:	d12d      	bne.n	8008bd4 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008b7e:	2bf1      	cmp	r3, #241	; 0xf1
 8008b80:	d00c      	beq.n	8008b9c <RadioSetRxGenericConfig+0x15c>
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008b88:	2bf2      	cmp	r3, #242	; 0xf2
 8008b8a:	d007      	beq.n	8008b9c <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d002      	beq.n	8008b9c <RadioSetRxGenericConfig+0x15c>
                return -1;
 8008b96:	f04f 33ff 	mov.w	r3, #4294967295
 8008b9a:	e10b      	b.n	8008db4 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8008ba4:	4b58      	ldr	r3, [pc, #352]	; (8008d08 <RadioSetRxGenericConfig+0x2c8>)
 8008ba6:	6819      	ldr	r1, [r3, #0]
 8008ba8:	f107 0314 	add.w	r3, r7, #20
 8008bac:	4a57      	ldr	r2, [pc, #348]	; (8008d0c <RadioSetRxGenericConfig+0x2cc>)
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f001 fd48 	bl	800a644 <RFW_Init>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d002      	beq.n	8008bc0 <RadioSetRxGenericConfig+0x180>
                return -1;
 8008bba:	f04f 33ff 	mov.w	r3, #4294967295
 8008bbe:	e0f9      	b.n	8008db4 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8008bc0:	4b50      	ldr	r3, [pc, #320]	; (8008d04 <RadioSetRxGenericConfig+0x2c4>)
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8008bc6:	4b4f      	ldr	r3, [pc, #316]	; (8008d04 <RadioSetRxGenericConfig+0x2c4>)
 8008bc8:	2201      	movs	r2, #1
 8008bca:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008bcc:	4b4d      	ldr	r3, [pc, #308]	; (8008d04 <RadioSetRxGenericConfig+0x2c4>)
 8008bce:	2200      	movs	r2, #0
 8008bd0:	755a      	strb	r2, [r3, #21]
        {
 8008bd2:	e00e      	b.n	8008bf2 <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8008bda:	4b4a      	ldr	r3, [pc, #296]	; (8008d04 <RadioSetRxGenericConfig+0x2c4>)
 8008bdc:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8008be4:	4b47      	ldr	r3, [pc, #284]	; (8008d04 <RadioSetRxGenericConfig+0x2c4>)
 8008be6:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8008bee:	4b45      	ldr	r3, [pc, #276]	; (8008d04 <RadioSetRxGenericConfig+0x2c4>)
 8008bf0:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8008bf2:	f7ff fa3c 	bl	800806e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8008bf6:	2000      	movs	r0, #0
 8008bf8:	f7fe fbd0 	bl	800739c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008bfc:	4844      	ldr	r0, [pc, #272]	; (8008d10 <RadioSetRxGenericConfig+0x2d0>)
 8008bfe:	f001 f82d 	bl	8009c5c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008c02:	4844      	ldr	r0, [pc, #272]	; (8008d14 <RadioSetRxGenericConfig+0x2d4>)
 8008c04:	f001 f8fc 	bl	8009e00 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008c08:	f107 0320 	add.w	r3, r7, #32
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f000 fbc0 	bl	8009392 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	8b9b      	ldrh	r3, [r3, #28]
 8008c16:	4618      	mov	r0, r3
 8008c18:	f000 fc0a 	bl	8009430 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	8b1b      	ldrh	r3, [r3, #24]
 8008c20:	4618      	mov	r0, r3
 8008c22:	f000 fbe5 	bl	80093f0 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8008c2c:	fb03 f202 	mul.w	r2, r3, r2
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c38:	4a32      	ldr	r2, [pc, #200]	; (8008d04 <RadioSetRxGenericConfig+0x2c4>)
 8008c3a:	6093      	str	r3, [r2, #8]
        break;
 8008c3c:	e0b9      	b.n	8008db2 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d102      	bne.n	8008c4c <RadioSetRxGenericConfig+0x20c>
            return -1;
 8008c46:	f04f 33ff 	mov.w	r3, #4294967295
 8008c4a:	e0b3      	b.n	8008db4 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d104      	bne.n	8008c60 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	695b      	ldr	r3, [r3, #20]
 8008c5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008c5e:	e002      	b.n	8008c66 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8008c60:	23ff      	movs	r3, #255	; 0xff
 8008c62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	bf14      	ite	ne
 8008c6e:	2301      	movne	r3, #1
 8008c70:	2300      	moveq	r3, #0
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	4618      	mov	r0, r3
 8008c76:	f000 fd53 	bl	8009720 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f000 fd5d 	bl	800973e <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008c84:	4b1f      	ldr	r3, [pc, #124]	; (8008d04 <RadioSetRxGenericConfig+0x2c4>)
 8008c86:	2201      	movs	r2, #1
 8008c88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8008c92:	4b1c      	ldr	r3, [pc, #112]	; (8008d04 <RadioSetRxGenericConfig+0x2c4>)
 8008c94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8008c9e:	4b19      	ldr	r3, [pc, #100]	; (8008d04 <RadioSetRxGenericConfig+0x2c4>)
 8008ca0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8008caa:	4b16      	ldr	r3, [pc, #88]	; (8008d04 <RadioSetRxGenericConfig+0x2c4>)
 8008cac:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	d010      	beq.n	8008cdc <RadioSetRxGenericConfig+0x29c>
 8008cba:	2b02      	cmp	r3, #2
 8008cbc:	dc2c      	bgt.n	8008d18 <RadioSetRxGenericConfig+0x2d8>
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d002      	beq.n	8008cc8 <RadioSetRxGenericConfig+0x288>
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d005      	beq.n	8008cd2 <RadioSetRxGenericConfig+0x292>
            break;
 8008cc6:	e027      	b.n	8008d18 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008cc8:	4b0e      	ldr	r3, [pc, #56]	; (8008d04 <RadioSetRxGenericConfig+0x2c4>)
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008cd0:	e023      	b.n	8008d1a <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008cd2:	4b0c      	ldr	r3, [pc, #48]	; (8008d04 <RadioSetRxGenericConfig+0x2c4>)
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008cda:	e01e      	b.n	8008d1a <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008ce2:	2b0b      	cmp	r3, #11
 8008ce4:	d004      	beq.n	8008cf0 <RadioSetRxGenericConfig+0x2b0>
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008cec:	2b0c      	cmp	r3, #12
 8008cee:	d104      	bne.n	8008cfa <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008cf0:	4b04      	ldr	r3, [pc, #16]	; (8008d04 <RadioSetRxGenericConfig+0x2c4>)
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008cf8:	e00f      	b.n	8008d1a <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008cfa:	4b02      	ldr	r3, [pc, #8]	; (8008d04 <RadioSetRxGenericConfig+0x2c4>)
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008d02:	e00a      	b.n	8008d1a <RadioSetRxGenericConfig+0x2da>
 8008d04:	20000288 	.word	0x20000288
 8008d08:	20000284 	.word	0x20000284
 8008d0c:	200002fc 	.word	0x200002fc
 8008d10:	200002c0 	.word	0x200002c0
 8008d14:	20000296 	.word	0x20000296
            break;
 8008d18:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008d1a:	4b28      	ldr	r3, [pc, #160]	; (8008dbc <RadioSetRxGenericConfig+0x37c>)
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8008d24:	4b25      	ldr	r3, [pc, #148]	; (8008dbc <RadioSetRxGenericConfig+0x37c>)
 8008d26:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8008d2e:	4b23      	ldr	r3, [pc, #140]	; (8008dbc <RadioSetRxGenericConfig+0x37c>)
 8008d30:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8008d32:	4a22      	ldr	r2, [pc, #136]	; (8008dbc <RadioSetRxGenericConfig+0x37c>)
 8008d34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008d38:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8008d40:	4b1e      	ldr	r3, [pc, #120]	; (8008dbc <RadioSetRxGenericConfig+0x37c>)
 8008d42:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8008d4c:	4b1b      	ldr	r3, [pc, #108]	; (8008dbc <RadioSetRxGenericConfig+0x37c>)
 8008d4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8008d52:	f7ff f98c 	bl	800806e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8008d56:	2001      	movs	r0, #1
 8008d58:	f7fe fb20 	bl	800739c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008d5c:	4818      	ldr	r0, [pc, #96]	; (8008dc0 <RadioSetRxGenericConfig+0x380>)
 8008d5e:	f000 ff7d 	bl	8009c5c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008d62:	4818      	ldr	r0, [pc, #96]	; (8008dc4 <RadioSetRxGenericConfig+0x384>)
 8008d64:	f001 f84c 	bl	8009e00 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8008d68:	4b14      	ldr	r3, [pc, #80]	; (8008dbc <RadioSetRxGenericConfig+0x37c>)
 8008d6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d10d      	bne.n	8008d8e <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8008d72:	f240 7036 	movw	r0, #1846	; 0x736
 8008d76:	f001 f99f 	bl	800a0b8 <SUBGRF_ReadRegister>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	f023 0304 	bic.w	r3, r3, #4
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	4619      	mov	r1, r3
 8008d84:	f240 7036 	movw	r0, #1846	; 0x736
 8008d88:	f001 f982 	bl	800a090 <SUBGRF_WriteRegister>
 8008d8c:	e00c      	b.n	8008da8 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8008d8e:	f240 7036 	movw	r0, #1846	; 0x736
 8008d92:	f001 f991 	bl	800a0b8 <SUBGRF_ReadRegister>
 8008d96:	4603      	mov	r3, r0
 8008d98:	f043 0304 	orr.w	r3, r3, #4
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	4619      	mov	r1, r3
 8008da0:	f240 7036 	movw	r0, #1846	; 0x736
 8008da4:	f001 f974 	bl	800a090 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8008da8:	4b04      	ldr	r3, [pc, #16]	; (8008dbc <RadioSetRxGenericConfig+0x37c>)
 8008daa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008dae:	609a      	str	r2, [r3, #8]
        break;
 8008db0:	bf00      	nop
    }
    return status;
 8008db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3730      	adds	r7, #48	; 0x30
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}
 8008dbc:	20000288 	.word	0x20000288
 8008dc0:	200002c0 	.word	0x200002c0
 8008dc4:	20000296 	.word	0x20000296

08008dc8 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b08e      	sub	sp, #56	; 0x38
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	60b9      	str	r1, [r7, #8]
 8008dd0:	607b      	str	r3, [r7, #4]
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	73fb      	strb	r3, [r7, #15]
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8008dda:	2300      	movs	r3, #0
 8008ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008dde:	2300      	movs	r3, #0
 8008de0:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8008de2:	f001 fc3c 	bl	800a65e <RFW_DeInit>
    switch( modem )
 8008de6:	7bfb      	ldrb	r3, [r7, #15]
 8008de8:	2b03      	cmp	r3, #3
 8008dea:	f200 8204 	bhi.w	80091f6 <RadioSetTxGenericConfig+0x42e>
 8008dee:	a201      	add	r2, pc, #4	; (adr r2, 8008df4 <RadioSetTxGenericConfig+0x2c>)
 8008df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df4:	08008f79 	.word	0x08008f79
 8008df8:	080090c1 	.word	0x080090c1
 8008dfc:	080091b9 	.word	0x080091b9
 8008e00:	08008e05 	.word	0x08008e05
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	7c9b      	ldrb	r3, [r3, #18]
 8008e08:	2b08      	cmp	r3, #8
 8008e0a:	d902      	bls.n	8008e12 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8008e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e10:	e206      	b.n	8009220 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	6899      	ldr	r1, [r3, #8]
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	7c9b      	ldrb	r3, [r3, #18]
 8008e1a:	b29a      	uxth	r2, r3
 8008e1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008e20:	4618      	mov	r0, r3
 8008e22:	f001 fe5f 	bl	800aae4 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d102      	bne.n	8008e34 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8008e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8008e32:	e1f5      	b.n	8009220 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f242 7210 	movw	r2, #10000	; 0x2710
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d813      	bhi.n	8008e68 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 8008e40:	2302      	movs	r3, #2
 8008e42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8008e46:	4b99      	ldr	r3, [pc, #612]	; (80090ac <RadioSetTxGenericConfig+0x2e4>)
 8008e48:	2203      	movs	r2, #3
 8008e4a:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8008e4c:	4b97      	ldr	r3, [pc, #604]	; (80090ac <RadioSetTxGenericConfig+0x2e4>)
 8008e4e:	2203      	movs	r2, #3
 8008e50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a94      	ldr	r2, [pc, #592]	; (80090ac <RadioSetTxGenericConfig+0x2e4>)
 8008e5a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	7cda      	ldrb	r2, [r3, #19]
 8008e60:	4b92      	ldr	r3, [pc, #584]	; (80090ac <RadioSetTxGenericConfig+0x2e4>)
 8008e62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e66:	e017      	b.n	8008e98 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008e6e:	4b8f      	ldr	r3, [pc, #572]	; (80090ac <RadioSetTxGenericConfig+0x2e4>)
 8008e70:	2200      	movs	r2, #0
 8008e72:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008e74:	4b8d      	ldr	r3, [pc, #564]	; (80090ac <RadioSetTxGenericConfig+0x2e4>)
 8008e76:	2200      	movs	r2, #0
 8008e78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a8a      	ldr	r2, [pc, #552]	; (80090ac <RadioSetTxGenericConfig+0x2e4>)
 8008e82:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	7cda      	ldrb	r2, [r3, #19]
 8008e88:	4b88      	ldr	r3, [pc, #544]	; (80090ac <RadioSetTxGenericConfig+0x2e4>)
 8008e8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	089b      	lsrs	r3, r3, #2
 8008e94:	4a85      	ldr	r2, [pc, #532]	; (80090ac <RadioSetTxGenericConfig+0x2e4>)
 8008e96:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	00db      	lsls	r3, r3, #3
 8008ea0:	b29a      	uxth	r2, r3
 8008ea2:	4b82      	ldr	r3, [pc, #520]	; (80090ac <RadioSetTxGenericConfig+0x2e4>)
 8008ea4:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8008ea6:	4b81      	ldr	r3, [pc, #516]	; (80090ac <RadioSetTxGenericConfig+0x2e4>)
 8008ea8:	2204      	movs	r2, #4
 8008eaa:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	7c9b      	ldrb	r3, [r3, #18]
 8008eb0:	00db      	lsls	r3, r3, #3
 8008eb2:	b2da      	uxtb	r2, r3
 8008eb4:	4b7d      	ldr	r3, [pc, #500]	; (80090ac <RadioSetTxGenericConfig+0x2e4>)
 8008eb6:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8008eb8:	4b7c      	ldr	r3, [pc, #496]	; (80090ac <RadioSetTxGenericConfig+0x2e4>)
 8008eba:	2200      	movs	r2, #0
 8008ebc:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	7d9b      	ldrb	r3, [r3, #22]
 8008ec2:	2b02      	cmp	r3, #2
 8008ec4:	d003      	beq.n	8008ece <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	7d1b      	ldrb	r3, [r3, #20]
 8008eca:	2b02      	cmp	r3, #2
 8008ecc:	d12b      	bne.n	8008f26 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	7d5b      	ldrb	r3, [r3, #21]
 8008ed2:	2bf1      	cmp	r3, #241	; 0xf1
 8008ed4:	d00a      	beq.n	8008eec <RadioSetTxGenericConfig+0x124>
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	7d5b      	ldrb	r3, [r3, #21]
 8008eda:	2bf2      	cmp	r3, #242	; 0xf2
 8008edc:	d006      	beq.n	8008eec <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	7d5b      	ldrb	r3, [r3, #21]
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	d002      	beq.n	8008eec <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 8008ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8008eea:	e199      	b.n	8009220 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8008ef6:	4b6e      	ldr	r3, [pc, #440]	; (80090b0 <RadioSetTxGenericConfig+0x2e8>)
 8008ef8:	6819      	ldr	r1, [r3, #0]
 8008efa:	f107 0320 	add.w	r3, r7, #32
 8008efe:	4a6d      	ldr	r2, [pc, #436]	; (80090b4 <RadioSetTxGenericConfig+0x2ec>)
 8008f00:	4618      	mov	r0, r3
 8008f02:	f001 fb9f 	bl	800a644 <RFW_Init>
 8008f06:	4603      	mov	r3, r0
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d002      	beq.n	8008f12 <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 8008f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8008f10:	e186      	b.n	8009220 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8008f12:	4b66      	ldr	r3, [pc, #408]	; (80090ac <RadioSetTxGenericConfig+0x2e4>)
 8008f14:	2200      	movs	r2, #0
 8008f16:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8008f18:	4b64      	ldr	r3, [pc, #400]	; (80090ac <RadioSetTxGenericConfig+0x2e4>)
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008f1e:	4b63      	ldr	r3, [pc, #396]	; (80090ac <RadioSetTxGenericConfig+0x2e4>)
 8008f20:	2200      	movs	r2, #0
 8008f22:	755a      	strb	r2, [r3, #21]
        {
 8008f24:	e00b      	b.n	8008f3e <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	7d5a      	ldrb	r2, [r3, #21]
 8008f2a:	4b60      	ldr	r3, [pc, #384]	; (80090ac <RadioSetTxGenericConfig+0x2e4>)
 8008f2c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	7d9a      	ldrb	r2, [r3, #22]
 8008f32:	4b5e      	ldr	r3, [pc, #376]	; (80090ac <RadioSetTxGenericConfig+0x2e4>)
 8008f34:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	7d1a      	ldrb	r2, [r3, #20]
 8008f3a:	4b5c      	ldr	r3, [pc, #368]	; (80090ac <RadioSetTxGenericConfig+0x2e4>)
 8008f3c:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8008f3e:	f7ff f896 	bl	800806e <RadioStandby>
        RadioSetModem( radio_modem );
 8008f42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7fe fa28 	bl	800739c <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008f4c:	485a      	ldr	r0, [pc, #360]	; (80090b8 <RadioSetTxGenericConfig+0x2f0>)
 8008f4e:	f000 fe85 	bl	8009c5c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008f52:	485a      	ldr	r0, [pc, #360]	; (80090bc <RadioSetTxGenericConfig+0x2f4>)
 8008f54:	f000 ff54 	bl	8009e00 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008f58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f000 fa18 	bl	8009392 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	8a1b      	ldrh	r3, [r3, #16]
 8008f66:	4618      	mov	r0, r3
 8008f68:	f000 fa62 	bl	8009430 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	899b      	ldrh	r3, [r3, #12]
 8008f70:	4618      	mov	r0, r3
 8008f72:	f000 fa3d 	bl	80093f0 <SUBGRF_SetCrcPolynomial>
        break;
 8008f76:	e13f      	b.n	80091f8 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d102      	bne.n	8008f86 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8008f80:	f04f 33ff 	mov.w	r3, #4294967295
 8008f84:	e14c      	b.n	8009220 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	7c9b      	ldrb	r3, [r3, #18]
 8008f8a:	2b08      	cmp	r3, #8
 8008f8c:	d902      	bls.n	8008f94 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8008f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f92:	e145      	b.n	8009220 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	6899      	ldr	r1, [r3, #8]
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	7c9b      	ldrb	r3, [r3, #18]
 8008f9c:	b29a      	uxth	r2, r3
 8008f9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f001 fd9e 	bl	800aae4 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008fa8:	4b40      	ldr	r3, [pc, #256]	; (80090ac <RadioSetTxGenericConfig+0x2e4>)
 8008faa:	2200      	movs	r2, #0
 8008fac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a3d      	ldr	r2, [pc, #244]	; (80090ac <RadioSetTxGenericConfig+0x2e4>)
 8008fb6:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	7cda      	ldrb	r2, [r3, #19]
 8008fbc:	4b3b      	ldr	r3, [pc, #236]	; (80090ac <RadioSetTxGenericConfig+0x2e4>)
 8008fbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	699b      	ldr	r3, [r3, #24]
 8008fc6:	4a39      	ldr	r2, [pc, #228]	; (80090ac <RadioSetTxGenericConfig+0x2e4>)
 8008fc8:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008fca:	4b38      	ldr	r3, [pc, #224]	; (80090ac <RadioSetTxGenericConfig+0x2e4>)
 8008fcc:	2200      	movs	r2, #0
 8008fce:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	00db      	lsls	r3, r3, #3
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	4b34      	ldr	r3, [pc, #208]	; (80090ac <RadioSetTxGenericConfig+0x2e4>)
 8008fdc:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8008fde:	4b33      	ldr	r3, [pc, #204]	; (80090ac <RadioSetTxGenericConfig+0x2e4>)
 8008fe0:	2204      	movs	r2, #4
 8008fe2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	7c9b      	ldrb	r3, [r3, #18]
 8008fe8:	00db      	lsls	r3, r3, #3
 8008fea:	b2da      	uxtb	r2, r3
 8008fec:	4b2f      	ldr	r3, [pc, #188]	; (80090ac <RadioSetTxGenericConfig+0x2e4>)
 8008fee:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8008ff0:	4b2e      	ldr	r3, [pc, #184]	; (80090ac <RadioSetTxGenericConfig+0x2e4>)
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	7d9b      	ldrb	r3, [r3, #22]
 8008ffa:	2b02      	cmp	r3, #2
 8008ffc:	d003      	beq.n	8009006 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	7d1b      	ldrb	r3, [r3, #20]
 8009002:	2b02      	cmp	r3, #2
 8009004:	d12a      	bne.n	800905c <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	7d5b      	ldrb	r3, [r3, #21]
 800900a:	2bf1      	cmp	r3, #241	; 0xf1
 800900c:	d00a      	beq.n	8009024 <RadioSetTxGenericConfig+0x25c>
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	7d5b      	ldrb	r3, [r3, #21]
 8009012:	2bf2      	cmp	r3, #242	; 0xf2
 8009014:	d006      	beq.n	8009024 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	7d5b      	ldrb	r3, [r3, #21]
 800901a:	2b01      	cmp	r3, #1
 800901c:	d002      	beq.n	8009024 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 800901e:	f04f 33ff 	mov.w	r3, #4294967295
 8009022:	e0fd      	b.n	8009220 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8009024:	2301      	movs	r3, #1
 8009026:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800902c:	4b20      	ldr	r3, [pc, #128]	; (80090b0 <RadioSetTxGenericConfig+0x2e8>)
 800902e:	6819      	ldr	r1, [r3, #0]
 8009030:	f107 0314 	add.w	r3, r7, #20
 8009034:	4a1f      	ldr	r2, [pc, #124]	; (80090b4 <RadioSetTxGenericConfig+0x2ec>)
 8009036:	4618      	mov	r0, r3
 8009038:	f001 fb04 	bl	800a644 <RFW_Init>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d002      	beq.n	8009048 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 8009042:	f04f 33ff 	mov.w	r3, #4294967295
 8009046:	e0eb      	b.n	8009220 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8009048:	4b18      	ldr	r3, [pc, #96]	; (80090ac <RadioSetTxGenericConfig+0x2e4>)
 800904a:	2200      	movs	r2, #0
 800904c:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800904e:	4b17      	ldr	r3, [pc, #92]	; (80090ac <RadioSetTxGenericConfig+0x2e4>)
 8009050:	2201      	movs	r2, #1
 8009052:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8009054:	4b15      	ldr	r3, [pc, #84]	; (80090ac <RadioSetTxGenericConfig+0x2e4>)
 8009056:	2200      	movs	r2, #0
 8009058:	755a      	strb	r2, [r3, #21]
        {
 800905a:	e00b      	b.n	8009074 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	7d5a      	ldrb	r2, [r3, #21]
 8009060:	4b12      	ldr	r3, [pc, #72]	; (80090ac <RadioSetTxGenericConfig+0x2e4>)
 8009062:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	7d9a      	ldrb	r2, [r3, #22]
 8009068:	4b10      	ldr	r3, [pc, #64]	; (80090ac <RadioSetTxGenericConfig+0x2e4>)
 800906a:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	7d1a      	ldrb	r2, [r3, #20]
 8009070:	4b0e      	ldr	r3, [pc, #56]	; (80090ac <RadioSetTxGenericConfig+0x2e4>)
 8009072:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8009074:	f7fe fffb 	bl	800806e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8009078:	2000      	movs	r0, #0
 800907a:	f7fe f98f 	bl	800739c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800907e:	480e      	ldr	r0, [pc, #56]	; (80090b8 <RadioSetTxGenericConfig+0x2f0>)
 8009080:	f000 fdec 	bl	8009c5c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009084:	480d      	ldr	r0, [pc, #52]	; (80090bc <RadioSetTxGenericConfig+0x2f4>)
 8009086:	f000 febb 	bl	8009e00 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800908a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800908e:	4618      	mov	r0, r3
 8009090:	f000 f97f 	bl	8009392 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	8a1b      	ldrh	r3, [r3, #16]
 8009098:	4618      	mov	r0, r3
 800909a:	f000 f9c9 	bl	8009430 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	899b      	ldrh	r3, [r3, #12]
 80090a2:	4618      	mov	r0, r3
 80090a4:	f000 f9a4 	bl	80093f0 <SUBGRF_SetCrcPolynomial>
        break;
 80090a8:	e0a6      	b.n	80091f8 <RadioSetTxGenericConfig+0x430>
 80090aa:	bf00      	nop
 80090ac:	20000288 	.word	0x20000288
 80090b0:	20000284 	.word	0x20000284
 80090b4:	200002e4 	.word	0x200002e4
 80090b8:	200002c0 	.word	0x200002c0
 80090bc:	20000296 	.word	0x20000296
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80090c0:	4b59      	ldr	r3, [pc, #356]	; (8009228 <RadioSetTxGenericConfig+0x460>)
 80090c2:	2201      	movs	r2, #1
 80090c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	781a      	ldrb	r2, [r3, #0]
 80090cc:	4b56      	ldr	r3, [pc, #344]	; (8009228 <RadioSetTxGenericConfig+0x460>)
 80090ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	785a      	ldrb	r2, [r3, #1]
 80090d6:	4b54      	ldr	r3, [pc, #336]	; (8009228 <RadioSetTxGenericConfig+0x460>)
 80090d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	789a      	ldrb	r2, [r3, #2]
 80090e0:	4b51      	ldr	r3, [pc, #324]	; (8009228 <RadioSetTxGenericConfig+0x460>)
 80090e2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	78db      	ldrb	r3, [r3, #3]
 80090ea:	2b02      	cmp	r3, #2
 80090ec:	d010      	beq.n	8009110 <RadioSetTxGenericConfig+0x348>
 80090ee:	2b02      	cmp	r3, #2
 80090f0:	dc20      	bgt.n	8009134 <RadioSetTxGenericConfig+0x36c>
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d002      	beq.n	80090fc <RadioSetTxGenericConfig+0x334>
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d005      	beq.n	8009106 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 80090fa:	e01b      	b.n	8009134 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80090fc:	4b4a      	ldr	r3, [pc, #296]	; (8009228 <RadioSetTxGenericConfig+0x460>)
 80090fe:	2200      	movs	r2, #0
 8009100:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009104:	e017      	b.n	8009136 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009106:	4b48      	ldr	r3, [pc, #288]	; (8009228 <RadioSetTxGenericConfig+0x460>)
 8009108:	2201      	movs	r2, #1
 800910a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800910e:	e012      	b.n	8009136 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	2b0b      	cmp	r3, #11
 8009116:	d003      	beq.n	8009120 <RadioSetTxGenericConfig+0x358>
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	2b0c      	cmp	r3, #12
 800911e:	d104      	bne.n	800912a <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009120:	4b41      	ldr	r3, [pc, #260]	; (8009228 <RadioSetTxGenericConfig+0x460>)
 8009122:	2201      	movs	r2, #1
 8009124:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009128:	e005      	b.n	8009136 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800912a:	4b3f      	ldr	r3, [pc, #252]	; (8009228 <RadioSetTxGenericConfig+0x460>)
 800912c:	2200      	movs	r2, #0
 800912e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009132:	e000      	b.n	8009136 <RadioSetTxGenericConfig+0x36e>
            break;
 8009134:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009136:	4b3c      	ldr	r3, [pc, #240]	; (8009228 <RadioSetTxGenericConfig+0x460>)
 8009138:	2201      	movs	r2, #1
 800913a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	889a      	ldrh	r2, [r3, #4]
 8009140:	4b39      	ldr	r3, [pc, #228]	; (8009228 <RadioSetTxGenericConfig+0x460>)
 8009142:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	799a      	ldrb	r2, [r3, #6]
 8009148:	4b37      	ldr	r3, [pc, #220]	; (8009228 <RadioSetTxGenericConfig+0x460>)
 800914a:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	79da      	ldrb	r2, [r3, #7]
 8009150:	4b35      	ldr	r3, [pc, #212]	; (8009228 <RadioSetTxGenericConfig+0x460>)
 8009152:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	7a1a      	ldrb	r2, [r3, #8]
 800915a:	4b33      	ldr	r3, [pc, #204]	; (8009228 <RadioSetTxGenericConfig+0x460>)
 800915c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 8009160:	f7fe ff85 	bl	800806e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8009164:	2001      	movs	r0, #1
 8009166:	f7fe f919 	bl	800739c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800916a:	4830      	ldr	r0, [pc, #192]	; (800922c <RadioSetTxGenericConfig+0x464>)
 800916c:	f000 fd76 	bl	8009c5c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009170:	482f      	ldr	r0, [pc, #188]	; (8009230 <RadioSetTxGenericConfig+0x468>)
 8009172:	f000 fe45 	bl	8009e00 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8009176:	4b2c      	ldr	r3, [pc, #176]	; (8009228 <RadioSetTxGenericConfig+0x460>)
 8009178:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800917c:	2b06      	cmp	r3, #6
 800917e:	d10d      	bne.n	800919c <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8009180:	f640 0089 	movw	r0, #2185	; 0x889
 8009184:	f000 ff98 	bl	800a0b8 <SUBGRF_ReadRegister>
 8009188:	4603      	mov	r3, r0
 800918a:	f023 0304 	bic.w	r3, r3, #4
 800918e:	b2db      	uxtb	r3, r3
 8009190:	4619      	mov	r1, r3
 8009192:	f640 0089 	movw	r0, #2185	; 0x889
 8009196:	f000 ff7b 	bl	800a090 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 800919a:	e02d      	b.n	80091f8 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800919c:	f640 0089 	movw	r0, #2185	; 0x889
 80091a0:	f000 ff8a 	bl	800a0b8 <SUBGRF_ReadRegister>
 80091a4:	4603      	mov	r3, r0
 80091a6:	f043 0304 	orr.w	r3, r3, #4
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	4619      	mov	r1, r3
 80091ae:	f640 0089 	movw	r0, #2185	; 0x889
 80091b2:	f000 ff6d 	bl	800a090 <SUBGRF_WriteRegister>
        break;
 80091b6:	e01f      	b.n	80091f8 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d004      	beq.n	80091ca <RadioSetTxGenericConfig+0x402>
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091c8:	d902      	bls.n	80091d0 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 80091ca:	f04f 33ff 	mov.w	r3, #4294967295
 80091ce:	e027      	b.n	8009220 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 80091d0:	2003      	movs	r0, #3
 80091d2:	f7fe f8e3 	bl	800739c <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80091d6:	4b14      	ldr	r3, [pc, #80]	; (8009228 <RadioSetTxGenericConfig+0x460>)
 80091d8:	2202      	movs	r2, #2
 80091da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4a11      	ldr	r2, [pc, #68]	; (8009228 <RadioSetTxGenericConfig+0x460>)
 80091e4:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80091e6:	4b10      	ldr	r3, [pc, #64]	; (8009228 <RadioSetTxGenericConfig+0x460>)
 80091e8:	2216      	movs	r2, #22
 80091ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80091ee:	480f      	ldr	r0, [pc, #60]	; (800922c <RadioSetTxGenericConfig+0x464>)
 80091f0:	f000 fd34 	bl	8009c5c <SUBGRF_SetModulationParams>
        break;
 80091f4:	e000      	b.n	80091f8 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 80091f6:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80091f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091fc:	4618      	mov	r0, r3
 80091fe:	f001 f863 	bl	800a2c8 <SUBGRF_SetRfTxPower>
 8009202:	4603      	mov	r3, r0
 8009204:	461a      	mov	r2, r3
 8009206:	4b08      	ldr	r3, [pc, #32]	; (8009228 <RadioSetTxGenericConfig+0x460>)
 8009208:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800920c:	4b06      	ldr	r3, [pc, #24]	; (8009228 <RadioSetTxGenericConfig+0x460>)
 800920e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009212:	4618      	mov	r0, r3
 8009214:	f001 fa37 	bl	800a686 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8009218:	4a03      	ldr	r2, [pc, #12]	; (8009228 <RadioSetTxGenericConfig+0x460>)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6053      	str	r3, [r2, #4]
    return 0;
 800921e:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8009220:	4618      	mov	r0, r3
 8009222:	3738      	adds	r7, #56	; 0x38
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}
 8009228:	20000288 	.word	0x20000288
 800922c:	200002c0 	.word	0x200002c0
 8009230:	20000296 	.word	0x20000296

08009234 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 8009234:	b480      	push	{r7}
 8009236:	b085      	sub	sp, #20
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 800923c:	2301      	movs	r3, #1
 800923e:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8009240:	7bfb      	ldrb	r3, [r7, #15]
}
 8009242:	4618      	mov	r0, r3
 8009244:	3714      	adds	r7, #20
 8009246:	46bd      	mov	sp, r7
 8009248:	bc80      	pop	{r7}
 800924a:	4770      	bx	lr

0800924c <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 8009256:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 8009258:	4618      	mov	r0, r3
 800925a:	370c      	adds	r7, #12
 800925c:	46bd      	mov	sp, r7
 800925e:	bc80      	pop	{r7}
 8009260:	4770      	bx	lr
	...

08009264 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d002      	beq.n	8009278 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8009272:	4a1d      	ldr	r2, [pc, #116]	; (80092e8 <SUBGRF_Init+0x84>)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8009278:	f7f7 fb94 	bl	80009a4 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800927c:	2002      	movs	r0, #2
 800927e:	f001 f8ff 	bl	800a480 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8009282:	4b1a      	ldr	r3, [pc, #104]	; (80092ec <SUBGRF_Init+0x88>)
 8009284:	2200      	movs	r2, #0
 8009286:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8009288:	2000      	movs	r0, #0
 800928a:	f000 f97d 	bl	8009588 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800928e:	f001 fb67 	bl	800a960 <RBI_IsTCXO>
 8009292:	4603      	mov	r3, r0
 8009294:	2b01      	cmp	r3, #1
 8009296:	d10e      	bne.n	80092b6 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8009298:	2140      	movs	r1, #64	; 0x40
 800929a:	2001      	movs	r0, #1
 800929c:	f000 fb82 	bl	80099a4 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80092a0:	2100      	movs	r1, #0
 80092a2:	f640 1011 	movw	r0, #2321	; 0x911
 80092a6:	f000 fef3 	bl	800a090 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 80092aa:	237f      	movs	r3, #127	; 0x7f
 80092ac:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 80092ae:	7b38      	ldrb	r0, [r7, #12]
 80092b0:	f000 fa8b 	bl	80097ca <SUBGRF_Calibrate>
 80092b4:	e009      	b.n	80092ca <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80092b6:	2120      	movs	r1, #32
 80092b8:	f640 1011 	movw	r0, #2321	; 0x911
 80092bc:	f000 fee8 	bl	800a090 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80092c0:	2120      	movs	r1, #32
 80092c2:	f640 1012 	movw	r0, #2322	; 0x912
 80092c6:	f000 fee3 	bl	800a090 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80092ca:	210e      	movs	r1, #14
 80092cc:	f640 101f 	movw	r0, #2335	; 0x91f
 80092d0:	f000 fede 	bl	800a090 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 80092d4:	f001 fb28 	bl	800a928 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 80092d8:	4b05      	ldr	r3, [pc, #20]	; (80092f0 <SUBGRF_Init+0x8c>)
 80092da:	2201      	movs	r2, #1
 80092dc:	701a      	strb	r2, [r3, #0]
}
 80092de:	bf00      	nop
 80092e0:	3710      	adds	r7, #16
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	20000320 	.word	0x20000320
 80092ec:	2000031c 	.word	0x2000031c
 80092f0:	20000314 	.word	0x20000314

080092f4 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 80092f4:	b480      	push	{r7}
 80092f6:	af00      	add	r7, sp, #0
    return OperatingMode;
 80092f8:	4b02      	ldr	r3, [pc, #8]	; (8009304 <SUBGRF_GetOperatingMode+0x10>)
 80092fa:	781b      	ldrb	r3, [r3, #0]
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	46bd      	mov	sp, r7
 8009300:	bc80      	pop	{r7}
 8009302:	4770      	bx	lr
 8009304:	20000314 	.word	0x20000314

08009308 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	460b      	mov	r3, r1
 8009312:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8009314:	78fb      	ldrb	r3, [r7, #3]
 8009316:	461a      	mov	r2, r3
 8009318:	6879      	ldr	r1, [r7, #4]
 800931a:	2000      	movs	r0, #0
 800931c:	f000 ff24 	bl	800a168 <SUBGRF_WriteBuffer>
}
 8009320:	bf00      	nop
 8009322:	3708      	adds	r7, #8
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b086      	sub	sp, #24
 800932c:	af00      	add	r7, sp, #0
 800932e:	60f8      	str	r0, [r7, #12]
 8009330:	60b9      	str	r1, [r7, #8]
 8009332:	4613      	mov	r3, r2
 8009334:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8009336:	2300      	movs	r3, #0
 8009338:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800933a:	f107 0317 	add.w	r3, r7, #23
 800933e:	4619      	mov	r1, r3
 8009340:	68b8      	ldr	r0, [r7, #8]
 8009342:	f000 fe27 	bl	8009f94 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	79fa      	ldrb	r2, [r7, #7]
 800934c:	429a      	cmp	r2, r3
 800934e:	d201      	bcs.n	8009354 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8009350:	2301      	movs	r3, #1
 8009352:	e007      	b.n	8009364 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8009354:	7df8      	ldrb	r0, [r7, #23]
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	461a      	mov	r2, r3
 800935c:	68f9      	ldr	r1, [r7, #12]
 800935e:	f000 ff25 	bl	800a1ac <SUBGRF_ReadBuffer>

    return 0;
 8009362:	2300      	movs	r3, #0
}
 8009364:	4618      	mov	r0, r3
 8009366:	3718      	adds	r7, #24
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	60f8      	str	r0, [r7, #12]
 8009374:	460b      	mov	r3, r1
 8009376:	607a      	str	r2, [r7, #4]
 8009378:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800937a:	7afb      	ldrb	r3, [r7, #11]
 800937c:	4619      	mov	r1, r3
 800937e:	68f8      	ldr	r0, [r7, #12]
 8009380:	f7ff ffc2 	bl	8009308 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 f91b 	bl	80095c0 <SUBGRF_SetTx>
}
 800938a:	bf00      	nop
 800938c:	3710      	adds	r7, #16
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}

08009392 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8009392:	b580      	push	{r7, lr}
 8009394:	b082      	sub	sp, #8
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800939a:	2208      	movs	r2, #8
 800939c:	6879      	ldr	r1, [r7, #4]
 800939e:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 80093a2:	f000 fe9d 	bl	800a0e0 <SUBGRF_WriteRegisters>
    return 0;
 80093a6:	2300      	movs	r3, #0
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3708      	adds	r7, #8
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	4603      	mov	r3, r0
 80093b8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80093ba:	88fb      	ldrh	r3, [r7, #6]
 80093bc:	0a1b      	lsrs	r3, r3, #8
 80093be:	b29b      	uxth	r3, r3
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80093c4:	88fb      	ldrh	r3, [r7, #6]
 80093c6:	b2db      	uxtb	r3, r3
 80093c8:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80093ca:	f000 fb6f 	bl	8009aac <SUBGRF_GetPacketType>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d108      	bne.n	80093e6 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80093d4:	f107 030c 	add.w	r3, r7, #12
 80093d8:	2202      	movs	r2, #2
 80093da:	4619      	mov	r1, r3
 80093dc:	f240 60bc 	movw	r0, #1724	; 0x6bc
 80093e0:	f000 fe7e 	bl	800a0e0 <SUBGRF_WriteRegisters>
            break;
 80093e4:	e000      	b.n	80093e8 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 80093e6:	bf00      	nop
    }
}
 80093e8:	bf00      	nop
 80093ea:	3710      	adds	r7, #16
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	4603      	mov	r3, r0
 80093f8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80093fa:	88fb      	ldrh	r3, [r7, #6]
 80093fc:	0a1b      	lsrs	r3, r3, #8
 80093fe:	b29b      	uxth	r3, r3
 8009400:	b2db      	uxtb	r3, r3
 8009402:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8009404:	88fb      	ldrh	r3, [r7, #6]
 8009406:	b2db      	uxtb	r3, r3
 8009408:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800940a:	f000 fb4f 	bl	8009aac <SUBGRF_GetPacketType>
 800940e:	4603      	mov	r3, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d108      	bne.n	8009426 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8009414:	f107 030c 	add.w	r3, r7, #12
 8009418:	2202      	movs	r2, #2
 800941a:	4619      	mov	r1, r3
 800941c:	f240 60be 	movw	r0, #1726	; 0x6be
 8009420:	f000 fe5e 	bl	800a0e0 <SUBGRF_WriteRegisters>
            break;
 8009424:	e000      	b.n	8009428 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8009426:	bf00      	nop
    }
}
 8009428:	bf00      	nop
 800942a:	3710      	adds	r7, #16
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	4603      	mov	r3, r0
 8009438:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800943a:	2300      	movs	r3, #0
 800943c:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800943e:	f000 fb35 	bl	8009aac <SUBGRF_GetPacketType>
 8009442:	4603      	mov	r3, r0
 8009444:	2b00      	cmp	r3, #0
 8009446:	d121      	bne.n	800948c <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8009448:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800944c:	f000 fe34 	bl	800a0b8 <SUBGRF_ReadRegister>
 8009450:	4603      	mov	r3, r0
 8009452:	f023 0301 	bic.w	r3, r3, #1
 8009456:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8009458:	88fb      	ldrh	r3, [r7, #6]
 800945a:	0a1b      	lsrs	r3, r3, #8
 800945c:	b29b      	uxth	r3, r3
 800945e:	b25b      	sxtb	r3, r3
 8009460:	f003 0301 	and.w	r3, r3, #1
 8009464:	b25a      	sxtb	r2, r3
 8009466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800946a:	4313      	orrs	r3, r2
 800946c:	b25b      	sxtb	r3, r3
 800946e:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8009470:	7bfb      	ldrb	r3, [r7, #15]
 8009472:	4619      	mov	r1, r3
 8009474:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8009478:	f000 fe0a 	bl	800a090 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800947c:	88fb      	ldrh	r3, [r7, #6]
 800947e:	b2db      	uxtb	r3, r3
 8009480:	4619      	mov	r1, r3
 8009482:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8009486:	f000 fe03 	bl	800a090 <SUBGRF_WriteRegister>
            break;
 800948a:	e000      	b.n	800948e <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 800948c:	bf00      	nop
    }
}
 800948e:	bf00      	nop
 8009490:	3710      	adds	r7, #16
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}

08009496 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8009496:	b580      	push	{r7, lr}
 8009498:	b082      	sub	sp, #8
 800949a:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 800949c:	2300      	movs	r3, #0
 800949e:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 80094a0:	2300      	movs	r3, #0
 80094a2:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 80094a4:	2300      	movs	r3, #0
 80094a6:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80094a8:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80094ac:	f000 fe04 	bl	800a0b8 <SUBGRF_ReadRegister>
 80094b0:	4603      	mov	r3, r0
 80094b2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80094b4:	79fb      	ldrb	r3, [r7, #7]
 80094b6:	f023 0301 	bic.w	r3, r3, #1
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	4619      	mov	r1, r3
 80094be:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80094c2:	f000 fde5 	bl	800a090 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 80094c6:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80094ca:	f000 fdf5 	bl	800a0b8 <SUBGRF_ReadRegister>
 80094ce:	4603      	mov	r3, r0
 80094d0:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 80094d2:	79bb      	ldrb	r3, [r7, #6]
 80094d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	4619      	mov	r1, r3
 80094dc:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80094e0:	f000 fdd6 	bl	800a090 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80094e4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80094e8:	f000 f88a 	bl	8009600 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 80094ec:	463b      	mov	r3, r7
 80094ee:	2204      	movs	r2, #4
 80094f0:	4619      	mov	r1, r3
 80094f2:	f640 0019 	movw	r0, #2073	; 0x819
 80094f6:	f000 fe15 	bl	800a124 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 80094fa:	2000      	movs	r0, #0
 80094fc:	f000 f844 	bl	8009588 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8009500:	79fb      	ldrb	r3, [r7, #7]
 8009502:	4619      	mov	r1, r3
 8009504:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8009508:	f000 fdc2 	bl	800a090 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800950c:	79bb      	ldrb	r3, [r7, #6]
 800950e:	4619      	mov	r1, r3
 8009510:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8009514:	f000 fdbc 	bl	800a090 <SUBGRF_WriteRegister>

    return number;
 8009518:	683b      	ldr	r3, [r7, #0]
}
 800951a:	4618      	mov	r0, r3
 800951c:	3708      	adds	r7, #8
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
	...

08009524 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800952c:	2000      	movs	r0, #0
 800952e:	f001 fa02 	bl	800a936 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8009532:	2002      	movs	r0, #2
 8009534:	f000 ffa4 	bl	800a480 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009538:	793b      	ldrb	r3, [r7, #4]
 800953a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800953e:	b2db      	uxtb	r3, r3
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8009544:	793b      	ldrb	r3, [r7, #4]
 8009546:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800954a:	b2db      	uxtb	r3, r3
 800954c:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800954e:	b25b      	sxtb	r3, r3
 8009550:	4313      	orrs	r3, r2
 8009552:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8009554:	793b      	ldrb	r3, [r7, #4]
 8009556:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800955a:	b2db      	uxtb	r3, r3
 800955c:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800955e:	4313      	orrs	r3, r2
 8009560:	b25b      	sxtb	r3, r3
 8009562:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009564:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8009566:	f107 030f 	add.w	r3, r7, #15
 800956a:	2201      	movs	r2, #1
 800956c:	4619      	mov	r1, r3
 800956e:	2084      	movs	r0, #132	; 0x84
 8009570:	f000 fe3e 	bl	800a1f0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8009574:	4b03      	ldr	r3, [pc, #12]	; (8009584 <SUBGRF_SetSleep+0x60>)
 8009576:	2200      	movs	r2, #0
 8009578:	701a      	strb	r2, [r3, #0]
}
 800957a:	bf00      	nop
 800957c:	3710      	adds	r7, #16
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
 8009582:	bf00      	nop
 8009584:	20000314 	.word	0x20000314

08009588 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	4603      	mov	r3, r0
 8009590:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8009592:	1dfb      	adds	r3, r7, #7
 8009594:	2201      	movs	r2, #1
 8009596:	4619      	mov	r1, r3
 8009598:	2080      	movs	r0, #128	; 0x80
 800959a:	f000 fe29 	bl	800a1f0 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800959e:	79fb      	ldrb	r3, [r7, #7]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d103      	bne.n	80095ac <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 80095a4:	4b05      	ldr	r3, [pc, #20]	; (80095bc <SUBGRF_SetStandby+0x34>)
 80095a6:	2201      	movs	r2, #1
 80095a8:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 80095aa:	e002      	b.n	80095b2 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 80095ac:	4b03      	ldr	r3, [pc, #12]	; (80095bc <SUBGRF_SetStandby+0x34>)
 80095ae:	2202      	movs	r2, #2
 80095b0:	701a      	strb	r2, [r3, #0]
}
 80095b2:	bf00      	nop
 80095b4:	3708      	adds	r7, #8
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	20000314 	.word	0x20000314

080095c0 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 80095c8:	4b0c      	ldr	r3, [pc, #48]	; (80095fc <SUBGRF_SetTx+0x3c>)
 80095ca:	2204      	movs	r2, #4
 80095cc:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	0c1b      	lsrs	r3, r3, #16
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	0a1b      	lsrs	r3, r3, #8
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 80095e4:	f107 030c 	add.w	r3, r7, #12
 80095e8:	2203      	movs	r2, #3
 80095ea:	4619      	mov	r1, r3
 80095ec:	2083      	movs	r0, #131	; 0x83
 80095ee:	f000 fdff 	bl	800a1f0 <SUBGRF_WriteCommand>
}
 80095f2:	bf00      	nop
 80095f4:	3710      	adds	r7, #16
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	20000314 	.word	0x20000314

08009600 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8009608:	4b0c      	ldr	r3, [pc, #48]	; (800963c <SUBGRF_SetRx+0x3c>)
 800960a:	2205      	movs	r2, #5
 800960c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	0c1b      	lsrs	r3, r3, #16
 8009612:	b2db      	uxtb	r3, r3
 8009614:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	0a1b      	lsrs	r3, r3, #8
 800961a:	b2db      	uxtb	r3, r3
 800961c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	b2db      	uxtb	r3, r3
 8009622:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8009624:	f107 030c 	add.w	r3, r7, #12
 8009628:	2203      	movs	r2, #3
 800962a:	4619      	mov	r1, r3
 800962c:	2082      	movs	r0, #130	; 0x82
 800962e:	f000 fddf 	bl	800a1f0 <SUBGRF_WriteCommand>
}
 8009632:	bf00      	nop
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	20000314 	.word	0x20000314

08009640 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8009648:	4b0e      	ldr	r3, [pc, #56]	; (8009684 <SUBGRF_SetRxBoosted+0x44>)
 800964a:	2205      	movs	r2, #5
 800964c:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800964e:	2197      	movs	r1, #151	; 0x97
 8009650:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8009654:	f000 fd1c 	bl	800a090 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	0c1b      	lsrs	r3, r3, #16
 800965c:	b2db      	uxtb	r3, r3
 800965e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	0a1b      	lsrs	r3, r3, #8
 8009664:	b2db      	uxtb	r3, r3
 8009666:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	b2db      	uxtb	r3, r3
 800966c:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800966e:	f107 030c 	add.w	r3, r7, #12
 8009672:	2203      	movs	r2, #3
 8009674:	4619      	mov	r1, r3
 8009676:	2082      	movs	r0, #130	; 0x82
 8009678:	f000 fdba 	bl	800a1f0 <SUBGRF_WriteCommand>
}
 800967c:	bf00      	nop
 800967e:	3710      	adds	r7, #16
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}
 8009684:	20000314 	.word	0x20000314

08009688 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	0c1b      	lsrs	r3, r3, #16
 8009696:	b2db      	uxtb	r3, r3
 8009698:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	0a1b      	lsrs	r3, r3, #8
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	0c1b      	lsrs	r3, r3, #16
 80096ac:	b2db      	uxtb	r3, r3
 80096ae:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	0a1b      	lsrs	r3, r3, #8
 80096b4:	b2db      	uxtb	r3, r3
 80096b6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	b2db      	uxtb	r3, r3
 80096bc:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80096be:	f107 0308 	add.w	r3, r7, #8
 80096c2:	2206      	movs	r2, #6
 80096c4:	4619      	mov	r1, r3
 80096c6:	2094      	movs	r0, #148	; 0x94
 80096c8:	f000 fd92 	bl	800a1f0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 80096cc:	4b03      	ldr	r3, [pc, #12]	; (80096dc <SUBGRF_SetRxDutyCycle+0x54>)
 80096ce:	2206      	movs	r2, #6
 80096d0:	701a      	strb	r2, [r3, #0]
}
 80096d2:	bf00      	nop
 80096d4:	3710      	adds	r7, #16
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	20000314 	.word	0x20000314

080096e0 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 80096e4:	2200      	movs	r2, #0
 80096e6:	2100      	movs	r1, #0
 80096e8:	20c5      	movs	r0, #197	; 0xc5
 80096ea:	f000 fd81 	bl	800a1f0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 80096ee:	4b02      	ldr	r3, [pc, #8]	; (80096f8 <SUBGRF_SetCad+0x18>)
 80096f0:	2207      	movs	r2, #7
 80096f2:	701a      	strb	r2, [r3, #0]
}
 80096f4:	bf00      	nop
 80096f6:	bd80      	pop	{r7, pc}
 80096f8:	20000314 	.word	0x20000314

080096fc <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8009700:	2200      	movs	r2, #0
 8009702:	2100      	movs	r1, #0
 8009704:	20d1      	movs	r0, #209	; 0xd1
 8009706:	f000 fd73 	bl	800a1f0 <SUBGRF_WriteCommand>
}
 800970a:	bf00      	nop
 800970c:	bd80      	pop	{r7, pc}

0800970e <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800970e:	b580      	push	{r7, lr}
 8009710:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8009712:	2200      	movs	r2, #0
 8009714:	2100      	movs	r1, #0
 8009716:	20d2      	movs	r0, #210	; 0xd2
 8009718:	f000 fd6a 	bl	800a1f0 <SUBGRF_WriteCommand>
}
 800971c:	bf00      	nop
 800971e:	bd80      	pop	{r7, pc}

08009720 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
 8009726:	4603      	mov	r3, r0
 8009728:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800972a:	1dfb      	adds	r3, r7, #7
 800972c:	2201      	movs	r2, #1
 800972e:	4619      	mov	r1, r3
 8009730:	209f      	movs	r0, #159	; 0x9f
 8009732:	f000 fd5d 	bl	800a1f0 <SUBGRF_WriteCommand>
}
 8009736:	bf00      	nop
 8009738:	3708      	adds	r7, #8
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}

0800973e <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800973e:	b580      	push	{r7, lr}
 8009740:	b084      	sub	sp, #16
 8009742:	af00      	add	r7, sp, #0
 8009744:	4603      	mov	r3, r0
 8009746:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8009748:	1dfb      	adds	r3, r7, #7
 800974a:	2201      	movs	r2, #1
 800974c:	4619      	mov	r1, r3
 800974e:	20a0      	movs	r0, #160	; 0xa0
 8009750:	f000 fd4e 	bl	800a1f0 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8009754:	79fb      	ldrb	r3, [r7, #7]
 8009756:	2b3f      	cmp	r3, #63	; 0x3f
 8009758:	d91c      	bls.n	8009794 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800975a:	79fb      	ldrb	r3, [r7, #7]
 800975c:	085b      	lsrs	r3, r3, #1
 800975e:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8009760:	2300      	movs	r3, #0
 8009762:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8009764:	2300      	movs	r3, #0
 8009766:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8009768:	e005      	b.n	8009776 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800976a:	7bfb      	ldrb	r3, [r7, #15]
 800976c:	089b      	lsrs	r3, r3, #2
 800976e:	73fb      	strb	r3, [r7, #15]
            exp++;
 8009770:	7bbb      	ldrb	r3, [r7, #14]
 8009772:	3301      	adds	r3, #1
 8009774:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8009776:	7bfb      	ldrb	r3, [r7, #15]
 8009778:	2b1f      	cmp	r3, #31
 800977a:	d8f6      	bhi.n	800976a <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 800977c:	7bfb      	ldrb	r3, [r7, #15]
 800977e:	00db      	lsls	r3, r3, #3
 8009780:	b2da      	uxtb	r2, r3
 8009782:	7bbb      	ldrb	r3, [r7, #14]
 8009784:	4413      	add	r3, r2
 8009786:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8009788:	7b7b      	ldrb	r3, [r7, #13]
 800978a:	4619      	mov	r1, r3
 800978c:	f240 7006 	movw	r0, #1798	; 0x706
 8009790:	f000 fc7e 	bl	800a090 <SUBGRF_WriteRegister>
    }
}
 8009794:	bf00      	nop
 8009796:	3710      	adds	r7, #16
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b082      	sub	sp, #8
 80097a0:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80097a2:	f001 f8e4 	bl	800a96e <RBI_IsDCDC>
 80097a6:	4603      	mov	r3, r0
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d102      	bne.n	80097b2 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 80097ac:	2301      	movs	r3, #1
 80097ae:	71fb      	strb	r3, [r7, #7]
 80097b0:	e001      	b.n	80097b6 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 80097b2:	2300      	movs	r3, #0
 80097b4:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80097b6:	1dfb      	adds	r3, r7, #7
 80097b8:	2201      	movs	r2, #1
 80097ba:	4619      	mov	r1, r3
 80097bc:	2096      	movs	r0, #150	; 0x96
 80097be:	f000 fd17 	bl	800a1f0 <SUBGRF_WriteCommand>
}
 80097c2:	bf00      	nop
 80097c4:	3708      	adds	r7, #8
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}

080097ca <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 80097ca:	b580      	push	{r7, lr}
 80097cc:	b084      	sub	sp, #16
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80097d2:	793b      	ldrb	r3, [r7, #4]
 80097d4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	019b      	lsls	r3, r3, #6
 80097dc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80097de:	793b      	ldrb	r3, [r7, #4]
 80097e0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80097e8:	b25b      	sxtb	r3, r3
 80097ea:	4313      	orrs	r3, r2
 80097ec:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80097ee:	793b      	ldrb	r3, [r7, #4]
 80097f0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80097f8:	b25b      	sxtb	r3, r3
 80097fa:	4313      	orrs	r3, r2
 80097fc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80097fe:	793b      	ldrb	r3, [r7, #4]
 8009800:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009804:	b2db      	uxtb	r3, r3
 8009806:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8009808:	b25b      	sxtb	r3, r3
 800980a:	4313      	orrs	r3, r2
 800980c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800980e:	793b      	ldrb	r3, [r7, #4]
 8009810:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009814:	b2db      	uxtb	r3, r3
 8009816:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8009818:	b25b      	sxtb	r3, r3
 800981a:	4313      	orrs	r3, r2
 800981c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800981e:	793b      	ldrb	r3, [r7, #4]
 8009820:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009824:	b2db      	uxtb	r3, r3
 8009826:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8009828:	b25b      	sxtb	r3, r3
 800982a:	4313      	orrs	r3, r2
 800982c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800982e:	793b      	ldrb	r3, [r7, #4]
 8009830:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009834:	b2db      	uxtb	r3, r3
 8009836:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8009838:	4313      	orrs	r3, r2
 800983a:	b25b      	sxtb	r3, r3
 800983c:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800983e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8009840:	f107 030f 	add.w	r3, r7, #15
 8009844:	2201      	movs	r2, #1
 8009846:	4619      	mov	r1, r3
 8009848:	2089      	movs	r0, #137	; 0x89
 800984a:	f000 fcd1 	bl	800a1f0 <SUBGRF_WriteCommand>
}
 800984e:	bf00      	nop
 8009850:	3710      	adds	r7, #16
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
	...

08009858 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	4a1d      	ldr	r2, [pc, #116]	; (80098d8 <SUBGRF_CalibrateImage+0x80>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d904      	bls.n	8009872 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8009868:	23e1      	movs	r3, #225	; 0xe1
 800986a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800986c:	23e9      	movs	r3, #233	; 0xe9
 800986e:	737b      	strb	r3, [r7, #13]
 8009870:	e027      	b.n	80098c2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	4a19      	ldr	r2, [pc, #100]	; (80098dc <SUBGRF_CalibrateImage+0x84>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d904      	bls.n	8009884 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800987a:	23d7      	movs	r3, #215	; 0xd7
 800987c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800987e:	23db      	movs	r3, #219	; 0xdb
 8009880:	737b      	strb	r3, [r7, #13]
 8009882:	e01e      	b.n	80098c2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	4a16      	ldr	r2, [pc, #88]	; (80098e0 <SUBGRF_CalibrateImage+0x88>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d904      	bls.n	8009896 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800988c:	23c1      	movs	r3, #193	; 0xc1
 800988e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8009890:	23c5      	movs	r3, #197	; 0xc5
 8009892:	737b      	strb	r3, [r7, #13]
 8009894:	e015      	b.n	80098c2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	4a12      	ldr	r2, [pc, #72]	; (80098e4 <SUBGRF_CalibrateImage+0x8c>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d904      	bls.n	80098a8 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800989e:	2375      	movs	r3, #117	; 0x75
 80098a0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80098a2:	2381      	movs	r3, #129	; 0x81
 80098a4:	737b      	strb	r3, [r7, #13]
 80098a6:	e00c      	b.n	80098c2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	4a0f      	ldr	r2, [pc, #60]	; (80098e8 <SUBGRF_CalibrateImage+0x90>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d904      	bls.n	80098ba <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 80098b0:	236b      	movs	r3, #107	; 0x6b
 80098b2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80098b4:	236f      	movs	r3, #111	; 0x6f
 80098b6:	737b      	strb	r3, [r7, #13]
 80098b8:	e003      	b.n	80098c2 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 80098ba:	2329      	movs	r3, #41	; 0x29
 80098bc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 80098be:	232b      	movs	r3, #43	; 0x2b
 80098c0:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80098c2:	f107 030c 	add.w	r3, r7, #12
 80098c6:	2202      	movs	r2, #2
 80098c8:	4619      	mov	r1, r3
 80098ca:	2098      	movs	r0, #152	; 0x98
 80098cc:	f000 fc90 	bl	800a1f0 <SUBGRF_WriteCommand>
}
 80098d0:	bf00      	nop
 80098d2:	3710      	adds	r7, #16
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}
 80098d8:	35a4e900 	.word	0x35a4e900
 80098dc:	32a9f880 	.word	0x32a9f880
 80098e0:	2de54480 	.word	0x2de54480
 80098e4:	1b6b0b00 	.word	0x1b6b0b00
 80098e8:	1954fc40 	.word	0x1954fc40

080098ec <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 80098ec:	b590      	push	{r4, r7, lr}
 80098ee:	b085      	sub	sp, #20
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	4604      	mov	r4, r0
 80098f4:	4608      	mov	r0, r1
 80098f6:	4611      	mov	r1, r2
 80098f8:	461a      	mov	r2, r3
 80098fa:	4623      	mov	r3, r4
 80098fc:	71fb      	strb	r3, [r7, #7]
 80098fe:	4603      	mov	r3, r0
 8009900:	71bb      	strb	r3, [r7, #6]
 8009902:	460b      	mov	r3, r1
 8009904:	717b      	strb	r3, [r7, #5]
 8009906:	4613      	mov	r3, r2
 8009908:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800990a:	79fb      	ldrb	r3, [r7, #7]
 800990c:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800990e:	79bb      	ldrb	r3, [r7, #6]
 8009910:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8009912:	797b      	ldrb	r3, [r7, #5]
 8009914:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8009916:	793b      	ldrb	r3, [r7, #4]
 8009918:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800991a:	f107 030c 	add.w	r3, r7, #12
 800991e:	2204      	movs	r2, #4
 8009920:	4619      	mov	r1, r3
 8009922:	2095      	movs	r0, #149	; 0x95
 8009924:	f000 fc64 	bl	800a1f0 <SUBGRF_WriteCommand>
}
 8009928:	bf00      	nop
 800992a:	3714      	adds	r7, #20
 800992c:	46bd      	mov	sp, r7
 800992e:	bd90      	pop	{r4, r7, pc}

08009930 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8009930:	b590      	push	{r4, r7, lr}
 8009932:	b085      	sub	sp, #20
 8009934:	af00      	add	r7, sp, #0
 8009936:	4604      	mov	r4, r0
 8009938:	4608      	mov	r0, r1
 800993a:	4611      	mov	r1, r2
 800993c:	461a      	mov	r2, r3
 800993e:	4623      	mov	r3, r4
 8009940:	80fb      	strh	r3, [r7, #6]
 8009942:	4603      	mov	r3, r0
 8009944:	80bb      	strh	r3, [r7, #4]
 8009946:	460b      	mov	r3, r1
 8009948:	807b      	strh	r3, [r7, #2]
 800994a:	4613      	mov	r3, r2
 800994c:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800994e:	88fb      	ldrh	r3, [r7, #6]
 8009950:	0a1b      	lsrs	r3, r3, #8
 8009952:	b29b      	uxth	r3, r3
 8009954:	b2db      	uxtb	r3, r3
 8009956:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8009958:	88fb      	ldrh	r3, [r7, #6]
 800995a:	b2db      	uxtb	r3, r3
 800995c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800995e:	88bb      	ldrh	r3, [r7, #4]
 8009960:	0a1b      	lsrs	r3, r3, #8
 8009962:	b29b      	uxth	r3, r3
 8009964:	b2db      	uxtb	r3, r3
 8009966:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8009968:	88bb      	ldrh	r3, [r7, #4]
 800996a:	b2db      	uxtb	r3, r3
 800996c:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800996e:	887b      	ldrh	r3, [r7, #2]
 8009970:	0a1b      	lsrs	r3, r3, #8
 8009972:	b29b      	uxth	r3, r3
 8009974:	b2db      	uxtb	r3, r3
 8009976:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8009978:	887b      	ldrh	r3, [r7, #2]
 800997a:	b2db      	uxtb	r3, r3
 800997c:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800997e:	883b      	ldrh	r3, [r7, #0]
 8009980:	0a1b      	lsrs	r3, r3, #8
 8009982:	b29b      	uxth	r3, r3
 8009984:	b2db      	uxtb	r3, r3
 8009986:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8009988:	883b      	ldrh	r3, [r7, #0]
 800998a:	b2db      	uxtb	r3, r3
 800998c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800998e:	f107 0308 	add.w	r3, r7, #8
 8009992:	2208      	movs	r2, #8
 8009994:	4619      	mov	r1, r3
 8009996:	2008      	movs	r0, #8
 8009998:	f000 fc2a 	bl	800a1f0 <SUBGRF_WriteCommand>
}
 800999c:	bf00      	nop
 800999e:	3714      	adds	r7, #20
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd90      	pop	{r4, r7, pc}

080099a4 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	4603      	mov	r3, r0
 80099ac:	6039      	str	r1, [r7, #0]
 80099ae:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80099b0:	79fb      	ldrb	r3, [r7, #7]
 80099b2:	f003 0307 	and.w	r3, r3, #7
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	0c1b      	lsrs	r3, r3, #16
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	0a1b      	lsrs	r3, r3, #8
 80099c6:	b2db      	uxtb	r3, r3
 80099c8:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	b2db      	uxtb	r3, r3
 80099ce:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80099d0:	f107 030c 	add.w	r3, r7, #12
 80099d4:	2204      	movs	r2, #4
 80099d6:	4619      	mov	r1, r3
 80099d8:	2097      	movs	r0, #151	; 0x97
 80099da:	f000 fc09 	bl	800a1f0 <SUBGRF_WriteCommand>
}
 80099de:	bf00      	nop
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
	...

080099e8 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 80099e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80099ec:	b084      	sub	sp, #16
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 80099f2:	2300      	movs	r3, #0
 80099f4:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 80099f6:	4b1d      	ldr	r3, [pc, #116]	; (8009a6c <SUBGRF_SetRfFrequency+0x84>)
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	f083 0301 	eor.w	r3, r3, #1
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d005      	beq.n	8009a10 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f7ff ff27 	bl	8009858 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8009a0a:	4b18      	ldr	r3, [pc, #96]	; (8009a6c <SUBGRF_SetRfFrequency+0x84>)
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	461c      	mov	r4, r3
 8009a16:	4615      	mov	r5, r2
 8009a18:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8009a1c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8009a20:	4a13      	ldr	r2, [pc, #76]	; (8009a70 <SUBGRF_SetRfFrequency+0x88>)
 8009a22:	f04f 0300 	mov.w	r3, #0
 8009a26:	4640      	mov	r0, r8
 8009a28:	4649      	mov	r1, r9
 8009a2a:	f7f6 fbad 	bl	8000188 <__aeabi_uldivmod>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	460b      	mov	r3, r1
 8009a32:	4613      	mov	r3, r2
 8009a34:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	0e1b      	lsrs	r3, r3, #24
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	0c1b      	lsrs	r3, r3, #16
 8009a42:	b2db      	uxtb	r3, r3
 8009a44:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	0a1b      	lsrs	r3, r3, #8
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8009a54:	f107 0308 	add.w	r3, r7, #8
 8009a58:	2204      	movs	r2, #4
 8009a5a:	4619      	mov	r1, r3
 8009a5c:	2086      	movs	r0, #134	; 0x86
 8009a5e:	f000 fbc7 	bl	800a1f0 <SUBGRF_WriteCommand>
}
 8009a62:	bf00      	nop
 8009a64:	3710      	adds	r7, #16
 8009a66:	46bd      	mov	sp, r7
 8009a68:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009a6c:	2000031c 	.word	0x2000031c
 8009a70:	01e84800 	.word	0x01e84800

08009a74 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8009a7e:	79fa      	ldrb	r2, [r7, #7]
 8009a80:	4b09      	ldr	r3, [pc, #36]	; (8009aa8 <SUBGRF_SetPacketType+0x34>)
 8009a82:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8009a84:	79fb      	ldrb	r3, [r7, #7]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d104      	bne.n	8009a94 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8009a8a:	2100      	movs	r1, #0
 8009a8c:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8009a90:	f000 fafe 	bl	800a090 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8009a94:	1dfb      	adds	r3, r7, #7
 8009a96:	2201      	movs	r2, #1
 8009a98:	4619      	mov	r1, r3
 8009a9a:	208a      	movs	r0, #138	; 0x8a
 8009a9c:	f000 fba8 	bl	800a1f0 <SUBGRF_WriteCommand>
}
 8009aa0:	bf00      	nop
 8009aa2:	3708      	adds	r7, #8
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	20000315 	.word	0x20000315

08009aac <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8009aac:	b480      	push	{r7}
 8009aae:	af00      	add	r7, sp, #0
    return PacketType;
 8009ab0:	4b02      	ldr	r3, [pc, #8]	; (8009abc <SUBGRF_GetPacketType+0x10>)
 8009ab2:	781b      	ldrb	r3, [r3, #0]
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bc80      	pop	{r7}
 8009aba:	4770      	bx	lr
 8009abc:	20000315 	.word	0x20000315

08009ac0 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	71fb      	strb	r3, [r7, #7]
 8009aca:	460b      	mov	r3, r1
 8009acc:	71bb      	strb	r3, [r7, #6]
 8009ace:	4613      	mov	r3, r2
 8009ad0:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8009ad2:	79fb      	ldrb	r3, [r7, #7]
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	d149      	bne.n	8009b6c <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8009ad8:	2000      	movs	r0, #0
 8009ada:	f000 ff4f 	bl	800a97c <RBI_GetRFOMaxPowerConfig>
 8009ade:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8009ae0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009ae4:	68fa      	ldr	r2, [r7, #12]
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	da01      	bge.n	8009aee <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2b0e      	cmp	r3, #14
 8009af2:	d10e      	bne.n	8009b12 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8009af4:	2301      	movs	r3, #1
 8009af6:	2201      	movs	r2, #1
 8009af8:	2100      	movs	r1, #0
 8009afa:	2004      	movs	r0, #4
 8009afc:	f7ff fef6 	bl	80098ec <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009b00:	79ba      	ldrb	r2, [r7, #6]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	b2db      	uxtb	r3, r3
 8009b06:	1ad3      	subs	r3, r2, r3
 8009b08:	b2db      	uxtb	r3, r3
 8009b0a:	330e      	adds	r3, #14
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	71bb      	strb	r3, [r7, #6]
 8009b10:	e01f      	b.n	8009b52 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2b0a      	cmp	r3, #10
 8009b16:	d10e      	bne.n	8009b36 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8009b18:	2301      	movs	r3, #1
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	2100      	movs	r1, #0
 8009b1e:	2001      	movs	r0, #1
 8009b20:	f7ff fee4 	bl	80098ec <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8009b24:	79ba      	ldrb	r2, [r7, #6]
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	1ad3      	subs	r3, r2, r3
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	330d      	adds	r3, #13
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	71bb      	strb	r3, [r7, #6]
 8009b34:	e00d      	b.n	8009b52 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8009b36:	2301      	movs	r3, #1
 8009b38:	2201      	movs	r2, #1
 8009b3a:	2100      	movs	r1, #0
 8009b3c:	2007      	movs	r0, #7
 8009b3e:	f7ff fed5 	bl	80098ec <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009b42:	79ba      	ldrb	r2, [r7, #6]
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	b2db      	uxtb	r3, r3
 8009b48:	1ad3      	subs	r3, r2, r3
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	330e      	adds	r3, #14
 8009b4e:	b2db      	uxtb	r3, r3
 8009b50:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8009b52:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009b56:	f113 0f11 	cmn.w	r3, #17
 8009b5a:	da01      	bge.n	8009b60 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8009b5c:	23ef      	movs	r3, #239	; 0xef
 8009b5e:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8009b60:	2118      	movs	r1, #24
 8009b62:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8009b66:	f000 fa93 	bl	800a090 <SUBGRF_WriteRegister>
 8009b6a:	e067      	b.n	8009c3c <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8009b6c:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8009b70:	f000 faa2 	bl	800a0b8 <SUBGRF_ReadRegister>
 8009b74:	4603      	mov	r3, r0
 8009b76:	f043 031e 	orr.w	r3, r3, #30
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8009b82:	f000 fa85 	bl	800a090 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8009b86:	2001      	movs	r0, #1
 8009b88:	f000 fef8 	bl	800a97c <RBI_GetRFOMaxPowerConfig>
 8009b8c:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8009b8e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009b92:	68fa      	ldr	r2, [r7, #12]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	da01      	bge.n	8009b9c <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2b14      	cmp	r3, #20
 8009ba0:	d10e      	bne.n	8009bc0 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	2105      	movs	r1, #5
 8009ba8:	2003      	movs	r0, #3
 8009baa:	f7ff fe9f 	bl	80098ec <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009bae:	79ba      	ldrb	r2, [r7, #6]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	1ad3      	subs	r3, r2, r3
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	3316      	adds	r3, #22
 8009bba:	b2db      	uxtb	r3, r3
 8009bbc:	71bb      	strb	r3, [r7, #6]
 8009bbe:	e031      	b.n	8009c24 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2b11      	cmp	r3, #17
 8009bc4:	d10e      	bne.n	8009be4 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	2200      	movs	r2, #0
 8009bca:	2103      	movs	r1, #3
 8009bcc:	2002      	movs	r0, #2
 8009bce:	f7ff fe8d 	bl	80098ec <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009bd2:	79ba      	ldrb	r2, [r7, #6]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	1ad3      	subs	r3, r2, r3
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	3316      	adds	r3, #22
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	71bb      	strb	r3, [r7, #6]
 8009be2:	e01f      	b.n	8009c24 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2b0e      	cmp	r3, #14
 8009be8:	d10e      	bne.n	8009c08 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8009bea:	2301      	movs	r3, #1
 8009bec:	2200      	movs	r2, #0
 8009bee:	2102      	movs	r1, #2
 8009bf0:	2002      	movs	r0, #2
 8009bf2:	f7ff fe7b 	bl	80098ec <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009bf6:	79ba      	ldrb	r2, [r7, #6]
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	1ad3      	subs	r3, r2, r3
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	330e      	adds	r3, #14
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	71bb      	strb	r3, [r7, #6]
 8009c06:	e00d      	b.n	8009c24 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8009c08:	2301      	movs	r3, #1
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	2107      	movs	r1, #7
 8009c0e:	2004      	movs	r0, #4
 8009c10:	f7ff fe6c 	bl	80098ec <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009c14:	79ba      	ldrb	r2, [r7, #6]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	1ad3      	subs	r3, r2, r3
 8009c1c:	b2db      	uxtb	r3, r3
 8009c1e:	3316      	adds	r3, #22
 8009c20:	b2db      	uxtb	r3, r3
 8009c22:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8009c24:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009c28:	f113 0f09 	cmn.w	r3, #9
 8009c2c:	da01      	bge.n	8009c32 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8009c2e:	23f7      	movs	r3, #247	; 0xf7
 8009c30:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8009c32:	2138      	movs	r1, #56	; 0x38
 8009c34:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8009c38:	f000 fa2a 	bl	800a090 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8009c3c:	79bb      	ldrb	r3, [r7, #6]
 8009c3e:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8009c40:	797b      	ldrb	r3, [r7, #5]
 8009c42:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8009c44:	f107 0308 	add.w	r3, r7, #8
 8009c48:	2202      	movs	r2, #2
 8009c4a:	4619      	mov	r1, r3
 8009c4c:	208e      	movs	r0, #142	; 0x8e
 8009c4e:	f000 facf 	bl	800a1f0 <SUBGRF_WriteCommand>
}
 8009c52:	bf00      	nop
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
	...

08009c5c <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8009c5c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009c60:	b086      	sub	sp, #24
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8009c66:	2300      	movs	r3, #0
 8009c68:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8009c6a:	4a61      	ldr	r2, [pc, #388]	; (8009df0 <SUBGRF_SetModulationParams+0x194>)
 8009c6c:	f107 0308 	add.w	r3, r7, #8
 8009c70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009c74:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	781a      	ldrb	r2, [r3, #0]
 8009c7c:	4b5d      	ldr	r3, [pc, #372]	; (8009df4 <SUBGRF_SetModulationParams+0x198>)
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d004      	beq.n	8009c8e <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f7ff fef3 	bl	8009a74 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	2b03      	cmp	r3, #3
 8009c94:	f200 80a5 	bhi.w	8009de2 <SUBGRF_SetModulationParams+0x186>
 8009c98:	a201      	add	r2, pc, #4	; (adr r2, 8009ca0 <SUBGRF_SetModulationParams+0x44>)
 8009c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c9e:	bf00      	nop
 8009ca0:	08009cb1 	.word	0x08009cb1
 8009ca4:	08009d71 	.word	0x08009d71
 8009ca8:	08009d33 	.word	0x08009d33
 8009cac:	08009d9f 	.word	0x08009d9f
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8009cb0:	2308      	movs	r3, #8
 8009cb2:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	4a4f      	ldr	r2, [pc, #316]	; (8009df8 <SUBGRF_SetModulationParams+0x19c>)
 8009cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cbe:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	0c1b      	lsrs	r3, r3, #16
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	0a1b      	lsrs	r3, r3, #8
 8009ccc:	b2db      	uxtb	r3, r3
 8009cce:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	b2db      	uxtb	r3, r3
 8009cd4:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	7b1b      	ldrb	r3, [r3, #12]
 8009cda:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	7b5b      	ldrb	r3, [r3, #13]
 8009ce0:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	689b      	ldr	r3, [r3, #8]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	461c      	mov	r4, r3
 8009cea:	4615      	mov	r5, r2
 8009cec:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8009cf0:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8009cf4:	4a41      	ldr	r2, [pc, #260]	; (8009dfc <SUBGRF_SetModulationParams+0x1a0>)
 8009cf6:	f04f 0300 	mov.w	r3, #0
 8009cfa:	4640      	mov	r0, r8
 8009cfc:	4649      	mov	r1, r9
 8009cfe:	f7f6 fa43 	bl	8000188 <__aeabi_uldivmod>
 8009d02:	4602      	mov	r2, r0
 8009d04:	460b      	mov	r3, r1
 8009d06:	4613      	mov	r3, r2
 8009d08:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	0c1b      	lsrs	r3, r3, #16
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	0a1b      	lsrs	r3, r3, #8
 8009d16:	b2db      	uxtb	r3, r3
 8009d18:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009d20:	7cfb      	ldrb	r3, [r7, #19]
 8009d22:	b29a      	uxth	r2, r3
 8009d24:	f107 0308 	add.w	r3, r7, #8
 8009d28:	4619      	mov	r1, r3
 8009d2a:	208b      	movs	r0, #139	; 0x8b
 8009d2c:	f000 fa60 	bl	800a1f0 <SUBGRF_WriteCommand>
        break;
 8009d30:	e058      	b.n	8009de4 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 8009d32:	2304      	movs	r3, #4
 8009d34:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	691b      	ldr	r3, [r3, #16]
 8009d3a:	4a2f      	ldr	r2, [pc, #188]	; (8009df8 <SUBGRF_SetModulationParams+0x19c>)
 8009d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d40:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	0c1b      	lsrs	r3, r3, #16
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	0a1b      	lsrs	r3, r3, #8
 8009d4e:	b2db      	uxtb	r3, r3
 8009d50:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	b2db      	uxtb	r3, r3
 8009d56:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	7d1b      	ldrb	r3, [r3, #20]
 8009d5c:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009d5e:	7cfb      	ldrb	r3, [r7, #19]
 8009d60:	b29a      	uxth	r2, r3
 8009d62:	f107 0308 	add.w	r3, r7, #8
 8009d66:	4619      	mov	r1, r3
 8009d68:	208b      	movs	r0, #139	; 0x8b
 8009d6a:	f000 fa41 	bl	800a1f0 <SUBGRF_WriteCommand>
        break;
 8009d6e:	e039      	b.n	8009de4 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 8009d70:	2304      	movs	r3, #4
 8009d72:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	7e1b      	ldrb	r3, [r3, #24]
 8009d78:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	7e5b      	ldrb	r3, [r3, #25]
 8009d7e:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	7e9b      	ldrb	r3, [r3, #26]
 8009d84:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	7edb      	ldrb	r3, [r3, #27]
 8009d8a:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009d8c:	7cfb      	ldrb	r3, [r7, #19]
 8009d8e:	b29a      	uxth	r2, r3
 8009d90:	f107 0308 	add.w	r3, r7, #8
 8009d94:	4619      	mov	r1, r3
 8009d96:	208b      	movs	r0, #139	; 0x8b
 8009d98:	f000 fa2a 	bl	800a1f0 <SUBGRF_WriteCommand>

        break;
 8009d9c:	e022      	b.n	8009de4 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 8009d9e:	2305      	movs	r3, #5
 8009da0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	4a14      	ldr	r2, [pc, #80]	; (8009df8 <SUBGRF_SetModulationParams+0x19c>)
 8009da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dac:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	0c1b      	lsrs	r3, r3, #16
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	0a1b      	lsrs	r3, r3, #8
 8009dba:	b2db      	uxtb	r3, r3
 8009dbc:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	7b1b      	ldrb	r3, [r3, #12]
 8009dc8:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	7b5b      	ldrb	r3, [r3, #13]
 8009dce:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009dd0:	7cfb      	ldrb	r3, [r7, #19]
 8009dd2:	b29a      	uxth	r2, r3
 8009dd4:	f107 0308 	add.w	r3, r7, #8
 8009dd8:	4619      	mov	r1, r3
 8009dda:	208b      	movs	r0, #139	; 0x8b
 8009ddc:	f000 fa08 	bl	800a1f0 <SUBGRF_WriteCommand>
        break;
 8009de0:	e000      	b.n	8009de4 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 8009de2:	bf00      	nop
    }
}
 8009de4:	bf00      	nop
 8009de6:	3718      	adds	r7, #24
 8009de8:	46bd      	mov	sp, r7
 8009dea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009dee:	bf00      	nop
 8009df0:	0800bf5c 	.word	0x0800bf5c
 8009df4:	20000315 	.word	0x20000315
 8009df8:	3d090000 	.word	0x3d090000
 8009dfc:	01e84800 	.word	0x01e84800

08009e00 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b086      	sub	sp, #24
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8009e0c:	4a48      	ldr	r2, [pc, #288]	; (8009f30 <SUBGRF_SetPacketParams+0x130>)
 8009e0e:	f107 030c 	add.w	r3, r7, #12
 8009e12:	ca07      	ldmia	r2, {r0, r1, r2}
 8009e14:	c303      	stmia	r3!, {r0, r1}
 8009e16:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	781a      	ldrb	r2, [r3, #0]
 8009e1c:	4b45      	ldr	r3, [pc, #276]	; (8009f34 <SUBGRF_SetPacketParams+0x134>)
 8009e1e:	781b      	ldrb	r3, [r3, #0]
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d004      	beq.n	8009e2e <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f7ff fe23 	bl	8009a74 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	2b03      	cmp	r3, #3
 8009e34:	d878      	bhi.n	8009f28 <SUBGRF_SetPacketParams+0x128>
 8009e36:	a201      	add	r2, pc, #4	; (adr r2, 8009e3c <SUBGRF_SetPacketParams+0x3c>)
 8009e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e3c:	08009e4d 	.word	0x08009e4d
 8009e40:	08009edd 	.word	0x08009edd
 8009e44:	08009ed1 	.word	0x08009ed1
 8009e48:	08009e4d 	.word	0x08009e4d
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	7a5b      	ldrb	r3, [r3, #9]
 8009e50:	2bf1      	cmp	r3, #241	; 0xf1
 8009e52:	d10a      	bne.n	8009e6a <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8009e54:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009e58:	f7ff faaa 	bl	80093b0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8009e5c:	f248 0005 	movw	r0, #32773	; 0x8005
 8009e60:	f7ff fac6 	bl	80093f0 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8009e64:	2302      	movs	r3, #2
 8009e66:	75bb      	strb	r3, [r7, #22]
 8009e68:	e011      	b.n	8009e8e <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	7a5b      	ldrb	r3, [r3, #9]
 8009e6e:	2bf2      	cmp	r3, #242	; 0xf2
 8009e70:	d10a      	bne.n	8009e88 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8009e72:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8009e76:	f7ff fa9b 	bl	80093b0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8009e7a:	f241 0021 	movw	r0, #4129	; 0x1021
 8009e7e:	f7ff fab7 	bl	80093f0 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8009e82:	2306      	movs	r3, #6
 8009e84:	75bb      	strb	r3, [r7, #22]
 8009e86:	e002      	b.n	8009e8e <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	7a5b      	ldrb	r3, [r3, #9]
 8009e8c:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8009e8e:	2309      	movs	r3, #9
 8009e90:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	885b      	ldrh	r3, [r3, #2]
 8009e96:	0a1b      	lsrs	r3, r3, #8
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	b2db      	uxtb	r3, r3
 8009e9c:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	885b      	ldrh	r3, [r3, #2]
 8009ea2:	b2db      	uxtb	r3, r3
 8009ea4:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	791b      	ldrb	r3, [r3, #4]
 8009eaa:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	795b      	ldrb	r3, [r3, #5]
 8009eb0:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	799b      	ldrb	r3, [r3, #6]
 8009eb6:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	79db      	ldrb	r3, [r3, #7]
 8009ebc:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	7a1b      	ldrb	r3, [r3, #8]
 8009ec2:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8009ec4:	7dbb      	ldrb	r3, [r7, #22]
 8009ec6:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	7a9b      	ldrb	r3, [r3, #10]
 8009ecc:	753b      	strb	r3, [r7, #20]
        break;
 8009ece:	e022      	b.n	8009f16 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	7b1b      	ldrb	r3, [r3, #12]
 8009ed8:	733b      	strb	r3, [r7, #12]
        break;
 8009eda:	e01c      	b.n	8009f16 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8009edc:	2306      	movs	r3, #6
 8009ede:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	89db      	ldrh	r3, [r3, #14]
 8009ee4:	0a1b      	lsrs	r3, r3, #8
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	89db      	ldrh	r3, [r3, #14]
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	7c1a      	ldrb	r2, [r3, #16]
 8009ef8:	4b0f      	ldr	r3, [pc, #60]	; (8009f38 <SUBGRF_SetPacketParams+0x138>)
 8009efa:	4611      	mov	r1, r2
 8009efc:	7019      	strb	r1, [r3, #0]
 8009efe:	4613      	mov	r3, r2
 8009f00:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	7c5b      	ldrb	r3, [r3, #17]
 8009f06:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	7c9b      	ldrb	r3, [r3, #18]
 8009f0c:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	7cdb      	ldrb	r3, [r3, #19]
 8009f12:	747b      	strb	r3, [r7, #17]
        break;
 8009f14:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8009f16:	7dfb      	ldrb	r3, [r7, #23]
 8009f18:	b29a      	uxth	r2, r3
 8009f1a:	f107 030c 	add.w	r3, r7, #12
 8009f1e:	4619      	mov	r1, r3
 8009f20:	208c      	movs	r0, #140	; 0x8c
 8009f22:	f000 f965 	bl	800a1f0 <SUBGRF_WriteCommand>
 8009f26:	e000      	b.n	8009f2a <SUBGRF_SetPacketParams+0x12a>
        return;
 8009f28:	bf00      	nop
}
 8009f2a:	3718      	adds	r7, #24
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}
 8009f30:	0800bf64 	.word	0x0800bf64
 8009f34:	20000315 	.word	0x20000315
 8009f38:	20000316 	.word	0x20000316

08009f3c <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	4603      	mov	r3, r0
 8009f44:	460a      	mov	r2, r1
 8009f46:	71fb      	strb	r3, [r7, #7]
 8009f48:	4613      	mov	r3, r2
 8009f4a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8009f4c:	79fb      	ldrb	r3, [r7, #7]
 8009f4e:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8009f50:	79bb      	ldrb	r3, [r7, #6]
 8009f52:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8009f54:	f107 030c 	add.w	r3, r7, #12
 8009f58:	2202      	movs	r2, #2
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	208f      	movs	r0, #143	; 0x8f
 8009f5e:	f000 f947 	bl	800a1f0 <SUBGRF_WriteCommand>
}
 8009f62:	bf00      	nop
 8009f64:	3710      	adds	r7, #16
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b082      	sub	sp, #8
 8009f6e:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8009f70:	2300      	movs	r3, #0
 8009f72:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8009f74:	1d3b      	adds	r3, r7, #4
 8009f76:	2201      	movs	r2, #1
 8009f78:	4619      	mov	r1, r3
 8009f7a:	2015      	movs	r0, #21
 8009f7c:	f000 f95a 	bl	800a234 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8009f80:	793b      	ldrb	r3, [r7, #4]
 8009f82:	425b      	negs	r3, r3
 8009f84:	105b      	asrs	r3, r3, #1
 8009f86:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8009f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3708      	adds	r7, #8
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8009f9e:	f107 030c 	add.w	r3, r7, #12
 8009fa2:	2202      	movs	r2, #2
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	2013      	movs	r0, #19
 8009fa8:	f000 f944 	bl	800a234 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8009fac:	f7ff fd7e 	bl	8009aac <SUBGRF_GetPacketType>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	d10d      	bne.n	8009fd2 <SUBGRF_GetRxBufferStatus+0x3e>
 8009fb6:	4b0c      	ldr	r3, [pc, #48]	; (8009fe8 <SUBGRF_GetRxBufferStatus+0x54>)
 8009fb8:	781b      	ldrb	r3, [r3, #0]
 8009fba:	b2db      	uxtb	r3, r3
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d108      	bne.n	8009fd2 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8009fc0:	f240 7002 	movw	r0, #1794	; 0x702
 8009fc4:	f000 f878 	bl	800a0b8 <SUBGRF_ReadRegister>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	461a      	mov	r2, r3
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	701a      	strb	r2, [r3, #0]
 8009fd0:	e002      	b.n	8009fd8 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8009fd2:	7b3a      	ldrb	r2, [r7, #12]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8009fd8:	7b7a      	ldrb	r2, [r7, #13]
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	701a      	strb	r2, [r3, #0]
}
 8009fde:	bf00      	nop
 8009fe0:	3710      	adds	r7, #16
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	20000316 	.word	0x20000316

08009fec <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b084      	sub	sp, #16
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8009ff4:	f107 030c 	add.w	r3, r7, #12
 8009ff8:	2203      	movs	r2, #3
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	2014      	movs	r0, #20
 8009ffe:	f000 f919 	bl	800a234 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800a002:	f7ff fd53 	bl	8009aac <SUBGRF_GetPacketType>
 800a006:	4603      	mov	r3, r0
 800a008:	461a      	mov	r2, r3
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d002      	beq.n	800a01c <SUBGRF_GetPacketStatus+0x30>
 800a016:	2b01      	cmp	r3, #1
 800a018:	d013      	beq.n	800a042 <SUBGRF_GetPacketStatus+0x56>
 800a01a:	e02a      	b.n	800a072 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800a01c:	7b3a      	ldrb	r2, [r7, #12]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800a022:	7b7b      	ldrb	r3, [r7, #13]
 800a024:	425b      	negs	r3, r3
 800a026:	105b      	asrs	r3, r3, #1
 800a028:	b25a      	sxtb	r2, r3
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800a02e:	7bbb      	ldrb	r3, [r7, #14]
 800a030:	425b      	negs	r3, r3
 800a032:	105b      	asrs	r3, r3, #1
 800a034:	b25a      	sxtb	r2, r3
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2200      	movs	r2, #0
 800a03e:	609a      	str	r2, [r3, #8]
            break;
 800a040:	e020      	b.n	800a084 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800a042:	7b3b      	ldrb	r3, [r7, #12]
 800a044:	425b      	negs	r3, r3
 800a046:	105b      	asrs	r3, r3, #1
 800a048:	b25a      	sxtb	r2, r3
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800a04e:	7b7b      	ldrb	r3, [r7, #13]
 800a050:	b25b      	sxtb	r3, r3
 800a052:	3302      	adds	r3, #2
 800a054:	109b      	asrs	r3, r3, #2
 800a056:	b25a      	sxtb	r2, r3
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800a05c:	7bbb      	ldrb	r3, [r7, #14]
 800a05e:	425b      	negs	r3, r3
 800a060:	105b      	asrs	r3, r3, #1
 800a062:	b25a      	sxtb	r2, r3
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800a068:	4b08      	ldr	r3, [pc, #32]	; (800a08c <SUBGRF_GetPacketStatus+0xa0>)
 800a06a:	681a      	ldr	r2, [r3, #0]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	611a      	str	r2, [r3, #16]
            break;
 800a070:	e008      	b.n	800a084 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800a072:	2214      	movs	r2, #20
 800a074:	2100      	movs	r1, #0
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f000 fd53 	bl	800ab22 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	220f      	movs	r2, #15
 800a080:	701a      	strb	r2, [r3, #0]
            break;
 800a082:	bf00      	nop
    }
}
 800a084:	bf00      	nop
 800a086:	3710      	adds	r7, #16
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	20000318 	.word	0x20000318

0800a090 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
 800a096:	4603      	mov	r3, r0
 800a098:	460a      	mov	r2, r1
 800a09a:	80fb      	strh	r3, [r7, #6]
 800a09c:	4613      	mov	r3, r2
 800a09e:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800a0a0:	1d7a      	adds	r2, r7, #5
 800a0a2:	88f9      	ldrh	r1, [r7, #6]
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	4803      	ldr	r0, [pc, #12]	; (800a0b4 <SUBGRF_WriteRegister+0x24>)
 800a0a8:	f7fa fb10 	bl	80046cc <HAL_SUBGHZ_WriteRegisters>
}
 800a0ac:	bf00      	nop
 800a0ae:	3708      	adds	r7, #8
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	20000070 	.word	0x20000070

0800a0b8 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b084      	sub	sp, #16
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	4603      	mov	r3, r0
 800a0c0:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800a0c2:	f107 020f 	add.w	r2, r7, #15
 800a0c6:	88f9      	ldrh	r1, [r7, #6]
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	4804      	ldr	r0, [pc, #16]	; (800a0dc <SUBGRF_ReadRegister+0x24>)
 800a0cc:	f7fa fb5d 	bl	800478a <HAL_SUBGHZ_ReadRegisters>
    return data;
 800a0d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	20000070 	.word	0x20000070

0800a0e0 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b086      	sub	sp, #24
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	6039      	str	r1, [r7, #0]
 800a0ea:	80fb      	strh	r3, [r7, #6]
 800a0ec:	4613      	mov	r3, r2
 800a0ee:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0f0:	f3ef 8310 	mrs	r3, PRIMASK
 800a0f4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a0f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a0fa:	b672      	cpsid	i
}
 800a0fc:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800a0fe:	88bb      	ldrh	r3, [r7, #4]
 800a100:	88f9      	ldrh	r1, [r7, #6]
 800a102:	683a      	ldr	r2, [r7, #0]
 800a104:	4806      	ldr	r0, [pc, #24]	; (800a120 <SUBGRF_WriteRegisters+0x40>)
 800a106:	f7fa fae1 	bl	80046cc <HAL_SUBGHZ_WriteRegisters>
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	f383 8810 	msr	PRIMASK, r3
}
 800a114:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a116:	bf00      	nop
 800a118:	3718      	adds	r7, #24
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	20000070 	.word	0x20000070

0800a124 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b086      	sub	sp, #24
 800a128:	af00      	add	r7, sp, #0
 800a12a:	4603      	mov	r3, r0
 800a12c:	6039      	str	r1, [r7, #0]
 800a12e:	80fb      	strh	r3, [r7, #6]
 800a130:	4613      	mov	r3, r2
 800a132:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a134:	f3ef 8310 	mrs	r3, PRIMASK
 800a138:	60fb      	str	r3, [r7, #12]
  return(result);
 800a13a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a13c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a13e:	b672      	cpsid	i
}
 800a140:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800a142:	88bb      	ldrh	r3, [r7, #4]
 800a144:	88f9      	ldrh	r1, [r7, #6]
 800a146:	683a      	ldr	r2, [r7, #0]
 800a148:	4806      	ldr	r0, [pc, #24]	; (800a164 <SUBGRF_ReadRegisters+0x40>)
 800a14a:	f7fa fb1e 	bl	800478a <HAL_SUBGHZ_ReadRegisters>
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	f383 8810 	msr	PRIMASK, r3
}
 800a158:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a15a:	bf00      	nop
 800a15c:	3718      	adds	r7, #24
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop
 800a164:	20000070 	.word	0x20000070

0800a168 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b086      	sub	sp, #24
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	4603      	mov	r3, r0
 800a170:	6039      	str	r1, [r7, #0]
 800a172:	71fb      	strb	r3, [r7, #7]
 800a174:	4613      	mov	r3, r2
 800a176:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a178:	f3ef 8310 	mrs	r3, PRIMASK
 800a17c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a17e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a180:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a182:	b672      	cpsid	i
}
 800a184:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800a186:	79bb      	ldrb	r3, [r7, #6]
 800a188:	b29b      	uxth	r3, r3
 800a18a:	79f9      	ldrb	r1, [r7, #7]
 800a18c:	683a      	ldr	r2, [r7, #0]
 800a18e:	4806      	ldr	r0, [pc, #24]	; (800a1a8 <SUBGRF_WriteBuffer+0x40>)
 800a190:	f7fa fc0f 	bl	80049b2 <HAL_SUBGHZ_WriteBuffer>
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	f383 8810 	msr	PRIMASK, r3
}
 800a19e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a1a0:	bf00      	nop
 800a1a2:	3718      	adds	r7, #24
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	20000070 	.word	0x20000070

0800a1ac <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b086      	sub	sp, #24
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	6039      	str	r1, [r7, #0]
 800a1b6:	71fb      	strb	r3, [r7, #7]
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1bc:	f3ef 8310 	mrs	r3, PRIMASK
 800a1c0:	60fb      	str	r3, [r7, #12]
  return(result);
 800a1c2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a1c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1c6:	b672      	cpsid	i
}
 800a1c8:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800a1ca:	79bb      	ldrb	r3, [r7, #6]
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	79f9      	ldrb	r1, [r7, #7]
 800a1d0:	683a      	ldr	r2, [r7, #0]
 800a1d2:	4806      	ldr	r0, [pc, #24]	; (800a1ec <SUBGRF_ReadBuffer+0x40>)
 800a1d4:	f7fa fc40 	bl	8004a58 <HAL_SUBGHZ_ReadBuffer>
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	f383 8810 	msr	PRIMASK, r3
}
 800a1e2:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a1e4:	bf00      	nop
 800a1e6:	3718      	adds	r7, #24
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	20000070 	.word	0x20000070

0800a1f0 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b086      	sub	sp, #24
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	6039      	str	r1, [r7, #0]
 800a1fa:	71fb      	strb	r3, [r7, #7]
 800a1fc:	4613      	mov	r3, r2
 800a1fe:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a200:	f3ef 8310 	mrs	r3, PRIMASK
 800a204:	60fb      	str	r3, [r7, #12]
  return(result);
 800a206:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a208:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a20a:	b672      	cpsid	i
}
 800a20c:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800a20e:	88bb      	ldrh	r3, [r7, #4]
 800a210:	79f9      	ldrb	r1, [r7, #7]
 800a212:	683a      	ldr	r2, [r7, #0]
 800a214:	4806      	ldr	r0, [pc, #24]	; (800a230 <SUBGRF_WriteCommand+0x40>)
 800a216:	f7fa fb19 	bl	800484c <HAL_SUBGHZ_ExecSetCmd>
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	f383 8810 	msr	PRIMASK, r3
}
 800a224:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a226:	bf00      	nop
 800a228:	3718      	adds	r7, #24
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	bf00      	nop
 800a230:	20000070 	.word	0x20000070

0800a234 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b086      	sub	sp, #24
 800a238:	af00      	add	r7, sp, #0
 800a23a:	4603      	mov	r3, r0
 800a23c:	6039      	str	r1, [r7, #0]
 800a23e:	71fb      	strb	r3, [r7, #7]
 800a240:	4613      	mov	r3, r2
 800a242:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a244:	f3ef 8310 	mrs	r3, PRIMASK
 800a248:	60fb      	str	r3, [r7, #12]
  return(result);
 800a24a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a24c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a24e:	b672      	cpsid	i
}
 800a250:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800a252:	88bb      	ldrh	r3, [r7, #4]
 800a254:	79f9      	ldrb	r1, [r7, #7]
 800a256:	683a      	ldr	r2, [r7, #0]
 800a258:	4806      	ldr	r0, [pc, #24]	; (800a274 <SUBGRF_ReadCommand+0x40>)
 800a25a:	f7fa fb56 	bl	800490a <HAL_SUBGHZ_ExecGetCmd>
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	f383 8810 	msr	PRIMASK, r3
}
 800a268:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a26a:	bf00      	nop
 800a26c:	3718      	adds	r7, #24
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
 800a272:	bf00      	nop
 800a274:	20000070 	.word	0x20000070

0800a278 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	4603      	mov	r3, r0
 800a280:	460a      	mov	r2, r1
 800a282:	71fb      	strb	r3, [r7, #7]
 800a284:	4613      	mov	r3, r2
 800a286:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800a288:	2301      	movs	r3, #1
 800a28a:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800a28c:	79bb      	ldrb	r3, [r7, #6]
 800a28e:	2b01      	cmp	r3, #1
 800a290:	d10d      	bne.n	800a2ae <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800a292:	79fb      	ldrb	r3, [r7, #7]
 800a294:	2b01      	cmp	r3, #1
 800a296:	d104      	bne.n	800a2a2 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800a298:	2302      	movs	r3, #2
 800a29a:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800a29c:	2004      	movs	r0, #4
 800a29e:	f000 f8ef 	bl	800a480 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800a2a2:	79fb      	ldrb	r3, [r7, #7]
 800a2a4:	2b02      	cmp	r3, #2
 800a2a6:	d107      	bne.n	800a2b8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800a2a8:	2303      	movs	r3, #3
 800a2aa:	73fb      	strb	r3, [r7, #15]
 800a2ac:	e004      	b.n	800a2b8 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800a2ae:	79bb      	ldrb	r3, [r7, #6]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d101      	bne.n	800a2b8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800a2b8:	7bfb      	ldrb	r3, [r7, #15]
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f000 fb3b 	bl	800a936 <RBI_ConfigRFSwitch>
}
 800a2c0:	bf00      	nop
 800a2c2:	3710      	adds	r7, #16
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800a2d6:	f000 fb3c 	bl	800a952 <RBI_GetTxConfig>
 800a2da:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	2b02      	cmp	r3, #2
 800a2e0:	d016      	beq.n	800a310 <SUBGRF_SetRfTxPower+0x48>
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	2b02      	cmp	r3, #2
 800a2e6:	dc16      	bgt.n	800a316 <SUBGRF_SetRfTxPower+0x4e>
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d003      	beq.n	800a2f6 <SUBGRF_SetRfTxPower+0x2e>
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d00a      	beq.n	800a30a <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800a2f4:	e00f      	b.n	800a316 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800a2f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a2fa:	2b0f      	cmp	r3, #15
 800a2fc:	dd02      	ble.n	800a304 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800a2fe:	2302      	movs	r3, #2
 800a300:	73fb      	strb	r3, [r7, #15]
            break;
 800a302:	e009      	b.n	800a318 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800a304:	2301      	movs	r3, #1
 800a306:	73fb      	strb	r3, [r7, #15]
            break;
 800a308:	e006      	b.n	800a318 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800a30a:	2301      	movs	r3, #1
 800a30c:	73fb      	strb	r3, [r7, #15]
            break;
 800a30e:	e003      	b.n	800a318 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800a310:	2302      	movs	r3, #2
 800a312:	73fb      	strb	r3, [r7, #15]
            break;
 800a314:	e000      	b.n	800a318 <SUBGRF_SetRfTxPower+0x50>
            break;
 800a316:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800a318:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800a31c:	7bfb      	ldrb	r3, [r7, #15]
 800a31e:	2202      	movs	r2, #2
 800a320:	4618      	mov	r0, r3
 800a322:	f7ff fbcd 	bl	8009ac0 <SUBGRF_SetTxParams>

    return paSelect;
 800a326:	7bfb      	ldrb	r3, [r7, #15]
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3710      	adds	r7, #16
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800a330:	b480      	push	{r7}
 800a332:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800a334:	2301      	movs	r3, #1
}
 800a336:	4618      	mov	r0, r3
 800a338:	46bd      	mov	sp, r7
 800a33a:	bc80      	pop	{r7}
 800a33c:	4770      	bx	lr
	...

0800a340 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800a348:	4b03      	ldr	r3, [pc, #12]	; (800a358 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	2001      	movs	r0, #1
 800a34e:	4798      	blx	r3
}
 800a350:	bf00      	nop
 800a352:	3708      	adds	r7, #8
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}
 800a358:	20000320 	.word	0x20000320

0800a35c <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b082      	sub	sp, #8
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800a364:	4b03      	ldr	r3, [pc, #12]	; (800a374 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	2002      	movs	r0, #2
 800a36a:	4798      	blx	r3
}
 800a36c:	bf00      	nop
 800a36e:	3708      	adds	r7, #8
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}
 800a374:	20000320 	.word	0x20000320

0800a378 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b082      	sub	sp, #8
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800a380:	4b03      	ldr	r3, [pc, #12]	; (800a390 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	2040      	movs	r0, #64	; 0x40
 800a386:	4798      	blx	r3
}
 800a388:	bf00      	nop
 800a38a:	3708      	adds	r7, #8
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}
 800a390:	20000320 	.word	0x20000320

0800a394 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	460b      	mov	r3, r1
 800a39e:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800a3a0:	78fb      	ldrb	r3, [r7, #3]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d002      	beq.n	800a3ac <HAL_SUBGHZ_CADStatusCallback+0x18>
 800a3a6:	2b01      	cmp	r3, #1
 800a3a8:	d005      	beq.n	800a3b6 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800a3aa:	e00a      	b.n	800a3c2 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800a3ac:	4b07      	ldr	r3, [pc, #28]	; (800a3cc <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	2080      	movs	r0, #128	; 0x80
 800a3b2:	4798      	blx	r3
            break;
 800a3b4:	e005      	b.n	800a3c2 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800a3b6:	4b05      	ldr	r3, [pc, #20]	; (800a3cc <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a3be:	4798      	blx	r3
            break;
 800a3c0:	bf00      	nop
    }
}
 800a3c2:	bf00      	nop
 800a3c4:	3708      	adds	r7, #8
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	20000320 	.word	0x20000320

0800a3d0 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b082      	sub	sp, #8
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800a3d8:	4b04      	ldr	r3, [pc, #16]	; (800a3ec <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a3e0:	4798      	blx	r3
}
 800a3e2:	bf00      	nop
 800a3e4:	3708      	adds	r7, #8
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	20000320 	.word	0x20000320

0800a3f0 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800a3f8:	4b03      	ldr	r3, [pc, #12]	; (800a408 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	2020      	movs	r0, #32
 800a3fe:	4798      	blx	r3
}
 800a400:	bf00      	nop
 800a402:	3708      	adds	r7, #8
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}
 800a408:	20000320 	.word	0x20000320

0800a40c <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800a414:	4b03      	ldr	r3, [pc, #12]	; (800a424 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	2004      	movs	r0, #4
 800a41a:	4798      	blx	r3
}
 800a41c:	bf00      	nop
 800a41e:	3708      	adds	r7, #8
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}
 800a424:	20000320 	.word	0x20000320

0800a428 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b082      	sub	sp, #8
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800a430:	4b03      	ldr	r3, [pc, #12]	; (800a440 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	2008      	movs	r0, #8
 800a436:	4798      	blx	r3
}
 800a438:	bf00      	nop
 800a43a:	3708      	adds	r7, #8
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}
 800a440:	20000320 	.word	0x20000320

0800a444 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800a44c:	4b03      	ldr	r3, [pc, #12]	; (800a45c <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	2010      	movs	r0, #16
 800a452:	4798      	blx	r3
}
 800a454:	bf00      	nop
 800a456:	3708      	adds	r7, #8
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}
 800a45c:	20000320 	.word	0x20000320

0800a460 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800a468:	4b04      	ldr	r3, [pc, #16]	; (800a47c <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a470:	4798      	blx	r3
}
 800a472:	bf00      	nop
 800a474:	3708      	adds	r7, #8
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}
 800a47a:	bf00      	nop
 800a47c:	20000320 	.word	0x20000320

0800a480 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b084      	sub	sp, #16
 800a484:	af00      	add	r7, sp, #0
 800a486:	4603      	mov	r3, r0
 800a488:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800a48a:	f000 fa70 	bl	800a96e <RBI_IsDCDC>
 800a48e:	4603      	mov	r3, r0
 800a490:	2b01      	cmp	r3, #1
 800a492:	d112      	bne.n	800a4ba <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800a494:	f640 1023 	movw	r0, #2339	; 0x923
 800a498:	f7ff fe0e 	bl	800a0b8 <SUBGRF_ReadRegister>
 800a49c:	4603      	mov	r3, r0
 800a49e:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800a4a0:	7bfb      	ldrb	r3, [r7, #15]
 800a4a2:	f023 0306 	bic.w	r3, r3, #6
 800a4a6:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800a4a8:	7bfa      	ldrb	r2, [r7, #15]
 800a4aa:	79fb      	ldrb	r3, [r7, #7]
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	b2db      	uxtb	r3, r3
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	f640 1023 	movw	r0, #2339	; 0x923
 800a4b6:	f7ff fdeb 	bl	800a090 <SUBGRF_WriteRegister>
  }
}
 800a4ba:	bf00      	nop
 800a4bc:	3710      	adds	r7, #16
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
	...

0800a4c4 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b085      	sub	sp, #20
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d101      	bne.n	800a4d6 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800a4d2:	231f      	movs	r3, #31
 800a4d4:	e016      	b.n	800a504 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	73fb      	strb	r3, [r7, #15]
 800a4da:	e00f      	b.n	800a4fc <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800a4dc:	7bfb      	ldrb	r3, [r7, #15]
 800a4de:	4a0c      	ldr	r2, [pc, #48]	; (800a510 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800a4e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d205      	bcs.n	800a4f6 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800a4ea:	7bfb      	ldrb	r3, [r7, #15]
 800a4ec:	4a08      	ldr	r2, [pc, #32]	; (800a510 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800a4ee:	00db      	lsls	r3, r3, #3
 800a4f0:	4413      	add	r3, r2
 800a4f2:	791b      	ldrb	r3, [r3, #4]
 800a4f4:	e006      	b.n	800a504 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800a4f6:	7bfb      	ldrb	r3, [r7, #15]
 800a4f8:	3301      	adds	r3, #1
 800a4fa:	73fb      	strb	r3, [r7, #15]
 800a4fc:	7bfb      	ldrb	r3, [r7, #15]
 800a4fe:	2b15      	cmp	r3, #21
 800a500:	d9ec      	bls.n	800a4dc <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800a502:	e7fe      	b.n	800a502 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800a504:	4618      	mov	r0, r3
 800a506:	3714      	adds	r7, #20
 800a508:	46bd      	mov	sp, r7
 800a50a:	bc80      	pop	{r7}
 800a50c:	4770      	bx	lr
 800a50e:	bf00      	nop
 800a510:	0800c210 	.word	0x0800c210

0800a514 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b08a      	sub	sp, #40	; 0x28
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800a51e:	4b35      	ldr	r3, [pc, #212]	; (800a5f4 <SUBGRF_GetCFO+0xe0>)
 800a520:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800a522:	f640 0007 	movw	r0, #2055	; 0x807
 800a526:	f7ff fdc7 	bl	800a0b8 <SUBGRF_ReadRegister>
 800a52a:	4603      	mov	r3, r0
 800a52c:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800a52e:	7ffb      	ldrb	r3, [r7, #31]
 800a530:	08db      	lsrs	r3, r3, #3
 800a532:	b2db      	uxtb	r3, r3
 800a534:	f003 0303 	and.w	r3, r3, #3
 800a538:	3328      	adds	r3, #40	; 0x28
 800a53a:	443b      	add	r3, r7
 800a53c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800a540:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800a542:	7ffb      	ldrb	r3, [r7, #31]
 800a544:	f003 0307 	and.w	r3, r3, #7
 800a548:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800a54a:	7fba      	ldrb	r2, [r7, #30]
 800a54c:	7f7b      	ldrb	r3, [r7, #29]
 800a54e:	3301      	adds	r3, #1
 800a550:	fa02 f303 	lsl.w	r3, r2, r3
 800a554:	461a      	mov	r2, r3
 800a556:	4b28      	ldr	r3, [pc, #160]	; (800a5f8 <SUBGRF_GetCFO+0xe4>)
 800a558:	fbb3 f3f2 	udiv	r3, r3, r2
 800a55c:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800a55e:	69ba      	ldr	r2, [r7, #24]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	fbb2 f3f3 	udiv	r3, r2, r3
 800a566:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800a568:	2301      	movs	r3, #1
 800a56a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800a56e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a572:	697a      	ldr	r2, [r7, #20]
 800a574:	fb02 f303 	mul.w	r3, r2, r3
 800a578:	2b07      	cmp	r3, #7
 800a57a:	d802      	bhi.n	800a582 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800a57c:	2302      	movs	r3, #2
 800a57e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 800a582:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a586:	697a      	ldr	r2, [r7, #20]
 800a588:	fb02 f303 	mul.w	r3, r2, r3
 800a58c:	2b03      	cmp	r3, #3
 800a58e:	d802      	bhi.n	800a596 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800a590:	2304      	movs	r3, #4
 800a592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800a596:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a59a:	69bb      	ldr	r3, [r7, #24]
 800a59c:	fb02 f303 	mul.w	r3, r2, r3
 800a5a0:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800a5a2:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 800a5a6:	f7ff fd87 	bl	800a0b8 <SUBGRF_ReadRegister>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	021b      	lsls	r3, r3, #8
 800a5ae:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a5b2:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800a5b4:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800a5b8:	f7ff fd7e 	bl	800a0b8 <SUBGRF_ReadRegister>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	461a      	mov	r2, r3
 800a5c0:	6a3b      	ldr	r3, [r7, #32]
 800a5c2:	4313      	orrs	r3, r2
 800a5c4:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800a5c6:	6a3b      	ldr	r3, [r7, #32]
 800a5c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d005      	beq.n	800a5dc <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800a5d0:	6a3b      	ldr	r3, [r7, #32]
 800a5d2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800a5d6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800a5da:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	095b      	lsrs	r3, r3, #5
 800a5e0:	6a3a      	ldr	r2, [r7, #32]
 800a5e2:	fb02 f303 	mul.w	r3, r2, r3
 800a5e6:	11da      	asrs	r2, r3, #7
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	601a      	str	r2, [r3, #0]
}
 800a5ec:	bf00      	nop
 800a5ee:	3728      	adds	r7, #40	; 0x28
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	0c0a0804 	.word	0x0c0a0804
 800a5f8:	01e84800 	.word	0x01e84800

0800a5fc <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b087      	sub	sp, #28
 800a600:	af00      	add	r7, sp, #0
 800a602:	4603      	mov	r3, r0
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	607a      	str	r2, [r7, #4]
 800a608:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800a60a:	2300      	movs	r3, #0
 800a60c:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800a60e:	f04f 33ff 	mov.w	r3, #4294967295
 800a612:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800a614:	697b      	ldr	r3, [r7, #20]
}
 800a616:	4618      	mov	r0, r3
 800a618:	371c      	adds	r7, #28
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bc80      	pop	{r7}
 800a61e:	4770      	bx	lr

0800a620 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 800a620:	b480      	push	{r7}
 800a622:	b087      	sub	sp, #28
 800a624:	af00      	add	r7, sp, #0
 800a626:	4603      	mov	r3, r0
 800a628:	60b9      	str	r1, [r7, #8]
 800a62a:	607a      	str	r2, [r7, #4]
 800a62c:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800a62e:	2300      	movs	r3, #0
 800a630:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 800a632:	f04f 33ff 	mov.w	r3, #4294967295
 800a636:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800a638:	697b      	ldr	r3, [r7, #20]
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	371c      	adds	r7, #28
 800a63e:	46bd      	mov	sp, r7
 800a640:	bc80      	pop	{r7}
 800a642:	4770      	bx	lr

0800a644 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 800a644:	b480      	push	{r7}
 800a646:	b085      	sub	sp, #20
 800a648:	af00      	add	r7, sp, #0
 800a64a:	60f8      	str	r0, [r7, #12]
 800a64c:	60b9      	str	r1, [r7, #8]
 800a64e:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 800a650:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 800a654:	4618      	mov	r0, r3
 800a656:	3714      	adds	r7, #20
 800a658:	46bd      	mov	sp, r7
 800a65a:	bc80      	pop	{r7}
 800a65c:	4770      	bx	lr

0800a65e <RFW_DeInit>:

void RFW_DeInit( void )
{
 800a65e:	b480      	push	{r7}
 800a660:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800a662:	bf00      	nop
 800a664:	46bd      	mov	sp, r7
 800a666:	bc80      	pop	{r7}
 800a668:	4770      	bx	lr

0800a66a <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 800a66a:	b480      	push	{r7}
 800a66c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 800a66e:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800a670:	4618      	mov	r0, r3
 800a672:	46bd      	mov	sp, r7
 800a674:	bc80      	pop	{r7}
 800a676:	4770      	bx	lr

0800a678 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 800a678:	b480      	push	{r7}
 800a67a:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 800a67c:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800a67e:	4618      	mov	r0, r3
 800a680:	46bd      	mov	sp, r7
 800a682:	bc80      	pop	{r7}
 800a684:	4770      	bx	lr

0800a686 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 800a686:	b480      	push	{r7}
 800a688:	b083      	sub	sp, #12
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	4603      	mov	r3, r0
 800a68e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800a690:	bf00      	nop
 800a692:	370c      	adds	r7, #12
 800a694:	46bd      	mov	sp, r7
 800a696:	bc80      	pop	{r7}
 800a698:	4770      	bx	lr

0800a69a <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800a69a:	b480      	push	{r7}
 800a69c:	b087      	sub	sp, #28
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	60f8      	str	r0, [r7, #12]
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	607a      	str	r2, [r7, #4]
 800a6a6:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 800a6a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a6ac:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 800a6ae:	697b      	ldr	r3, [r7, #20]
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	371c      	adds	r7, #28
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bc80      	pop	{r7}
 800a6b8:	4770      	bx	lr

0800a6ba <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800a6ba:	b480      	push	{r7}
 800a6bc:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 800a6be:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bc80      	pop	{r7}
 800a6c8:	4770      	bx	lr

0800a6ca <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800a6ca:	b480      	push	{r7}
 800a6cc:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800a6ce:	bf00      	nop
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bc80      	pop	{r7}
 800a6d4:	4770      	bx	lr

0800a6d6 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800a6d6:	b480      	push	{r7}
 800a6d8:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800a6da:	bf00      	nop
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bc80      	pop	{r7}
 800a6e0:	4770      	bx	lr

0800a6e2 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 800a6e2:	b480      	push	{r7}
 800a6e4:	b083      	sub	sp, #12
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800a6ec:	bf00      	nop
 800a6ee:	370c      	adds	r7, #12
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bc80      	pop	{r7}
 800a6f4:	4770      	bx	lr

0800a6f6 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800a6f6:	b580      	push	{r7, lr}
 800a6f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800a6fa:	f7f6 f98b 	bl	8000a14 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800a6fe:	f000 f80b 	bl	800a718 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800a702:	bf00      	nop
 800a704:	bd80      	pop	{r7, pc}

0800a706 <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 800a706:	b580      	push	{r7, lr}
 800a708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800a70a:	f04f 30ff 	mov.w	r0, #4294967295
 800a70e:	f000 fcfb 	bl	800b108 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_2 */

  /* USER CODE END MX_SubGHz_Phy_Process_2 */
}
 800a712:	bf00      	nop
 800a714:	bd80      	pop	{r7, pc}
	...

0800a718 <SubghzApp_Init>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800a71c:	4b0a      	ldr	r3, [pc, #40]	; (800a748 <SubghzApp_Init+0x30>)
 800a71e:	4a0b      	ldr	r2, [pc, #44]	; (800a74c <SubghzApp_Init+0x34>)
 800a720:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800a722:	4b09      	ldr	r3, [pc, #36]	; (800a748 <SubghzApp_Init+0x30>)
 800a724:	4a0a      	ldr	r2, [pc, #40]	; (800a750 <SubghzApp_Init+0x38>)
 800a726:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800a728:	4b07      	ldr	r3, [pc, #28]	; (800a748 <SubghzApp_Init+0x30>)
 800a72a:	4a0a      	ldr	r2, [pc, #40]	; (800a754 <SubghzApp_Init+0x3c>)
 800a72c:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800a72e:	4b06      	ldr	r3, [pc, #24]	; (800a748 <SubghzApp_Init+0x30>)
 800a730:	4a09      	ldr	r2, [pc, #36]	; (800a758 <SubghzApp_Init+0x40>)
 800a732:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800a734:	4b04      	ldr	r3, [pc, #16]	; (800a748 <SubghzApp_Init+0x30>)
 800a736:	4a09      	ldr	r2, [pc, #36]	; (800a75c <SubghzApp_Init+0x44>)
 800a738:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800a73a:	4b09      	ldr	r3, [pc, #36]	; (800a760 <SubghzApp_Init+0x48>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4802      	ldr	r0, [pc, #8]	; (800a748 <SubghzApp_Init+0x30>)
 800a740:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

  /* USER CODE END SubghzApp_Init_2 */
}
 800a742:	bf00      	nop
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	2000042c 	.word	0x2000042c
 800a74c:	0800a765 	.word	0x0800a765
 800a750:	0800a791 	.word	0x0800a791
 800a754:	0800a8a5 	.word	0x0800a8a5
 800a758:	0800a8d1 	.word	0x0800a8d1
 800a75c:	0800a8fd 	.word	0x0800a8fd
 800a760:	0800c180 	.word	0x0800c180

0800a764 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
	 APP_LOG(TS_ON, VLEVEL_L, "OnTxDone\n\r");
 800a768:	4b07      	ldr	r3, [pc, #28]	; (800a788 <OnTxDone+0x24>)
 800a76a:	2201      	movs	r2, #1
 800a76c:	2100      	movs	r1, #0
 800a76e:	2001      	movs	r0, #1
 800a770:	f001 f8e4 	bl	800b93c <UTIL_ADV_TRACE_COND_FSend>

	  State = TX;
 800a774:	4b05      	ldr	r3, [pc, #20]	; (800a78c <OnTxDone+0x28>)
 800a776:	2204      	movs	r2, #4
 800a778:	701a      	strb	r2, [r3, #0]
	  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 800a77a:	2100      	movs	r1, #0
 800a77c:	2001      	movs	r0, #1
 800a77e:	f000 fdbf 	bl	800b300 <UTIL_SEQ_SetTask>

  /* USER CODE END OnTxDone */
}
 800a782:	bf00      	nop
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop
 800a788:	0800bf70 	.word	0x0800bf70
 800a78c:	20000009 	.word	0x20000009

0800a790 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b088      	sub	sp, #32
 800a794:	af02      	add	r7, sp, #8
 800a796:	60f8      	str	r0, [r7, #12]
 800a798:	4608      	mov	r0, r1
 800a79a:	4611      	mov	r1, r2
 800a79c:	461a      	mov	r2, r3
 800a79e:	4603      	mov	r3, r0
 800a7a0:	817b      	strh	r3, [r7, #10]
 800a7a2:	460b      	mov	r3, r1
 800a7a4:	813b      	strh	r3, [r7, #8]
 800a7a6:	4613      	mov	r3, r2
 800a7a8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  APP_LOG(TS_ON, VLEVEL_L, "OnRxDone\n\r");
 800a7aa:	4b34      	ldr	r3, [pc, #208]	; (800a87c <OnRxDone+0xec>)
 800a7ac:	2201      	movs	r2, #1
 800a7ae:	2100      	movs	r1, #0
 800a7b0:	2001      	movs	r0, #1
 800a7b2:	f001 f8c3 	bl	800b93c <UTIL_ADV_TRACE_COND_FSend>
#if ((USE_MODEM_LORA == 1) && (USE_MODEM_FSK == 0))
  APP_LOG(TS_ON, VLEVEL_L, "RssiValue=%d dBm, SnrValue=%ddB\n\r", rssi, LoraSnr_FskCfo);
 800a7b6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800a7ba:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800a7be:	9201      	str	r2, [sp, #4]
 800a7c0:	9300      	str	r3, [sp, #0]
 800a7c2:	4b2f      	ldr	r3, [pc, #188]	; (800a880 <OnRxDone+0xf0>)
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	2100      	movs	r1, #0
 800a7c8:	2001      	movs	r0, #1
 800a7ca:	f001 f8b7 	bl	800b93c <UTIL_ADV_TRACE_COND_FSend>
  /* Record payload Signal to noise ratio in Lora*/
  SnrValue = LoraSnr_FskCfo;
 800a7ce:	4a2d      	ldr	r2, [pc, #180]	; (800a884 <OnRxDone+0xf4>)
 800a7d0:	79fb      	ldrb	r3, [r7, #7]
 800a7d2:	7013      	strb	r3, [r2, #0]
#if ((USE_MODEM_LORA == 0) && (USE_MODEM_FSK == 1))
  APP_LOG(TS_ON, VLEVEL_L, "RssiValue=%d dBm, Cfo=%dkHz\n\r", rssi, LoraSnr_FskCfo);
  SnrValue = 0; /*not applicable in GFSK*/
#endif /* USE_MODEM_LORA | USE_MODEM_FSK */
  /* Update the State of the FSM*/
  State = RX;
 800a7d4:	4b2c      	ldr	r3, [pc, #176]	; (800a888 <OnRxDone+0xf8>)
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	701a      	strb	r2, [r3, #0]
  /* Clear BufferRx*/
  memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
 800a7da:	22ff      	movs	r2, #255	; 0xff
 800a7dc:	2100      	movs	r1, #0
 800a7de:	482b      	ldr	r0, [pc, #172]	; (800a88c <OnRxDone+0xfc>)
 800a7e0:	f001 fb24 	bl	800be2c <memset>
  /* Record payload size*/
  RxBufferSize = size;
 800a7e4:	4a2a      	ldr	r2, [pc, #168]	; (800a890 <OnRxDone+0x100>)
 800a7e6:	897b      	ldrh	r3, [r7, #10]
 800a7e8:	8013      	strh	r3, [r2, #0]
  if (RxBufferSize <= MAX_APP_BUFFER_SIZE)
 800a7ea:	4b29      	ldr	r3, [pc, #164]	; (800a890 <OnRxDone+0x100>)
 800a7ec:	881b      	ldrh	r3, [r3, #0]
 800a7ee:	2bff      	cmp	r3, #255	; 0xff
 800a7f0:	d806      	bhi.n	800a800 <OnRxDone+0x70>
  {
    memcpy(BufferRx, payload, RxBufferSize);
 800a7f2:	4b27      	ldr	r3, [pc, #156]	; (800a890 <OnRxDone+0x100>)
 800a7f4:	881b      	ldrh	r3, [r3, #0]
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	68f9      	ldr	r1, [r7, #12]
 800a7fa:	4824      	ldr	r0, [pc, #144]	; (800a88c <OnRxDone+0xfc>)
 800a7fc:	f001 fb42 	bl	800be84 <memcpy>
  }
  /* Record Received Signal Strength*/
  RssiValue = rssi;
 800a800:	893b      	ldrh	r3, [r7, #8]
 800a802:	b25a      	sxtb	r2, r3
 800a804:	4b23      	ldr	r3, [pc, #140]	; (800a894 <OnRxDone+0x104>)
 800a806:	701a      	strb	r2, [r3, #0]
  /* Record payload content*/
  APP_LOG(TS_ON, VLEVEL_H, "payload. size=%d \n\r", size);
 800a808:	897b      	ldrh	r3, [r7, #10]
 800a80a:	9300      	str	r3, [sp, #0]
 800a80c:	4b22      	ldr	r3, [pc, #136]	; (800a898 <OnRxDone+0x108>)
 800a80e:	2201      	movs	r2, #1
 800a810:	2100      	movs	r1, #0
 800a812:	2003      	movs	r0, #3
 800a814:	f001 f892 	bl	800b93c <UTIL_ADV_TRACE_COND_FSend>
  for (int i = 0; i < PAYLOAD_LEN; i++)
 800a818:	2300      	movs	r3, #0
 800a81a:	617b      	str	r3, [r7, #20]
 800a81c:	e01d      	b.n	800a85a <OnRxDone+0xca>
  {
    APP_LOG(TS_OFF, VLEVEL_H, "%02X", BufferRx[i]);
 800a81e:	4a1b      	ldr	r2, [pc, #108]	; (800a88c <OnRxDone+0xfc>)
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	4413      	add	r3, r2
 800a824:	781b      	ldrb	r3, [r3, #0]
 800a826:	9300      	str	r3, [sp, #0]
 800a828:	4b1c      	ldr	r3, [pc, #112]	; (800a89c <OnRxDone+0x10c>)
 800a82a:	2200      	movs	r2, #0
 800a82c:	2100      	movs	r1, #0
 800a82e:	2003      	movs	r0, #3
 800a830:	f001 f884 	bl	800b93c <UTIL_ADV_TRACE_COND_FSend>
    if (i % 16 == 15)
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	425a      	negs	r2, r3
 800a838:	f003 030f 	and.w	r3, r3, #15
 800a83c:	f002 020f 	and.w	r2, r2, #15
 800a840:	bf58      	it	pl
 800a842:	4253      	negpl	r3, r2
 800a844:	2b0f      	cmp	r3, #15
 800a846:	d105      	bne.n	800a854 <OnRxDone+0xc4>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "\n\r");
 800a848:	4b15      	ldr	r3, [pc, #84]	; (800a8a0 <OnRxDone+0x110>)
 800a84a:	2200      	movs	r2, #0
 800a84c:	2100      	movs	r1, #0
 800a84e:	2003      	movs	r0, #3
 800a850:	f001 f874 	bl	800b93c <UTIL_ADV_TRACE_COND_FSend>
  for (int i = 0; i < PAYLOAD_LEN; i++)
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	3301      	adds	r3, #1
 800a858:	617b      	str	r3, [r7, #20]
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	2b3f      	cmp	r3, #63	; 0x3f
 800a85e:	ddde      	ble.n	800a81e <OnRxDone+0x8e>
    }
  }
  APP_LOG(TS_OFF, VLEVEL_H, "\n\r");
 800a860:	4b0f      	ldr	r3, [pc, #60]	; (800a8a0 <OnRxDone+0x110>)
 800a862:	2200      	movs	r2, #0
 800a864:	2100      	movs	r1, #0
 800a866:	2003      	movs	r0, #3
 800a868:	f001 f868 	bl	800b93c <UTIL_ADV_TRACE_COND_FSend>
  /* Run PingPong process in background*/
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800a86c:	2100      	movs	r1, #0
 800a86e:	2001      	movs	r0, #1
 800a870:	f000 fd46 	bl	800b300 <UTIL_SEQ_SetTask>
  /* USER CODE END OnRxDone */
}
 800a874:	bf00      	nop
 800a876:	3718      	adds	r7, #24
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}
 800a87c:	0800bf7c 	.word	0x0800bf7c
 800a880:	0800bf88 	.word	0x0800bf88
 800a884:	20000325 	.word	0x20000325
 800a888:	20000009 	.word	0x20000009
 800a88c:	20000328 	.word	0x20000328
 800a890:	20000428 	.word	0x20000428
 800a894:	20000324 	.word	0x20000324
 800a898:	0800bfac 	.word	0x0800bfac
 800a89c:	0800bfc0 	.word	0x0800bfc0
 800a8a0:	0800bfc8 	.word	0x0800bfc8

0800a8a4 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
	APP_LOG(TS_ON, VLEVEL_L,  "OnTxTimeout\n\r");
 800a8a8:	4b07      	ldr	r3, [pc, #28]	; (800a8c8 <OnTxTimeout+0x24>)
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	2100      	movs	r1, #0
 800a8ae:	2001      	movs	r0, #1
 800a8b0:	f001 f844 	bl	800b93c <UTIL_ADV_TRACE_COND_FSend>

	  State = TX_TIMEOUT;
 800a8b4:	4b05      	ldr	r3, [pc, #20]	; (800a8cc <OnTxTimeout+0x28>)
 800a8b6:	2205      	movs	r2, #5
 800a8b8:	701a      	strb	r2, [r3, #0]
	  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 800a8ba:	2100      	movs	r1, #0
 800a8bc:	2001      	movs	r0, #1
 800a8be:	f000 fd1f 	bl	800b300 <UTIL_SEQ_SetTask>

  /* USER CODE END OnTxTimeout */
}
 800a8c2:	bf00      	nop
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	0800bfcc 	.word	0x0800bfcc
 800a8cc:	20000009 	.word	0x20000009

0800a8d0 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
	  APP_LOG(TS_ON, VLEVEL_L,  "OnRxTimeout\n\r");
 800a8d4:	4b07      	ldr	r3, [pc, #28]	; (800a8f4 <OnRxTimeout+0x24>)
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	2100      	movs	r1, #0
 800a8da:	2001      	movs	r0, #1
 800a8dc:	f001 f82e 	bl	800b93c <UTIL_ADV_TRACE_COND_FSend>

	  State = RX_TIMEOUT;
 800a8e0:	4b05      	ldr	r3, [pc, #20]	; (800a8f8 <OnRxTimeout+0x28>)
 800a8e2:	2202      	movs	r2, #2
 800a8e4:	701a      	strb	r2, [r3, #0]
	  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 800a8e6:	2100      	movs	r1, #0
 800a8e8:	2001      	movs	r0, #1
 800a8ea:	f000 fd09 	bl	800b300 <UTIL_SEQ_SetTask>

  /* USER CODE END OnRxTimeout */
}
 800a8ee:	bf00      	nop
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop
 800a8f4:	0800bfdc 	.word	0x0800bfdc
 800a8f8:	20000009 	.word	0x20000009

0800a8fc <OnRxError>:

static void OnRxError(void)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
	  APP_LOG(TS_ON, VLEVEL_L, "OnRxError\n\r");
 800a900:	4b07      	ldr	r3, [pc, #28]	; (800a920 <OnRxError+0x24>)
 800a902:	2201      	movs	r2, #1
 800a904:	2100      	movs	r1, #0
 800a906:	2001      	movs	r0, #1
 800a908:	f001 f818 	bl	800b93c <UTIL_ADV_TRACE_COND_FSend>

	  State = RX_ERROR;
 800a90c:	4b05      	ldr	r3, [pc, #20]	; (800a924 <OnRxError+0x28>)
 800a90e:	2203      	movs	r2, #3
 800a910:	701a      	strb	r2, [r3, #0]
	  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_PingPong_Process), CFG_SEQ_Prio_0);
 800a912:	2100      	movs	r1, #0
 800a914:	2001      	movs	r0, #1
 800a916:	f000 fcf3 	bl	800b300 <UTIL_SEQ_SetTask>

  /* USER CODE END OnRxError */
}
 800a91a:	bf00      	nop
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	0800bfec 	.word	0x0800bfec
 800a924:	20000009 	.word	0x20000009

0800a928 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800a92c:	f7f6 fe39 	bl	80015a2 <BSP_RADIO_Init>
 800a930:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a932:	4618      	mov	r0, r3
 800a934:	bd80      	pop	{r7, pc}

0800a936 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800a936:	b580      	push	{r7, lr}
 800a938:	b082      	sub	sp, #8
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	4603      	mov	r3, r0
 800a93e:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800a940:	79fb      	ldrb	r3, [r7, #7]
 800a942:	4618      	mov	r0, r3
 800a944:	f7f6 fe5e 	bl	8001604 <BSP_RADIO_ConfigRFSwitch>
 800a948:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3708      	adds	r7, #8
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}

0800a952 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800a952:	b580      	push	{r7, lr}
 800a954:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800a956:	f7f6 fea3 	bl	80016a0 <BSP_RADIO_GetTxConfig>
 800a95a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800a964:	f7f6 fea3 	bl	80016ae <BSP_RADIO_IsTCXO>
 800a968:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	bd80      	pop	{r7, pc}

0800a96e <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800a96e:	b580      	push	{r7, lr}
 800a970:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800a972:	f7f6 fea3 	bl	80016bc <BSP_RADIO_IsDCDC>
 800a976:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a978:	4618      	mov	r0, r3
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b082      	sub	sp, #8
 800a980:	af00      	add	r7, sp, #0
 800a982:	4603      	mov	r3, r0
 800a984:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800a986:	79fb      	ldrb	r3, [r7, #7]
 800a988:	4618      	mov	r0, r3
 800a98a:	f7f6 fe9e 	bl	80016ca <BSP_RADIO_GetRFOMaxPowerConfig>
 800a98e:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800a990:	4618      	mov	r0, r3
 800a992:	3708      	adds	r7, #8
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}

0800a998 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800a998:	b480      	push	{r7}
 800a99a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800a99c:	4b04      	ldr	r3, [pc, #16]	; (800a9b0 <UTIL_LPM_Init+0x18>)
 800a99e:	2200      	movs	r2, #0
 800a9a0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800a9a2:	4b04      	ldr	r3, [pc, #16]	; (800a9b4 <UTIL_LPM_Init+0x1c>)
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800a9a8:	bf00      	nop
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bc80      	pop	{r7}
 800a9ae:	4770      	bx	lr
 800a9b0:	20000448 	.word	0x20000448
 800a9b4:	2000044c 	.word	0x2000044c

0800a9b8 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b087      	sub	sp, #28
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	460b      	mov	r3, r1
 800a9c2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9c4:	f3ef 8310 	mrs	r3, PRIMASK
 800a9c8:	613b      	str	r3, [r7, #16]
  return(result);
 800a9ca:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a9cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a9ce:	b672      	cpsid	i
}
 800a9d0:	bf00      	nop
  
  switch( state )
 800a9d2:	78fb      	ldrb	r3, [r7, #3]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d008      	beq.n	800a9ea <UTIL_LPM_SetStopMode+0x32>
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d10e      	bne.n	800a9fa <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800a9dc:	4b0d      	ldr	r3, [pc, #52]	; (800aa14 <UTIL_LPM_SetStopMode+0x5c>)
 800a9de:	681a      	ldr	r2, [r3, #0]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	4313      	orrs	r3, r2
 800a9e4:	4a0b      	ldr	r2, [pc, #44]	; (800aa14 <UTIL_LPM_SetStopMode+0x5c>)
 800a9e6:	6013      	str	r3, [r2, #0]
      break;
 800a9e8:	e008      	b.n	800a9fc <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	43da      	mvns	r2, r3
 800a9ee:	4b09      	ldr	r3, [pc, #36]	; (800aa14 <UTIL_LPM_SetStopMode+0x5c>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	4013      	ands	r3, r2
 800a9f4:	4a07      	ldr	r2, [pc, #28]	; (800aa14 <UTIL_LPM_SetStopMode+0x5c>)
 800a9f6:	6013      	str	r3, [r2, #0]
      break;
 800a9f8:	e000      	b.n	800a9fc <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800a9fa:	bf00      	nop
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f383 8810 	msr	PRIMASK, r3
}
 800aa06:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800aa08:	bf00      	nop
 800aa0a:	371c      	adds	r7, #28
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bc80      	pop	{r7}
 800aa10:	4770      	bx	lr
 800aa12:	bf00      	nop
 800aa14:	20000448 	.word	0x20000448

0800aa18 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b087      	sub	sp, #28
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	460b      	mov	r3, r1
 800aa22:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa24:	f3ef 8310 	mrs	r3, PRIMASK
 800aa28:	613b      	str	r3, [r7, #16]
  return(result);
 800aa2a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800aa2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa2e:	b672      	cpsid	i
}
 800aa30:	bf00      	nop
  
  switch(state)
 800aa32:	78fb      	ldrb	r3, [r7, #3]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d008      	beq.n	800aa4a <UTIL_LPM_SetOffMode+0x32>
 800aa38:	2b01      	cmp	r3, #1
 800aa3a:	d10e      	bne.n	800aa5a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800aa3c:	4b0d      	ldr	r3, [pc, #52]	; (800aa74 <UTIL_LPM_SetOffMode+0x5c>)
 800aa3e:	681a      	ldr	r2, [r3, #0]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	4313      	orrs	r3, r2
 800aa44:	4a0b      	ldr	r2, [pc, #44]	; (800aa74 <UTIL_LPM_SetOffMode+0x5c>)
 800aa46:	6013      	str	r3, [r2, #0]
      break;
 800aa48:	e008      	b.n	800aa5c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	43da      	mvns	r2, r3
 800aa4e:	4b09      	ldr	r3, [pc, #36]	; (800aa74 <UTIL_LPM_SetOffMode+0x5c>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	4013      	ands	r3, r2
 800aa54:	4a07      	ldr	r2, [pc, #28]	; (800aa74 <UTIL_LPM_SetOffMode+0x5c>)
 800aa56:	6013      	str	r3, [r2, #0]
      break;
 800aa58:	e000      	b.n	800aa5c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800aa5a:	bf00      	nop
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f383 8810 	msr	PRIMASK, r3
}
 800aa66:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800aa68:	bf00      	nop
 800aa6a:	371c      	adds	r7, #28
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bc80      	pop	{r7}
 800aa70:	4770      	bx	lr
 800aa72:	bf00      	nop
 800aa74:	2000044c 	.word	0x2000044c

0800aa78 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa7e:	f3ef 8310 	mrs	r3, PRIMASK
 800aa82:	60bb      	str	r3, [r7, #8]
  return(result);
 800aa84:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 800aa86:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa88:	b672      	cpsid	i
}
 800aa8a:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800aa8c:	4b12      	ldr	r3, [pc, #72]	; (800aad8 <UTIL_LPM_EnterLowPower+0x60>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d006      	beq.n	800aaa2 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800aa94:	4b11      	ldr	r3, [pc, #68]	; (800aadc <UTIL_LPM_EnterLowPower+0x64>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800aa9a:	4b10      	ldr	r3, [pc, #64]	; (800aadc <UTIL_LPM_EnterLowPower+0x64>)
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	4798      	blx	r3
 800aaa0:	e010      	b.n	800aac4 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800aaa2:	4b0f      	ldr	r3, [pc, #60]	; (800aae0 <UTIL_LPM_EnterLowPower+0x68>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d006      	beq.n	800aab8 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 800aaaa:	4b0c      	ldr	r3, [pc, #48]	; (800aadc <UTIL_LPM_EnterLowPower+0x64>)
 800aaac:	689b      	ldr	r3, [r3, #8]
 800aaae:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800aab0:	4b0a      	ldr	r3, [pc, #40]	; (800aadc <UTIL_LPM_EnterLowPower+0x64>)
 800aab2:	68db      	ldr	r3, [r3, #12]
 800aab4:	4798      	blx	r3
 800aab6:	e005      	b.n	800aac4 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 800aab8:	4b08      	ldr	r3, [pc, #32]	; (800aadc <UTIL_LPM_EnterLowPower+0x64>)
 800aaba:	691b      	ldr	r3, [r3, #16]
 800aabc:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800aabe:	4b07      	ldr	r3, [pc, #28]	; (800aadc <UTIL_LPM_EnterLowPower+0x64>)
 800aac0:	695b      	ldr	r3, [r3, #20]
 800aac2:	4798      	blx	r3
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f383 8810 	msr	PRIMASK, r3
}
 800aace:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800aad0:	bf00      	nop
 800aad2:	3710      	adds	r7, #16
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}
 800aad8:	20000448 	.word	0x20000448
 800aadc:	0800c050 	.word	0x0800c050
 800aae0:	2000044c 	.word	0x2000044c

0800aae4 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800aae4:	b480      	push	{r7}
 800aae6:	b087      	sub	sp, #28
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	60f8      	str	r0, [r7, #12]
 800aaec:	60b9      	str	r1, [r7, #8]
 800aaee:	4613      	mov	r3, r2
 800aaf0:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	613b      	str	r3, [r7, #16]

  while( size-- )
 800aafa:	e007      	b.n	800ab0c <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800aafc:	693a      	ldr	r2, [r7, #16]
 800aafe:	1c53      	adds	r3, r2, #1
 800ab00:	613b      	str	r3, [r7, #16]
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	1c59      	adds	r1, r3, #1
 800ab06:	6179      	str	r1, [r7, #20]
 800ab08:	7812      	ldrb	r2, [r2, #0]
 800ab0a:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800ab0c:	88fb      	ldrh	r3, [r7, #6]
 800ab0e:	1e5a      	subs	r2, r3, #1
 800ab10:	80fa      	strh	r2, [r7, #6]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d1f2      	bne.n	800aafc <UTIL_MEM_cpy_8+0x18>
    }
}
 800ab16:	bf00      	nop
 800ab18:	bf00      	nop
 800ab1a:	371c      	adds	r7, #28
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bc80      	pop	{r7}
 800ab20:	4770      	bx	lr

0800ab22 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800ab22:	b480      	push	{r7}
 800ab24:	b085      	sub	sp, #20
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	6078      	str	r0, [r7, #4]
 800ab2a:	460b      	mov	r3, r1
 800ab2c:	70fb      	strb	r3, [r7, #3]
 800ab2e:	4613      	mov	r3, r2
 800ab30:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800ab36:	e004      	b.n	800ab42 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	1c5a      	adds	r2, r3, #1
 800ab3c:	60fa      	str	r2, [r7, #12]
 800ab3e:	78fa      	ldrb	r2, [r7, #3]
 800ab40:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800ab42:	883b      	ldrh	r3, [r7, #0]
 800ab44:	1e5a      	subs	r2, r3, #1
 800ab46:	803a      	strh	r2, [r7, #0]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d1f5      	bne.n	800ab38 <UTIL_MEM_set_8+0x16>
  }
}
 800ab4c:	bf00      	nop
 800ab4e:	bf00      	nop
 800ab50:	3714      	adds	r7, #20
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bc80      	pop	{r7}
 800ab56:	4770      	bx	lr

0800ab58 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800ab58:	b082      	sub	sp, #8
 800ab5a:	b480      	push	{r7}
 800ab5c:	b087      	sub	sp, #28
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	60f8      	str	r0, [r7, #12]
 800ab62:	1d38      	adds	r0, r7, #4
 800ab64:	e880 0006 	stmia.w	r0, {r1, r2}
 800ab68:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	613b      	str	r3, [r7, #16]
 800ab6e:	2300      	movs	r3, #0
 800ab70:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab76:	4413      	add	r3, r2
 800ab78:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800ab7a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800ab7e:	b29a      	uxth	r2, r3
 800ab80:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800ab84:	b29b      	uxth	r3, r3
 800ab86:	4413      	add	r3, r2
 800ab88:	b29b      	uxth	r3, r3
 800ab8a:	b21b      	sxth	r3, r3
 800ab8c:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 800ab8e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ab92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ab96:	db0a      	blt.n	800abae <SysTimeAdd+0x56>
  {
    c.Seconds++;
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 800ab9e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800aba8:	b29b      	uxth	r3, r3
 800abaa:	b21b      	sxth	r3, r3
 800abac:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	461a      	mov	r2, r3
 800abb2:	f107 0310 	add.w	r3, r7, #16
 800abb6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800abba:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800abbe:	68f8      	ldr	r0, [r7, #12]
 800abc0:	371c      	adds	r7, #28
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bc80      	pop	{r7}
 800abc6:	b002      	add	sp, #8
 800abc8:	4770      	bx	lr
	...

0800abcc <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b08a      	sub	sp, #40	; 0x28
 800abd0:	af02      	add	r7, sp, #8
 800abd2:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800abd4:	2300      	movs	r3, #0
 800abd6:	61bb      	str	r3, [r7, #24]
 800abd8:	2300      	movs	r3, #0
 800abda:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 800abdc:	2300      	movs	r3, #0
 800abde:	613b      	str	r3, [r7, #16]
 800abe0:	2300      	movs	r3, #0
 800abe2:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800abe4:	4b14      	ldr	r3, [pc, #80]	; (800ac38 <SysTimeGet+0x6c>)
 800abe6:	691b      	ldr	r3, [r3, #16]
 800abe8:	f107 0218 	add.w	r2, r7, #24
 800abec:	3204      	adds	r2, #4
 800abee:	4610      	mov	r0, r2
 800abf0:	4798      	blx	r3
 800abf2:	4603      	mov	r3, r0
 800abf4:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800abf6:	4b10      	ldr	r3, [pc, #64]	; (800ac38 <SysTimeGet+0x6c>)
 800abf8:	68db      	ldr	r3, [r3, #12]
 800abfa:	4798      	blx	r3
 800abfc:	4603      	mov	r3, r0
 800abfe:	b21b      	sxth	r3, r3
 800ac00:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800ac02:	4b0d      	ldr	r3, [pc, #52]	; (800ac38 <SysTimeGet+0x6c>)
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	4798      	blx	r3
 800ac08:	4603      	mov	r3, r0
 800ac0a:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 800ac0c:	f107 0010 	add.w	r0, r7, #16
 800ac10:	69fb      	ldr	r3, [r7, #28]
 800ac12:	9300      	str	r3, [sp, #0]
 800ac14:	69bb      	ldr	r3, [r7, #24]
 800ac16:	f107 0208 	add.w	r2, r7, #8
 800ac1a:	ca06      	ldmia	r2, {r1, r2}
 800ac1c:	f7ff ff9c 	bl	800ab58 <SysTimeAdd>

  return sysTime;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	461a      	mov	r2, r3
 800ac24:	f107 0310 	add.w	r3, r7, #16
 800ac28:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ac2c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	3720      	adds	r7, #32
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}
 800ac38:	0800c134 	.word	0x0800c134

0800ac3c <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b085      	sub	sp, #20
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  int i = 0;
 800ac44:	2300      	movs	r3, #0
 800ac46:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800ac48:	e00e      	b.n	800ac68 <ee_skip_atoi+0x2c>
 800ac4a:	68fa      	ldr	r2, [r7, #12]
 800ac4c:	4613      	mov	r3, r2
 800ac4e:	009b      	lsls	r3, r3, #2
 800ac50:	4413      	add	r3, r2
 800ac52:	005b      	lsls	r3, r3, #1
 800ac54:	4618      	mov	r0, r3
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	1c59      	adds	r1, r3, #1
 800ac5c:	687a      	ldr	r2, [r7, #4]
 800ac5e:	6011      	str	r1, [r2, #0]
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	4403      	add	r3, r0
 800ac64:	3b30      	subs	r3, #48	; 0x30
 800ac66:	60fb      	str	r3, [r7, #12]
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	781b      	ldrb	r3, [r3, #0]
 800ac6e:	2b2f      	cmp	r3, #47	; 0x2f
 800ac70:	d904      	bls.n	800ac7c <ee_skip_atoi+0x40>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	2b39      	cmp	r3, #57	; 0x39
 800ac7a:	d9e6      	bls.n	800ac4a <ee_skip_atoi+0xe>
  return i;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3714      	adds	r7, #20
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bc80      	pop	{r7}
 800ac86:	4770      	bx	lr

0800ac88 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b099      	sub	sp, #100	; 0x64
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	60b9      	str	r1, [r7, #8]
 800ac92:	607a      	str	r2, [r7, #4]
 800ac94:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 800ac96:	4b71      	ldr	r3, [pc, #452]	; (800ae5c <ee_number+0x1d4>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 800ac9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d002      	beq.n	800acac <ee_number+0x24>
 800aca6:	4b6e      	ldr	r3, [pc, #440]	; (800ae60 <ee_number+0x1d8>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	2b01      	cmp	r3, #1
 800acb0:	dd02      	ble.n	800acb8 <ee_number+0x30>
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	2b24      	cmp	r3, #36	; 0x24
 800acb6:	dd01      	ble.n	800acbc <ee_number+0x34>
 800acb8:	2300      	movs	r3, #0
 800acba:	e0ca      	b.n	800ae52 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 800acbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800acbe:	f003 0301 	and.w	r3, r3, #1
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d001      	beq.n	800acca <ee_number+0x42>
 800acc6:	2330      	movs	r3, #48	; 0x30
 800acc8:	e000      	b.n	800accc <ee_number+0x44>
 800acca:	2320      	movs	r3, #32
 800accc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 800acd0:	2300      	movs	r3, #0
 800acd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 800acd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800acd8:	f003 0302 	and.w	r3, r3, #2
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d00b      	beq.n	800acf8 <ee_number+0x70>
  {
    if (num < 0)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	da08      	bge.n	800acf8 <ee_number+0x70>
    {
      sign = '-';
 800ace6:	232d      	movs	r3, #45	; 0x2d
 800ace8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	425b      	negs	r3, r3
 800acf0:	607b      	str	r3, [r7, #4]
      size--;
 800acf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800acf4:	3b01      	subs	r3, #1
 800acf6:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 800acf8:	2300      	movs	r3, #0
 800acfa:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d11e      	bne.n	800ad40 <ee_number+0xb8>
    tmp[i++] = '0';
 800ad02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad04:	1c5a      	adds	r2, r3, #1
 800ad06:	657a      	str	r2, [r7, #84]	; 0x54
 800ad08:	3360      	adds	r3, #96	; 0x60
 800ad0a:	443b      	add	r3, r7
 800ad0c:	2230      	movs	r2, #48	; 0x30
 800ad0e:	f803 2c50 	strb.w	r2, [r3, #-80]
 800ad12:	e018      	b.n	800ad46 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	683a      	ldr	r2, [r7, #0]
 800ad18:	fbb3 f1f2 	udiv	r1, r3, r2
 800ad1c:	fb01 f202 	mul.w	r2, r1, r2
 800ad20:	1a9b      	subs	r3, r3, r2
 800ad22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad24:	441a      	add	r2, r3
 800ad26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad28:	1c59      	adds	r1, r3, #1
 800ad2a:	6579      	str	r1, [r7, #84]	; 0x54
 800ad2c:	7812      	ldrb	r2, [r2, #0]
 800ad2e:	3360      	adds	r3, #96	; 0x60
 800ad30:	443b      	add	r3, r7
 800ad32:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad3e:	607b      	str	r3, [r7, #4]
    while (num != 0)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d1e6      	bne.n	800ad14 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 800ad46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ad48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	dd01      	ble.n	800ad52 <ee_number+0xca>
 800ad4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad50:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 800ad52:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ad54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad56:	1ad3      	subs	r3, r2, r3
 800ad58:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800ad5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad5c:	f003 0301 	and.w	r3, r3, #1
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d112      	bne.n	800ad8a <ee_number+0x102>
 800ad64:	e00c      	b.n	800ad80 <ee_number+0xf8>
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	1c5a      	adds	r2, r3, #1
 800ad6a:	60fa      	str	r2, [r7, #12]
 800ad6c:	2220      	movs	r2, #32
 800ad6e:	701a      	strb	r2, [r3, #0]
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	3b01      	subs	r3, #1
 800ad74:	60bb      	str	r3, [r7, #8]
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d101      	bne.n	800ad80 <ee_number+0xf8>
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	e068      	b.n	800ae52 <ee_number+0x1ca>
 800ad80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ad82:	1e5a      	subs	r2, r3, #1
 800ad84:	66ba      	str	r2, [r7, #104]	; 0x68
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	dced      	bgt.n	800ad66 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 800ad8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d01b      	beq.n	800adca <ee_number+0x142>
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	1c5a      	adds	r2, r3, #1
 800ad96:	60fa      	str	r2, [r7, #12]
 800ad98:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800ad9c:	701a      	strb	r2, [r3, #0]
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	3b01      	subs	r3, #1
 800ada2:	60bb      	str	r3, [r7, #8]
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d10f      	bne.n	800adca <ee_number+0x142>
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	e051      	b.n	800ae52 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	1c5a      	adds	r2, r3, #1
 800adb2:	60fa      	str	r2, [r7, #12]
 800adb4:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800adb8:	701a      	strb	r2, [r3, #0]
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	3b01      	subs	r3, #1
 800adbe:	60bb      	str	r3, [r7, #8]
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d101      	bne.n	800adca <ee_number+0x142>
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	e043      	b.n	800ae52 <ee_number+0x1ca>
 800adca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800adcc:	1e5a      	subs	r2, r3, #1
 800adce:	66ba      	str	r2, [r7, #104]	; 0x68
 800add0:	2b00      	cmp	r3, #0
 800add2:	dcec      	bgt.n	800adae <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 800add4:	e00c      	b.n	800adf0 <ee_number+0x168>
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	1c5a      	adds	r2, r3, #1
 800adda:	60fa      	str	r2, [r7, #12]
 800addc:	2230      	movs	r2, #48	; 0x30
 800adde:	701a      	strb	r2, [r3, #0]
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	3b01      	subs	r3, #1
 800ade4:	60bb      	str	r3, [r7, #8]
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d101      	bne.n	800adf0 <ee_number+0x168>
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	e030      	b.n	800ae52 <ee_number+0x1ca>
 800adf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adf2:	1e5a      	subs	r2, r3, #1
 800adf4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800adf6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800adf8:	429a      	cmp	r2, r3
 800adfa:	dbec      	blt.n	800add6 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800adfc:	e010      	b.n	800ae20 <ee_number+0x198>
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	1c5a      	adds	r2, r3, #1
 800ae02:	60fa      	str	r2, [r7, #12]
 800ae04:	f107 0110 	add.w	r1, r7, #16
 800ae08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ae0a:	440a      	add	r2, r1
 800ae0c:	7812      	ldrb	r2, [r2, #0]
 800ae0e:	701a      	strb	r2, [r3, #0]
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	3b01      	subs	r3, #1
 800ae14:	60bb      	str	r3, [r7, #8]
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d101      	bne.n	800ae20 <ee_number+0x198>
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	e018      	b.n	800ae52 <ee_number+0x1ca>
 800ae20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae22:	1e5a      	subs	r2, r3, #1
 800ae24:	657a      	str	r2, [r7, #84]	; 0x54
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	dce9      	bgt.n	800adfe <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 800ae2a:	e00c      	b.n	800ae46 <ee_number+0x1be>
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	1c5a      	adds	r2, r3, #1
 800ae30:	60fa      	str	r2, [r7, #12]
 800ae32:	2220      	movs	r2, #32
 800ae34:	701a      	strb	r2, [r3, #0]
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	3b01      	subs	r3, #1
 800ae3a:	60bb      	str	r3, [r7, #8]
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d101      	bne.n	800ae46 <ee_number+0x1be>
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	e005      	b.n	800ae52 <ee_number+0x1ca>
 800ae46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae48:	1e5a      	subs	r2, r3, #1
 800ae4a:	66ba      	str	r2, [r7, #104]	; 0x68
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	dced      	bgt.n	800ae2c <ee_number+0x1a4>

  return str;
 800ae50:	68fb      	ldr	r3, [r7, #12]
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3764      	adds	r7, #100	; 0x64
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bc80      	pop	{r7}
 800ae5a:	4770      	bx	lr
 800ae5c:	2000000c 	.word	0x2000000c
 800ae60:	20000010 	.word	0x20000010

0800ae64 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b092      	sub	sp, #72	; 0x48
 800ae68:	af04      	add	r7, sp, #16
 800ae6a:	60f8      	str	r0, [r7, #12]
 800ae6c:	60b9      	str	r1, [r7, #8]
 800ae6e:	607a      	str	r2, [r7, #4]
 800ae70:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	dc01      	bgt.n	800ae7c <tiny_vsnprintf_like+0x18>
  {
    return 0;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	e13e      	b.n	800b0fa <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae80:	e128      	b.n	800b0d4 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 800ae82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	1ad2      	subs	r2, r2, r3
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	f280 812e 	bge.w	800b0ee <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	781b      	ldrb	r3, [r3, #0]
 800ae96:	2b25      	cmp	r3, #37	; 0x25
 800ae98:	d006      	beq.n	800aea8 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae9e:	1c59      	adds	r1, r3, #1
 800aea0:	62f9      	str	r1, [r7, #44]	; 0x2c
 800aea2:	7812      	ldrb	r2, [r2, #0]
 800aea4:	701a      	strb	r2, [r3, #0]
      continue;
 800aea6:	e112      	b.n	800b0ce <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	3301      	adds	r3, #1
 800aeb0:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	781b      	ldrb	r3, [r3, #0]
 800aeb6:	2b30      	cmp	r3, #48	; 0x30
 800aeb8:	d103      	bne.n	800aec2 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 800aeba:	6a3b      	ldr	r3, [r7, #32]
 800aebc:	f043 0301 	orr.w	r3, r3, #1
 800aec0:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 800aec2:	f04f 33ff 	mov.w	r3, #4294967295
 800aec6:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	2b2f      	cmp	r3, #47	; 0x2f
 800aece:	d908      	bls.n	800aee2 <tiny_vsnprintf_like+0x7e>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	2b39      	cmp	r3, #57	; 0x39
 800aed6:	d804      	bhi.n	800aee2 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 800aed8:	1d3b      	adds	r3, r7, #4
 800aeda:	4618      	mov	r0, r3
 800aedc:	f7ff feae 	bl	800ac3c <ee_skip_atoi>
 800aee0:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 800aee2:	f04f 33ff 	mov.w	r3, #4294967295
 800aee6:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 800aee8:	f04f 33ff 	mov.w	r3, #4294967295
 800aeec:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 800aeee:	230a      	movs	r3, #10
 800aef0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	781b      	ldrb	r3, [r3, #0]
 800aef6:	3b58      	subs	r3, #88	; 0x58
 800aef8:	2b20      	cmp	r3, #32
 800aefa:	f200 8094 	bhi.w	800b026 <tiny_vsnprintf_like+0x1c2>
 800aefe:	a201      	add	r2, pc, #4	; (adr r2, 800af04 <tiny_vsnprintf_like+0xa0>)
 800af00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af04:	0800b00f 	.word	0x0800b00f
 800af08:	0800b027 	.word	0x0800b027
 800af0c:	0800b027 	.word	0x0800b027
 800af10:	0800b027 	.word	0x0800b027
 800af14:	0800b027 	.word	0x0800b027
 800af18:	0800b027 	.word	0x0800b027
 800af1c:	0800b027 	.word	0x0800b027
 800af20:	0800b027 	.word	0x0800b027
 800af24:	0800b027 	.word	0x0800b027
 800af28:	0800b027 	.word	0x0800b027
 800af2c:	0800b027 	.word	0x0800b027
 800af30:	0800af93 	.word	0x0800af93
 800af34:	0800b01d 	.word	0x0800b01d
 800af38:	0800b027 	.word	0x0800b027
 800af3c:	0800b027 	.word	0x0800b027
 800af40:	0800b027 	.word	0x0800b027
 800af44:	0800b027 	.word	0x0800b027
 800af48:	0800b01d 	.word	0x0800b01d
 800af4c:	0800b027 	.word	0x0800b027
 800af50:	0800b027 	.word	0x0800b027
 800af54:	0800b027 	.word	0x0800b027
 800af58:	0800b027 	.word	0x0800b027
 800af5c:	0800b027 	.word	0x0800b027
 800af60:	0800b027 	.word	0x0800b027
 800af64:	0800b027 	.word	0x0800b027
 800af68:	0800b027 	.word	0x0800b027
 800af6c:	0800b027 	.word	0x0800b027
 800af70:	0800afb3 	.word	0x0800afb3
 800af74:	0800b027 	.word	0x0800b027
 800af78:	0800b073 	.word	0x0800b073
 800af7c:	0800b027 	.word	0x0800b027
 800af80:	0800b027 	.word	0x0800b027
 800af84:	0800b017 	.word	0x0800b017
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 800af88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af8a:	1c5a      	adds	r2, r3, #1
 800af8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800af8e:	2220      	movs	r2, #32
 800af90:	701a      	strb	r2, [r3, #0]
 800af92:	69fb      	ldr	r3, [r7, #28]
 800af94:	3b01      	subs	r3, #1
 800af96:	61fb      	str	r3, [r7, #28]
 800af98:	69fb      	ldr	r3, [r7, #28]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	dcf4      	bgt.n	800af88 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	1d1a      	adds	r2, r3, #4
 800afa2:	603a      	str	r2, [r7, #0]
 800afa4:	6819      	ldr	r1, [r3, #0]
 800afa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afa8:	1c5a      	adds	r2, r3, #1
 800afaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800afac:	b2ca      	uxtb	r2, r1
 800afae:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 800afb0:	e08d      	b.n	800b0ce <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	1d1a      	adds	r2, r3, #4
 800afb6:	603a      	str	r2, [r7, #0]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 800afbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d101      	bne.n	800afc6 <tiny_vsnprintf_like+0x162>
 800afc2:	4b50      	ldr	r3, [pc, #320]	; (800b104 <tiny_vsnprintf_like+0x2a0>)
 800afc4:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 800afc6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800afc8:	f7f5 f8d6 	bl	8000178 <strlen>
 800afcc:	4603      	mov	r3, r0
 800afce:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 800afd0:	e004      	b.n	800afdc <tiny_vsnprintf_like+0x178>
 800afd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afd4:	1c5a      	adds	r2, r3, #1
 800afd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800afd8:	2220      	movs	r2, #32
 800afda:	701a      	strb	r2, [r3, #0]
 800afdc:	69fb      	ldr	r3, [r7, #28]
 800afde:	1e5a      	subs	r2, r3, #1
 800afe0:	61fa      	str	r2, [r7, #28]
 800afe2:	693a      	ldr	r2, [r7, #16]
 800afe4:	429a      	cmp	r2, r3
 800afe6:	dbf4      	blt.n	800afd2 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 800afe8:	2300      	movs	r3, #0
 800afea:	62bb      	str	r3, [r7, #40]	; 0x28
 800afec:	e00a      	b.n	800b004 <tiny_vsnprintf_like+0x1a0>
 800afee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aff0:	1c53      	adds	r3, r2, #1
 800aff2:	627b      	str	r3, [r7, #36]	; 0x24
 800aff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aff6:	1c59      	adds	r1, r3, #1
 800aff8:	62f9      	str	r1, [r7, #44]	; 0x2c
 800affa:	7812      	ldrb	r2, [r2, #0]
 800affc:	701a      	strb	r2, [r3, #0]
 800affe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b000:	3301      	adds	r3, #1
 800b002:	62bb      	str	r3, [r7, #40]	; 0x28
 800b004:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	429a      	cmp	r2, r3
 800b00a:	dbf0      	blt.n	800afee <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 800b00c:	e05f      	b.n	800b0ce <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 800b00e:	6a3b      	ldr	r3, [r7, #32]
 800b010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b014:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 800b016:	2310      	movs	r3, #16
 800b018:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 800b01a:	e02b      	b.n	800b074 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 800b01c:	6a3b      	ldr	r3, [r7, #32]
 800b01e:	f043 0302 	orr.w	r3, r3, #2
 800b022:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 800b024:	e025      	b.n	800b072 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	781b      	ldrb	r3, [r3, #0]
 800b02a:	2b25      	cmp	r3, #37	; 0x25
 800b02c:	d004      	beq.n	800b038 <tiny_vsnprintf_like+0x1d4>
 800b02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b030:	1c5a      	adds	r2, r3, #1
 800b032:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b034:	2225      	movs	r2, #37	; 0x25
 800b036:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 800b038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	1ad2      	subs	r2, r2, r3
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	3b01      	subs	r3, #1
 800b042:	429a      	cmp	r2, r3
 800b044:	da16      	bge.n	800b074 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d006      	beq.n	800b05c <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b052:	1c59      	adds	r1, r3, #1
 800b054:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b056:	7812      	ldrb	r2, [r2, #0]
 800b058:	701a      	strb	r2, [r3, #0]
 800b05a:	e002      	b.n	800b062 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	3b01      	subs	r3, #1
 800b060:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 800b062:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	1ad2      	subs	r2, r2, r3
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	3b01      	subs	r3, #1
 800b06c:	429a      	cmp	r2, r3
 800b06e:	db2d      	blt.n	800b0cc <tiny_vsnprintf_like+0x268>
 800b070:	e000      	b.n	800b074 <tiny_vsnprintf_like+0x210>
        break;
 800b072:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	2b6c      	cmp	r3, #108	; 0x6c
 800b078:	d105      	bne.n	800b086 <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	1d1a      	adds	r2, r3, #4
 800b07e:	603a      	str	r2, [r7, #0]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	637b      	str	r3, [r7, #52]	; 0x34
 800b084:	e00f      	b.n	800b0a6 <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 800b086:	6a3b      	ldr	r3, [r7, #32]
 800b088:	f003 0302 	and.w	r3, r3, #2
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d005      	beq.n	800b09c <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	1d1a      	adds	r2, r3, #4
 800b094:	603a      	str	r2, [r7, #0]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	637b      	str	r3, [r7, #52]	; 0x34
 800b09a:	e004      	b.n	800b0a6 <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	1d1a      	adds	r2, r3, #4
 800b0a0:	603a      	str	r2, [r7, #0]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	1e5a      	subs	r2, r3, #1
 800b0aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	1acb      	subs	r3, r1, r3
 800b0b0:	1ad1      	subs	r1, r2, r3
 800b0b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b0b4:	6a3b      	ldr	r3, [r7, #32]
 800b0b6:	9302      	str	r3, [sp, #8]
 800b0b8:	69bb      	ldr	r3, [r7, #24]
 800b0ba:	9301      	str	r3, [sp, #4]
 800b0bc:	69fb      	ldr	r3, [r7, #28]
 800b0be:	9300      	str	r3, [sp, #0]
 800b0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b0c4:	f7ff fde0 	bl	800ac88 <ee_number>
 800b0c8:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b0ca:	e000      	b.n	800b0ce <tiny_vsnprintf_like+0x26a>
        continue;
 800b0cc:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	3301      	adds	r3, #1
 800b0d2:	607b      	str	r3, [r7, #4]
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	f47f aed2 	bne.w	800ae82 <tiny_vsnprintf_like+0x1e>
 800b0de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	1ad2      	subs	r2, r2, r3
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	3b01      	subs	r3, #1
 800b0e8:	429a      	cmp	r2, r3
 800b0ea:	f6bf aeca 	bge.w	800ae82 <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 800b0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	701a      	strb	r2, [r3, #0]
  return str - buf;
 800b0f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	1ad3      	subs	r3, r2, r3
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3738      	adds	r7, #56	; 0x38
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
 800b102:	bf00      	nop
 800b104:	0800c048 	.word	0x0800c048

0800b108 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b090      	sub	sp, #64	; 0x40
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800b110:	4b73      	ldr	r3, [pc, #460]	; (800b2e0 <UTIL_SEQ_Run+0x1d8>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800b116:	4b72      	ldr	r3, [pc, #456]	; (800b2e0 <UTIL_SEQ_Run+0x1d8>)
 800b118:	681a      	ldr	r2, [r3, #0]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	4013      	ands	r3, r2
 800b11e:	4a70      	ldr	r2, [pc, #448]	; (800b2e0 <UTIL_SEQ_Run+0x1d8>)
 800b120:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800b122:	4b70      	ldr	r3, [pc, #448]	; (800b2e4 <UTIL_SEQ_Run+0x1dc>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800b128:	4b6f      	ldr	r3, [pc, #444]	; (800b2e8 <UTIL_SEQ_Run+0x1e0>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800b12e:	4b6f      	ldr	r3, [pc, #444]	; (800b2ec <UTIL_SEQ_Run+0x1e4>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800b134:	4b6e      	ldr	r3, [pc, #440]	; (800b2f0 <UTIL_SEQ_Run+0x1e8>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800b13a:	e08d      	b.n	800b258 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800b13c:	2300      	movs	r3, #0
 800b13e:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800b140:	e002      	b.n	800b148 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800b142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b144:	3301      	adds	r3, #1
 800b146:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800b148:	4a6a      	ldr	r2, [pc, #424]	; (800b2f4 <UTIL_SEQ_Run+0x1ec>)
 800b14a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b14c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b152:	401a      	ands	r2, r3
 800b154:	4b62      	ldr	r3, [pc, #392]	; (800b2e0 <UTIL_SEQ_Run+0x1d8>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4013      	ands	r3, r2
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d0f1      	beq.n	800b142 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800b15e:	4a65      	ldr	r2, [pc, #404]	; (800b2f4 <UTIL_SEQ_Run+0x1ec>)
 800b160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b162:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b168:	401a      	ands	r2, r3
 800b16a:	4b5d      	ldr	r3, [pc, #372]	; (800b2e0 <UTIL_SEQ_Run+0x1d8>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	4013      	ands	r3, r2
 800b170:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800b172:	4a60      	ldr	r2, [pc, #384]	; (800b2f4 <UTIL_SEQ_Run+0x1ec>)
 800b174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b176:	00db      	lsls	r3, r3, #3
 800b178:	4413      	add	r3, r2
 800b17a:	685a      	ldr	r2, [r3, #4]
 800b17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b17e:	4013      	ands	r3, r2
 800b180:	2b00      	cmp	r3, #0
 800b182:	d106      	bne.n	800b192 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800b184:	4a5b      	ldr	r2, [pc, #364]	; (800b2f4 <UTIL_SEQ_Run+0x1ec>)
 800b186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b188:	00db      	lsls	r3, r3, #3
 800b18a:	4413      	add	r3, r2
 800b18c:	f04f 32ff 	mov.w	r2, #4294967295
 800b190:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800b192:	4a58      	ldr	r2, [pc, #352]	; (800b2f4 <UTIL_SEQ_Run+0x1ec>)
 800b194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b196:	00db      	lsls	r3, r3, #3
 800b198:	4413      	add	r3, r2
 800b19a:	685a      	ldr	r2, [r3, #4]
 800b19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19e:	4013      	ands	r3, r2
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f000 f8e5 	bl	800b370 <SEQ_BitPosition>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	4b53      	ldr	r3, [pc, #332]	; (800b2f8 <UTIL_SEQ_Run+0x1f0>)
 800b1ac:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800b1ae:	4a51      	ldr	r2, [pc, #324]	; (800b2f4 <UTIL_SEQ_Run+0x1ec>)
 800b1b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1b2:	00db      	lsls	r3, r3, #3
 800b1b4:	4413      	add	r3, r2
 800b1b6:	685a      	ldr	r2, [r3, #4]
 800b1b8:	4b4f      	ldr	r3, [pc, #316]	; (800b2f8 <UTIL_SEQ_Run+0x1f0>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	2101      	movs	r1, #1
 800b1be:	fa01 f303 	lsl.w	r3, r1, r3
 800b1c2:	43db      	mvns	r3, r3
 800b1c4:	401a      	ands	r2, r3
 800b1c6:	494b      	ldr	r1, [pc, #300]	; (800b2f4 <UTIL_SEQ_Run+0x1ec>)
 800b1c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1ca:	00db      	lsls	r3, r3, #3
 800b1cc:	440b      	add	r3, r1
 800b1ce:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1d0:	f3ef 8310 	mrs	r3, PRIMASK
 800b1d4:	61bb      	str	r3, [r7, #24]
  return(result);
 800b1d6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b1d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800b1da:	b672      	cpsid	i
}
 800b1dc:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800b1de:	4b46      	ldr	r3, [pc, #280]	; (800b2f8 <UTIL_SEQ_Run+0x1f0>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	fa02 f303 	lsl.w	r3, r2, r3
 800b1e8:	43da      	mvns	r2, r3
 800b1ea:	4b3e      	ldr	r3, [pc, #248]	; (800b2e4 <UTIL_SEQ_Run+0x1dc>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4013      	ands	r3, r2
 800b1f0:	4a3c      	ldr	r2, [pc, #240]	; (800b2e4 <UTIL_SEQ_Run+0x1dc>)
 800b1f2:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1f8:	e013      	b.n	800b222 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800b1fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1fc:	3b01      	subs	r3, #1
 800b1fe:	4a3d      	ldr	r2, [pc, #244]	; (800b2f4 <UTIL_SEQ_Run+0x1ec>)
 800b200:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800b204:	4b3c      	ldr	r3, [pc, #240]	; (800b2f8 <UTIL_SEQ_Run+0x1f0>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	2201      	movs	r2, #1
 800b20a:	fa02 f303 	lsl.w	r3, r2, r3
 800b20e:	43da      	mvns	r2, r3
 800b210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b212:	3b01      	subs	r3, #1
 800b214:	400a      	ands	r2, r1
 800b216:	4937      	ldr	r1, [pc, #220]	; (800b2f4 <UTIL_SEQ_Run+0x1ec>)
 800b218:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b21c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b21e:	3b01      	subs	r3, #1
 800b220:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b224:	2b00      	cmp	r3, #0
 800b226:	d1e8      	bne.n	800b1fa <UTIL_SEQ_Run+0xf2>
 800b228:	6a3b      	ldr	r3, [r7, #32]
 800b22a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	f383 8810 	msr	PRIMASK, r3
}
 800b232:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800b234:	4b30      	ldr	r3, [pc, #192]	; (800b2f8 <UTIL_SEQ_Run+0x1f0>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	4a30      	ldr	r2, [pc, #192]	; (800b2fc <UTIL_SEQ_Run+0x1f4>)
 800b23a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b23e:	4798      	blx	r3

    local_taskset = TaskSet;
 800b240:	4b28      	ldr	r3, [pc, #160]	; (800b2e4 <UTIL_SEQ_Run+0x1dc>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800b246:	4b28      	ldr	r3, [pc, #160]	; (800b2e8 <UTIL_SEQ_Run+0x1e0>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800b24c:	4b27      	ldr	r3, [pc, #156]	; (800b2ec <UTIL_SEQ_Run+0x1e4>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800b252:	4b27      	ldr	r3, [pc, #156]	; (800b2f0 <UTIL_SEQ_Run+0x1e8>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800b258:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b25c:	401a      	ands	r2, r3
 800b25e:	4b20      	ldr	r3, [pc, #128]	; (800b2e0 <UTIL_SEQ_Run+0x1d8>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	4013      	ands	r3, r2
 800b264:	2b00      	cmp	r3, #0
 800b266:	d005      	beq.n	800b274 <UTIL_SEQ_Run+0x16c>
 800b268:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b26c:	4013      	ands	r3, r2
 800b26e:	2b00      	cmp	r3, #0
 800b270:	f43f af64 	beq.w	800b13c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800b274:	4b20      	ldr	r3, [pc, #128]	; (800b2f8 <UTIL_SEQ_Run+0x1f0>)
 800b276:	f04f 32ff 	mov.w	r2, #4294967295
 800b27a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800b27c:	f000 f86c 	bl	800b358 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b280:	f3ef 8310 	mrs	r3, PRIMASK
 800b284:	613b      	str	r3, [r7, #16]
  return(result);
 800b286:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800b288:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b28a:	b672      	cpsid	i
}
 800b28c:	bf00      	nop
  local_taskset = TaskSet;
 800b28e:	4b15      	ldr	r3, [pc, #84]	; (800b2e4 <UTIL_SEQ_Run+0x1dc>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800b294:	4b14      	ldr	r3, [pc, #80]	; (800b2e8 <UTIL_SEQ_Run+0x1e0>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800b29a:	4b14      	ldr	r3, [pc, #80]	; (800b2ec <UTIL_SEQ_Run+0x1e4>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800b2a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a4:	401a      	ands	r2, r3
 800b2a6:	4b0e      	ldr	r3, [pc, #56]	; (800b2e0 <UTIL_SEQ_Run+0x1d8>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	4013      	ands	r3, r2
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d107      	bne.n	800b2c0 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800b2b0:	4b0f      	ldr	r3, [pc, #60]	; (800b2f0 <UTIL_SEQ_Run+0x1e8>)
 800b2b2:	681a      	ldr	r2, [r3, #0]
 800b2b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2b6:	4013      	ands	r3, r2
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d101      	bne.n	800b2c0 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800b2bc:	f7f5 fbca 	bl	8000a54 <UTIL_SEQ_Idle>
 800b2c0:	69fb      	ldr	r3, [r7, #28]
 800b2c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f383 8810 	msr	PRIMASK, r3
}
 800b2ca:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800b2cc:	f000 f84a 	bl	800b364 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800b2d0:	4a03      	ldr	r2, [pc, #12]	; (800b2e0 <UTIL_SEQ_Run+0x1d8>)
 800b2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d4:	6013      	str	r3, [r2, #0]

  return;
 800b2d6:	bf00      	nop
}
 800b2d8:	3740      	adds	r7, #64	; 0x40
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	20000018 	.word	0x20000018
 800b2e4:	20000450 	.word	0x20000450
 800b2e8:	20000454 	.word	0x20000454
 800b2ec:	20000014 	.word	0x20000014
 800b2f0:	20000458 	.word	0x20000458
 800b2f4:	20000464 	.word	0x20000464
 800b2f8:	2000045c 	.word	0x2000045c
 800b2fc:	20000460 	.word	0x20000460

0800b300 <UTIL_SEQ_SetTask>:

  return;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800b300:	b480      	push	{r7}
 800b302:	b087      	sub	sp, #28
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b30a:	f3ef 8310 	mrs	r3, PRIMASK
 800b30e:	60fb      	str	r3, [r7, #12]
  return(result);
 800b310:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b312:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b314:	b672      	cpsid	i
}
 800b316:	bf00      	nop

  TaskSet |= TaskId_bm;
 800b318:	4b0d      	ldr	r3, [pc, #52]	; (800b350 <UTIL_SEQ_SetTask+0x50>)
 800b31a:	681a      	ldr	r2, [r3, #0]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	4313      	orrs	r3, r2
 800b320:	4a0b      	ldr	r2, [pc, #44]	; (800b350 <UTIL_SEQ_SetTask+0x50>)
 800b322:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800b324:	4a0b      	ldr	r2, [pc, #44]	; (800b354 <UTIL_SEQ_SetTask+0x54>)
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	431a      	orrs	r2, r3
 800b330:	4908      	ldr	r1, [pc, #32]	; (800b354 <UTIL_SEQ_SetTask+0x54>)
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	f383 8810 	msr	PRIMASK, r3
}
 800b342:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b344:	bf00      	nop
}
 800b346:	371c      	adds	r7, #28
 800b348:	46bd      	mov	sp, r7
 800b34a:	bc80      	pop	{r7}
 800b34c:	4770      	bx	lr
 800b34e:	bf00      	nop
 800b350:	20000450 	.word	0x20000450
 800b354:	20000464 	.word	0x20000464

0800b358 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800b358:	b480      	push	{r7}
 800b35a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b35c:	bf00      	nop
}
 800b35e:	46bd      	mov	sp, r7
 800b360:	bc80      	pop	{r7}
 800b362:	4770      	bx	lr

0800b364 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800b364:	b480      	push	{r7}
 800b366:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b368:	bf00      	nop
}
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bc80      	pop	{r7}
 800b36e:	4770      	bx	lr

0800b370 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800b370:	b480      	push	{r7}
 800b372:	b085      	sub	sp, #20
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800b378:	2300      	movs	r3, #0
 800b37a:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	0c1b      	lsrs	r3, r3, #16
 800b384:	041b      	lsls	r3, r3, #16
 800b386:	2b00      	cmp	r3, #0
 800b388:	d104      	bne.n	800b394 <SEQ_BitPosition+0x24>
 800b38a:	2310      	movs	r3, #16
 800b38c:	73fb      	strb	r3, [r7, #15]
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	041b      	lsls	r3, r3, #16
 800b392:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d105      	bne.n	800b3aa <SEQ_BitPosition+0x3a>
 800b39e:	7bfb      	ldrb	r3, [r7, #15]
 800b3a0:	3308      	adds	r3, #8
 800b3a2:	73fb      	strb	r3, [r7, #15]
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	021b      	lsls	r3, r3, #8
 800b3a8:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d105      	bne.n	800b3c0 <SEQ_BitPosition+0x50>
 800b3b4:	7bfb      	ldrb	r3, [r7, #15]
 800b3b6:	3304      	adds	r3, #4
 800b3b8:	73fb      	strb	r3, [r7, #15]
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	011b      	lsls	r3, r3, #4
 800b3be:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	0f1b      	lsrs	r3, r3, #28
 800b3c4:	4a06      	ldr	r2, [pc, #24]	; (800b3e0 <SEQ_BitPosition+0x70>)
 800b3c6:	5cd2      	ldrb	r2, [r2, r3]
 800b3c8:	7bfb      	ldrb	r3, [r7, #15]
 800b3ca:	4413      	add	r3, r2
 800b3cc:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800b3ce:	7bfb      	ldrb	r3, [r7, #15]
 800b3d0:	f1c3 031f 	rsb	r3, r3, #31
 800b3d4:	b2db      	uxtb	r3, r3
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3714      	adds	r7, #20
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bc80      	pop	{r7}
 800b3de:	4770      	bx	lr
 800b3e0:	0800c2c0 	.word	0x0800c2c0

0800b3e4 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800b3e8:	4b04      	ldr	r3, [pc, #16]	; (800b3fc <UTIL_TIMER_Init+0x18>)
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800b3ee:	4b04      	ldr	r3, [pc, #16]	; (800b400 <UTIL_TIMER_Init+0x1c>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	4798      	blx	r3
 800b3f4:	4603      	mov	r3, r0
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	bd80      	pop	{r7, pc}
 800b3fa:	bf00      	nop
 800b3fc:	2000046c 	.word	0x2000046c
 800b400:	0800c108 	.word	0x0800c108

0800b404 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b084      	sub	sp, #16
 800b408:	af00      	add	r7, sp, #0
 800b40a:	60f8      	str	r0, [r7, #12]
 800b40c:	60b9      	str	r1, [r7, #8]
 800b40e:	603b      	str	r3, [r7, #0]
 800b410:	4613      	mov	r3, r2
 800b412:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d023      	beq.n	800b462 <UTIL_TIMER_Create+0x5e>
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d020      	beq.n	800b462 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	2200      	movs	r2, #0
 800b424:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800b426:	4b11      	ldr	r3, [pc, #68]	; (800b46c <UTIL_TIMER_Create+0x68>)
 800b428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b42a:	68b8      	ldr	r0, [r7, #8]
 800b42c:	4798      	blx	r3
 800b42e:	4602      	mov	r2, r0
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2200      	movs	r2, #0
 800b438:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	2200      	movs	r2, #0
 800b43e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	2200      	movs	r2, #0
 800b444:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	683a      	ldr	r2, [r7, #0]
 800b44a:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	69ba      	ldr	r2, [r7, #24]
 800b450:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	79fa      	ldrb	r2, [r7, #7]
 800b456:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2200      	movs	r2, #0
 800b45c:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800b45e:	2300      	movs	r3, #0
 800b460:	e000      	b.n	800b464 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800b462:	2301      	movs	r3, #1
  }
}
 800b464:	4618      	mov	r0, r3
 800b466:	3710      	adds	r7, #16
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd80      	pop	{r7, pc}
 800b46c:	0800c108 	.word	0x0800c108

0800b470 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b08a      	sub	sp, #40	; 0x28
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b478:	2300      	movs	r3, #0
 800b47a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d056      	beq.n	800b532 <UTIL_TIMER_Start+0xc2>
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f000 f9a9 	bl	800b7dc <TimerExists>
 800b48a:	4603      	mov	r3, r0
 800b48c:	f083 0301 	eor.w	r3, r3, #1
 800b490:	b2db      	uxtb	r3, r3
 800b492:	2b00      	cmp	r3, #0
 800b494:	d04d      	beq.n	800b532 <UTIL_TIMER_Start+0xc2>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	7a5b      	ldrb	r3, [r3, #9]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d149      	bne.n	800b532 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b49e:	f3ef 8310 	mrs	r3, PRIMASK
 800b4a2:	613b      	str	r3, [r7, #16]
  return(result);
 800b4a4:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b4a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b4a8:	b672      	cpsid	i
}
 800b4aa:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800b4b2:	4b24      	ldr	r3, [pc, #144]	; (800b544 <UTIL_TIMER_Start+0xd4>)
 800b4b4:	6a1b      	ldr	r3, [r3, #32]
 800b4b6:	4798      	blx	r3
 800b4b8:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800b4ba:	6a3a      	ldr	r2, [r7, #32]
 800b4bc:	69bb      	ldr	r3, [r7, #24]
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d201      	bcs.n	800b4c6 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800b4c2:	69bb      	ldr	r3, [r7, #24]
 800b4c4:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6a3a      	ldr	r2, [r7, #32]
 800b4ca:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2201      	movs	r2, #1
 800b4d6:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800b4de:	4b1a      	ldr	r3, [pc, #104]	; (800b548 <UTIL_TIMER_Start+0xd8>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d106      	bne.n	800b4f4 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800b4e6:	4b17      	ldr	r3, [pc, #92]	; (800b544 <UTIL_TIMER_Start+0xd4>)
 800b4e8:	691b      	ldr	r3, [r3, #16]
 800b4ea:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f000 f9eb 	bl	800b8c8 <TimerInsertNewHeadTimer>
 800b4f2:	e017      	b.n	800b524 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800b4f4:	4b13      	ldr	r3, [pc, #76]	; (800b544 <UTIL_TIMER_Start+0xd4>)
 800b4f6:	699b      	ldr	r3, [r3, #24]
 800b4f8:	4798      	blx	r3
 800b4fa:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681a      	ldr	r2, [r3, #0]
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	441a      	add	r2, r3
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681a      	ldr	r2, [r3, #0]
 800b50c:	4b0e      	ldr	r3, [pc, #56]	; (800b548 <UTIL_TIMER_Start+0xd8>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	429a      	cmp	r2, r3
 800b514:	d203      	bcs.n	800b51e <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f000 f9d6 	bl	800b8c8 <TimerInsertNewHeadTimer>
 800b51c:	e002      	b.n	800b524 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f000 f9a2 	bl	800b868 <TimerInsertTimer>
 800b524:	69fb      	ldr	r3, [r7, #28]
 800b526:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	f383 8810 	msr	PRIMASK, r3
}
 800b52e:	bf00      	nop
  {
 800b530:	e002      	b.n	800b538 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800b532:	2301      	movs	r3, #1
 800b534:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800b538:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3728      	adds	r7, #40	; 0x28
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}
 800b544:	0800c108 	.word	0x0800c108
 800b548:	2000046c 	.word	0x2000046c

0800b54c <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b088      	sub	sp, #32
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b554:	2300      	movs	r3, #0
 800b556:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d05b      	beq.n	800b616 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b55e:	f3ef 8310 	mrs	r3, PRIMASK
 800b562:	60fb      	str	r3, [r7, #12]
  return(result);
 800b564:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b566:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b568:	b672      	cpsid	i
}
 800b56a:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800b56c:	4b2d      	ldr	r3, [pc, #180]	; (800b624 <UTIL_TIMER_Stop+0xd8>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800b572:	4b2c      	ldr	r3, [pc, #176]	; (800b624 <UTIL_TIMER_Stop+0xd8>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2201      	movs	r2, #1
 800b57c:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800b57e:	4b29      	ldr	r3, [pc, #164]	; (800b624 <UTIL_TIMER_Stop+0xd8>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d041      	beq.n	800b60a <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2200      	movs	r2, #0
 800b58a:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800b58c:	4b25      	ldr	r3, [pc, #148]	; (800b624 <UTIL_TIMER_Stop+0xd8>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	687a      	ldr	r2, [r7, #4]
 800b592:	429a      	cmp	r2, r3
 800b594:	d134      	bne.n	800b600 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800b596:	4b23      	ldr	r3, [pc, #140]	; (800b624 <UTIL_TIMER_Stop+0xd8>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	2200      	movs	r2, #0
 800b59c:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800b59e:	4b21      	ldr	r3, [pc, #132]	; (800b624 <UTIL_TIMER_Stop+0xd8>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	695b      	ldr	r3, [r3, #20]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d00a      	beq.n	800b5be <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800b5a8:	4b1e      	ldr	r3, [pc, #120]	; (800b624 <UTIL_TIMER_Stop+0xd8>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	695b      	ldr	r3, [r3, #20]
 800b5ae:	4a1d      	ldr	r2, [pc, #116]	; (800b624 <UTIL_TIMER_Stop+0xd8>)
 800b5b0:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800b5b2:	4b1c      	ldr	r3, [pc, #112]	; (800b624 <UTIL_TIMER_Stop+0xd8>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f000 f92c 	bl	800b814 <TimerSetTimeout>
 800b5bc:	e023      	b.n	800b606 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800b5be:	4b1a      	ldr	r3, [pc, #104]	; (800b628 <UTIL_TIMER_Stop+0xdc>)
 800b5c0:	68db      	ldr	r3, [r3, #12]
 800b5c2:	4798      	blx	r3
            TimerListHead = NULL;
 800b5c4:	4b17      	ldr	r3, [pc, #92]	; (800b624 <UTIL_TIMER_Stop+0xd8>)
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	601a      	str	r2, [r3, #0]
 800b5ca:	e01c      	b.n	800b606 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800b5cc:	697a      	ldr	r2, [r7, #20]
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d110      	bne.n	800b5f6 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	695b      	ldr	r3, [r3, #20]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d006      	beq.n	800b5ea <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	695b      	ldr	r3, [r3, #20]
 800b5e0:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800b5e2:	69bb      	ldr	r3, [r7, #24]
 800b5e4:	697a      	ldr	r2, [r7, #20]
 800b5e6:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800b5e8:	e00d      	b.n	800b606 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800b5ee:	69bb      	ldr	r3, [r7, #24]
 800b5f0:	697a      	ldr	r2, [r7, #20]
 800b5f2:	615a      	str	r2, [r3, #20]
            break;
 800b5f4:	e007      	b.n	800b606 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	695b      	ldr	r3, [r3, #20]
 800b5fe:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d1e2      	bne.n	800b5cc <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800b606:	2300      	movs	r3, #0
 800b608:	77fb      	strb	r3, [r7, #31]
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	f383 8810 	msr	PRIMASK, r3
}
 800b614:	e001      	b.n	800b61a <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800b616:	2301      	movs	r3, #1
 800b618:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800b61a:	7ffb      	ldrb	r3, [r7, #31]
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3720      	adds	r7, #32
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}
 800b624:	2000046c 	.word	0x2000046c
 800b628:	0800c108 	.word	0x0800c108

0800b62c <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b084      	sub	sp, #16
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b636:	2300      	movs	r3, #0
 800b638:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d102      	bne.n	800b646 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800b640:	2301      	movs	r3, #1
 800b642:	73fb      	strb	r3, [r7, #15]
 800b644:	e014      	b.n	800b670 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800b646:	4b0d      	ldr	r3, [pc, #52]	; (800b67c <UTIL_TIMER_SetPeriod+0x50>)
 800b648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b64a:	6838      	ldr	r0, [r7, #0]
 800b64c:	4798      	blx	r3
 800b64e:	4602      	mov	r2, r0
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f000 f8c1 	bl	800b7dc <TimerExists>
 800b65a:	4603      	mov	r3, r0
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d007      	beq.n	800b670 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f7ff ff73 	bl	800b54c <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f7ff ff02 	bl	800b470 <UTIL_TIMER_Start>
 800b66c:	4603      	mov	r3, r0
 800b66e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800b670:	7bfb      	ldrb	r3, [r7, #15]
}
 800b672:	4618      	mov	r0, r3
 800b674:	3710      	adds	r7, #16
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	0800c108 	.word	0x0800c108

0800b680 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 800b680:	b590      	push	{r4, r7, lr}
 800b682:	b089      	sub	sp, #36	; 0x24
 800b684:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b686:	f3ef 8310 	mrs	r3, PRIMASK
 800b68a:	60bb      	str	r3, [r7, #8]
  return(result);
 800b68c:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b68e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800b690:	b672      	cpsid	i
}
 800b692:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 800b694:	4b38      	ldr	r3, [pc, #224]	; (800b778 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800b696:	695b      	ldr	r3, [r3, #20]
 800b698:	4798      	blx	r3
 800b69a:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800b69c:	4b36      	ldr	r3, [pc, #216]	; (800b778 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800b69e:	691b      	ldr	r3, [r3, #16]
 800b6a0:	4798      	blx	r3
 800b6a2:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 800b6a4:	693a      	ldr	r2, [r7, #16]
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	1ad3      	subs	r3, r2, r3
 800b6aa:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 800b6ac:	4b33      	ldr	r3, [pc, #204]	; (800b77c <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d037      	beq.n	800b724 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 800b6b4:	4b31      	ldr	r3, [pc, #196]	; (800b77c <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 800b6ba:	69fb      	ldr	r3, [r7, #28]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	68fa      	ldr	r2, [r7, #12]
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	d206      	bcs.n	800b6d2 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 800b6c4:	69fb      	ldr	r3, [r7, #28]
 800b6c6:	681a      	ldr	r2, [r3, #0]
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	1ad2      	subs	r2, r2, r3
 800b6cc:	69fb      	ldr	r3, [r7, #28]
 800b6ce:	601a      	str	r2, [r3, #0]
 800b6d0:	e002      	b.n	800b6d8 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 800b6d2:	69fb      	ldr	r3, [r7, #28]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 800b6d8:	69fb      	ldr	r3, [r7, #28]
 800b6da:	695b      	ldr	r3, [r3, #20]
 800b6dc:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 800b6de:	69fb      	ldr	r3, [r7, #28]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d1ea      	bne.n	800b6ba <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800b6e4:	e01e      	b.n	800b724 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 800b6e6:	4b25      	ldr	r3, [pc, #148]	; (800b77c <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 800b6ec:	4b23      	ldr	r3, [pc, #140]	; (800b77c <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	695b      	ldr	r3, [r3, #20]
 800b6f2:	4a22      	ldr	r2, [pc, #136]	; (800b77c <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b6f4:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 800b6f6:	69fb      	ldr	r3, [r7, #28]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 800b6fc:	69fb      	ldr	r3, [r7, #28]
 800b6fe:	2200      	movs	r2, #0
 800b700:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 800b702:	69fb      	ldr	r3, [r7, #28]
 800b704:	68db      	ldr	r3, [r3, #12]
 800b706:	69fa      	ldr	r2, [r7, #28]
 800b708:	6912      	ldr	r2, [r2, #16]
 800b70a:	4610      	mov	r0, r2
 800b70c:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800b70e:	69fb      	ldr	r3, [r7, #28]
 800b710:	7adb      	ldrb	r3, [r3, #11]
 800b712:	2b01      	cmp	r3, #1
 800b714:	d106      	bne.n	800b724 <UTIL_TIMER_IRQ_Handler+0xa4>
 800b716:	69fb      	ldr	r3, [r7, #28]
 800b718:	7a9b      	ldrb	r3, [r3, #10]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d102      	bne.n	800b724 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 800b71e:	69f8      	ldr	r0, [r7, #28]
 800b720:	f7ff fea6 	bl	800b470 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800b724:	4b15      	ldr	r3, [pc, #84]	; (800b77c <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d00d      	beq.n	800b748 <UTIL_TIMER_IRQ_Handler+0xc8>
 800b72c:	4b13      	ldr	r3, [pc, #76]	; (800b77c <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d0d7      	beq.n	800b6e6 <UTIL_TIMER_IRQ_Handler+0x66>
 800b736:	4b11      	ldr	r3, [pc, #68]	; (800b77c <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	681c      	ldr	r4, [r3, #0]
 800b73c:	4b0e      	ldr	r3, [pc, #56]	; (800b778 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800b73e:	699b      	ldr	r3, [r3, #24]
 800b740:	4798      	blx	r3
 800b742:	4603      	mov	r3, r0
 800b744:	429c      	cmp	r4, r3
 800b746:	d3ce      	bcc.n	800b6e6 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800b748:	4b0c      	ldr	r3, [pc, #48]	; (800b77c <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d009      	beq.n	800b764 <UTIL_TIMER_IRQ_Handler+0xe4>
 800b750:	4b0a      	ldr	r3, [pc, #40]	; (800b77c <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	7a1b      	ldrb	r3, [r3, #8]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d104      	bne.n	800b764 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 800b75a:	4b08      	ldr	r3, [pc, #32]	; (800b77c <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	4618      	mov	r0, r3
 800b760:	f000 f858 	bl	800b814 <TimerSetTimeout>
 800b764:	69bb      	ldr	r3, [r7, #24]
 800b766:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f383 8810 	msr	PRIMASK, r3
}
 800b76e:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 800b770:	bf00      	nop
 800b772:	3724      	adds	r7, #36	; 0x24
 800b774:	46bd      	mov	sp, r7
 800b776:	bd90      	pop	{r4, r7, pc}
 800b778:	0800c108 	.word	0x0800c108
 800b77c:	2000046c 	.word	0x2000046c

0800b780 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b082      	sub	sp, #8
 800b784:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800b786:	4b06      	ldr	r3, [pc, #24]	; (800b7a0 <UTIL_TIMER_GetCurrentTime+0x20>)
 800b788:	69db      	ldr	r3, [r3, #28]
 800b78a:	4798      	blx	r3
 800b78c:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800b78e:	4b04      	ldr	r3, [pc, #16]	; (800b7a0 <UTIL_TIMER_GetCurrentTime+0x20>)
 800b790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	4798      	blx	r3
 800b796:	4603      	mov	r3, r0
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3708      	adds	r7, #8
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}
 800b7a0:	0800c108 	.word	0x0800c108

0800b7a4 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b084      	sub	sp, #16
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800b7ac:	4b0a      	ldr	r3, [pc, #40]	; (800b7d8 <UTIL_TIMER_GetElapsedTime+0x34>)
 800b7ae:	69db      	ldr	r3, [r3, #28]
 800b7b0:	4798      	blx	r3
 800b7b2:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800b7b4:	4b08      	ldr	r3, [pc, #32]	; (800b7d8 <UTIL_TIMER_GetElapsedTime+0x34>)
 800b7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	4798      	blx	r3
 800b7bc:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800b7be:	4b06      	ldr	r3, [pc, #24]	; (800b7d8 <UTIL_TIMER_GetElapsedTime+0x34>)
 800b7c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7c2:	68f9      	ldr	r1, [r7, #12]
 800b7c4:	68ba      	ldr	r2, [r7, #8]
 800b7c6:	1a8a      	subs	r2, r1, r2
 800b7c8:	4610      	mov	r0, r2
 800b7ca:	4798      	blx	r3
 800b7cc:	4603      	mov	r3, r0
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3710      	adds	r7, #16
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
 800b7d6:	bf00      	nop
 800b7d8:	0800c108 	.word	0x0800c108

0800b7dc <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b085      	sub	sp, #20
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800b7e4:	4b0a      	ldr	r3, [pc, #40]	; (800b810 <TimerExists+0x34>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800b7ea:	e008      	b.n	800b7fe <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800b7ec:	68fa      	ldr	r2, [r7, #12]
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d101      	bne.n	800b7f8 <TimerExists+0x1c>
    {
      return true;
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	e006      	b.n	800b806 <TimerExists+0x2a>
    }
    cur = cur->Next;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	695b      	ldr	r3, [r3, #20]
 800b7fc:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d1f3      	bne.n	800b7ec <TimerExists+0x10>
  }
  return false;
 800b804:	2300      	movs	r3, #0
}
 800b806:	4618      	mov	r0, r3
 800b808:	3714      	adds	r7, #20
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bc80      	pop	{r7}
 800b80e:	4770      	bx	lr
 800b810:	2000046c 	.word	0x2000046c

0800b814 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800b814:	b590      	push	{r4, r7, lr}
 800b816:	b085      	sub	sp, #20
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800b81c:	4b11      	ldr	r3, [pc, #68]	; (800b864 <TimerSetTimeout+0x50>)
 800b81e:	6a1b      	ldr	r3, [r3, #32]
 800b820:	4798      	blx	r3
 800b822:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2201      	movs	r2, #1
 800b828:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681c      	ldr	r4, [r3, #0]
 800b82e:	4b0d      	ldr	r3, [pc, #52]	; (800b864 <TimerSetTimeout+0x50>)
 800b830:	699b      	ldr	r3, [r3, #24]
 800b832:	4798      	blx	r3
 800b834:	4602      	mov	r2, r0
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	4413      	add	r3, r2
 800b83a:	429c      	cmp	r4, r3
 800b83c:	d207      	bcs.n	800b84e <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800b83e:	4b09      	ldr	r3, [pc, #36]	; (800b864 <TimerSetTimeout+0x50>)
 800b840:	699b      	ldr	r3, [r3, #24]
 800b842:	4798      	blx	r3
 800b844:	4602      	mov	r2, r0
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	441a      	add	r2, r3
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800b84e:	4b05      	ldr	r3, [pc, #20]	; (800b864 <TimerSetTimeout+0x50>)
 800b850:	689b      	ldr	r3, [r3, #8]
 800b852:	687a      	ldr	r2, [r7, #4]
 800b854:	6812      	ldr	r2, [r2, #0]
 800b856:	4610      	mov	r0, r2
 800b858:	4798      	blx	r3
}
 800b85a:	bf00      	nop
 800b85c:	3714      	adds	r7, #20
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd90      	pop	{r4, r7, pc}
 800b862:	bf00      	nop
 800b864:	0800c108 	.word	0x0800c108

0800b868 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800b868:	b480      	push	{r7}
 800b86a:	b085      	sub	sp, #20
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800b870:	4b14      	ldr	r3, [pc, #80]	; (800b8c4 <TimerInsertTimer+0x5c>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800b876:	4b13      	ldr	r3, [pc, #76]	; (800b8c4 <TimerInsertTimer+0x5c>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	695b      	ldr	r3, [r3, #20]
 800b87c:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800b87e:	e012      	b.n	800b8a6 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681a      	ldr	r2, [r3, #0]
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	429a      	cmp	r2, r3
 800b88a:	d905      	bls.n	800b898 <TimerInsertTimer+0x30>
    {
        cur = next;
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	695b      	ldr	r3, [r3, #20]
 800b894:	60bb      	str	r3, [r7, #8]
 800b896:	e006      	b.n	800b8a6 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	687a      	ldr	r2, [r7, #4]
 800b89c:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	68ba      	ldr	r2, [r7, #8]
 800b8a2:	615a      	str	r2, [r3, #20]
        return;
 800b8a4:	e009      	b.n	800b8ba <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	695b      	ldr	r3, [r3, #20]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d1e8      	bne.n	800b880 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	687a      	ldr	r2, [r7, #4]
 800b8b2:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	615a      	str	r2, [r3, #20]
}
 800b8ba:	3714      	adds	r7, #20
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bc80      	pop	{r7}
 800b8c0:	4770      	bx	lr
 800b8c2:	bf00      	nop
 800b8c4:	2000046c 	.word	0x2000046c

0800b8c8 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b084      	sub	sp, #16
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800b8d0:	4b0b      	ldr	r3, [pc, #44]	; (800b900 <TimerInsertNewHeadTimer+0x38>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d002      	beq.n	800b8e2 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	2200      	movs	r2, #0
 800b8e0:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	68fa      	ldr	r2, [r7, #12]
 800b8e6:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800b8e8:	4a05      	ldr	r2, [pc, #20]	; (800b900 <TimerInsertNewHeadTimer+0x38>)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800b8ee:	4b04      	ldr	r3, [pc, #16]	; (800b900 <TimerInsertNewHeadTimer+0x38>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7ff ff8e 	bl	800b814 <TimerSetTimeout>
}
 800b8f8:	bf00      	nop
 800b8fa:	3710      	adds	r7, #16
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}
 800b900:	2000046c 	.word	0x2000046c

0800b904 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800b908:	2218      	movs	r2, #24
 800b90a:	2100      	movs	r1, #0
 800b90c:	4807      	ldr	r0, [pc, #28]	; (800b92c <UTIL_ADV_TRACE_Init+0x28>)
 800b90e:	f7ff f908 	bl	800ab22 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800b912:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b916:	2100      	movs	r1, #0
 800b918:	4805      	ldr	r0, [pc, #20]	; (800b930 <UTIL_ADV_TRACE_Init+0x2c>)
 800b91a:	f7ff f902 	bl	800ab22 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800b91e:	4b05      	ldr	r3, [pc, #20]	; (800b934 <UTIL_ADV_TRACE_Init+0x30>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	4805      	ldr	r0, [pc, #20]	; (800b938 <UTIL_ADV_TRACE_Init+0x34>)
 800b924:	4798      	blx	r3
 800b926:	4603      	mov	r3, r0
}
 800b928:	4618      	mov	r0, r3
 800b92a:	bd80      	pop	{r7, pc}
 800b92c:	20000470 	.word	0x20000470
 800b930:	20000488 	.word	0x20000488
 800b934:	0800c148 	.word	0x0800c148
 800b938:	0800bb81 	.word	0x0800bb81

0800b93c <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 800b93c:	b408      	push	{r3}
 800b93e:	b580      	push	{r7, lr}
 800b940:	b08d      	sub	sp, #52	; 0x34
 800b942:	af00      	add	r7, sp, #0
 800b944:	60f8      	str	r0, [r7, #12]
 800b946:	60b9      	str	r1, [r7, #8]
 800b948:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 800b94a:	2300      	movs	r3, #0
 800b94c:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 800b94e:	2300      	movs	r3, #0
 800b950:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800b952:	4b37      	ldr	r3, [pc, #220]	; (800ba30 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800b954:	7a1b      	ldrb	r3, [r3, #8]
 800b956:	461a      	mov	r2, r3
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	4293      	cmp	r3, r2
 800b95c:	d902      	bls.n	800b964 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 800b95e:	f06f 0304 	mvn.w	r3, #4
 800b962:	e05e      	b.n	800ba22 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800b964:	4b32      	ldr	r3, [pc, #200]	; (800ba30 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800b966:	68da      	ldr	r2, [r3, #12]
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	4013      	ands	r3, r2
 800b96c:	68ba      	ldr	r2, [r7, #8]
 800b96e:	429a      	cmp	r2, r3
 800b970:	d002      	beq.n	800b978 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 800b972:	f06f 0305 	mvn.w	r3, #5
 800b976:	e054      	b.n	800ba22 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800b978:	4b2d      	ldr	r3, [pc, #180]	; (800ba30 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800b97a:	685b      	ldr	r3, [r3, #4]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d00a      	beq.n	800b996 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d007      	beq.n	800b996 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800b986:	4b2a      	ldr	r3, [pc, #168]	; (800ba30 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800b988:	685b      	ldr	r3, [r3, #4]
 800b98a:	f107 0116 	add.w	r1, r7, #22
 800b98e:	f107 0218 	add.w	r2, r7, #24
 800b992:	4610      	mov	r0, r2
 800b994:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 800b996:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b99a:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800b99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b99e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b9a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b9a4:	4823      	ldr	r0, [pc, #140]	; (800ba34 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 800b9a6:	f7ff fa5d 	bl	800ae64 <tiny_vsnprintf_like>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 800b9ae:	f000 f9f1 	bl	800bd94 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800b9b2:	8afa      	ldrh	r2, [r7, #22]
 800b9b4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b9b6:	4413      	add	r3, r2
 800b9b8:	b29b      	uxth	r3, r3
 800b9ba:	f107 0214 	add.w	r2, r7, #20
 800b9be:	4611      	mov	r1, r2
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f000 f969 	bl	800bc98 <TRACE_AllocateBufer>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9cc:	d025      	beq.n	800ba1a <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b9d2:	e00e      	b.n	800b9f2 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800b9d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b9d6:	8aba      	ldrh	r2, [r7, #20]
 800b9d8:	3330      	adds	r3, #48	; 0x30
 800b9da:	443b      	add	r3, r7
 800b9dc:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 800b9e0:	4b15      	ldr	r3, [pc, #84]	; (800ba38 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800b9e2:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 800b9e4:	8abb      	ldrh	r3, [r7, #20]
 800b9e6:	3301      	adds	r3, #1
 800b9e8:	b29b      	uxth	r3, r3
 800b9ea:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 800b9ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b9f2:	8afb      	ldrh	r3, [r7, #22]
 800b9f4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d3ec      	bcc.n	800b9d4 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800b9fa:	8abb      	ldrh	r3, [r7, #20]
 800b9fc:	461a      	mov	r2, r3
 800b9fe:	4b0e      	ldr	r3, [pc, #56]	; (800ba38 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800ba00:	18d0      	adds	r0, r2, r3
 800ba02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ba06:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ba0a:	f7ff fa2b 	bl	800ae64 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 800ba0e:	f000 f9df 	bl	800bdd0 <TRACE_UnLock>

    return TRACE_Send();
 800ba12:	f000 f831 	bl	800ba78 <TRACE_Send>
 800ba16:	4603      	mov	r3, r0
 800ba18:	e003      	b.n	800ba22 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 800ba1a:	f000 f9d9 	bl	800bdd0 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 800ba1e:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3734      	adds	r7, #52	; 0x34
 800ba26:	46bd      	mov	sp, r7
 800ba28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ba2c:	b001      	add	sp, #4
 800ba2e:	4770      	bx	lr
 800ba30:	20000470 	.word	0x20000470
 800ba34:	20000688 	.word	0x20000688
 800ba38:	20000488 	.word	0x20000488

0800ba3c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b083      	sub	sp, #12
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 800ba44:	4a03      	ldr	r2, [pc, #12]	; (800ba54 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6053      	str	r3, [r2, #4]
}
 800ba4a:	bf00      	nop
 800ba4c:	370c      	adds	r7, #12
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bc80      	pop	{r7}
 800ba52:	4770      	bx	lr
 800ba54:	20000470 	.word	0x20000470

0800ba58 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b083      	sub	sp, #12
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	4603      	mov	r3, r0
 800ba60:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800ba62:	4a04      	ldr	r2, [pc, #16]	; (800ba74 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 800ba64:	79fb      	ldrb	r3, [r7, #7]
 800ba66:	7213      	strb	r3, [r2, #8]
}
 800ba68:	bf00      	nop
 800ba6a:	370c      	adds	r7, #12
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bc80      	pop	{r7}
 800ba70:	4770      	bx	lr
 800ba72:	bf00      	nop
 800ba74:	20000470 	.word	0x20000470

0800ba78 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b088      	sub	sp, #32
 800ba7c:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 800ba82:	2300      	movs	r3, #0
 800ba84:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba86:	f3ef 8310 	mrs	r3, PRIMASK
 800ba8a:	613b      	str	r3, [r7, #16]
  return(result);
 800ba8c:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800ba8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba90:	b672      	cpsid	i
}
 800ba92:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 800ba94:	f000 f9ba 	bl	800be0c <TRACE_IsLocked>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d15d      	bne.n	800bb5a <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 800ba9e:	f000 f979 	bl	800bd94 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800baa2:	4b34      	ldr	r3, [pc, #208]	; (800bb74 <TRACE_Send+0xfc>)
 800baa4:	8a1a      	ldrh	r2, [r3, #16]
 800baa6:	4b33      	ldr	r3, [pc, #204]	; (800bb74 <TRACE_Send+0xfc>)
 800baa8:	8a5b      	ldrh	r3, [r3, #18]
 800baaa:	429a      	cmp	r2, r3
 800baac:	d04d      	beq.n	800bb4a <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800baae:	4b31      	ldr	r3, [pc, #196]	; (800bb74 <TRACE_Send+0xfc>)
 800bab0:	789b      	ldrb	r3, [r3, #2]
 800bab2:	2b01      	cmp	r3, #1
 800bab4:	d117      	bne.n	800bae6 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800bab6:	4b2f      	ldr	r3, [pc, #188]	; (800bb74 <TRACE_Send+0xfc>)
 800bab8:	881a      	ldrh	r2, [r3, #0]
 800baba:	4b2e      	ldr	r3, [pc, #184]	; (800bb74 <TRACE_Send+0xfc>)
 800babc:	8a1b      	ldrh	r3, [r3, #16]
 800babe:	1ad3      	subs	r3, r2, r3
 800bac0:	b29a      	uxth	r2, r3
 800bac2:	4b2c      	ldr	r3, [pc, #176]	; (800bb74 <TRACE_Send+0xfc>)
 800bac4:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800bac6:	4b2b      	ldr	r3, [pc, #172]	; (800bb74 <TRACE_Send+0xfc>)
 800bac8:	2202      	movs	r2, #2
 800baca:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800bacc:	4b29      	ldr	r3, [pc, #164]	; (800bb74 <TRACE_Send+0xfc>)
 800bace:	2200      	movs	r2, #0
 800bad0:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800bad2:	4b28      	ldr	r3, [pc, #160]	; (800bb74 <TRACE_Send+0xfc>)
 800bad4:	8a9b      	ldrh	r3, [r3, #20]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d105      	bne.n	800bae6 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800bada:	4b26      	ldr	r3, [pc, #152]	; (800bb74 <TRACE_Send+0xfc>)
 800badc:	2200      	movs	r2, #0
 800bade:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800bae0:	4b24      	ldr	r3, [pc, #144]	; (800bb74 <TRACE_Send+0xfc>)
 800bae2:	2200      	movs	r2, #0
 800bae4:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800bae6:	4b23      	ldr	r3, [pc, #140]	; (800bb74 <TRACE_Send+0xfc>)
 800bae8:	789b      	ldrb	r3, [r3, #2]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d115      	bne.n	800bb1a <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800baee:	4b21      	ldr	r3, [pc, #132]	; (800bb74 <TRACE_Send+0xfc>)
 800baf0:	8a5a      	ldrh	r2, [r3, #18]
 800baf2:	4b20      	ldr	r3, [pc, #128]	; (800bb74 <TRACE_Send+0xfc>)
 800baf4:	8a1b      	ldrh	r3, [r3, #16]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d908      	bls.n	800bb0c <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800bafa:	4b1e      	ldr	r3, [pc, #120]	; (800bb74 <TRACE_Send+0xfc>)
 800bafc:	8a5a      	ldrh	r2, [r3, #18]
 800bafe:	4b1d      	ldr	r3, [pc, #116]	; (800bb74 <TRACE_Send+0xfc>)
 800bb00:	8a1b      	ldrh	r3, [r3, #16]
 800bb02:	1ad3      	subs	r3, r2, r3
 800bb04:	b29a      	uxth	r2, r3
 800bb06:	4b1b      	ldr	r3, [pc, #108]	; (800bb74 <TRACE_Send+0xfc>)
 800bb08:	829a      	strh	r2, [r3, #20]
 800bb0a:	e006      	b.n	800bb1a <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800bb0c:	4b19      	ldr	r3, [pc, #100]	; (800bb74 <TRACE_Send+0xfc>)
 800bb0e:	8a1b      	ldrh	r3, [r3, #16]
 800bb10:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bb14:	b29a      	uxth	r2, r3
 800bb16:	4b17      	ldr	r3, [pc, #92]	; (800bb74 <TRACE_Send+0xfc>)
 800bb18:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800bb1a:	4b16      	ldr	r3, [pc, #88]	; (800bb74 <TRACE_Send+0xfc>)
 800bb1c:	8a1b      	ldrh	r3, [r3, #16]
 800bb1e:	461a      	mov	r2, r3
 800bb20:	4b15      	ldr	r3, [pc, #84]	; (800bb78 <TRACE_Send+0x100>)
 800bb22:	4413      	add	r3, r2
 800bb24:	61bb      	str	r3, [r7, #24]
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	f383 8810 	msr	PRIMASK, r3
}
 800bb30:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 800bb32:	f7f4 ffb5 	bl	8000aa0 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800bb36:	4b11      	ldr	r3, [pc, #68]	; (800bb7c <TRACE_Send+0x104>)
 800bb38:	68db      	ldr	r3, [r3, #12]
 800bb3a:	4a0e      	ldr	r2, [pc, #56]	; (800bb74 <TRACE_Send+0xfc>)
 800bb3c:	8a92      	ldrh	r2, [r2, #20]
 800bb3e:	4611      	mov	r1, r2
 800bb40:	69b8      	ldr	r0, [r7, #24]
 800bb42:	4798      	blx	r3
 800bb44:	4603      	mov	r3, r0
 800bb46:	77fb      	strb	r3, [r7, #31]
 800bb48:	e00d      	b.n	800bb66 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 800bb4a:	f000 f941 	bl	800bdd0 <TRACE_UnLock>
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	f383 8810 	msr	PRIMASK, r3
}
 800bb58:	e005      	b.n	800bb66 <TRACE_Send+0xee>
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f383 8810 	msr	PRIMASK, r3
}
 800bb64:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 800bb66:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3720      	adds	r7, #32
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}
 800bb72:	bf00      	nop
 800bb74:	20000470 	.word	0x20000470
 800bb78:	20000488 	.word	0x20000488
 800bb7c:	0800c148 	.word	0x0800c148

0800bb80 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b088      	sub	sp, #32
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb8c:	f3ef 8310 	mrs	r3, PRIMASK
 800bb90:	617b      	str	r3, [r7, #20]
  return(result);
 800bb92:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800bb94:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800bb96:	b672      	cpsid	i
}
 800bb98:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800bb9a:	4b3c      	ldr	r3, [pc, #240]	; (800bc8c <TRACE_TxCpltCallback+0x10c>)
 800bb9c:	789b      	ldrb	r3, [r3, #2]
 800bb9e:	2b02      	cmp	r3, #2
 800bba0:	d106      	bne.n	800bbb0 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800bba2:	4b3a      	ldr	r3, [pc, #232]	; (800bc8c <TRACE_TxCpltCallback+0x10c>)
 800bba4:	2200      	movs	r2, #0
 800bba6:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 800bba8:	4b38      	ldr	r3, [pc, #224]	; (800bc8c <TRACE_TxCpltCallback+0x10c>)
 800bbaa:	2200      	movs	r2, #0
 800bbac:	821a      	strh	r2, [r3, #16]
 800bbae:	e00a      	b.n	800bbc6 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800bbb0:	4b36      	ldr	r3, [pc, #216]	; (800bc8c <TRACE_TxCpltCallback+0x10c>)
 800bbb2:	8a1a      	ldrh	r2, [r3, #16]
 800bbb4:	4b35      	ldr	r3, [pc, #212]	; (800bc8c <TRACE_TxCpltCallback+0x10c>)
 800bbb6:	8a9b      	ldrh	r3, [r3, #20]
 800bbb8:	4413      	add	r3, r2
 800bbba:	b29b      	uxth	r3, r3
 800bbbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbc0:	b29a      	uxth	r2, r3
 800bbc2:	4b32      	ldr	r3, [pc, #200]	; (800bc8c <TRACE_TxCpltCallback+0x10c>)
 800bbc4:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800bbc6:	4b31      	ldr	r3, [pc, #196]	; (800bc8c <TRACE_TxCpltCallback+0x10c>)
 800bbc8:	8a1a      	ldrh	r2, [r3, #16]
 800bbca:	4b30      	ldr	r3, [pc, #192]	; (800bc8c <TRACE_TxCpltCallback+0x10c>)
 800bbcc:	8a5b      	ldrh	r3, [r3, #18]
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	d04d      	beq.n	800bc6e <TRACE_TxCpltCallback+0xee>
 800bbd2:	4b2e      	ldr	r3, [pc, #184]	; (800bc8c <TRACE_TxCpltCallback+0x10c>)
 800bbd4:	8adb      	ldrh	r3, [r3, #22]
 800bbd6:	2b01      	cmp	r3, #1
 800bbd8:	d149      	bne.n	800bc6e <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800bbda:	4b2c      	ldr	r3, [pc, #176]	; (800bc8c <TRACE_TxCpltCallback+0x10c>)
 800bbdc:	789b      	ldrb	r3, [r3, #2]
 800bbde:	2b01      	cmp	r3, #1
 800bbe0:	d117      	bne.n	800bc12 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800bbe2:	4b2a      	ldr	r3, [pc, #168]	; (800bc8c <TRACE_TxCpltCallback+0x10c>)
 800bbe4:	881a      	ldrh	r2, [r3, #0]
 800bbe6:	4b29      	ldr	r3, [pc, #164]	; (800bc8c <TRACE_TxCpltCallback+0x10c>)
 800bbe8:	8a1b      	ldrh	r3, [r3, #16]
 800bbea:	1ad3      	subs	r3, r2, r3
 800bbec:	b29a      	uxth	r2, r3
 800bbee:	4b27      	ldr	r3, [pc, #156]	; (800bc8c <TRACE_TxCpltCallback+0x10c>)
 800bbf0:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800bbf2:	4b26      	ldr	r3, [pc, #152]	; (800bc8c <TRACE_TxCpltCallback+0x10c>)
 800bbf4:	2202      	movs	r2, #2
 800bbf6:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800bbf8:	4b24      	ldr	r3, [pc, #144]	; (800bc8c <TRACE_TxCpltCallback+0x10c>)
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800bbfe:	4b23      	ldr	r3, [pc, #140]	; (800bc8c <TRACE_TxCpltCallback+0x10c>)
 800bc00:	8a9b      	ldrh	r3, [r3, #20]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d105      	bne.n	800bc12 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800bc06:	4b21      	ldr	r3, [pc, #132]	; (800bc8c <TRACE_TxCpltCallback+0x10c>)
 800bc08:	2200      	movs	r2, #0
 800bc0a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800bc0c:	4b1f      	ldr	r3, [pc, #124]	; (800bc8c <TRACE_TxCpltCallback+0x10c>)
 800bc0e:	2200      	movs	r2, #0
 800bc10:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800bc12:	4b1e      	ldr	r3, [pc, #120]	; (800bc8c <TRACE_TxCpltCallback+0x10c>)
 800bc14:	789b      	ldrb	r3, [r3, #2]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d115      	bne.n	800bc46 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800bc1a:	4b1c      	ldr	r3, [pc, #112]	; (800bc8c <TRACE_TxCpltCallback+0x10c>)
 800bc1c:	8a5a      	ldrh	r2, [r3, #18]
 800bc1e:	4b1b      	ldr	r3, [pc, #108]	; (800bc8c <TRACE_TxCpltCallback+0x10c>)
 800bc20:	8a1b      	ldrh	r3, [r3, #16]
 800bc22:	429a      	cmp	r2, r3
 800bc24:	d908      	bls.n	800bc38 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800bc26:	4b19      	ldr	r3, [pc, #100]	; (800bc8c <TRACE_TxCpltCallback+0x10c>)
 800bc28:	8a5a      	ldrh	r2, [r3, #18]
 800bc2a:	4b18      	ldr	r3, [pc, #96]	; (800bc8c <TRACE_TxCpltCallback+0x10c>)
 800bc2c:	8a1b      	ldrh	r3, [r3, #16]
 800bc2e:	1ad3      	subs	r3, r2, r3
 800bc30:	b29a      	uxth	r2, r3
 800bc32:	4b16      	ldr	r3, [pc, #88]	; (800bc8c <TRACE_TxCpltCallback+0x10c>)
 800bc34:	829a      	strh	r2, [r3, #20]
 800bc36:	e006      	b.n	800bc46 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800bc38:	4b14      	ldr	r3, [pc, #80]	; (800bc8c <TRACE_TxCpltCallback+0x10c>)
 800bc3a:	8a1b      	ldrh	r3, [r3, #16]
 800bc3c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bc40:	b29a      	uxth	r2, r3
 800bc42:	4b12      	ldr	r3, [pc, #72]	; (800bc8c <TRACE_TxCpltCallback+0x10c>)
 800bc44:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800bc46:	4b11      	ldr	r3, [pc, #68]	; (800bc8c <TRACE_TxCpltCallback+0x10c>)
 800bc48:	8a1b      	ldrh	r3, [r3, #16]
 800bc4a:	461a      	mov	r2, r3
 800bc4c:	4b10      	ldr	r3, [pc, #64]	; (800bc90 <TRACE_TxCpltCallback+0x110>)
 800bc4e:	4413      	add	r3, r2
 800bc50:	61fb      	str	r3, [r7, #28]
 800bc52:	69bb      	ldr	r3, [r7, #24]
 800bc54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	f383 8810 	msr	PRIMASK, r3
}
 800bc5c:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800bc5e:	4b0d      	ldr	r3, [pc, #52]	; (800bc94 <TRACE_TxCpltCallback+0x114>)
 800bc60:	68db      	ldr	r3, [r3, #12]
 800bc62:	4a0a      	ldr	r2, [pc, #40]	; (800bc8c <TRACE_TxCpltCallback+0x10c>)
 800bc64:	8a92      	ldrh	r2, [r2, #20]
 800bc66:	4611      	mov	r1, r2
 800bc68:	69f8      	ldr	r0, [r7, #28]
 800bc6a:	4798      	blx	r3
 800bc6c:	e00a      	b.n	800bc84 <TRACE_TxCpltCallback+0x104>
 800bc6e:	69bb      	ldr	r3, [r7, #24]
 800bc70:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	f383 8810 	msr	PRIMASK, r3
}
 800bc78:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 800bc7a:	f7f4 ff19 	bl	8000ab0 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 800bc7e:	f000 f8a7 	bl	800bdd0 <TRACE_UnLock>
  }
}
 800bc82:	bf00      	nop
 800bc84:	bf00      	nop
 800bc86:	3720      	adds	r7, #32
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}
 800bc8c:	20000470 	.word	0x20000470
 800bc90:	20000488 	.word	0x20000488
 800bc94:	0800c148 	.word	0x0800c148

0800bc98 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b087      	sub	sp, #28
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	4603      	mov	r3, r0
 800bca0:	6039      	str	r1, [r7, #0]
 800bca2:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 800bca4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bca8:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bcaa:	f3ef 8310 	mrs	r3, PRIMASK
 800bcae:	60fb      	str	r3, [r7, #12]
  return(result);
 800bcb0:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800bcb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800bcb4:	b672      	cpsid	i
}
 800bcb6:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800bcb8:	4b35      	ldr	r3, [pc, #212]	; (800bd90 <TRACE_AllocateBufer+0xf8>)
 800bcba:	8a5a      	ldrh	r2, [r3, #18]
 800bcbc:	4b34      	ldr	r3, [pc, #208]	; (800bd90 <TRACE_AllocateBufer+0xf8>)
 800bcbe:	8a1b      	ldrh	r3, [r3, #16]
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d11b      	bne.n	800bcfc <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800bcc4:	4b32      	ldr	r3, [pc, #200]	; (800bd90 <TRACE_AllocateBufer+0xf8>)
 800bcc6:	8a5b      	ldrh	r3, [r3, #18]
 800bcc8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bccc:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800bcce:	88fa      	ldrh	r2, [r7, #6]
 800bcd0:	8afb      	ldrh	r3, [r7, #22]
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	d33a      	bcc.n	800bd4c <TRACE_AllocateBufer+0xb4>
 800bcd6:	4b2e      	ldr	r3, [pc, #184]	; (800bd90 <TRACE_AllocateBufer+0xf8>)
 800bcd8:	8a1b      	ldrh	r3, [r3, #16]
 800bcda:	88fa      	ldrh	r2, [r7, #6]
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d235      	bcs.n	800bd4c <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800bce0:	4b2b      	ldr	r3, [pc, #172]	; (800bd90 <TRACE_AllocateBufer+0xf8>)
 800bce2:	2201      	movs	r2, #1
 800bce4:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800bce6:	4b2a      	ldr	r3, [pc, #168]	; (800bd90 <TRACE_AllocateBufer+0xf8>)
 800bce8:	8a5a      	ldrh	r2, [r3, #18]
 800bcea:	4b29      	ldr	r3, [pc, #164]	; (800bd90 <TRACE_AllocateBufer+0xf8>)
 800bcec:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800bcee:	4b28      	ldr	r3, [pc, #160]	; (800bd90 <TRACE_AllocateBufer+0xf8>)
 800bcf0:	8a1b      	ldrh	r3, [r3, #16]
 800bcf2:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 800bcf4:	4b26      	ldr	r3, [pc, #152]	; (800bd90 <TRACE_AllocateBufer+0xf8>)
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	825a      	strh	r2, [r3, #18]
 800bcfa:	e027      	b.n	800bd4c <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800bcfc:	4b24      	ldr	r3, [pc, #144]	; (800bd90 <TRACE_AllocateBufer+0xf8>)
 800bcfe:	8a5a      	ldrh	r2, [r3, #18]
 800bd00:	4b23      	ldr	r3, [pc, #140]	; (800bd90 <TRACE_AllocateBufer+0xf8>)
 800bd02:	8a1b      	ldrh	r3, [r3, #16]
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d91b      	bls.n	800bd40 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800bd08:	4b21      	ldr	r3, [pc, #132]	; (800bd90 <TRACE_AllocateBufer+0xf8>)
 800bd0a:	8a5b      	ldrh	r3, [r3, #18]
 800bd0c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bd10:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800bd12:	88fa      	ldrh	r2, [r7, #6]
 800bd14:	8afb      	ldrh	r3, [r7, #22]
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d318      	bcc.n	800bd4c <TRACE_AllocateBufer+0xb4>
 800bd1a:	4b1d      	ldr	r3, [pc, #116]	; (800bd90 <TRACE_AllocateBufer+0xf8>)
 800bd1c:	8a1b      	ldrh	r3, [r3, #16]
 800bd1e:	88fa      	ldrh	r2, [r7, #6]
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d213      	bcs.n	800bd4c <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800bd24:	4b1a      	ldr	r3, [pc, #104]	; (800bd90 <TRACE_AllocateBufer+0xf8>)
 800bd26:	2201      	movs	r2, #1
 800bd28:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800bd2a:	4b19      	ldr	r3, [pc, #100]	; (800bd90 <TRACE_AllocateBufer+0xf8>)
 800bd2c:	8a5a      	ldrh	r2, [r3, #18]
 800bd2e:	4b18      	ldr	r3, [pc, #96]	; (800bd90 <TRACE_AllocateBufer+0xf8>)
 800bd30:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800bd32:	4b17      	ldr	r3, [pc, #92]	; (800bd90 <TRACE_AllocateBufer+0xf8>)
 800bd34:	8a1b      	ldrh	r3, [r3, #16]
 800bd36:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800bd38:	4b15      	ldr	r3, [pc, #84]	; (800bd90 <TRACE_AllocateBufer+0xf8>)
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	825a      	strh	r2, [r3, #18]
 800bd3e:	e005      	b.n	800bd4c <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800bd40:	4b13      	ldr	r3, [pc, #76]	; (800bd90 <TRACE_AllocateBufer+0xf8>)
 800bd42:	8a1a      	ldrh	r2, [r3, #16]
 800bd44:	4b12      	ldr	r3, [pc, #72]	; (800bd90 <TRACE_AllocateBufer+0xf8>)
 800bd46:	8a5b      	ldrh	r3, [r3, #18]
 800bd48:	1ad3      	subs	r3, r2, r3
 800bd4a:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 800bd4c:	8afa      	ldrh	r2, [r7, #22]
 800bd4e:	88fb      	ldrh	r3, [r7, #6]
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d90f      	bls.n	800bd74 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800bd54:	4b0e      	ldr	r3, [pc, #56]	; (800bd90 <TRACE_AllocateBufer+0xf8>)
 800bd56:	8a5a      	ldrh	r2, [r3, #18]
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800bd5c:	4b0c      	ldr	r3, [pc, #48]	; (800bd90 <TRACE_AllocateBufer+0xf8>)
 800bd5e:	8a5a      	ldrh	r2, [r3, #18]
 800bd60:	88fb      	ldrh	r3, [r7, #6]
 800bd62:	4413      	add	r3, r2
 800bd64:	b29b      	uxth	r3, r3
 800bd66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd6a:	b29a      	uxth	r2, r3
 800bd6c:	4b08      	ldr	r3, [pc, #32]	; (800bd90 <TRACE_AllocateBufer+0xf8>)
 800bd6e:	825a      	strh	r2, [r3, #18]
    ret = 0;
 800bd70:	2300      	movs	r3, #0
 800bd72:	82bb      	strh	r3, [r7, #20]
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	f383 8810 	msr	PRIMASK, r3
}
 800bd7e:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 800bd80:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	371c      	adds	r7, #28
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bc80      	pop	{r7}
 800bd8c:	4770      	bx	lr
 800bd8e:	bf00      	nop
 800bd90:	20000470 	.word	0x20000470

0800bd94 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 800bd94:	b480      	push	{r7}
 800bd96:	b085      	sub	sp, #20
 800bd98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd9a:	f3ef 8310 	mrs	r3, PRIMASK
 800bd9e:	607b      	str	r3, [r7, #4]
  return(result);
 800bda0:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800bda2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800bda4:	b672      	cpsid	i
}
 800bda6:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 800bda8:	4b08      	ldr	r3, [pc, #32]	; (800bdcc <TRACE_Lock+0x38>)
 800bdaa:	8adb      	ldrh	r3, [r3, #22]
 800bdac:	3301      	adds	r3, #1
 800bdae:	b29a      	uxth	r2, r3
 800bdb0:	4b06      	ldr	r3, [pc, #24]	; (800bdcc <TRACE_Lock+0x38>)
 800bdb2:	82da      	strh	r2, [r3, #22]
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	f383 8810 	msr	PRIMASK, r3
}
 800bdbe:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800bdc0:	bf00      	nop
 800bdc2:	3714      	adds	r7, #20
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bc80      	pop	{r7}
 800bdc8:	4770      	bx	lr
 800bdca:	bf00      	nop
 800bdcc:	20000470 	.word	0x20000470

0800bdd0 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b085      	sub	sp, #20
 800bdd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bdd6:	f3ef 8310 	mrs	r3, PRIMASK
 800bdda:	607b      	str	r3, [r7, #4]
  return(result);
 800bddc:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800bdde:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800bde0:	b672      	cpsid	i
}
 800bde2:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 800bde4:	4b08      	ldr	r3, [pc, #32]	; (800be08 <TRACE_UnLock+0x38>)
 800bde6:	8adb      	ldrh	r3, [r3, #22]
 800bde8:	3b01      	subs	r3, #1
 800bdea:	b29a      	uxth	r2, r3
 800bdec:	4b06      	ldr	r3, [pc, #24]	; (800be08 <TRACE_UnLock+0x38>)
 800bdee:	82da      	strh	r2, [r3, #22]
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	f383 8810 	msr	PRIMASK, r3
}
 800bdfa:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800bdfc:	bf00      	nop
 800bdfe:	3714      	adds	r7, #20
 800be00:	46bd      	mov	sp, r7
 800be02:	bc80      	pop	{r7}
 800be04:	4770      	bx	lr
 800be06:	bf00      	nop
 800be08:	20000470 	.word	0x20000470

0800be0c <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 800be0c:	b480      	push	{r7}
 800be0e:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800be10:	4b05      	ldr	r3, [pc, #20]	; (800be28 <TRACE_IsLocked+0x1c>)
 800be12:	8adb      	ldrh	r3, [r3, #22]
 800be14:	2b00      	cmp	r3, #0
 800be16:	bf14      	ite	ne
 800be18:	2301      	movne	r3, #1
 800be1a:	2300      	moveq	r3, #0
 800be1c:	b2db      	uxtb	r3, r3
}
 800be1e:	4618      	mov	r0, r3
 800be20:	46bd      	mov	sp, r7
 800be22:	bc80      	pop	{r7}
 800be24:	4770      	bx	lr
 800be26:	bf00      	nop
 800be28:	20000470 	.word	0x20000470

0800be2c <memset>:
 800be2c:	4402      	add	r2, r0
 800be2e:	4603      	mov	r3, r0
 800be30:	4293      	cmp	r3, r2
 800be32:	d100      	bne.n	800be36 <memset+0xa>
 800be34:	4770      	bx	lr
 800be36:	f803 1b01 	strb.w	r1, [r3], #1
 800be3a:	e7f9      	b.n	800be30 <memset+0x4>

0800be3c <__libc_init_array>:
 800be3c:	b570      	push	{r4, r5, r6, lr}
 800be3e:	4d0d      	ldr	r5, [pc, #52]	; (800be74 <__libc_init_array+0x38>)
 800be40:	4c0d      	ldr	r4, [pc, #52]	; (800be78 <__libc_init_array+0x3c>)
 800be42:	1b64      	subs	r4, r4, r5
 800be44:	10a4      	asrs	r4, r4, #2
 800be46:	2600      	movs	r6, #0
 800be48:	42a6      	cmp	r6, r4
 800be4a:	d109      	bne.n	800be60 <__libc_init_array+0x24>
 800be4c:	4d0b      	ldr	r5, [pc, #44]	; (800be7c <__libc_init_array+0x40>)
 800be4e:	4c0c      	ldr	r4, [pc, #48]	; (800be80 <__libc_init_array+0x44>)
 800be50:	f000 f826 	bl	800bea0 <_init>
 800be54:	1b64      	subs	r4, r4, r5
 800be56:	10a4      	asrs	r4, r4, #2
 800be58:	2600      	movs	r6, #0
 800be5a:	42a6      	cmp	r6, r4
 800be5c:	d105      	bne.n	800be6a <__libc_init_array+0x2e>
 800be5e:	bd70      	pop	{r4, r5, r6, pc}
 800be60:	f855 3b04 	ldr.w	r3, [r5], #4
 800be64:	4798      	blx	r3
 800be66:	3601      	adds	r6, #1
 800be68:	e7ee      	b.n	800be48 <__libc_init_array+0xc>
 800be6a:	f855 3b04 	ldr.w	r3, [r5], #4
 800be6e:	4798      	blx	r3
 800be70:	3601      	adds	r6, #1
 800be72:	e7f2      	b.n	800be5a <__libc_init_array+0x1e>
 800be74:	0800c2d8 	.word	0x0800c2d8
 800be78:	0800c2d8 	.word	0x0800c2d8
 800be7c:	0800c2d8 	.word	0x0800c2d8
 800be80:	0800c2dc 	.word	0x0800c2dc

0800be84 <memcpy>:
 800be84:	440a      	add	r2, r1
 800be86:	4291      	cmp	r1, r2
 800be88:	f100 33ff 	add.w	r3, r0, #4294967295
 800be8c:	d100      	bne.n	800be90 <memcpy+0xc>
 800be8e:	4770      	bx	lr
 800be90:	b510      	push	{r4, lr}
 800be92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be96:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be9a:	4291      	cmp	r1, r2
 800be9c:	d1f9      	bne.n	800be92 <memcpy+0xe>
 800be9e:	bd10      	pop	{r4, pc}

0800bea0 <_init>:
 800bea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bea2:	bf00      	nop
 800bea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bea6:	bc08      	pop	{r3}
 800bea8:	469e      	mov	lr, r3
 800beaa:	4770      	bx	lr

0800beac <_fini>:
 800beac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beae:	bf00      	nop
 800beb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800beb2:	bc08      	pop	{r3}
 800beb4:	469e      	mov	lr, r3
 800beb6:	4770      	bx	lr
