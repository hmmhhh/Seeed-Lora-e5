
Seeed-LoRa-E5_PingPong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9c4  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  0800bafc  0800bafc  0001bafc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be84  0800be84  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  0800be84  0800be84  0001be84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be8c  0800be8c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be8c  0800be8c  0001be8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be90  0800be90  0001be90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800be94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000660  2000001c  0800beb0  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000067c  0800beb0  0002067c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000212a8  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000059d2  00000000  00000000  000412ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ec0  00000000  00000000  00046cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c70  00000000  00000000  00048b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008e3b  00000000  00000000  0004a7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022e4e  00000000  00000000  0005362b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b92e7  00000000  00000000  00076479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012f760  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ba0  00000000  00000000  0012f7b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000001c 	.word	0x2000001c
 8000154:	00000000 	.word	0x00000000
 8000158:	0800bae4 	.word	0x0800bae4

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000020 	.word	0x20000020
 8000174:	0800bae4 	.word	0x0800bae4

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295
 8000198:	f04f 30ff 	movne.w	r0, #4294967295
 800019c:	f000 b974 	b.w	8000488 <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f000 f806 	bl	80001b8 <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__udivmoddi4>:
 80001b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001bc:	9e08      	ldr	r6, [sp, #32]
 80001be:	460d      	mov	r5, r1
 80001c0:	4604      	mov	r4, r0
 80001c2:	4688      	mov	r8, r1
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d14d      	bne.n	8000264 <__udivmoddi4+0xac>
 80001c8:	428a      	cmp	r2, r1
 80001ca:	4694      	mov	ip, r2
 80001cc:	d968      	bls.n	80002a0 <__udivmoddi4+0xe8>
 80001ce:	fab2 f282 	clz	r2, r2
 80001d2:	b152      	cbz	r2, 80001ea <__udivmoddi4+0x32>
 80001d4:	fa01 f302 	lsl.w	r3, r1, r2
 80001d8:	f1c2 0120 	rsb	r1, r2, #32
 80001dc:	fa20 f101 	lsr.w	r1, r0, r1
 80001e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e4:	ea41 0803 	orr.w	r8, r1, r3
 80001e8:	4094      	lsls	r4, r2
 80001ea:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80001ee:	0c21      	lsrs	r1, r4, #16
 80001f0:	fbb8 fef5 	udiv	lr, r8, r5
 80001f4:	fa1f f78c 	uxth.w	r7, ip
 80001f8:	fb05 831e 	mls	r3, r5, lr, r8
 80001fc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000200:	fb0e f107 	mul.w	r1, lr, r7
 8000204:	4299      	cmp	r1, r3
 8000206:	d90b      	bls.n	8000220 <__udivmoddi4+0x68>
 8000208:	eb1c 0303 	adds.w	r3, ip, r3
 800020c:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000210:	f080 811e 	bcs.w	8000450 <__udivmoddi4+0x298>
 8000214:	4299      	cmp	r1, r3
 8000216:	f240 811b 	bls.w	8000450 <__udivmoddi4+0x298>
 800021a:	f1ae 0e02 	sub.w	lr, lr, #2
 800021e:	4463      	add	r3, ip
 8000220:	1a5b      	subs	r3, r3, r1
 8000222:	b2a4      	uxth	r4, r4
 8000224:	fbb3 f0f5 	udiv	r0, r3, r5
 8000228:	fb05 3310 	mls	r3, r5, r0, r3
 800022c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000230:	fb00 f707 	mul.w	r7, r0, r7
 8000234:	42a7      	cmp	r7, r4
 8000236:	d90a      	bls.n	800024e <__udivmoddi4+0x96>
 8000238:	eb1c 0404 	adds.w	r4, ip, r4
 800023c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000240:	f080 8108 	bcs.w	8000454 <__udivmoddi4+0x29c>
 8000244:	42a7      	cmp	r7, r4
 8000246:	f240 8105 	bls.w	8000454 <__udivmoddi4+0x29c>
 800024a:	4464      	add	r4, ip
 800024c:	3802      	subs	r0, #2
 800024e:	1be4      	subs	r4, r4, r7
 8000250:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000254:	2100      	movs	r1, #0
 8000256:	b11e      	cbz	r6, 8000260 <__udivmoddi4+0xa8>
 8000258:	40d4      	lsrs	r4, r2
 800025a:	2300      	movs	r3, #0
 800025c:	e9c6 4300 	strd	r4, r3, [r6]
 8000260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000264:	428b      	cmp	r3, r1
 8000266:	d908      	bls.n	800027a <__udivmoddi4+0xc2>
 8000268:	2e00      	cmp	r6, #0
 800026a:	f000 80ee 	beq.w	800044a <__udivmoddi4+0x292>
 800026e:	2100      	movs	r1, #0
 8000270:	e9c6 0500 	strd	r0, r5, [r6]
 8000274:	4608      	mov	r0, r1
 8000276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027a:	fab3 f183 	clz	r1, r3
 800027e:	2900      	cmp	r1, #0
 8000280:	d14a      	bne.n	8000318 <__udivmoddi4+0x160>
 8000282:	42ab      	cmp	r3, r5
 8000284:	d302      	bcc.n	800028c <__udivmoddi4+0xd4>
 8000286:	4282      	cmp	r2, r0
 8000288:	f200 80f9 	bhi.w	800047e <__udivmoddi4+0x2c6>
 800028c:	1a84      	subs	r4, r0, r2
 800028e:	eb65 0303 	sbc.w	r3, r5, r3
 8000292:	2001      	movs	r0, #1
 8000294:	4698      	mov	r8, r3
 8000296:	2e00      	cmp	r6, #0
 8000298:	d0e2      	beq.n	8000260 <__udivmoddi4+0xa8>
 800029a:	e9c6 4800 	strd	r4, r8, [r6]
 800029e:	e7df      	b.n	8000260 <__udivmoddi4+0xa8>
 80002a0:	b902      	cbnz	r2, 80002a4 <__udivmoddi4+0xec>
 80002a2:	deff      	udf	#255	; 0xff
 80002a4:	fab2 f282 	clz	r2, r2
 80002a8:	2a00      	cmp	r2, #0
 80002aa:	f040 8091 	bne.w	80003d0 <__udivmoddi4+0x218>
 80002ae:	eba1 050c 	sub.w	r5, r1, ip
 80002b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002b6:	fa1f fe8c 	uxth.w	lr, ip
 80002ba:	2101      	movs	r1, #1
 80002bc:	fbb5 f3f7 	udiv	r3, r5, r7
 80002c0:	fb07 5013 	mls	r0, r7, r3, r5
 80002c4:	0c25      	lsrs	r5, r4, #16
 80002c6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ca:	fb0e f003 	mul.w	r0, lr, r3
 80002ce:	42a8      	cmp	r0, r5
 80002d0:	d908      	bls.n	80002e4 <__udivmoddi4+0x12c>
 80002d2:	eb1c 0505 	adds.w	r5, ip, r5
 80002d6:	f103 38ff 	add.w	r8, r3, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0x12a>
 80002dc:	42a8      	cmp	r0, r5
 80002de:	f200 80cb 	bhi.w	8000478 <__udivmoddi4+0x2c0>
 80002e2:	4643      	mov	r3, r8
 80002e4:	1a2d      	subs	r5, r5, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	fbb5 f0f7 	udiv	r0, r5, r7
 80002ec:	fb07 5510 	mls	r5, r7, r0, r5
 80002f0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002f4:	fb0e fe00 	mul.w	lr, lr, r0
 80002f8:	45a6      	cmp	lr, r4
 80002fa:	d908      	bls.n	800030e <__udivmoddi4+0x156>
 80002fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000300:	f100 35ff 	add.w	r5, r0, #4294967295
 8000304:	d202      	bcs.n	800030c <__udivmoddi4+0x154>
 8000306:	45a6      	cmp	lr, r4
 8000308:	f200 80bb 	bhi.w	8000482 <__udivmoddi4+0x2ca>
 800030c:	4628      	mov	r0, r5
 800030e:	eba4 040e 	sub.w	r4, r4, lr
 8000312:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000316:	e79e      	b.n	8000256 <__udivmoddi4+0x9e>
 8000318:	f1c1 0720 	rsb	r7, r1, #32
 800031c:	408b      	lsls	r3, r1
 800031e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000322:	ea4c 0c03 	orr.w	ip, ip, r3
 8000326:	fa20 f407 	lsr.w	r4, r0, r7
 800032a:	fa05 f301 	lsl.w	r3, r5, r1
 800032e:	431c      	orrs	r4, r3
 8000330:	40fd      	lsrs	r5, r7
 8000332:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fbb5 f8f9 	udiv	r8, r5, r9
 800033e:	0c20      	lsrs	r0, r4, #16
 8000340:	fa1f fe8c 	uxth.w	lr, ip
 8000344:	fb09 5518 	mls	r5, r9, r8, r5
 8000348:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800034c:	fb08 f00e 	mul.w	r0, r8, lr
 8000350:	42a8      	cmp	r0, r5
 8000352:	fa02 f201 	lsl.w	r2, r2, r1
 8000356:	d90b      	bls.n	8000370 <__udivmoddi4+0x1b8>
 8000358:	eb1c 0505 	adds.w	r5, ip, r5
 800035c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000360:	f080 8088 	bcs.w	8000474 <__udivmoddi4+0x2bc>
 8000364:	42a8      	cmp	r0, r5
 8000366:	f240 8085 	bls.w	8000474 <__udivmoddi4+0x2bc>
 800036a:	f1a8 0802 	sub.w	r8, r8, #2
 800036e:	4465      	add	r5, ip
 8000370:	1a2d      	subs	r5, r5, r0
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb5 f0f9 	udiv	r0, r5, r9
 8000378:	fb09 5510 	mls	r5, r9, r0, r5
 800037c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45ae      	cmp	lr, r5
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x1e2>
 8000388:	eb1c 0505 	adds.w	r5, ip, r5
 800038c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000390:	d26c      	bcs.n	800046c <__udivmoddi4+0x2b4>
 8000392:	45ae      	cmp	lr, r5
 8000394:	d96a      	bls.n	800046c <__udivmoddi4+0x2b4>
 8000396:	3802      	subs	r0, #2
 8000398:	4465      	add	r5, ip
 800039a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800039e:	fba0 9402 	umull	r9, r4, r0, r2
 80003a2:	eba5 050e 	sub.w	r5, r5, lr
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	46c8      	mov	r8, r9
 80003aa:	46a6      	mov	lr, r4
 80003ac:	d356      	bcc.n	800045c <__udivmoddi4+0x2a4>
 80003ae:	d053      	beq.n	8000458 <__udivmoddi4+0x2a0>
 80003b0:	b15e      	cbz	r6, 80003ca <__udivmoddi4+0x212>
 80003b2:	ebb3 0208 	subs.w	r2, r3, r8
 80003b6:	eb65 050e 	sbc.w	r5, r5, lr
 80003ba:	fa05 f707 	lsl.w	r7, r5, r7
 80003be:	fa22 f301 	lsr.w	r3, r2, r1
 80003c2:	40cd      	lsrs	r5, r1
 80003c4:	431f      	orrs	r7, r3
 80003c6:	e9c6 7500 	strd	r7, r5, [r6]
 80003ca:	2100      	movs	r1, #0
 80003cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d0:	f1c2 0320 	rsb	r3, r2, #32
 80003d4:	fa20 f103 	lsr.w	r1, r0, r3
 80003d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003dc:	fa25 f303 	lsr.w	r3, r5, r3
 80003e0:	4095      	lsls	r5, r2
 80003e2:	430d      	orrs	r5, r1
 80003e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fbb3 f1f7 	udiv	r1, r3, r7
 80003f0:	fb07 3011 	mls	r0, r7, r1, r3
 80003f4:	0c2b      	lsrs	r3, r5, #16
 80003f6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003fa:	fb01 f00e 	mul.w	r0, r1, lr
 80003fe:	4298      	cmp	r0, r3
 8000400:	fa04 f402 	lsl.w	r4, r4, r2
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x260>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f101 38ff 	add.w	r8, r1, #4294967295
 800040e:	d22f      	bcs.n	8000470 <__udivmoddi4+0x2b8>
 8000410:	4298      	cmp	r0, r3
 8000412:	d92d      	bls.n	8000470 <__udivmoddi4+0x2b8>
 8000414:	3902      	subs	r1, #2
 8000416:	4463      	add	r3, ip
 8000418:	1a1b      	subs	r3, r3, r0
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000420:	fb07 3310 	mls	r3, r7, r0, r3
 8000424:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000428:	fb00 f30e 	mul.w	r3, r0, lr
 800042c:	42ab      	cmp	r3, r5
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x28a>
 8000430:	eb1c 0505 	adds.w	r5, ip, r5
 8000434:	f100 38ff 	add.w	r8, r0, #4294967295
 8000438:	d216      	bcs.n	8000468 <__udivmoddi4+0x2b0>
 800043a:	42ab      	cmp	r3, r5
 800043c:	d914      	bls.n	8000468 <__udivmoddi4+0x2b0>
 800043e:	3802      	subs	r0, #2
 8000440:	4465      	add	r5, ip
 8000442:	1aed      	subs	r5, r5, r3
 8000444:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000448:	e738      	b.n	80002bc <__udivmoddi4+0x104>
 800044a:	4631      	mov	r1, r6
 800044c:	4630      	mov	r0, r6
 800044e:	e707      	b.n	8000260 <__udivmoddi4+0xa8>
 8000450:	4686      	mov	lr, r0
 8000452:	e6e5      	b.n	8000220 <__udivmoddi4+0x68>
 8000454:	4618      	mov	r0, r3
 8000456:	e6fa      	b.n	800024e <__udivmoddi4+0x96>
 8000458:	454b      	cmp	r3, r9
 800045a:	d2a9      	bcs.n	80003b0 <__udivmoddi4+0x1f8>
 800045c:	ebb9 0802 	subs.w	r8, r9, r2
 8000460:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000464:	3801      	subs	r0, #1
 8000466:	e7a3      	b.n	80003b0 <__udivmoddi4+0x1f8>
 8000468:	4640      	mov	r0, r8
 800046a:	e7ea      	b.n	8000442 <__udivmoddi4+0x28a>
 800046c:	4620      	mov	r0, r4
 800046e:	e794      	b.n	800039a <__udivmoddi4+0x1e2>
 8000470:	4641      	mov	r1, r8
 8000472:	e7d1      	b.n	8000418 <__udivmoddi4+0x260>
 8000474:	46d0      	mov	r8, sl
 8000476:	e77b      	b.n	8000370 <__udivmoddi4+0x1b8>
 8000478:	3b02      	subs	r3, #2
 800047a:	4465      	add	r5, ip
 800047c:	e732      	b.n	80002e4 <__udivmoddi4+0x12c>
 800047e:	4608      	mov	r0, r1
 8000480:	e709      	b.n	8000296 <__udivmoddi4+0xde>
 8000482:	4464      	add	r4, ip
 8000484:	3802      	subs	r0, #2
 8000486:	e742      	b.n	800030e <__udivmoddi4+0x156>

08000488 <__aeabi_idiv0>:
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop

0800048c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800048c:	b480      	push	{r7}
 800048e:	b085      	sub	sp, #20
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000498:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800049a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4313      	orrs	r3, r2
 80004a2:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80004a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	4013      	ands	r3, r2
 80004ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004b0:	68fb      	ldr	r3, [r7, #12]
}
 80004b2:	bf00      	nop
 80004b4:	3714      	adds	r7, #20
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr

080004bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80004c0:	2004      	movs	r0, #4
 80004c2:	f7ff ffe3 	bl	800048c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004c6:	2001      	movs	r0, #1
 80004c8:	f7ff ffe0 	bl	800048c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80004cc:	2200      	movs	r2, #0
 80004ce:	2102      	movs	r1, #2
 80004d0:	200b      	movs	r0, #11
 80004d2:	f001 fa62 	bl	800199a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004d6:	200b      	movs	r0, #11
 80004d8:	f001 fa79 	bl	80019ce <HAL_NVIC_EnableIRQ>

}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}

080004e0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4313      	orrs	r3, r2
 80004f6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4013      	ands	r3, r2
 8000502:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000504:	68fb      	ldr	r3, [r7, #12]
}
 8000506:	bf00      	nop
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr

08000510 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000524:	2001      	movs	r0, #1
 8000526:	f7ff ffdb 	bl	80004e0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800052a:	2004      	movs	r0, #4
 800052c:	f7ff ffd8 	bl	80004e0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000530:	2002      	movs	r0, #2
 8000532:	f7ff ffd5 	bl	80004e0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|DBG2_Pin, GPIO_PIN_RESET);
 8000536:	2200      	movs	r2, #0
 8000538:	f44f 6183 	mov.w	r1, #1048	; 0x418
 800053c:	4821      	ldr	r0, [pc, #132]	; (80005c4 <MX_GPIO_Init+0xb4>)
 800053e:	f002 f87b 	bl	8002638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000542:	2201      	movs	r2, #1
 8000544:	2120      	movs	r1, #32
 8000546:	481f      	ldr	r0, [pc, #124]	; (80005c4 <MX_GPIO_Init+0xb4>)
 8000548:	f002 f876 	bl	8002638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	2131      	movs	r1, #49	; 0x31
 8000550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000554:	f002 f870 	bl	8002638 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin|DBG2_Pin;
 8000558:	f44f 6387 	mov.w	r3, #1080	; 0x438
 800055c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055e:	2301      	movs	r3, #1
 8000560:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000562:	2300      	movs	r3, #0
 8000564:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000566:	2303      	movs	r3, #3
 8000568:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	4619      	mov	r1, r3
 800056e:	4815      	ldr	r0, [pc, #84]	; (80005c4 <MX_GPIO_Init+0xb4>)
 8000570:	f001 fe34 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 8000574:	2331      	movs	r3, #49	; 0x31
 8000576:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000578:	2301      	movs	r3, #1
 800057a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	2300      	movs	r3, #0
 800057e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000580:	2303      	movs	r3, #3
 8000582:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	4619      	mov	r1, r3
 8000588:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800058c:	f001 fe26 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 8000590:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000594:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000596:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800059a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800059c:	2301      	movs	r3, #1
 800059e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	4619      	mov	r1, r3
 80005a4:	4807      	ldr	r0, [pc, #28]	; (80005c4 <MX_GPIO_Init+0xb4>)
 80005a6:	f001 fe19 	bl	80021dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2100      	movs	r1, #0
 80005ae:	2029      	movs	r0, #41	; 0x29
 80005b0:	f001 f9f3 	bl	800199a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005b4:	2029      	movs	r0, #41	; 0x29
 80005b6:	f001 fa0a 	bl	80019ce <HAL_NVIC_EnableIRQ>

}
 80005ba:	bf00      	nop
 80005bc:	3718      	adds	r7, #24
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	48000400 	.word	0x48000400

080005c8 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80005d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005d8:	f023 0218 	bic.w	r2, r3, #24
 80005dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4313      	orrs	r3, r2
 80005e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80005e8:	bf00      	nop
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bc80      	pop	{r7}
 80005f0:	4770      	bx	lr

080005f2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f2:	b580      	push	{r7, lr}
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f001 f8a9 	bl	800174c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f807 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f7ff ff87 	bl	8000510 <MX_GPIO_Init>
  MX_SubGHz_Phy_Init();
 8000602:	f009 ff88 	bl	800a516 <MX_SubGHz_Phy_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_SubGHz_Phy_Process();
 8000606:	f009 ff8e 	bl	800a526 <MX_SubGHz_Phy_Process>
 800060a:	e7fc      	b.n	8000606 <main+0x14>

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b09a      	sub	sp, #104	; 0x68
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	2248      	movs	r2, #72	; 0x48
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f00b fa5a 	bl	800bad4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 0308 	add.w	r3, r7, #8
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]
 8000630:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000632:	f002 f83b 	bl	80026ac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000636:	2000      	movs	r0, #0
 8000638:	f7ff ffc6 	bl	80005c8 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063c:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <SystemClock_Config+0xb0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000644:	4a1d      	ldr	r2, [pc, #116]	; (80006bc <SystemClock_Config+0xb0>)
 8000646:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <SystemClock_Config+0xb0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000658:	2324      	movs	r3, #36	; 0x24
 800065a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800065c:	2381      	movs	r3, #129	; 0x81
 800065e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000660:	2301      	movs	r3, #1
 8000662:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000664:	2300      	movs	r3, #0
 8000666:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000668:	23b0      	movs	r3, #176	; 0xb0
 800066a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800066c:	2300      	movs	r3, #0
 800066e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 0320 	add.w	r3, r7, #32
 8000674:	4618      	mov	r0, r3
 8000676:	f002 fb65 	bl	8002d44 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000680:	f000 f81e 	bl	80006c0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000684:	234f      	movs	r3, #79	; 0x4f
 8000686:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800069c:	f107 0308 	add.w	r3, r7, #8
 80006a0:	2102      	movs	r1, #2
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 feea 	bl	800347c <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006ae:	f000 f807 	bl	80006c0 <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3768      	adds	r7, #104	; 0x68
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	58000400 	.word	0x58000400

080006c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c4:	b672      	cpsid	i
}
 80006c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <Error_Handler+0x8>

080006ca <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80006ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80006da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bc80      	pop	{r7}
 80006e8:	4770      	bx	lr

080006ea <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006ea:	b480      	push	{r7}
 80006ec:	b085      	sub	sp, #20
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80006f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80006f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	4313      	orrs	r3, r2
 8000700:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000706:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4013      	ands	r3, r2
 800070c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800070e:	68fb      	ldr	r3, [r7, #12]
}
 8000710:	bf00      	nop
 8000712:	3714      	adds	r7, #20
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr
	...

0800071c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08c      	sub	sp, #48	; 0x30
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	222c      	movs	r2, #44	; 0x2c
 8000726:	2100      	movs	r1, #0
 8000728:	4618      	mov	r0, r3
 800072a:	f00b f9d3 	bl	800bad4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800072e:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <MX_RTC_Init+0x9c>)
 8000730:	4a22      	ldr	r2, [pc, #136]	; (80007bc <MX_RTC_Init+0xa0>)
 8000732:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8000734:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <MX_RTC_Init+0x9c>)
 8000736:	221f      	movs	r2, #31
 8000738:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800073a:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <MX_RTC_Init+0x9c>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000740:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <MX_RTC_Init+0x9c>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000746:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <MX_RTC_Init+0x9c>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800074c:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <MX_RTC_Init+0x9c>)
 800074e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000752:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000754:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <MX_RTC_Init+0x9c>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 800075a:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <MX_RTC_Init+0x9c>)
 800075c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000760:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000762:	4815      	ldr	r0, [pc, #84]	; (80007b8 <MX_RTC_Init+0x9c>)
 8000764:	f003 fb46 	bl	8003df4 <HAL_RTC_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 800076e:	f7ff ffa7 	bl	80006c0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8000772:	4811      	ldr	r0, [pc, #68]	; (80007b8 <MX_RTC_Init+0x9c>)
 8000774:	f003 fe34 	bl	80043e0 <HAL_RTCEx_SetSSRU_IT>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800077e:	f7ff ff9f 	bl	80006c0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8000782:	2300      	movs	r3, #0
 8000784:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 800078e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000792:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8000794:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000798:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2200      	movs	r2, #0
 800079e:	4619      	mov	r1, r3
 80007a0:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_RTC_Init+0x9c>)
 80007a2:	f003 fba1 	bl	8003ee8 <HAL_RTC_SetAlarm_IT>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80007ac:	f7ff ff88 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	3730      	adds	r7, #48	; 0x30
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000038 	.word	0x20000038
 80007bc:	40002800 	.word	0x40002800

080007c0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b090      	sub	sp, #64	; 0x40
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007c8:	f107 0308 	add.w	r3, r7, #8
 80007cc:	2238      	movs	r2, #56	; 0x38
 80007ce:	2100      	movs	r1, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f00b f97f 	bl	800bad4 <memset>
  if(rtcHandle->Instance==RTC)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a16      	ldr	r2, [pc, #88]	; (8000834 <HAL_RTC_MspInit+0x74>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d125      	bne.n	800082c <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80007e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007e4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80007e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007ea:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007ec:	f107 0308 	add.w	r3, r7, #8
 80007f0:	4618      	mov	r0, r3
 80007f2:	f003 f9e5 	bl	8003bc0 <HAL_RCCEx_PeriphCLKConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80007fc:	f7ff ff60 	bl	80006c0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000800:	f7ff ff63 	bl	80006ca <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000804:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000808:	f7ff ff6f 	bl	80006ea <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 800080c:	2200      	movs	r2, #0
 800080e:	2100      	movs	r1, #0
 8000810:	2002      	movs	r0, #2
 8000812:	f001 f8c2 	bl	800199a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8000816:	2002      	movs	r0, #2
 8000818:	f001 f8d9 	bl	80019ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800081c:	2200      	movs	r2, #0
 800081e:	2100      	movs	r1, #0
 8000820:	202a      	movs	r0, #42	; 0x2a
 8000822:	f001 f8ba 	bl	800199a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000826:	202a      	movs	r0, #42	; 0x2a
 8000828:	f001 f8d1 	bl	80019ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800082c:	bf00      	nop
 800082e:	3740      	adds	r7, #64	; 0x40
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40002800 	.word	0x40002800

08000838 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 800083c:	4b03      	ldr	r3, [pc, #12]	; (800084c <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 800083e:	2201      	movs	r2, #1
 8000840:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr
 800084c:	58000400 	.word	0x58000400

08000850 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr

0800085c <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr

08000868 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 800086c:	f000 ff8e 	bl	800178c <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8000870:	f7ff ffe2 	bl	8000838 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8000874:	2001      	movs	r0, #1
 8000876:	f001 ffab 	bl	80027d0 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}

0800087e <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8000882:	f000 ff91 	bl	80017a8 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8000886:	f000 fe11 	bl	80014ac <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}

0800088e <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8000892:	f000 ff7b 	bl	800178c <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000896:	2101      	movs	r1, #1
 8000898:	2000      	movs	r0, #0
 800089a:	f001 ff15 	bl	80026c8 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 80008a6:	f000 ff7f 	bl	80017a8 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}

080008ae <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr

080008ba <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008be:	e7fe      	b.n	80008be <NMI_Handler+0x4>

080008c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <HardFault_Handler+0x4>

080008c6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ca:	e7fe      	b.n	80008ca <MemManage_Handler+0x4>

080008cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <BusFault_Handler+0x4>

080008d2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <UsageFault_Handler+0x4>

080008d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr

080008e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr

080008f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr

080008fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr

08000908 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 800090c:	4802      	ldr	r0, [pc, #8]	; (8000918 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 800090e:	f003 fda3 	bl	8004458 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000038 	.word	0x20000038

0800091c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000920:	4802      	ldr	r0, [pc, #8]	; (800092c <DMA1_Channel1_IRQHandler+0x10>)
 8000922:	f001 faeb 	bl	8001efc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000114 	.word	0x20000114

08000930 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000934:	4802      	ldr	r0, [pc, #8]	; (8000940 <USART1_IRQHandler+0x10>)
 8000936:	f004 fbef 	bl	8005118 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000084 	.word	0x20000084

08000944 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8000948:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800094c:	f001 fe8c 	bl	8002668 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}

08000954 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000958:	4802      	ldr	r0, [pc, #8]	; (8000964 <RTC_Alarm_IRQHandler+0x10>)
 800095a:	f003 fc2d 	bl	80041b8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000038 	.word	0x20000038

08000968 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 800096c:	4802      	ldr	r0, [pc, #8]	; (8000978 <SUBGHZ_Radio_IRQHandler+0x10>)
 800096e:	f004 f8db 	bl	8004b28 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000070 	.word	0x20000070

0800097c <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000988:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800098a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4313      	orrs	r3, r2
 8000992:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000998:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4013      	ands	r3, r2
 800099e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009a0:	68fb      	ldr	r3, [r7, #12]
}
 80009a2:	bf00      	nop
 80009a4:	3714      	adds	r7, #20
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr

080009ac <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_SUBGHZ_Init+0x20>)
 80009b2:	2208      	movs	r2, #8
 80009b4:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_SUBGHZ_Init+0x20>)
 80009b8:	f003 fe3a 	bl	8004630 <HAL_SUBGHZ_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80009c2:	f7ff fe7d 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000070 	.word	0x20000070

080009d0 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80009d8:	2001      	movs	r0, #1
 80009da:	f7ff ffcf 	bl	800097c <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2100      	movs	r1, #0
 80009e2:	2032      	movs	r0, #50	; 0x32
 80009e4:	f000 ffd9 	bl	800199a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80009e8:	2032      	movs	r0, #50	; 0x32
 80009ea:	f000 fff0 	bl	80019ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <LL_RCC_SetClkAfterWakeFromStop>:
{
 80009f6:	b480      	push	{r7}
 80009f8:	b083      	sub	sp, #12
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80009fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000a08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	608b      	str	r3, [r1, #8]
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr

08000a1c <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8000a20:	2000      	movs	r0, #0
 8000a22:	f7ff ffe8 	bl	80009f6 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8000a26:	f00a fb0d 	bl	800b044 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <SystemApp_Init+0x38>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8000a30:	f000 f8b6 	bl	8000ba0 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8000a34:	f00a fd96 	bl	800b564 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8000a38:	4807      	ldr	r0, [pc, #28]	; (8000a58 <SystemApp_Init+0x3c>)
 8000a3a:	f00a fe2f 	bl	800b69c <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8000a3e:	2002      	movs	r0, #2
 8000a40:	f00a fe3a 	bl	800b6b8 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8000a44:	f009 fe00 	bl	800a648 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8000a48:	2101      	movs	r1, #1
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	f009 fe3c 	bl	800a6c8 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	2000007c 	.word	0x2000007c
 8000a58:	08000a69 	.word	0x08000a69

08000a5c <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8000a60:	f009 fe62 	bl	800a728 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af02      	add	r7, sp, #8
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8000a72:	f107 0308 	add.w	r3, r7, #8
 8000a76:	4618      	mov	r0, r3
 8000a78:	f009 ff00 	bl	800a87c <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a82:	9200      	str	r2, [sp, #0]
 8000a84:	4a07      	ldr	r2, [pc, #28]	; (8000aa4 <TimestampNow+0x3c>)
 8000a86:	2110      	movs	r1, #16
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f000 f81d 	bl	8000ac8 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f7ff fb72 	bl	8000178 <strlen>
 8000a94:	4603      	mov	r3, r0
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8000a9c:	bf00      	nop
 8000a9e:	3710      	adds	r7, #16
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	0800bafc 	.word	0x0800bafc

08000aa8 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8000aac:	2101      	movs	r1, #1
 8000aae:	2002      	movs	r0, #2
 8000ab0:	f009 fdda 	bl	800a668 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8000abc:	2100      	movs	r1, #0
 8000abe:	2002      	movs	r0, #2
 8000ac0:	f009 fdd2 	bl	800a668 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8000ac8:	b40c      	push	{r2, r3}
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b084      	sub	sp, #16
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
 8000ad2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8000ada:	6839      	ldr	r1, [r7, #0]
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	69ba      	ldr	r2, [r7, #24]
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f00a f817 	bl	800ab14 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8000ae6:	bf00      	nop
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000af0:	b002      	add	sp, #8
 8000af2:	4770      	bx	lr

08000af4 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8000afc:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr

08000b08 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_GetTick+0x24>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d002      	beq.n	8000b20 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8000b1a:	f000 f963 	bl	8000de4 <TIMER_IF_GetTimerValue>
 8000b1e:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8000b20:	687b      	ldr	r3, [r7, #4]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	2000007c 	.word	0x2000007c

08000b30 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 f9d9 	bl	8000ef2 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <LL_AHB2_GRP1_EnableClock>:
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
}
 8000b6e:	bf00      	nop
 8000b70:	3714      	adds	r7, #20
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr

08000b78 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <LL_EXTI_EnableIT_32_63+0x24>)
 8000b82:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000b86:	4905      	ldr	r1, [pc, #20]	; (8000b9c <LL_EXTI_EnableIT_32_63+0x24>)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	58000800 	.word	0x58000800

08000ba0 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8000ba6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000baa:	f7ff ffe5 	bl	8000b78 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000bae:	f000 fe09 	bl	80017c4 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000bb2:	f000 fe0d 	bl	80017d0 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8000bb6:	f000 fe11 	bl	80017dc <HAL_DBGMCU_EnableDBGStandbyMode>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f7ff ffb7 	bl	8000b48 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8000bda:	2002      	movs	r0, #2
 8000bdc:	f7ff ffb4 	bl	8000b48 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 8000be0:	2002      	movs	r0, #2
 8000be2:	f7ff ffb1 	bl	8000b48 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 8000be6:	2002      	movs	r0, #2
 8000be8:	f7ff ffae 	bl	8000b48 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8000bec:	2301      	movs	r3, #1
 8000bee:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf8:	f001 faf0 	bl	80021dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8000bfc:	2308      	movs	r3, #8
 8000bfe:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	4619      	mov	r1, r3
 8000c04:	4815      	ldr	r0, [pc, #84]	; (8000c5c <DBG_Init+0xbc>)
 8000c06:	f001 fae9 	bl	80021dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8000c0a:	2310      	movs	r3, #16
 8000c0c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	4619      	mov	r1, r3
 8000c12:	4812      	ldr	r0, [pc, #72]	; (8000c5c <DBG_Init+0xbc>)
 8000c14:	f001 fae2 	bl	80021dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 8000c18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c1c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	4619      	mov	r1, r3
 8000c22:	480e      	ldr	r0, [pc, #56]	; (8000c5c <DBG_Init+0xbc>)
 8000c24:	f001 fada 	bl	80021dc <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c30:	f001 fd02 	bl	8002638 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2108      	movs	r1, #8
 8000c38:	4808      	ldr	r0, [pc, #32]	; (8000c5c <DBG_Init+0xbc>)
 8000c3a:	f001 fcfd 	bl	8002638 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2110      	movs	r1, #16
 8000c42:	4806      	ldr	r0, [pc, #24]	; (8000c5c <DBG_Init+0xbc>)
 8000c44:	f001 fcf8 	bl	8002638 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c4e:	4803      	ldr	r0, [pc, #12]	; (8000c5c <DBG_Init+0xbc>)
 8000c50:	f001 fcf2 	bl	8002638 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8000c54:	bf00      	nop
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	48000400 	.word	0x48000400

08000c60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr

08000c6c <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	689b      	ldr	r3, [r3, #8]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr
	...

08000c84 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8000c8e:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <TIMER_IF_Init+0x5c>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	f083 0301 	eor.w	r3, r3, #1
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d01b      	beq.n	8000cd4 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000c9c:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <TIMER_IF_Init+0x60>)
 8000c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca2:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8000ca4:	f7ff fd3a 	bl	800071c <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8000ca8:	f000 f856 	bl	8000d58 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000cac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cb0:	480c      	ldr	r0, [pc, #48]	; (8000ce4 <TIMER_IF_Init+0x60>)
 8000cb2:	f003 fa25 	bl	8004100 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <TIMER_IF_Init+0x60>)
 8000cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cbc:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8000cbe:	4809      	ldr	r0, [pc, #36]	; (8000ce4 <TIMER_IF_Init+0x60>)
 8000cc0:	f003 fb5c 	bl	800437c <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f000 f9d3 	bl	8001070 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8000cca:	f000 f85f 	bl	8000d8c <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8000cce:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <TIMER_IF_Init+0x5c>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	2000007d 	.word	0x2000007d
 8000ce4:	20000038 	.word	0x20000038

08000ce8 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08e      	sub	sp, #56	; 0x38
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8000cf6:	f107 0308 	add.w	r3, r7, #8
 8000cfa:	222c      	movs	r2, #44	; 0x2c
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f00a fee8 	bl	800bad4 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8000d04:	f000 f828 	bl	8000d58 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8000d08:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <TIMER_IF_StartTimer+0x68>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	4413      	add	r3, r2
 8000d10:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8000d12:	2300      	movs	r3, #0
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8000d20:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000d24:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000d26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d2a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000d2c:	f107 0308 	add.w	r3, r7, #8
 8000d30:	2201      	movs	r2, #1
 8000d32:	4619      	mov	r1, r3
 8000d34:	4807      	ldr	r0, [pc, #28]	; (8000d54 <TIMER_IF_StartTimer+0x6c>)
 8000d36:	f003 f8d7 	bl	8003ee8 <HAL_RTC_SetAlarm_IT>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8000d40:	f7ff fcbe 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8000d44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3738      	adds	r7, #56	; 0x38
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000080 	.word	0x20000080
 8000d54:	20000038 	.word	0x20000038

08000d58 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <TIMER_IF_StopTimer+0x2c>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000d68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d6c:	4806      	ldr	r0, [pc, #24]	; (8000d88 <TIMER_IF_StopTimer+0x30>)
 8000d6e:	f003 f9c7 	bl	8004100 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000d72:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <TIMER_IF_StopTimer+0x30>)
 8000d74:	f04f 32ff 	mov.w	r2, #4294967295
 8000d78:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40002800 	.word	0x40002800
 8000d88:	20000038 	.word	0x20000038

08000d8c <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8000d90:	f000 f98e 	bl	80010b0 <GetTimerTicks>
 8000d94:	4603      	mov	r3, r0
 8000d96:	4a03      	ldr	r2, [pc, #12]	; (8000da4 <TIMER_IF_SetTimerContext+0x18>)
 8000d98:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8000d9a:	4b02      	ldr	r3, [pc, #8]	; (8000da4 <TIMER_IF_SetTimerContext+0x18>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000080 	.word	0x20000080

08000da8 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8000dac:	4b02      	ldr	r3, [pc, #8]	; (8000db8 <TIMER_IF_GetTimerContext+0x10>)
 8000dae:	681b      	ldr	r3, [r3, #0]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr
 8000db8:	20000080 	.word	0x20000080

08000dbc <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8000dc6:	f000 f973 	bl	80010b0 <GetTimerTicks>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8000dd4:	687b      	ldr	r3, [r7, #4]
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000080 	.word	0x20000080

08000de4 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <TIMER_IF_GetTimerValue+0x24>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d002      	beq.n	8000dfc <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8000df6:	f000 f95b 	bl	80010b0 <GetTimerTicks>
 8000dfa:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8000dfc:	687b      	ldr	r3, [r7, #4]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	2000007d 	.word	0x2000007d

08000e0c <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8000e16:	2303      	movs	r3, #3
 8000e18:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8000e1a:	687b      	ldr	r3, [r7, #4]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr

08000e26 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8000e26:	b5b0      	push	{r4, r5, r7, lr}
 8000e28:	b084      	sub	sp, #16
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8000e2e:	2100      	movs	r1, #0
 8000e30:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	2000      	movs	r0, #0
 8000e36:	460a      	mov	r2, r1
 8000e38:	4603      	mov	r3, r0
 8000e3a:	0d95      	lsrs	r5, r2, #22
 8000e3c:	0294      	lsls	r4, r2, #10
 8000e3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e42:	f04f 0300 	mov.w	r3, #0
 8000e46:	4620      	mov	r0, r4
 8000e48:	4629      	mov	r1, r5
 8000e4a:	f7ff f99d 	bl	8000188 <__aeabi_uldivmod>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	460b      	mov	r3, r1
 8000e52:	4613      	mov	r3, r2
 8000e54:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8000e56:	68fb      	ldr	r3, [r7, #12]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bdb0      	pop	{r4, r5, r7, pc}

08000e60 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8000e60:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000e64:	b085      	sub	sp, #20
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	2000      	movs	r0, #0
 8000e72:	460c      	mov	r4, r1
 8000e74:	4605      	mov	r5, r0
 8000e76:	4620      	mov	r0, r4
 8000e78:	4629      	mov	r1, r5
 8000e7a:	f04f 0a00 	mov.w	sl, #0
 8000e7e:	f04f 0b00 	mov.w	fp, #0
 8000e82:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8000e86:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8000e8a:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8000e8e:	4650      	mov	r0, sl
 8000e90:	4659      	mov	r1, fp
 8000e92:	1b02      	subs	r2, r0, r4
 8000e94:	eb61 0305 	sbc.w	r3, r1, r5
 8000e98:	f04f 0000 	mov.w	r0, #0
 8000e9c:	f04f 0100 	mov.w	r1, #0
 8000ea0:	0099      	lsls	r1, r3, #2
 8000ea2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000ea6:	0090      	lsls	r0, r2, #2
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	460b      	mov	r3, r1
 8000eac:	eb12 0804 	adds.w	r8, r2, r4
 8000eb0:	eb43 0905 	adc.w	r9, r3, r5
 8000eb4:	f04f 0200 	mov.w	r2, #0
 8000eb8:	f04f 0300 	mov.w	r3, #0
 8000ebc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000ec0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000ec4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000ec8:	4690      	mov	r8, r2
 8000eca:	4699      	mov	r9, r3
 8000ecc:	4640      	mov	r0, r8
 8000ece:	4649      	mov	r1, r9
 8000ed0:	f04f 0200 	mov.w	r2, #0
 8000ed4:	f04f 0300 	mov.w	r3, #0
 8000ed8:	0a82      	lsrs	r2, r0, #10
 8000eda:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8000ede:	0a8b      	lsrs	r3, r1, #10
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3714      	adds	r7, #20
 8000eea:	46bd      	mov	sp, r7
 8000eec:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000ef0:	4770      	bx	lr

08000ef2 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b084      	sub	sp, #16
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff ff93 	bl	8000e26 <TIMER_IF_Convert_ms2Tick>
 8000f00:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8000f02:	f000 f8d5 	bl	80010b0 <GetTimerTicks>
 8000f06:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8000f08:	e000      	b.n	8000f0c <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8000f0a:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8000f0c:	f000 f8d0 	bl	80010b0 <GetTimerTicks>
 8000f10:	4602      	mov	r2, r0
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d8f6      	bhi.n	8000f0a <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8000f1c:	bf00      	nop
 8000f1e:	bf00      	nop
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8000f2e:	f00a f9d7 	bl	800b2e0 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b084      	sub	sp, #16
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8000f42:	f000 f8a5 	bl	8001090 <TIMER_IF_BkUp_Read_MSBticks>
 8000f46:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 f88f 	bl	8001070 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8000f5a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f5e:	b08c      	sub	sp, #48	; 0x30
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8000f68:	f000 f8a2 	bl	80010b0 <GetTimerTicks>
 8000f6c:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8000f6e:	f000 f88f 	bl	8001090 <TIMER_IF_BkUp_Read_MSBticks>
 8000f72:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8000f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f76:	2200      	movs	r2, #0
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	60fa      	str	r2, [r7, #12]
 8000f7c:	f04f 0200 	mov.w	r2, #0
 8000f80:	f04f 0300 	mov.w	r3, #0
 8000f84:	68b9      	ldr	r1, [r7, #8]
 8000f86:	000b      	movs	r3, r1
 8000f88:	2200      	movs	r2, #0
 8000f8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	460c      	mov	r4, r1
 8000f90:	4605      	mov	r5, r0
 8000f92:	eb12 0804 	adds.w	r8, r2, r4
 8000f96:	eb43 0905 	adc.w	r9, r3, r5
 8000f9a:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8000f9e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	f04f 0300 	mov.w	r3, #0
 8000faa:	0a82      	lsrs	r2, r0, #10
 8000fac:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8000fb0:	0a8b      	lsrs	r3, r1, #10
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	603b      	str	r3, [r7, #0]
 8000fbc:	607a      	str	r2, [r7, #4]
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8000fc4:	f04f 0b00 	mov.w	fp, #0
 8000fc8:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff ff46 	bl	8000e60 <TIMER_IF_Convert_Tick2ms>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8000fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3730      	adds	r7, #48	; 0x30
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000fe8 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4803      	ldr	r0, [pc, #12]	; (8001004 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8000ff6:	f003 fa53 	bl	80044a0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000038 	.word	0x20000038

08001008 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	2101      	movs	r1, #1
 8001014:	4803      	ldr	r0, [pc, #12]	; (8001024 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8001016:	f003 fa43 	bl	80044a0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000038 	.word	0x20000038

08001028 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8001032:	2100      	movs	r1, #0
 8001034:	4804      	ldr	r0, [pc, #16]	; (8001048 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8001036:	f003 fa4b 	bl	80044d0 <HAL_RTCEx_BKUPRead>
 800103a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 800103c:	687b      	ldr	r3, [r7, #4]
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000038 	.word	0x20000038

0800104c <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001056:	2101      	movs	r1, #1
 8001058:	4804      	ldr	r0, [pc, #16]	; (800106c <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 800105a:	f003 fa39 	bl	80044d0 <HAL_RTCEx_BKUPRead>
 800105e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8001060:	687b      	ldr	r3, [r7, #4]
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000038 	.word	0x20000038

08001070 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	2102      	movs	r1, #2
 800107c:	4803      	ldr	r0, [pc, #12]	; (800108c <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 800107e:	f003 fa0f 	bl	80044a0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000038 	.word	0x20000038

08001090 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001096:	2102      	movs	r1, #2
 8001098:	4804      	ldr	r0, [pc, #16]	; (80010ac <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 800109a:	f003 fa19 	bl	80044d0 <HAL_RTCEx_BKUPRead>
 800109e:	6078      	str	r0, [r7, #4]
  return MSBticks;
 80010a0:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000038 	.word	0x20000038

080010b0 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80010b6:	480b      	ldr	r0, [pc, #44]	; (80010e4 <GetTimerTicks+0x34>)
 80010b8:	f7ff fdd8 	bl	8000c6c <LL_RTC_TIME_GetSubSecond>
 80010bc:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80010be:	e003      	b.n	80010c8 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80010c0:	4808      	ldr	r0, [pc, #32]	; (80010e4 <GetTimerTicks+0x34>)
 80010c2:	f7ff fdd3 	bl	8000c6c <LL_RTC_TIME_GetSubSecond>
 80010c6:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80010c8:	4806      	ldr	r0, [pc, #24]	; (80010e4 <GetTimerTicks+0x34>)
 80010ca:	f7ff fdcf 	bl	8000c6c <LL_RTC_TIME_GetSubSecond>
 80010ce:	4602      	mov	r2, r0
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d1f4      	bne.n	80010c0 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40002800 	.word	0x40002800

080010e8 <LL_AHB2_GRP1_EnableClock>:
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80010f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001104:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4013      	ands	r3, r2
 800110a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800110c:	68fb      	ldr	r3, [r7, #12]
}
 800110e:	bf00      	nop
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr

08001118 <LL_APB2_GRP1_EnableClock>:
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001124:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001126:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4313      	orrs	r3, r2
 800112e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001134:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4013      	ands	r3, r2
 800113a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800113c:	68fb      	ldr	r3, [r7, #12]
}
 800113e:	bf00      	nop
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr

08001148 <LL_APB2_GRP1_DisableClock>:
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001154:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	43db      	mvns	r3, r3
 800115a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800115e:	4013      	ands	r3, r2
 8001160:	660b      	str	r3, [r1, #96]	; 0x60
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001170:	4b22      	ldr	r3, [pc, #136]	; (80011fc <MX_USART1_UART_Init+0x90>)
 8001172:	4a23      	ldr	r2, [pc, #140]	; (8001200 <MX_USART1_UART_Init+0x94>)
 8001174:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001176:	4b21      	ldr	r3, [pc, #132]	; (80011fc <MX_USART1_UART_Init+0x90>)
 8001178:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800117c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800117e:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <MX_USART1_UART_Init+0x90>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001184:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <MX_USART1_UART_Init+0x90>)
 8001186:	2200      	movs	r2, #0
 8001188:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800118a:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <MX_USART1_UART_Init+0x90>)
 800118c:	2200      	movs	r2, #0
 800118e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001190:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <MX_USART1_UART_Init+0x90>)
 8001192:	220c      	movs	r2, #12
 8001194:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001196:	4b19      	ldr	r3, [pc, #100]	; (80011fc <MX_USART1_UART_Init+0x90>)
 8001198:	2200      	movs	r2, #0
 800119a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800119c:	4b17      	ldr	r3, [pc, #92]	; (80011fc <MX_USART1_UART_Init+0x90>)
 800119e:	2200      	movs	r2, #0
 80011a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011a2:	4b16      	ldr	r3, [pc, #88]	; (80011fc <MX_USART1_UART_Init+0x90>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011a8:	4b14      	ldr	r3, [pc, #80]	; (80011fc <MX_USART1_UART_Init+0x90>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011ae:	4b13      	ldr	r3, [pc, #76]	; (80011fc <MX_USART1_UART_Init+0x90>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011b4:	4811      	ldr	r0, [pc, #68]	; (80011fc <MX_USART1_UART_Init+0x90>)
 80011b6:	f003 fe76 	bl	8004ea6 <HAL_UART_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80011c0:	f7ff fa7e 	bl	80006c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011c4:	2100      	movs	r1, #0
 80011c6:	480d      	ldr	r0, [pc, #52]	; (80011fc <MX_USART1_UART_Init+0x90>)
 80011c8:	f005 feed 	bl	8006fa6 <HAL_UARTEx_SetTxFifoThreshold>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80011d2:	f7ff fa75 	bl	80006c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011d6:	2100      	movs	r1, #0
 80011d8:	4808      	ldr	r0, [pc, #32]	; (80011fc <MX_USART1_UART_Init+0x90>)
 80011da:	f005 ff22 	bl	8007022 <HAL_UARTEx_SetRxFifoThreshold>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80011e4:	f7ff fa6c 	bl	80006c0 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 80011e8:	4804      	ldr	r0, [pc, #16]	; (80011fc <MX_USART1_UART_Init+0x90>)
 80011ea:	f005 fea1 	bl	8006f30 <HAL_UARTEx_EnableFifoMode>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80011f4:	f7ff fa64 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000084 	.word	0x20000084
 8001200:	40013800 	.word	0x40013800

08001204 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b096      	sub	sp, #88	; 0x58
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800121c:	f107 030c 	add.w	r3, r7, #12
 8001220:	2238      	movs	r2, #56	; 0x38
 8001222:	2100      	movs	r1, #0
 8001224:	4618      	mov	r0, r3
 8001226:	f00a fc55 	bl	800bad4 <memset>
  if(uartHandle->Instance==USART1)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a2f      	ldr	r2, [pc, #188]	; (80012ec <HAL_UART_MspInit+0xe8>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d156      	bne.n	80012e2 <HAL_UART_MspInit+0xde>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001234:	2301      	movs	r3, #1
 8001236:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001238:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800123c:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800123e:	f107 030c 	add.w	r3, r7, #12
 8001242:	4618      	mov	r0, r3
 8001244:	f002 fcbc 	bl	8003bc0 <HAL_RCCEx_PeriphCLKConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800124e:	f7ff fa37 	bl	80006c0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001252:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001256:	f7ff ff5f 	bl	8001118 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800125a:	2002      	movs	r0, #2
 800125c:	f7ff ff44 	bl	80010e8 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8001260:	23c0      	movs	r3, #192	; 0xc0
 8001262:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126c:	2303      	movs	r3, #3
 800126e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001270:	2307      	movs	r3, #7
 8001272:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001274:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001278:	4619      	mov	r1, r3
 800127a:	481d      	ldr	r0, [pc, #116]	; (80012f0 <HAL_UART_MspInit+0xec>)
 800127c:	f000 ffae 	bl	80021dc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8001280:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <HAL_UART_MspInit+0xf0>)
 8001282:	4a1d      	ldr	r2, [pc, #116]	; (80012f8 <HAL_UART_MspInit+0xf4>)
 8001284:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001286:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <HAL_UART_MspInit+0xf0>)
 8001288:	2212      	movs	r2, #18
 800128a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800128c:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <HAL_UART_MspInit+0xf0>)
 800128e:	2210      	movs	r2, #16
 8001290:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001292:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <HAL_UART_MspInit+0xf0>)
 8001294:	2200      	movs	r2, #0
 8001296:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001298:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <HAL_UART_MspInit+0xf0>)
 800129a:	2280      	movs	r2, #128	; 0x80
 800129c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800129e:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <HAL_UART_MspInit+0xf0>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012a4:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <HAL_UART_MspInit+0xf0>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80012aa:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <HAL_UART_MspInit+0xf0>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012b0:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <HAL_UART_MspInit+0xf0>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80012b6:	480f      	ldr	r0, [pc, #60]	; (80012f4 <HAL_UART_MspInit+0xf0>)
 80012b8:	f000 fba6 	bl	8001a08 <HAL_DMA_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 80012c2:	f7ff f9fd 	bl	80006c0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <HAL_UART_MspInit+0xf0>)
 80012ca:	679a      	str	r2, [r3, #120]	; 0x78
 80012cc:	4a09      	ldr	r2, [pc, #36]	; (80012f4 <HAL_UART_MspInit+0xf0>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2102      	movs	r1, #2
 80012d6:	2024      	movs	r0, #36	; 0x24
 80012d8:	f000 fb5f 	bl	800199a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012dc:	2024      	movs	r0, #36	; 0x24
 80012de:	f000 fb76 	bl	80019ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80012e2:	bf00      	nop
 80012e4:	3758      	adds	r7, #88	; 0x58
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40013800 	.word	0x40013800
 80012f0:	48000400 	.word	0x48000400
 80012f4:	20000114 	.word	0x20000114
 80012f8:	40020008 	.word	0x40020008

080012fc <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a0b      	ldr	r2, [pc, #44]	; (8001338 <HAL_UART_MspDeInit+0x3c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d10f      	bne.n	800132e <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800130e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001312:	f7ff ff19 	bl	8001148 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8001316:	21c0      	movs	r1, #192	; 0xc0
 8001318:	4808      	ldr	r0, [pc, #32]	; (800133c <HAL_UART_MspDeInit+0x40>)
 800131a:	f001 f8bf 	bl	800249c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001322:	4618      	mov	r0, r3
 8001324:	f000 fc18 	bl	8001b58 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001328:	2024      	movs	r0, #36	; 0x24
 800132a:	f000 fb5e 	bl	80019ea <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40013800 	.word	0x40013800
 800133c:	48000400 	.word	0x48000400

08001340 <LL_APB2_GRP1_ForceReset>:
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8001348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800134c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800134e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4313      	orrs	r3, r2
 8001356:	640b      	str	r3, [r1, #64]	; 0x40
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr

08001362 <LL_APB2_GRP1_ReleaseReset>:
{
 8001362:	b480      	push	{r7}
 8001364:	b083      	sub	sp, #12
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 800136a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800136e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	43db      	mvns	r3, r3
 8001374:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001378:	4013      	ands	r3, r2
 800137a:	640b      	str	r3, [r1, #64]	; 0x40
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr
	...

08001388 <LL_EXTI_EnableIT_0_31>:
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <LL_EXTI_EnableIT_0_31+0x24>)
 8001392:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001396:	4905      	ldr	r1, [pc, #20]	; (80013ac <LL_EXTI_EnableIT_0_31+0x24>)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4313      	orrs	r3, r2
 800139c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	58000800 	.word	0x58000800

080013b0 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80013b8:	4a07      	ldr	r2, [pc, #28]	; (80013d8 <vcom_Init+0x28>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80013be:	f7ff f87d 	bl	80004bc <MX_DMA_Init>
  MX_USART1_UART_Init();
 80013c2:	f7ff fed3 	bl	800116c <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 80013c6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80013ca:	f7ff ffdd 	bl	8001388 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 80013ce:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000178 	.word	0x20000178

080013dc <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 80013e0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013e4:	f7ff ffac 	bl	8001340 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 80013e8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013ec:	f7ff ffb9 	bl	8001362 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 80013f0:	4804      	ldr	r0, [pc, #16]	; (8001404 <vcom_DeInit+0x28>)
 80013f2:	f7ff ff83 	bl	80012fc <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80013f6:	200f      	movs	r0, #15
 80013f8:	f000 faf7 	bl	80019ea <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 80013fc:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80013fe:	4618      	mov	r0, r3
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000084 	.word	0x20000084

08001408 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8001414:	887b      	ldrh	r3, [r7, #2]
 8001416:	461a      	mov	r2, r3
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	4804      	ldr	r0, [pc, #16]	; (800142c <vcom_Trace_DMA+0x24>)
 800141c:	f003 fdea 	bl	8004ff4 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8001420:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000084 	.word	0x20000084

08001430 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8001438:	4a19      	ldr	r2, [pc, #100]	; (80014a0 <vcom_ReceiveInit+0x70>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800143e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001442:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8001444:	f107 0308 	add.w	r3, r7, #8
 8001448:	e893 0006 	ldmia.w	r3, {r1, r2}
 800144c:	4815      	ldr	r0, [pc, #84]	; (80014a4 <vcom_ReceiveInit+0x74>)
 800144e:	f005 fce2 	bl	8006e16 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8001452:	bf00      	nop
 8001454:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <vcom_ReceiveInit+0x74>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001462:	d0f7      	beq.n	8001454 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8001464:	bf00      	nop
 8001466:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <vcom_ReceiveInit+0x74>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	69db      	ldr	r3, [r3, #28]
 800146c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001470:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001474:	d1f7      	bne.n	8001466 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <vcom_ReceiveInit+0x74>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <vcom_ReceiveInit+0x74>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001484:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8001486:	4807      	ldr	r0, [pc, #28]	; (80014a4 <vcom_ReceiveInit+0x74>)
 8001488:	f005 fd20 	bl	8006ecc <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 800148c:	2201      	movs	r2, #1
 800148e:	4906      	ldr	r1, [pc, #24]	; (80014a8 <vcom_ReceiveInit+0x78>)
 8001490:	4804      	ldr	r0, [pc, #16]	; (80014a4 <vcom_ReceiveInit+0x74>)
 8001492:	f003 fd59 	bl	8004f48 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8001496:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8001498:	4618      	mov	r0, r3
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	2000017c 	.word	0x2000017c
 80014a4:	20000084 	.word	0x20000084
 80014a8:	20000174 	.word	0x20000174

080014ac <vcom_Resume>:

void vcom_Resume(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014b0:	4808      	ldr	r0, [pc, #32]	; (80014d4 <vcom_Resume+0x28>)
 80014b2:	f003 fcf8 	bl	8004ea6 <HAL_UART_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <vcom_Resume+0x14>
  {
    Error_Handler();
 80014bc:	f7ff f900 	bl	80006c0 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80014c0:	4805      	ldr	r0, [pc, #20]	; (80014d8 <vcom_Resume+0x2c>)
 80014c2:	f000 faa1 	bl	8001a08 <HAL_DMA_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <vcom_Resume+0x24>
  {
    Error_Handler();
 80014cc:	f7ff f8f8 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000084 	.word	0x20000084
 80014d8:	20000114 	.word	0x20000114

080014dc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a05      	ldr	r2, [pc, #20]	; (8001500 <HAL_UART_TxCpltCallback+0x24>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d103      	bne.n	80014f6 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 80014ee:	4b05      	ldr	r3, [pc, #20]	; (8001504 <HAL_UART_TxCpltCallback+0x28>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2000      	movs	r0, #0
 80014f4:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40013800 	.word	0x40013800
 8001504:	20000178 	.word	0x20000178

08001508 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a0d      	ldr	r2, [pc, #52]	; (800154c <HAL_UART_RxCpltCallback+0x44>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d113      	bne.n	8001542 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 800151a:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <HAL_UART_RxCpltCallback+0x48>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d00a      	beq.n	8001538 <HAL_UART_RxCpltCallback+0x30>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001528:	2b00      	cmp	r3, #0
 800152a:	d105      	bne.n	8001538 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 800152c:	4b08      	ldr	r3, [pc, #32]	; (8001550 <HAL_UART_RxCpltCallback+0x48>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2200      	movs	r2, #0
 8001532:	2101      	movs	r1, #1
 8001534:	4807      	ldr	r0, [pc, #28]	; (8001554 <HAL_UART_RxCpltCallback+0x4c>)
 8001536:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8001538:	2201      	movs	r2, #1
 800153a:	4906      	ldr	r1, [pc, #24]	; (8001554 <HAL_UART_RxCpltCallback+0x4c>)
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f003 fd03 	bl	8004f48 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40013800 	.word	0x40013800
 8001550:	2000017c 	.word	0x2000017c
 8001554:	20000174 	.word	0x20000174

08001558 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001558:	480d      	ldr	r0, [pc, #52]	; (8001590 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800155a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800155c:	f7ff fb80 	bl	8000c60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001560:	480c      	ldr	r0, [pc, #48]	; (8001594 <LoopForever+0x6>)
  ldr r1, =_edata
 8001562:	490d      	ldr	r1, [pc, #52]	; (8001598 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001564:	4a0d      	ldr	r2, [pc, #52]	; (800159c <LoopForever+0xe>)
  movs r3, #0
 8001566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001568:	e002      	b.n	8001570 <LoopCopyDataInit>

0800156a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800156a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800156c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800156e:	3304      	adds	r3, #4

08001570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001574:	d3f9      	bcc.n	800156a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001576:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001578:	4c0a      	ldr	r4, [pc, #40]	; (80015a4 <LoopForever+0x16>)
  movs r3, #0
 800157a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800157c:	e001      	b.n	8001582 <LoopFillZerobss>

0800157e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800157e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001580:	3204      	adds	r2, #4

08001582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001584:	d3fb      	bcc.n	800157e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001586:	f00a fa81 	bl	800ba8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800158a:	f7ff f832 	bl	80005f2 <main>

0800158e <LoopForever>:

LoopForever:
    b LoopForever
 800158e:	e7fe      	b.n	800158e <LoopForever>
  ldr   r0, =_estack
 8001590:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001594:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001598:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800159c:	0800be94 	.word	0x0800be94
  ldr r2, =_sbss
 80015a0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80015a4:	2000067c 	.word	0x2000067c

080015a8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015a8:	e7fe      	b.n	80015a8 <ADC_IRQHandler>

080015aa <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b086      	sub	sp, #24
 80015ae:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	609a      	str	r2, [r3, #8]
 80015ba:	60da      	str	r2, [r3, #12]
 80015bc:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80015be:	2310      	movs	r3, #16
 80015c0:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80015c2:	2301      	movs	r3, #1
 80015c4:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ca:	2303      	movs	r3, #3
 80015cc:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	4619      	mov	r1, r3
 80015d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d6:	f000 fe01 	bl	80021dc <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80015da:	2320      	movs	r3, #32
 80015dc:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	4619      	mov	r1, r3
 80015e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e6:	f000 fdf9 	bl	80021dc <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80015ea:	2200      	movs	r2, #0
 80015ec:	2120      	movs	r1, #32
 80015ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f2:	f001 f821 	bl	8002638 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80015f6:	2200      	movs	r2, #0
 80015f8:	2110      	movs	r1, #16
 80015fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015fe:	f001 f81b 	bl	8002638 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	2b03      	cmp	r3, #3
 800161a:	d83f      	bhi.n	800169c <BSP_RADIO_ConfigRFSwitch+0x90>
 800161c:	a201      	add	r2, pc, #4	; (adr r2, 8001624 <BSP_RADIO_ConfigRFSwitch+0x18>)
 800161e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001622:	bf00      	nop
 8001624:	08001635 	.word	0x08001635
 8001628:	0800164f 	.word	0x0800164f
 800162c:	08001669 	.word	0x08001669
 8001630:	08001683 	.word	0x08001683
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8001634:	2200      	movs	r2, #0
 8001636:	2110      	movs	r1, #16
 8001638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163c:	f000 fffc 	bl	8002638 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8001640:	2200      	movs	r2, #0
 8001642:	2120      	movs	r1, #32
 8001644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001648:	f000 fff6 	bl	8002638 <HAL_GPIO_WritePin>
      break;      
 800164c:	e027      	b.n	800169e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800164e:	2201      	movs	r2, #1
 8001650:	2110      	movs	r1, #16
 8001652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001656:	f000 ffef 	bl	8002638 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800165a:	2200      	movs	r2, #0
 800165c:	2120      	movs	r1, #32
 800165e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001662:	f000 ffe9 	bl	8002638 <HAL_GPIO_WritePin>
      break;
 8001666:	e01a      	b.n	800169e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001668:	2201      	movs	r2, #1
 800166a:	2110      	movs	r1, #16
 800166c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001670:	f000 ffe2 	bl	8002638 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001674:	2201      	movs	r2, #1
 8001676:	2120      	movs	r1, #32
 8001678:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800167c:	f000 ffdc 	bl	8002638 <HAL_GPIO_WritePin>
      break;
 8001680:	e00d      	b.n	800169e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001682:	2200      	movs	r2, #0
 8001684:	2110      	movs	r1, #16
 8001686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168a:	f000 ffd5 	bl	8002638 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800168e:	2201      	movs	r2, #1
 8001690:	2120      	movs	r1, #32
 8001692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001696:	f000 ffcf 	bl	8002638 <HAL_GPIO_WritePin>
      break;
 800169a:	e000      	b.n	800169e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 800169c:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 80016ac:	2302      	movs	r3, #2
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr

080016b6 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 80016ba:	2301      	movs	r3, #1
}
 80016bc:	4618      	mov	r0, r3
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr

080016c4 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80016c8:	2301      	movs	r3, #1
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr

080016d2 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b085      	sub	sp, #20
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d102      	bne.n	80016e8 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 80016e2:	230f      	movs	r3, #15
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	e001      	b.n	80016ec <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 80016e8:	2316      	movs	r3, #22
 80016ea:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80016ec:	68fb      	ldr	r3, [r7, #12]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr

080016f8 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80016fc:	4b04      	ldr	r3, [pc, #16]	; (8001710 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	4a03      	ldr	r2, [pc, #12]	; (8001710 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	6053      	str	r3, [r2, #4]
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	e0042000 	.word	0xe0042000

08001714 <LL_DBGMCU_EnableDBGStopMode>:
  *        in Stop mode even when this bit is enabled
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8001718:	4b04      	ldr	r3, [pc, #16]	; (800172c <LL_DBGMCU_EnableDBGStopMode+0x18>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	4a03      	ldr	r2, [pc, #12]	; (800172c <LL_DBGMCU_EnableDBGStopMode+0x18>)
 800171e:	f043 0302 	orr.w	r3, r3, #2
 8001722:	6053      	str	r3, [r2, #4]
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr
 800172c:	e0042000 	.word	0xe0042000

08001730 <LL_DBGMCU_EnableDBGStandbyMode>:
  *        in Standby mode even when this bit is enabled
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_EnableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStandbyMode(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8001734:	4b04      	ldr	r3, [pc, #16]	; (8001748 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	4a03      	ldr	r2, [pc, #12]	; (8001748 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 800173a:	f043 0304 	orr.w	r3, r3, #4
 800173e:	6053      	str	r3, [r2, #4]
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	e0042000 	.word	0xe0042000

0800174c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001752:	2300      	movs	r3, #0
 8001754:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001756:	2003      	movs	r0, #3
 8001758:	f000 f914 	bl	8001984 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800175c:	f002 f852 	bl	8003804 <HAL_RCC_GetHCLKFreq>
 8001760:	4603      	mov	r3, r0
 8001762:	4a09      	ldr	r2, [pc, #36]	; (8001788 <HAL_Init+0x3c>)
 8001764:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001766:	200f      	movs	r0, #15
 8001768:	f7ff f9c4 	bl	8000af4 <HAL_InitTick>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d002      	beq.n	8001778 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	71fb      	strb	r3, [r7, #7]
 8001776:	e001      	b.n	800177c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001778:	f7ff f899 	bl	80008ae <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800177c:	79fb      	ldrb	r3, [r7, #7]
}
 800177e:	4618      	mov	r0, r3
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000000 	.word	0x20000000

0800178c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001790:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <HAL_SuspendTick+0x18>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a03      	ldr	r2, [pc, #12]	; (80017a4 <HAL_SuspendTick+0x18>)
 8001796:	f023 0302 	bic.w	r3, r3, #2
 800179a:	6013      	str	r3, [r2, #0]
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr
 80017a4:	e000e010 	.word	0xe000e010

080017a8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80017ac:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <HAL_ResumeTick+0x18>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a03      	ldr	r2, [pc, #12]	; (80017c0 <HAL_ResumeTick+0x18>)
 80017b2:	f043 0302 	orr.w	r3, r3, #2
 80017b6:	6013      	str	r3, [r2, #0]
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr
 80017c0:	e000e010 	.word	0xe000e010

080017c4 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80017c8:	f7ff ff96 	bl	80016f8 <LL_DBGMCU_EnableDBGSleepMode>
}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80017d4:	f7ff ff9e 	bl	8001714 <LL_DBGMCU_EnableDBGStopMode>
}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}

080017dc <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 80017e0:	f7ff ffa6 	bl	8001730 <LL_DBGMCU_EnableDBGStandbyMode>
}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <__NVIC_SetPriorityGrouping+0x44>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001804:	4013      	ands	r3, r2
 8001806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001810:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181a:	4a04      	ldr	r2, [pc, #16]	; (800182c <__NVIC_SetPriorityGrouping+0x44>)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	60d3      	str	r3, [r2, #12]
}
 8001820:	bf00      	nop
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001834:	4b04      	ldr	r3, [pc, #16]	; (8001848 <__NVIC_GetPriorityGrouping+0x18>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	0a1b      	lsrs	r3, r3, #8
 800183a:	f003 0307 	and.w	r3, r3, #7
}
 800183e:	4618      	mov	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	2b00      	cmp	r3, #0
 800185c:	db0b      	blt.n	8001876 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	f003 021f 	and.w	r2, r3, #31
 8001864:	4906      	ldr	r1, [pc, #24]	; (8001880 <__NVIC_EnableIRQ+0x34>)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	095b      	lsrs	r3, r3, #5
 800186c:	2001      	movs	r0, #1
 800186e:	fa00 f202 	lsl.w	r2, r0, r2
 8001872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr
 8001880:	e000e100 	.word	0xe000e100

08001884 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	2b00      	cmp	r3, #0
 8001894:	db12      	blt.n	80018bc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	f003 021f 	and.w	r2, r3, #31
 800189c:	490a      	ldr	r1, [pc, #40]	; (80018c8 <__NVIC_DisableIRQ+0x44>)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	095b      	lsrs	r3, r3, #5
 80018a4:	2001      	movs	r0, #1
 80018a6:	fa00 f202 	lsl.w	r2, r0, r2
 80018aa:	3320      	adds	r3, #32
 80018ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80018b0:	f3bf 8f4f 	dsb	sy
}
 80018b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018b6:	f3bf 8f6f 	isb	sy
}
 80018ba:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000e100 	.word	0xe000e100

080018cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	6039      	str	r1, [r7, #0]
 80018d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	db0a      	blt.n	80018f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	490c      	ldr	r1, [pc, #48]	; (8001918 <__NVIC_SetPriority+0x4c>)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	0112      	lsls	r2, r2, #4
 80018ec:	b2d2      	uxtb	r2, r2
 80018ee:	440b      	add	r3, r1
 80018f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f4:	e00a      	b.n	800190c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	4908      	ldr	r1, [pc, #32]	; (800191c <__NVIC_SetPriority+0x50>)
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	3b04      	subs	r3, #4
 8001904:	0112      	lsls	r2, r2, #4
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	440b      	add	r3, r1
 800190a:	761a      	strb	r2, [r3, #24]
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	e000e100 	.word	0xe000e100
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001920:	b480      	push	{r7}
 8001922:	b089      	sub	sp, #36	; 0x24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	f1c3 0307 	rsb	r3, r3, #7
 800193a:	2b04      	cmp	r3, #4
 800193c:	bf28      	it	cs
 800193e:	2304      	movcs	r3, #4
 8001940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3304      	adds	r3, #4
 8001946:	2b06      	cmp	r3, #6
 8001948:	d902      	bls.n	8001950 <NVIC_EncodePriority+0x30>
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3b03      	subs	r3, #3
 800194e:	e000      	b.n	8001952 <NVIC_EncodePriority+0x32>
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001954:	f04f 32ff 	mov.w	r2, #4294967295
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43da      	mvns	r2, r3
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	401a      	ands	r2, r3
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001968:	f04f 31ff 	mov.w	r1, #4294967295
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	fa01 f303 	lsl.w	r3, r1, r3
 8001972:	43d9      	mvns	r1, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001978:	4313      	orrs	r3, r2
         );
}
 800197a:	4618      	mov	r0, r3
 800197c:	3724      	adds	r7, #36	; 0x24
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr

08001984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff ff2b 	bl	80017e8 <__NVIC_SetPriorityGrouping>
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b086      	sub	sp, #24
 800199e:	af00      	add	r7, sp, #0
 80019a0:	4603      	mov	r3, r0
 80019a2:	60b9      	str	r1, [r7, #8]
 80019a4:	607a      	str	r2, [r7, #4]
 80019a6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019a8:	f7ff ff42 	bl	8001830 <__NVIC_GetPriorityGrouping>
 80019ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	68b9      	ldr	r1, [r7, #8]
 80019b2:	6978      	ldr	r0, [r7, #20]
 80019b4:	f7ff ffb4 	bl	8001920 <NVIC_EncodePriority>
 80019b8:	4602      	mov	r2, r0
 80019ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019be:	4611      	mov	r1, r2
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ff83 	bl	80018cc <__NVIC_SetPriority>
}
 80019c6:	bf00      	nop
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b082      	sub	sp, #8
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff35 	bl	800184c <__NVIC_EnableIRQ>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	4603      	mov	r3, r0
 80019f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80019f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff43 	bl	8001884 <__NVIC_DisableIRQ>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e08e      	b.n	8001b38 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4b47      	ldr	r3, [pc, #284]	; (8001b40 <HAL_DMA_Init+0x138>)
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d80f      	bhi.n	8001a46 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	4b45      	ldr	r3, [pc, #276]	; (8001b44 <HAL_DMA_Init+0x13c>)
 8001a2e:	4413      	add	r3, r2
 8001a30:	4a45      	ldr	r2, [pc, #276]	; (8001b48 <HAL_DMA_Init+0x140>)
 8001a32:	fba2 2303 	umull	r2, r3, r2, r3
 8001a36:	091b      	lsrs	r3, r3, #4
 8001a38:	009a      	lsls	r2, r3, #2
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a42      	ldr	r2, [pc, #264]	; (8001b4c <HAL_DMA_Init+0x144>)
 8001a42:	641a      	str	r2, [r3, #64]	; 0x40
 8001a44:	e00e      	b.n	8001a64 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4b40      	ldr	r3, [pc, #256]	; (8001b50 <HAL_DMA_Init+0x148>)
 8001a4e:	4413      	add	r3, r2
 8001a50:	4a3d      	ldr	r2, [pc, #244]	; (8001b48 <HAL_DMA_Init+0x140>)
 8001a52:	fba2 2303 	umull	r2, r3, r2, r3
 8001a56:	091b      	lsrs	r3, r3, #4
 8001a58:	009a      	lsls	r2, r3, #2
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a3c      	ldr	r2, [pc, #240]	; (8001b54 <HAL_DMA_Init+0x14c>)
 8001a62:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2202      	movs	r2, #2
 8001a68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	6812      	ldr	r2, [r2, #0]
 8001a76:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a7e:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6819      	ldr	r1, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	431a      	orrs	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	431a      	orrs	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 fb24 	bl	8002104 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ac4:	d102      	bne.n	8001acc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ad4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ad8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ae2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d010      	beq.n	8001b0e <HAL_DMA_Init+0x106>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	d80c      	bhi.n	8001b0e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 fb4d 	bl	8002194 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	e008      	b.n	8001b20 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40020407 	.word	0x40020407
 8001b44:	bffdfff8 	.word	0xbffdfff8
 8001b48:	cccccccd 	.word	0xcccccccd
 8001b4c:	40020000 	.word	0x40020000
 8001b50:	bffdfbf8 	.word	0xbffdfbf8
 8001b54:	40020400 	.word	0x40020400

08001b58 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e07b      	b.n	8001c62 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0201 	bic.w	r2, r2, #1
 8001b78:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	4b3a      	ldr	r3, [pc, #232]	; (8001c6c <HAL_DMA_DeInit+0x114>)
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d80f      	bhi.n	8001ba6 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	4b38      	ldr	r3, [pc, #224]	; (8001c70 <HAL_DMA_DeInit+0x118>)
 8001b8e:	4413      	add	r3, r2
 8001b90:	4a38      	ldr	r2, [pc, #224]	; (8001c74 <HAL_DMA_DeInit+0x11c>)
 8001b92:	fba2 2303 	umull	r2, r3, r2, r3
 8001b96:	091b      	lsrs	r3, r3, #4
 8001b98:	009a      	lsls	r2, r3, #2
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a35      	ldr	r2, [pc, #212]	; (8001c78 <HAL_DMA_DeInit+0x120>)
 8001ba2:	641a      	str	r2, [r3, #64]	; 0x40
 8001ba4:	e00e      	b.n	8001bc4 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	461a      	mov	r2, r3
 8001bac:	4b33      	ldr	r3, [pc, #204]	; (8001c7c <HAL_DMA_DeInit+0x124>)
 8001bae:	4413      	add	r3, r2
 8001bb0:	4a30      	ldr	r2, [pc, #192]	; (8001c74 <HAL_DMA_DeInit+0x11c>)
 8001bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb6:	091b      	lsrs	r3, r3, #4
 8001bb8:	009a      	lsls	r2, r3, #2
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a2f      	ldr	r2, [pc, #188]	; (8001c80 <HAL_DMA_DeInit+0x128>)
 8001bc2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd0:	f003 021c 	and.w	r2, r3, #28
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	2101      	movs	r1, #1
 8001bda:	fa01 f202 	lsl.w	r2, r1, r2
 8001bde:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 fa8f 	bl	8002104 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001bf6:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00f      	beq.n	8001c20 <HAL_DMA_DeInit+0xc8>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d80b      	bhi.n	8001c20 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f000 fac3 	bl	8002194 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001c1e:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40020407 	.word	0x40020407
 8001c70:	bffdfff8 	.word	0xbffdfff8
 8001c74:	cccccccd 	.word	0xcccccccd
 8001c78:	40020000 	.word	0x40020000
 8001c7c:	bffdfbf8 	.word	0xbffdfbf8
 8001c80:	40020400 	.word	0x40020400

08001c84 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
 8001c90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c92:	2300      	movs	r3, #0
 8001c94:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d101      	bne.n	8001ca4 <HAL_DMA_Start_IT+0x20>
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	e069      	b.n	8001d78 <HAL_DMA_Start_IT+0xf4>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d155      	bne.n	8001d64 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2202      	movs	r2, #2
 8001cbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 0201 	bic.w	r2, r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	68b9      	ldr	r1, [r7, #8]
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f000 f9d3 	bl	8002088 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d008      	beq.n	8001cfc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f042 020e 	orr.w	r2, r2, #14
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	e00f      	b.n	8001d1c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 0204 	bic.w	r2, r2, #4
 8001d0a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 020a 	orr.w	r2, r2, #10
 8001d1a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d007      	beq.n	8001d3a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d38:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d007      	beq.n	8001d52 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d50:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f042 0201 	orr.w	r2, r2, #1
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	e008      	b.n	8001d76 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2280      	movs	r2, #128	; 0x80
 8001d68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001d76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3718      	adds	r7, #24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e04f      	b.n	8001e32 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d008      	beq.n	8001db0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2204      	movs	r2, #4
 8001da2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e040      	b.n	8001e32 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 020e 	bic.w	r2, r2, #14
 8001dbe:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0201 	bic.w	r2, r2, #1
 8001dde:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de4:	f003 021c 	and.w	r2, r3, #28
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dec:	2101      	movs	r1, #1
 8001dee:	fa01 f202 	lsl.w	r2, r1, r2
 8001df2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001dfc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00c      	beq.n	8001e20 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e14:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001e1e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr

08001e3c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e44:	2300      	movs	r3, #0
 8001e46:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d005      	beq.n	8001e60 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2204      	movs	r2, #4
 8001e58:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	73fb      	strb	r3, [r7, #15]
 8001e5e:	e047      	b.n	8001ef0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 020e 	bic.w	r2, r2, #14
 8001e6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 0201 	bic.w	r2, r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e94:	f003 021c 	and.w	r2, r3, #28
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001eac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00c      	beq.n	8001ed0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ec4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001ece:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	4798      	blx	r3
    }
  }
  return status;
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f18:	f003 031c 	and.w	r3, r3, #28
 8001f1c:	2204      	movs	r2, #4
 8001f1e:	409a      	lsls	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4013      	ands	r3, r2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d027      	beq.n	8001f78 <HAL_DMA_IRQHandler+0x7c>
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	f003 0304 	and.w	r3, r3, #4
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d022      	beq.n	8001f78 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0320 	and.w	r3, r3, #32
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d107      	bne.n	8001f50 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0204 	bic.w	r2, r2, #4
 8001f4e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f54:	f003 021c 	and.w	r2, r3, #28
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	2104      	movs	r1, #4
 8001f5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f62:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 8081 	beq.w	8002070 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001f76:	e07b      	b.n	8002070 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7c:	f003 031c 	and.w	r3, r3, #28
 8001f80:	2202      	movs	r2, #2
 8001f82:	409a      	lsls	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4013      	ands	r3, r2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d03d      	beq.n	8002008 <HAL_DMA_IRQHandler+0x10c>
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d038      	beq.n	8002008 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0320 	and.w	r3, r3, #32
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d10b      	bne.n	8001fbc <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 020a 	bic.w	r2, r2, #10
 8001fb2:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	4b2e      	ldr	r3, [pc, #184]	; (800207c <HAL_DMA_IRQHandler+0x180>)
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d909      	bls.n	8001fdc <HAL_DMA_IRQHandler+0xe0>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fcc:	f003 031c 	and.w	r3, r3, #28
 8001fd0:	4a2b      	ldr	r2, [pc, #172]	; (8002080 <HAL_DMA_IRQHandler+0x184>)
 8001fd2:	2102      	movs	r1, #2
 8001fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd8:	6053      	str	r3, [r2, #4]
 8001fda:	e008      	b.n	8001fee <HAL_DMA_IRQHandler+0xf2>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe0:	f003 031c 	and.w	r3, r3, #28
 8001fe4:	4a27      	ldr	r2, [pc, #156]	; (8002084 <HAL_DMA_IRQHandler+0x188>)
 8001fe6:	2102      	movs	r1, #2
 8001fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fec:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d038      	beq.n	8002070 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002006:	e033      	b.n	8002070 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200c:	f003 031c 	and.w	r3, r3, #28
 8002010:	2208      	movs	r2, #8
 8002012:	409a      	lsls	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4013      	ands	r3, r2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d02a      	beq.n	8002072 <HAL_DMA_IRQHandler+0x176>
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b00      	cmp	r3, #0
 8002024:	d025      	beq.n	8002072 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 020e 	bic.w	r2, r2, #14
 8002034:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	f003 021c 	and.w	r2, r3, #28
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	2101      	movs	r1, #1
 8002044:	fa01 f202 	lsl.w	r2, r1, r2
 8002048:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002064:	2b00      	cmp	r3, #0
 8002066:	d004      	beq.n	8002072 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002070:	bf00      	nop
 8002072:	bf00      	nop
}
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40020080 	.word	0x40020080
 8002080:	40020400 	.word	0x40020400
 8002084:	40020000 	.word	0x40020000

08002088 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
 8002094:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800209e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d004      	beq.n	80020b2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80020b0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b6:	f003 021c 	and.w	r2, r3, #28
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	2101      	movs	r1, #1
 80020c0:	fa01 f202 	lsl.w	r2, r1, r2
 80020c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	2b10      	cmp	r3, #16
 80020d4:	d108      	bne.n	80020e8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80020e6:	e007      	b.n	80020f8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68ba      	ldr	r2, [r7, #8]
 80020ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	60da      	str	r2, [r3, #12]
}
 80020f8:	bf00      	nop
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr
	...

08002104 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	461a      	mov	r2, r3
 8002112:	4b1c      	ldr	r3, [pc, #112]	; (8002184 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8002114:	429a      	cmp	r2, r3
 8002116:	d813      	bhi.n	8002140 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211c:	089b      	lsrs	r3, r3, #2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002124:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	b2db      	uxtb	r3, r3
 8002132:	3b08      	subs	r3, #8
 8002134:	4a14      	ldr	r2, [pc, #80]	; (8002188 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8002136:	fba2 2303 	umull	r2, r3, r2, r3
 800213a:	091b      	lsrs	r3, r3, #4
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	e011      	b.n	8002164 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002144:	089b      	lsrs	r3, r3, #2
 8002146:	009a      	lsls	r2, r3, #2
 8002148:	4b10      	ldr	r3, [pc, #64]	; (800218c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800214a:	4413      	add	r3, r2
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	3b08      	subs	r3, #8
 8002158:	4a0b      	ldr	r2, [pc, #44]	; (8002188 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800215a:	fba2 2303 	umull	r2, r3, r2, r3
 800215e:	091b      	lsrs	r3, r3, #4
 8002160:	3307      	adds	r3, #7
 8002162:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a0a      	ldr	r2, [pc, #40]	; (8002190 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8002168:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f003 031f 	and.w	r3, r3, #31
 8002170:	2201      	movs	r2, #1
 8002172:	409a      	lsls	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002178:	bf00      	nop
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40020407 	.word	0x40020407
 8002188:	cccccccd 	.word	0xcccccccd
 800218c:	4002081c 	.word	0x4002081c
 8002190:	40020880 	.word	0x40020880

08002194 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021a4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	4b0a      	ldr	r3, [pc, #40]	; (80021d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80021aa:	4413      	add	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	461a      	mov	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a08      	ldr	r2, [pc, #32]	; (80021d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80021b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	3b01      	subs	r3, #1
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	2201      	movs	r2, #1
 80021c4:	409a      	lsls	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80021ca:	bf00      	nop
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr
 80021d4:	1000823f 	.word	0x1000823f
 80021d8:	40020940 	.word	0x40020940

080021dc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021dc:	b480      	push	{r7}
 80021de:	b087      	sub	sp, #28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ea:	e140      	b.n	800246e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	2101      	movs	r1, #1
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	fa01 f303 	lsl.w	r3, r1, r3
 80021f8:	4013      	ands	r3, r2
 80021fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 8132 	beq.w	8002468 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	2b01      	cmp	r3, #1
 800220e:	d005      	beq.n	800221c <HAL_GPIO_Init+0x40>
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d130      	bne.n	800227e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	2203      	movs	r2, #3
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4013      	ands	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	68da      	ldr	r2, [r3, #12]
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	4313      	orrs	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002252:	2201      	movs	r2, #1
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43db      	mvns	r3, r3
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	4013      	ands	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	091b      	lsrs	r3, r3, #4
 8002268:	f003 0201 	and.w	r2, r3, #1
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	4313      	orrs	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	2b03      	cmp	r3, #3
 8002288:	d017      	beq.n	80022ba <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	2203      	movs	r2, #3
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43db      	mvns	r3, r3
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	4013      	ands	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d123      	bne.n	800230e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	08da      	lsrs	r2, r3, #3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3208      	adds	r2, #8
 80022ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	220f      	movs	r2, #15
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43db      	mvns	r3, r3
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	4013      	ands	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	691a      	ldr	r2, [r3, #16]
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	08da      	lsrs	r2, r3, #3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3208      	adds	r2, #8
 8002308:	6939      	ldr	r1, [r7, #16]
 800230a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	2203      	movs	r2, #3
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43db      	mvns	r3, r3
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4013      	ands	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f003 0203 	and.w	r2, r3, #3
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 808c 	beq.w	8002468 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002350:	4a4e      	ldr	r2, [pc, #312]	; (800248c <HAL_GPIO_Init+0x2b0>)
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	089b      	lsrs	r3, r3, #2
 8002356:	3302      	adds	r3, #2
 8002358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800235c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f003 0303 	and.w	r3, r3, #3
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	2207      	movs	r2, #7
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4013      	ands	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800237a:	d00d      	beq.n	8002398 <HAL_GPIO_Init+0x1bc>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a44      	ldr	r2, [pc, #272]	; (8002490 <HAL_GPIO_Init+0x2b4>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d007      	beq.n	8002394 <HAL_GPIO_Init+0x1b8>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a43      	ldr	r2, [pc, #268]	; (8002494 <HAL_GPIO_Init+0x2b8>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d101      	bne.n	8002390 <HAL_GPIO_Init+0x1b4>
 800238c:	2302      	movs	r3, #2
 800238e:	e004      	b.n	800239a <HAL_GPIO_Init+0x1be>
 8002390:	2307      	movs	r3, #7
 8002392:	e002      	b.n	800239a <HAL_GPIO_Init+0x1be>
 8002394:	2301      	movs	r3, #1
 8002396:	e000      	b.n	800239a <HAL_GPIO_Init+0x1be>
 8002398:	2300      	movs	r3, #0
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	f002 0203 	and.w	r2, r2, #3
 80023a0:	0092      	lsls	r2, r2, #2
 80023a2:	4093      	lsls	r3, r2
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023aa:	4938      	ldr	r1, [pc, #224]	; (800248c <HAL_GPIO_Init+0x2b0>)
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	089b      	lsrs	r3, r3, #2
 80023b0:	3302      	adds	r3, #2
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023b8:	4b37      	ldr	r3, [pc, #220]	; (8002498 <HAL_GPIO_Init+0x2bc>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	43db      	mvns	r3, r3
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4013      	ands	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	4313      	orrs	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023dc:	4a2e      	ldr	r2, [pc, #184]	; (8002498 <HAL_GPIO_Init+0x2bc>)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80023e2:	4b2d      	ldr	r3, [pc, #180]	; (8002498 <HAL_GPIO_Init+0x2bc>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4013      	ands	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4313      	orrs	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002406:	4a24      	ldr	r2, [pc, #144]	; (8002498 <HAL_GPIO_Init+0x2bc>)
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800240c:	4b22      	ldr	r3, [pc, #136]	; (8002498 <HAL_GPIO_Init+0x2bc>)
 800240e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002412:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	43db      	mvns	r3, r3
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	4013      	ands	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4313      	orrs	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002432:	4a19      	ldr	r2, [pc, #100]	; (8002498 <HAL_GPIO_Init+0x2bc>)
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800243a:	4b17      	ldr	r3, [pc, #92]	; (8002498 <HAL_GPIO_Init+0x2bc>)
 800243c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002440:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	43db      	mvns	r3, r3
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	4313      	orrs	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002460:	4a0d      	ldr	r2, [pc, #52]	; (8002498 <HAL_GPIO_Init+0x2bc>)
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	3301      	adds	r3, #1
 800246c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	fa22 f303 	lsr.w	r3, r2, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	f47f aeb7 	bne.w	80021ec <HAL_GPIO_Init+0x10>
  }
}
 800247e:	bf00      	nop
 8002480:	bf00      	nop
 8002482:	371c      	adds	r7, #28
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	40010000 	.word	0x40010000
 8002490:	48000400 	.word	0x48000400
 8002494:	48000800 	.word	0x48000800
 8002498:	58000800 	.word	0x58000800

0800249c <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800249c:	b480      	push	{r7}
 800249e:	b087      	sub	sp, #28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80024aa:	e0af      	b.n	800260c <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80024ac:	2201      	movs	r2, #1
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	4013      	ands	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 80a2 	beq.w	8002606 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80024c2:	4a59      	ldr	r2, [pc, #356]	; (8002628 <HAL_GPIO_DeInit+0x18c>)
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	089b      	lsrs	r3, r3, #2
 80024c8:	3302      	adds	r3, #2
 80024ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ce:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	2207      	movs	r2, #7
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	4013      	ands	r3, r2
 80024e2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024ea:	d00d      	beq.n	8002508 <HAL_GPIO_DeInit+0x6c>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a4f      	ldr	r2, [pc, #316]	; (800262c <HAL_GPIO_DeInit+0x190>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d007      	beq.n	8002504 <HAL_GPIO_DeInit+0x68>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a4e      	ldr	r2, [pc, #312]	; (8002630 <HAL_GPIO_DeInit+0x194>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d101      	bne.n	8002500 <HAL_GPIO_DeInit+0x64>
 80024fc:	2302      	movs	r3, #2
 80024fe:	e004      	b.n	800250a <HAL_GPIO_DeInit+0x6e>
 8002500:	2307      	movs	r3, #7
 8002502:	e002      	b.n	800250a <HAL_GPIO_DeInit+0x6e>
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <HAL_GPIO_DeInit+0x6e>
 8002508:	2300      	movs	r3, #0
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	f002 0203 	and.w	r2, r2, #3
 8002510:	0092      	lsls	r2, r2, #2
 8002512:	4093      	lsls	r3, r2
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	429a      	cmp	r2, r3
 8002518:	d136      	bne.n	8002588 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 800251a:	4b46      	ldr	r3, [pc, #280]	; (8002634 <HAL_GPIO_DeInit+0x198>)
 800251c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	43db      	mvns	r3, r3
 8002524:	4943      	ldr	r1, [pc, #268]	; (8002634 <HAL_GPIO_DeInit+0x198>)
 8002526:	4013      	ands	r3, r2
 8002528:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800252c:	4b41      	ldr	r3, [pc, #260]	; (8002634 <HAL_GPIO_DeInit+0x198>)
 800252e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	43db      	mvns	r3, r3
 8002536:	493f      	ldr	r1, [pc, #252]	; (8002634 <HAL_GPIO_DeInit+0x198>)
 8002538:	4013      	ands	r3, r2
 800253a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800253e:	4b3d      	ldr	r3, [pc, #244]	; (8002634 <HAL_GPIO_DeInit+0x198>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	43db      	mvns	r3, r3
 8002546:	493b      	ldr	r1, [pc, #236]	; (8002634 <HAL_GPIO_DeInit+0x198>)
 8002548:	4013      	ands	r3, r2
 800254a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800254c:	4b39      	ldr	r3, [pc, #228]	; (8002634 <HAL_GPIO_DeInit+0x198>)
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	43db      	mvns	r3, r3
 8002554:	4937      	ldr	r1, [pc, #220]	; (8002634 <HAL_GPIO_DeInit+0x198>)
 8002556:	4013      	ands	r3, r2
 8002558:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f003 0303 	and.w	r3, r3, #3
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	2207      	movs	r2, #7
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800256a:	4a2f      	ldr	r2, [pc, #188]	; (8002628 <HAL_GPIO_DeInit+0x18c>)
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	089b      	lsrs	r3, r3, #2
 8002570:	3302      	adds	r3, #2
 8002572:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	43da      	mvns	r2, r3
 800257a:	482b      	ldr	r0, [pc, #172]	; (8002628 <HAL_GPIO_DeInit+0x18c>)
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	089b      	lsrs	r3, r3, #2
 8002580:	400a      	ands	r2, r1
 8002582:	3302      	adds	r3, #2
 8002584:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	2103      	movs	r1, #3
 8002592:	fa01 f303 	lsl.w	r3, r1, r3
 8002596:	431a      	orrs	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	08da      	lsrs	r2, r3, #3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3208      	adds	r2, #8
 80025a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	220f      	movs	r2, #15
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	08d2      	lsrs	r2, r2, #3
 80025bc:	4019      	ands	r1, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3208      	adds	r2, #8
 80025c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	2103      	movs	r1, #3
 80025d0:	fa01 f303 	lsl.w	r3, r1, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	401a      	ands	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	2101      	movs	r1, #1
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	fa01 f303 	lsl.w	r3, r1, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	401a      	ands	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68da      	ldr	r2, [r3, #12]
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	2103      	movs	r1, #3
 80025fa:	fa01 f303 	lsl.w	r3, r1, r3
 80025fe:	43db      	mvns	r3, r3
 8002600:	401a      	ands	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	3301      	adds	r3, #1
 800260a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	fa22 f303 	lsr.w	r3, r2, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	f47f af49 	bne.w	80024ac <HAL_GPIO_DeInit+0x10>
  }
}
 800261a:	bf00      	nop
 800261c:	bf00      	nop
 800261e:	371c      	adds	r7, #28
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	40010000 	.word	0x40010000
 800262c:	48000400 	.word	0x48000400
 8002630:	48000800 	.word	0x48000800
 8002634:	58000800 	.word	0x58000800

08002638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	460b      	mov	r3, r1
 8002642:	807b      	strh	r3, [r7, #2]
 8002644:	4613      	mov	r3, r2
 8002646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002648:	787b      	ldrb	r3, [r7, #1]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800264e:	887a      	ldrh	r2, [r7, #2]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002654:	e002      	b.n	800265c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002656:	887a      	ldrh	r2, [r7, #2]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr
	...

08002668 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002672:	4b08      	ldr	r3, [pc, #32]	; (8002694 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002674:	68da      	ldr	r2, [r3, #12]
 8002676:	88fb      	ldrh	r3, [r7, #6]
 8002678:	4013      	ands	r3, r2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d006      	beq.n	800268c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800267e:	4a05      	ldr	r2, [pc, #20]	; (8002694 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002680:	88fb      	ldrh	r3, [r7, #6]
 8002682:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002684:	88fb      	ldrh	r3, [r7, #6]
 8002686:	4618      	mov	r0, r3
 8002688:	f000 f806 	bl	8002698 <HAL_GPIO_EXTI_Callback>
  }
}
 800268c:	bf00      	nop
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	58000800 	.word	0x58000800

08002698 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr

080026ac <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026b0:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a03      	ldr	r2, [pc, #12]	; (80026c4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80026b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ba:	6013      	str	r3, [r2, #0]
}
 80026bc:	bf00      	nop
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr
 80026c4:	58000400 	.word	0x58000400

080026c8 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10c      	bne.n	80026f4 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80026da:	4b13      	ldr	r3, [pc, #76]	; (8002728 <HAL_PWR_EnterSLEEPMode+0x60>)
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026e6:	d10d      	bne.n	8002704 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80026e8:	f000 f83c 	bl	8002764 <HAL_PWREx_DisableLowPowerRunMode>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d008      	beq.n	8002704 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 80026f2:	e015      	b.n	8002720 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 80026f4:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <HAL_PWR_EnterSLEEPMode+0x60>)
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8002700:	f000 f822 	bl	8002748 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002704:	4b09      	ldr	r3, [pc, #36]	; (800272c <HAL_PWR_EnterSLEEPMode+0x64>)
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	4a08      	ldr	r2, [pc, #32]	; (800272c <HAL_PWR_EnterSLEEPMode+0x64>)
 800270a:	f023 0304 	bic.w	r3, r3, #4
 800270e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002710:	78fb      	ldrb	r3, [r7, #3]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d101      	bne.n	800271a <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002716:	bf30      	wfi
 8002718:	e002      	b.n	8002720 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800271a:	bf40      	sev
    __WFE();
 800271c:	bf20      	wfe
    __WFE();
 800271e:	bf20      	wfe
  }
}
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	58000400 	.word	0x58000400
 800272c:	e000ed00 	.word	0xe000ed00

08002730 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002734:	4b03      	ldr	r3, [pc, #12]	; (8002744 <HAL_PWREx_GetVoltageRange+0x14>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800273c:	4618      	mov	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr
 8002744:	58000400 	.word	0x58000400

08002748 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800274c:	4b04      	ldr	r3, [pc, #16]	; (8002760 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a03      	ldr	r2, [pc, #12]	; (8002760 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8002752:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002756:	6013      	str	r3, [r2, #0]
}
 8002758:	bf00      	nop
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr
 8002760:	58000400 	.word	0x58000400

08002764 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800276a:	4b16      	ldr	r3, [pc, #88]	; (80027c4 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a15      	ldr	r2, [pc, #84]	; (80027c4 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8002770:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002774:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8002776:	4b14      	ldr	r3, [pc, #80]	; (80027c8 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2232      	movs	r2, #50	; 0x32
 800277c:	fb02 f303 	mul.w	r3, r2, r3
 8002780:	4a12      	ldr	r2, [pc, #72]	; (80027cc <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8002782:	fba2 2303 	umull	r2, r3, r2, r3
 8002786:	0c9b      	lsrs	r3, r3, #18
 8002788:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800278a:	e002      	b.n	8002792 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3b01      	subs	r3, #1
 8002790:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8002792:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800279a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800279e:	d102      	bne.n	80027a6 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f2      	bne.n	800278c <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80027a6:	4b07      	ldr	r3, [pc, #28]	; (80027c4 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027b2:	d101      	bne.n	80027b8 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e000      	b.n	80027ba <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr
 80027c4:	58000400 	.word	0x58000400
 80027c8:	20000000 	.word	0x20000000
 80027cc:	431bde83 	.word	0x431bde83

080027d0 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4603      	mov	r3, r0
 80027d8:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80027da:	4b10      	ldr	r3, [pc, #64]	; (800281c <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f023 0307 	bic.w	r3, r3, #7
 80027e2:	4a0e      	ldr	r2, [pc, #56]	; (800281c <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80027e4:	f043 0302 	orr.w	r3, r3, #2
 80027e8:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80027ea:	4b0d      	ldr	r3, [pc, #52]	; (8002820 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	4a0c      	ldr	r2, [pc, #48]	; (8002820 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80027f0:	f043 0304 	orr.w	r3, r3, #4
 80027f4:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d101      	bne.n	8002800 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80027fc:	bf30      	wfi
 80027fe:	e002      	b.n	8002806 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002800:	bf40      	sev
    __WFE();
 8002802:	bf20      	wfe
    __WFE();
 8002804:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002806:	4b06      	ldr	r3, [pc, #24]	; (8002820 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	4a05      	ldr	r2, [pc, #20]	; (8002820 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800280c:	f023 0304 	bic.w	r3, r3, #4
 8002810:	6113      	str	r3, [r2, #16]
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr
 800281c:	58000400 	.word	0x58000400
 8002820:	e000ed00 	.word	0xe000ed00

08002824 <LL_PWR_IsEnabledBkUpAccess>:
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002828:	4b06      	ldr	r3, [pc, #24]	; (8002844 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002834:	d101      	bne.n	800283a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002836:	2301      	movs	r3, #1
 8002838:	e000      	b.n	800283c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr
 8002844:	58000400 	.word	0x58000400

08002848 <LL_RCC_HSE_EnableTcxo>:
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800284c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002856:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800285a:	6013      	str	r3, [r2, #0]
}
 800285c:	bf00      	nop
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr

08002864 <LL_RCC_HSE_DisableTcxo>:
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002872:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002876:	6013      	str	r3, [r2, #0]
}
 8002878:	bf00      	nop
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr

08002880 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800288e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002892:	d101      	bne.n	8002898 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002894:	2301      	movs	r3, #1
 8002896:	e000      	b.n	800289a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr

080028a2 <LL_RCC_HSE_Enable>:
{
 80028a2:	b480      	push	{r7}
 80028a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80028a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b4:	6013      	str	r3, [r2, #0]
}
 80028b6:	bf00      	nop
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr

080028be <LL_RCC_HSE_Disable>:
{
 80028be:	b480      	push	{r7}
 80028c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80028c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028d0:	6013      	str	r3, [r2, #0]
}
 80028d2:	bf00      	nop
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bc80      	pop	{r7}
 80028d8:	4770      	bx	lr

080028da <LL_RCC_HSE_IsReady>:
{
 80028da:	b480      	push	{r7}
 80028dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80028de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028ec:	d101      	bne.n	80028f2 <LL_RCC_HSE_IsReady+0x18>
 80028ee:	2301      	movs	r3, #1
 80028f0:	e000      	b.n	80028f4 <LL_RCC_HSE_IsReady+0x1a>
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr

080028fc <LL_RCC_HSI_Enable>:
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002900:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800290a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800290e:	6013      	str	r3, [r2, #0]
}
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr

08002918 <LL_RCC_HSI_Disable>:
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800291c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002926:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800292a:	6013      	str	r3, [r2, #0]
}
 800292c:	bf00      	nop
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr

08002934 <LL_RCC_HSI_IsReady>:
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002946:	d101      	bne.n	800294c <LL_RCC_HSI_IsReady+0x18>
 8002948:	2301      	movs	r3, #1
 800294a:	e000      	b.n	800294e <LL_RCC_HSI_IsReady+0x1a>
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr

08002956 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800295e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	061b      	lsls	r3, r3, #24
 800296c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002970:	4313      	orrs	r3, r2
 8002972:	604b      	str	r3, [r1, #4]
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr

0800297e <LL_RCC_LSE_IsReady>:
{
 800297e:	b480      	push	{r7}
 8002980:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b02      	cmp	r3, #2
 8002990:	d101      	bne.n	8002996 <LL_RCC_LSE_IsReady+0x18>
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <LL_RCC_LSE_IsReady+0x1a>
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr

080029a0 <LL_RCC_LSI_Enable>:
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80029a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029b0:	f043 0301 	orr.w	r3, r3, #1
 80029b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80029b8:	bf00      	nop
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr

080029c0 <LL_RCC_LSI_Disable>:
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80029c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029d0:	f023 0301 	bic.w	r3, r3, #1
 80029d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80029d8:	bf00      	nop
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr

080029e0 <LL_RCC_LSI_IsReady>:
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80029e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d101      	bne.n	80029f8 <LL_RCC_LSI_IsReady+0x18>
 80029f4:	2301      	movs	r3, #1
 80029f6:	e000      	b.n	80029fa <LL_RCC_LSI_IsReady+0x1a>
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr

08002a02 <LL_RCC_MSI_Enable>:
{
 8002a02:	b480      	push	{r7}
 8002a04:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	6013      	str	r3, [r2, #0]
}
 8002a16:	bf00      	nop
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr

08002a1e <LL_RCC_MSI_Disable>:
{
 8002a1e:	b480      	push	{r7}
 8002a20:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a2c:	f023 0301 	bic.w	r3, r3, #1
 8002a30:	6013      	str	r3, [r2, #0]
}
 8002a32:	bf00      	nop
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr

08002a3a <LL_RCC_MSI_IsReady>:
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d101      	bne.n	8002a50 <LL_RCC_MSI_IsReady+0x16>
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e000      	b.n	8002a52 <LL_RCC_MSI_IsReady+0x18>
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bc80      	pop	{r7}
 8002a58:	4770      	bx	lr

08002a5a <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d101      	bne.n	8002a70 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e000      	b.n	8002a72 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr

08002a7a <LL_RCC_MSI_GetRange>:
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr

08002a90 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a9c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr

08002aa8 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	021b      	lsls	r3, r3, #8
 8002abe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	604b      	str	r3, [r1, #4]
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <LL_RCC_SetSysClkSource>:
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f023 0203 	bic.w	r2, r3, #3
 8002ae2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	608b      	str	r3, [r1, #8]
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc80      	pop	{r7}
 8002af4:	4770      	bx	lr

08002af6 <LL_RCC_GetSysClkSource>:
{
 8002af6:	b480      	push	{r7}
 8002af8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 030c 	and.w	r3, r3, #12
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr

08002b0c <LL_RCC_SetAHBPrescaler>:
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	608b      	str	r3, [r1, #8]
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr

08002b32 <LL_RCC_SetAHB3Prescaler>:
{
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b3e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b42:	f023 020f 	bic.w	r2, r3, #15
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	091b      	lsrs	r3, r3, #4
 8002b4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc80      	pop	{r7}
 8002b5c:	4770      	bx	lr

08002b5e <LL_RCC_SetAPB1Prescaler>:
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	608b      	str	r3, [r1, #8]
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr

08002b84 <LL_RCC_SetAPB2Prescaler>:
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	608b      	str	r3, [r1, #8]
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr

08002baa <LL_RCC_GetAHBPrescaler>:
{
 8002baa:	b480      	push	{r7}
 8002bac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr

08002bc0 <LL_RCC_GetAHB3Prescaler>:
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002bcc:	011b      	lsls	r3, r3, #4
 8002bce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr

08002bda <LL_RCC_GetAPB1Prescaler>:
{
 8002bda:	b480      	push	{r7}
 8002bdc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr

08002bf0 <LL_RCC_GetAPB2Prescaler>:
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr

08002c06 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002c06:	b480      	push	{r7}
 8002c08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c18:	6013      	str	r3, [r2, #0]
}
 8002c1a:	bf00      	nop
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bc80      	pop	{r7}
 8002c20:	4770      	bx	lr

08002c22 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002c22:	b480      	push	{r7}
 8002c24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c34:	6013      	str	r3, [r2, #0]
}
 8002c36:	bf00      	nop
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr

08002c3e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c50:	d101      	bne.n	8002c56 <LL_RCC_PLL_IsReady+0x18>
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <LL_RCC_PLL_IsReady+0x1a>
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr

08002c60 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	0a1b      	lsrs	r3, r3, #8
 8002c6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr

08002c78 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bc80      	pop	{r7}
 8002c8c:	4770      	bx	lr

08002c8e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr

08002ca4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f003 0303 	and.w	r3, r3, #3
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	4770      	bx	lr

08002cba <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ccc:	d101      	bne.n	8002cd2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e000      	b.n	8002cd4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr

08002cdc <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf0:	d101      	bne.n	8002cf6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr

08002d00 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d12:	d101      	bne.n	8002d18 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002d14:	2301      	movs	r3, #1
 8002d16:	e000      	b.n	8002d1a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr

08002d22 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002d22:	b480      	push	{r7}
 8002d24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d34:	d101      	bne.n	8002d3a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr

08002d44 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b088      	sub	sp, #32
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e38b      	b.n	800346e <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d56:	f7ff fece 	bl	8002af6 <LL_RCC_GetSysClkSource>
 8002d5a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d5c:	f7ff ffa2 	bl	8002ca4 <LL_RCC_PLL_GetMainSource>
 8002d60:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0320 	and.w	r3, r3, #32
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 80c9 	beq.w	8002f02 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d005      	beq.n	8002d82 <HAL_RCC_OscConfig+0x3e>
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	2b0c      	cmp	r3, #12
 8002d7a:	d17b      	bne.n	8002e74 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d178      	bne.n	8002e74 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d82:	f7ff fe5a 	bl	8002a3a <LL_RCC_MSI_IsReady>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d005      	beq.n	8002d98 <HAL_RCC_OscConfig+0x54>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e36a      	b.n	800346e <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d005      	beq.n	8002db6 <HAL_RCC_OscConfig+0x72>
 8002daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002db4:	e006      	b.n	8002dc4 <HAL_RCC_OscConfig+0x80>
 8002db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dbe:	091b      	lsrs	r3, r3, #4
 8002dc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d222      	bcs.n	8002e0e <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f000 fd51 	bl	8003874 <RCC_SetFlashLatencyFromMSIRange>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e348      	b.n	800346e <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002de6:	f043 0308 	orr.w	r3, r3, #8
 8002dea:	6013      	str	r3, [r2, #0]
 8002dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff fe4e 	bl	8002aa8 <LL_RCC_MSI_SetCalibTrimming>
 8002e0c:	e021      	b.n	8002e52 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e18:	f043 0308 	orr.w	r3, r3, #8
 8002e1c:	6013      	str	r3, [r2, #0]
 8002e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e30:	4313      	orrs	r3, r2
 8002e32:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff fe35 	bl	8002aa8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 fd16 	bl	8003874 <RCC_SetFlashLatencyFromMSIRange>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e30d      	b.n	800346e <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002e52:	f000 fcd7 	bl	8003804 <HAL_RCC_GetHCLKFreq>
 8002e56:	4603      	mov	r3, r0
 8002e58:	4aa1      	ldr	r2, [pc, #644]	; (80030e0 <HAL_RCC_OscConfig+0x39c>)
 8002e5a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e5c:	4ba1      	ldr	r3, [pc, #644]	; (80030e4 <HAL_RCC_OscConfig+0x3a0>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7fd fe47 	bl	8000af4 <HAL_InitTick>
 8002e66:	4603      	mov	r3, r0
 8002e68:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002e6a:	7cfb      	ldrb	r3, [r7, #19]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d047      	beq.n	8002f00 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8002e70:	7cfb      	ldrb	r3, [r7, #19]
 8002e72:	e2fc      	b.n	800346e <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d02c      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e7c:	f7ff fdc1 	bl	8002a02 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e80:	f7fd fe42 	bl	8000b08 <HAL_GetTick>
 8002e84:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e88:	f7fd fe3e 	bl	8000b08 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e2e9      	b.n	800346e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002e9a:	f7ff fdce 	bl	8002a3a <LL_RCC_MSI_IsReady>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0f1      	beq.n	8002e88 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eae:	f043 0308 	orr.w	r3, r3, #8
 8002eb2:	6013      	str	r3, [r2, #0]
 8002eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff fdea 	bl	8002aa8 <LL_RCC_MSI_SetCalibTrimming>
 8002ed4:	e015      	b.n	8002f02 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ed6:	f7ff fda2 	bl	8002a1e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002eda:	f7fd fe15 	bl	8000b08 <HAL_GetTick>
 8002ede:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002ee0:	e008      	b.n	8002ef4 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ee2:	f7fd fe11 	bl	8000b08 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e2bc      	b.n	800346e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002ef4:	f7ff fda1 	bl	8002a3a <LL_RCC_MSI_IsReady>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1f1      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x19e>
 8002efe:	e000      	b.n	8002f02 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f00:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d05f      	beq.n	8002fce <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	d005      	beq.n	8002f20 <HAL_RCC_OscConfig+0x1dc>
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	2b0c      	cmp	r3, #12
 8002f18:	d10d      	bne.n	8002f36 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	2b03      	cmp	r3, #3
 8002f1e:	d10a      	bne.n	8002f36 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f20:	f7ff fcdb 	bl	80028da <LL_RCC_HSE_IsReady>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d050      	beq.n	8002fcc <HAL_RCC_OscConfig+0x288>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d14c      	bne.n	8002fcc <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e29b      	b.n	800346e <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f54:	d102      	bne.n	8002f5c <HAL_RCC_OscConfig+0x218>
 8002f56:	f7ff fca4 	bl	80028a2 <LL_RCC_HSE_Enable>
 8002f5a:	e00d      	b.n	8002f78 <HAL_RCC_OscConfig+0x234>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002f64:	d104      	bne.n	8002f70 <HAL_RCC_OscConfig+0x22c>
 8002f66:	f7ff fc6f 	bl	8002848 <LL_RCC_HSE_EnableTcxo>
 8002f6a:	f7ff fc9a 	bl	80028a2 <LL_RCC_HSE_Enable>
 8002f6e:	e003      	b.n	8002f78 <HAL_RCC_OscConfig+0x234>
 8002f70:	f7ff fca5 	bl	80028be <LL_RCC_HSE_Disable>
 8002f74:	f7ff fc76 	bl	8002864 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d012      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f80:	f7fd fdc2 	bl	8000b08 <HAL_GetTick>
 8002f84:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f88:	f7fd fdbe 	bl	8000b08 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b64      	cmp	r3, #100	; 0x64
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e269      	b.n	800346e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002f9a:	f7ff fc9e 	bl	80028da <LL_RCC_HSE_IsReady>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0f1      	beq.n	8002f88 <HAL_RCC_OscConfig+0x244>
 8002fa4:	e013      	b.n	8002fce <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa6:	f7fd fdaf 	bl	8000b08 <HAL_GetTick>
 8002faa:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002fac:	e008      	b.n	8002fc0 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fae:	f7fd fdab 	bl	8000b08 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b64      	cmp	r3, #100	; 0x64
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e256      	b.n	800346e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002fc0:	f7ff fc8b 	bl	80028da <LL_RCC_HSE_IsReady>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f1      	bne.n	8002fae <HAL_RCC_OscConfig+0x26a>
 8002fca:	e000      	b.n	8002fce <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fcc:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d04b      	beq.n	8003072 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	2b04      	cmp	r3, #4
 8002fde:	d005      	beq.n	8002fec <HAL_RCC_OscConfig+0x2a8>
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	2b0c      	cmp	r3, #12
 8002fe4:	d113      	bne.n	800300e <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d110      	bne.n	800300e <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fec:	f7ff fca2 	bl	8002934 <LL_RCC_HSI_IsReady>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d005      	beq.n	8003002 <HAL_RCC_OscConfig+0x2be>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e235      	b.n	800346e <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff fca5 	bl	8002956 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800300c:	e031      	b.n	8003072 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d019      	beq.n	800304a <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003016:	f7ff fc71 	bl	80028fc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301a:	f7fd fd75 	bl	8000b08 <HAL_GetTick>
 800301e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003022:	f7fd fd71 	bl	8000b08 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e21c      	b.n	800346e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003034:	f7ff fc7e 	bl	8002934 <LL_RCC_HSI_IsReady>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0f1      	beq.n	8003022 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff fc87 	bl	8002956 <LL_RCC_HSI_SetCalibTrimming>
 8003048:	e013      	b.n	8003072 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800304a:	f7ff fc65 	bl	8002918 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304e:	f7fd fd5b 	bl	8000b08 <HAL_GetTick>
 8003052:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003056:	f7fd fd57 	bl	8000b08 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e202      	b.n	800346e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003068:	f7ff fc64 	bl	8002934 <LL_RCC_HSI_IsReady>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1f1      	bne.n	8003056 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b00      	cmp	r3, #0
 800307c:	d06f      	beq.n	800315e <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d057      	beq.n	8003136 <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 8003086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800308a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800308e:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	69da      	ldr	r2, [r3, #28]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f003 0310 	and.w	r3, r3, #16
 800309a:	429a      	cmp	r2, r3
 800309c:	d036      	beq.n	800310c <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d006      	beq.n	80030b6 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e1db      	b.n	800346e <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d018      	beq.n	80030f2 <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 80030c0:	f7ff fc7e 	bl	80029c0 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030c4:	f7fd fd20 	bl	8000b08 <HAL_GetTick>
 80030c8:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80030ca:	e00d      	b.n	80030e8 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030cc:	f7fd fd1c 	bl	8000b08 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b11      	cmp	r3, #17
 80030d8:	d906      	bls.n	80030e8 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e1c7      	b.n	800346e <HAL_RCC_OscConfig+0x72a>
 80030de:	bf00      	nop
 80030e0:	20000000 	.word	0x20000000
 80030e4:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 80030e8:	f7ff fc7a 	bl	80029e0 <LL_RCC_LSI_IsReady>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1ec      	bne.n	80030cc <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80030f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030fa:	f023 0210 	bic.w	r2, r3, #16
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800310c:	f7ff fc48 	bl	80029a0 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003110:	f7fd fcfa 	bl	8000b08 <HAL_GetTick>
 8003114:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003118:	f7fd fcf6 	bl	8000b08 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b11      	cmp	r3, #17
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e1a1      	b.n	800346e <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 800312a:	f7ff fc59 	bl	80029e0 <LL_RCC_LSI_IsReady>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d0f1      	beq.n	8003118 <HAL_RCC_OscConfig+0x3d4>
 8003134:	e013      	b.n	800315e <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003136:	f7ff fc43 	bl	80029c0 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313a:	f7fd fce5 	bl	8000b08 <HAL_GetTick>
 800313e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003142:	f7fd fce1 	bl	8000b08 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b11      	cmp	r3, #17
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e18c      	b.n	800346e <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8003154:	f7ff fc44 	bl	80029e0 <LL_RCC_LSI_IsReady>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f1      	bne.n	8003142 <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0304 	and.w	r3, r3, #4
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 80d8 	beq.w	800331c <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800316c:	f7ff fb5a 	bl	8002824 <LL_PWR_IsEnabledBkUpAccess>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d113      	bne.n	800319e <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003176:	f7ff fa99 	bl	80026ac <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800317a:	f7fd fcc5 	bl	8000b08 <HAL_GetTick>
 800317e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003180:	e008      	b.n	8003194 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003182:	f7fd fcc1 	bl	8000b08 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e16c      	b.n	800346e <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003194:	f7ff fb46 	bl	8002824 <LL_PWR_IsEnabledBkUpAccess>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0f1      	beq.n	8003182 <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d07b      	beq.n	800329e <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	2b85      	cmp	r3, #133	; 0x85
 80031ac:	d003      	beq.n	80031b6 <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	2b05      	cmp	r3, #5
 80031b4:	d109      	bne.n	80031ca <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80031b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031c2:	f043 0304 	orr.w	r3, r3, #4
 80031c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ca:	f7fd fc9d 	bl	8000b08 <HAL_GetTick>
 80031ce:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80031d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031dc:	f043 0301 	orr.w	r3, r3, #1
 80031e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80031e4:	e00a      	b.n	80031fc <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e6:	f7fd fc8f 	bl	8000b08 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e138      	b.n	800346e <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 80031fc:	f7ff fbbf 	bl	800297e <LL_RCC_LSE_IsReady>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0ef      	beq.n	80031e6 <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	2b81      	cmp	r3, #129	; 0x81
 800320c:	d003      	beq.n	8003216 <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	2b85      	cmp	r3, #133	; 0x85
 8003214:	d121      	bne.n	800325a <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003216:	f7fd fc77 	bl	8000b08 <HAL_GetTick>
 800321a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800321c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003224:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800322c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003230:	e00a      	b.n	8003248 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003232:	f7fd fc69 	bl	8000b08 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003240:	4293      	cmp	r3, r2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e112      	b.n	800346e <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800324c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003250:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0ec      	beq.n	8003232 <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003258:	e060      	b.n	800331c <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325a:	f7fd fc55 	bl	8000b08 <HAL_GetTick>
 800325e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003268:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800326c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003270:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003274:	e00a      	b.n	800328c <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003276:	f7fd fc47 	bl	8000b08 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	f241 3288 	movw	r2, #5000	; 0x1388
 8003284:	4293      	cmp	r3, r2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e0f0      	b.n	800346e <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800328c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003294:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1ec      	bne.n	8003276 <HAL_RCC_OscConfig+0x532>
 800329c:	e03e      	b.n	800331c <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329e:	f7fd fc33 	bl	8000b08 <HAL_GetTick>
 80032a2:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80032a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80032b8:	e00a      	b.n	80032d0 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ba:	f7fd fc25 	bl	8000b08 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e0ce      	b.n	800346e <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80032d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1ec      	bne.n	80032ba <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e0:	f7fd fc12 	bl	8000b08 <HAL_GetTick>
 80032e4:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80032e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032f2:	f023 0301 	bic.w	r3, r3, #1
 80032f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80032fa:	e00a      	b.n	8003312 <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032fc:	f7fd fc04 	bl	8000b08 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	f241 3288 	movw	r2, #5000	; 0x1388
 800330a:	4293      	cmp	r3, r2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e0ad      	b.n	800346e <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003312:	f7ff fb34 	bl	800297e <LL_RCC_LSE_IsReady>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1ef      	bne.n	80032fc <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 80a3 	beq.w	800346c <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	2b0c      	cmp	r3, #12
 800332a:	d076      	beq.n	800341a <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003330:	2b02      	cmp	r3, #2
 8003332:	d14b      	bne.n	80033cc <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003334:	f7ff fc75 	bl	8002c22 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003338:	f7fd fbe6 	bl	8000b08 <HAL_GetTick>
 800333c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003340:	f7fd fbe2 	bl	8000b08 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b0a      	cmp	r3, #10
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e08d      	b.n	800346e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003352:	f7ff fc74 	bl	8002c3e <LL_RCC_PLL_IsReady>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1f1      	bne.n	8003340 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800335c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003360:	68da      	ldr	r2, [r3, #12]
 8003362:	4b45      	ldr	r3, [pc, #276]	; (8003478 <HAL_RCC_OscConfig+0x734>)
 8003364:	4013      	ands	r3, r2
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800336e:	4311      	orrs	r1, r2
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003374:	0212      	lsls	r2, r2, #8
 8003376:	4311      	orrs	r1, r2
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800337c:	4311      	orrs	r1, r2
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003382:	4311      	orrs	r1, r2
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003388:	430a      	orrs	r2, r1
 800338a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800338e:	4313      	orrs	r3, r2
 8003390:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003392:	f7ff fc38 	bl	8002c06 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a6:	f7fd fbaf 	bl	8000b08 <HAL_GetTick>
 80033aa:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80033ac:	e008      	b.n	80033c0 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ae:	f7fd fbab 	bl	8000b08 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b0a      	cmp	r3, #10
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e056      	b.n	800346e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 80033c0:	f7ff fc3d 	bl	8002c3e <LL_RCC_PLL_IsReady>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0f1      	beq.n	80033ae <HAL_RCC_OscConfig+0x66a>
 80033ca:	e04f      	b.n	800346c <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033cc:	f7ff fc29 	bl	8002c22 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80033d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033da:	f023 0303 	bic.w	r3, r3, #3
 80033de:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 80033e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033ea:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80033ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f2:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f4:	f7fd fb88 	bl	8000b08 <HAL_GetTick>
 80033f8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033fc:	f7fd fb84 	bl	8000b08 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b0a      	cmp	r3, #10
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e02f      	b.n	800346e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 800340e:	f7ff fc16 	bl	8002c3e <LL_RCC_PLL_IsReady>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1f1      	bne.n	80033fc <HAL_RCC_OscConfig+0x6b8>
 8003418:	e028      	b.n	800346c <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341e:	2b01      	cmp	r3, #1
 8003420:	d101      	bne.n	8003426 <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e023      	b.n	800346e <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	f003 0203 	and.w	r2, r3, #3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003438:	429a      	cmp	r2, r3
 800343a:	d115      	bne.n	8003468 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003446:	429a      	cmp	r2, r3
 8003448:	d10e      	bne.n	8003468 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003454:	021b      	lsls	r3, r3, #8
 8003456:	429a      	cmp	r2, r3
 8003458:	d106      	bne.n	8003468 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003464:	429a      	cmp	r2, r3
 8003466:	d001      	beq.n	800346c <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e000      	b.n	800346e <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3720      	adds	r7, #32
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	11c1808c 	.word	0x11c1808c

0800347c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e10f      	b.n	80036b0 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003490:	4b89      	ldr	r3, [pc, #548]	; (80036b8 <HAL_RCC_ClockConfig+0x23c>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	429a      	cmp	r2, r3
 800349c:	d91b      	bls.n	80034d6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349e:	4b86      	ldr	r3, [pc, #536]	; (80036b8 <HAL_RCC_ClockConfig+0x23c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f023 0207 	bic.w	r2, r3, #7
 80034a6:	4984      	ldr	r1, [pc, #528]	; (80036b8 <HAL_RCC_ClockConfig+0x23c>)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ae:	f7fd fb2b 	bl	8000b08 <HAL_GetTick>
 80034b2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80034b6:	f7fd fb27 	bl	8000b08 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e0f3      	b.n	80036b0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c8:	4b7b      	ldr	r3, [pc, #492]	; (80036b8 <HAL_RCC_ClockConfig+0x23c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d1ef      	bne.n	80034b6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d016      	beq.n	8003510 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff fb10 	bl	8002b0c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80034ec:	f7fd fb0c 	bl	8000b08 <HAL_GetTick>
 80034f0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034f4:	f7fd fb08 	bl	8000b08 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e0d4      	b.n	80036b0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003506:	f7ff fbd8 	bl	8002cba <LL_RCC_IsActiveFlag_HPRE>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0f1      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003518:	2b00      	cmp	r3, #0
 800351a:	d016      	beq.n	800354a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff fb06 	bl	8002b32 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003526:	f7fd faef 	bl	8000b08 <HAL_GetTick>
 800352a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800352c:	e008      	b.n	8003540 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800352e:	f7fd faeb 	bl	8000b08 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d901      	bls.n	8003540 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e0b7      	b.n	80036b0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003540:	f7ff fbcc 	bl	8002cdc <LL_RCC_IsActiveFlag_SHDHPRE>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0f1      	beq.n	800352e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	2b00      	cmp	r3, #0
 8003554:	d016      	beq.n	8003584 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff faff 	bl	8002b5e <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003560:	f7fd fad2 	bl	8000b08 <HAL_GetTick>
 8003564:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003566:	e008      	b.n	800357a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003568:	f7fd face 	bl	8000b08 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e09a      	b.n	80036b0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800357a:	f7ff fbc1 	bl	8002d00 <LL_RCC_IsActiveFlag_PPRE1>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0f1      	beq.n	8003568 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0308 	and.w	r3, r3, #8
 800358c:	2b00      	cmp	r3, #0
 800358e:	d017      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff faf4 	bl	8002b84 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800359c:	f7fd fab4 	bl	8000b08 <HAL_GetTick>
 80035a0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80035a4:	f7fd fab0 	bl	8000b08 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e07c      	b.n	80036b0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80035b6:	f7ff fbb4 	bl	8002d22 <LL_RCC_IsActiveFlag_PPRE2>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0f1      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d043      	beq.n	8003654 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d106      	bne.n	80035e2 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80035d4:	f7ff f981 	bl	80028da <LL_RCC_HSE_IsReady>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d11e      	bne.n	800361c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e066      	b.n	80036b0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b03      	cmp	r3, #3
 80035e8:	d106      	bne.n	80035f8 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80035ea:	f7ff fb28 	bl	8002c3e <LL_RCC_PLL_IsReady>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d113      	bne.n	800361c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e05b      	b.n	80036b0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d106      	bne.n	800360e <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003600:	f7ff fa1b 	bl	8002a3a <LL_RCC_MSI_IsReady>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d108      	bne.n	800361c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e050      	b.n	80036b0 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800360e:	f7ff f991 	bl	8002934 <LL_RCC_HSI_IsReady>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e049      	b.n	80036b0 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	4618      	mov	r0, r3
 8003622:	f7ff fa55 	bl	8002ad0 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003626:	f7fd fa6f 	bl	8000b08 <HAL_GetTick>
 800362a:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800362c:	e00a      	b.n	8003644 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800362e:	f7fd fa6b 	bl	8000b08 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	f241 3288 	movw	r2, #5000	; 0x1388
 800363c:	4293      	cmp	r3, r2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e035      	b.n	80036b0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003644:	f7ff fa57 	bl	8002af6 <LL_RCC_GetSysClkSource>
 8003648:	4602      	mov	r2, r0
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	429a      	cmp	r2, r3
 8003652:	d1ec      	bne.n	800362e <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003654:	4b18      	ldr	r3, [pc, #96]	; (80036b8 <HAL_RCC_ClockConfig+0x23c>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d21b      	bcs.n	800369a <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003662:	4b15      	ldr	r3, [pc, #84]	; (80036b8 <HAL_RCC_ClockConfig+0x23c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f023 0207 	bic.w	r2, r3, #7
 800366a:	4913      	ldr	r1, [pc, #76]	; (80036b8 <HAL_RCC_ClockConfig+0x23c>)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	4313      	orrs	r3, r2
 8003670:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003672:	f7fd fa49 	bl	8000b08 <HAL_GetTick>
 8003676:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003678:	e008      	b.n	800368c <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800367a:	f7fd fa45 	bl	8000b08 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e011      	b.n	80036b0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800368c:	4b0a      	ldr	r3, [pc, #40]	; (80036b8 <HAL_RCC_ClockConfig+0x23c>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0307 	and.w	r3, r3, #7
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d1ef      	bne.n	800367a <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800369a:	f000 f8b3 	bl	8003804 <HAL_RCC_GetHCLKFreq>
 800369e:	4603      	mov	r3, r0
 80036a0:	4a06      	ldr	r2, [pc, #24]	; (80036bc <HAL_RCC_ClockConfig+0x240>)
 80036a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80036a4:	4b06      	ldr	r3, [pc, #24]	; (80036c0 <HAL_RCC_ClockConfig+0x244>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7fd fa23 	bl	8000af4 <HAL_InitTick>
 80036ae:	4603      	mov	r3, r0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	58004000 	.word	0x58004000
 80036bc:	20000000 	.word	0x20000000
 80036c0:	20000004 	.word	0x20000004

080036c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c4:	b590      	push	{r4, r7, lr}
 80036c6:	b087      	sub	sp, #28
 80036c8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80036ca:	2300      	movs	r3, #0
 80036cc:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036d2:	f7ff fa10 	bl	8002af6 <LL_RCC_GetSysClkSource>
 80036d6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036d8:	f7ff fae4 	bl	8002ca4 <LL_RCC_PLL_GetMainSource>
 80036dc:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <HAL_RCC_GetSysClockFreq+0x2c>
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2b0c      	cmp	r3, #12
 80036e8:	d139      	bne.n	800375e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d136      	bne.n	800375e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80036f0:	f7ff f9b3 	bl	8002a5a <LL_RCC_MSI_IsEnabledRangeSelect>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d115      	bne.n	8003726 <HAL_RCC_GetSysClockFreq+0x62>
 80036fa:	f7ff f9ae 	bl	8002a5a <LL_RCC_MSI_IsEnabledRangeSelect>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b01      	cmp	r3, #1
 8003702:	d106      	bne.n	8003712 <HAL_RCC_GetSysClockFreq+0x4e>
 8003704:	f7ff f9b9 	bl	8002a7a <LL_RCC_MSI_GetRange>
 8003708:	4603      	mov	r3, r0
 800370a:	0a1b      	lsrs	r3, r3, #8
 800370c:	f003 030f 	and.w	r3, r3, #15
 8003710:	e005      	b.n	800371e <HAL_RCC_GetSysClockFreq+0x5a>
 8003712:	f7ff f9bd 	bl	8002a90 <LL_RCC_MSI_GetRangeAfterStandby>
 8003716:	4603      	mov	r3, r0
 8003718:	0a1b      	lsrs	r3, r3, #8
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	4a36      	ldr	r2, [pc, #216]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x134>)
 8003720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003724:	e014      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0x8c>
 8003726:	f7ff f998 	bl	8002a5a <LL_RCC_MSI_IsEnabledRangeSelect>
 800372a:	4603      	mov	r3, r0
 800372c:	2b01      	cmp	r3, #1
 800372e:	d106      	bne.n	800373e <HAL_RCC_GetSysClockFreq+0x7a>
 8003730:	f7ff f9a3 	bl	8002a7a <LL_RCC_MSI_GetRange>
 8003734:	4603      	mov	r3, r0
 8003736:	091b      	lsrs	r3, r3, #4
 8003738:	f003 030f 	and.w	r3, r3, #15
 800373c:	e005      	b.n	800374a <HAL_RCC_GetSysClockFreq+0x86>
 800373e:	f7ff f9a7 	bl	8002a90 <LL_RCC_MSI_GetRangeAfterStandby>
 8003742:	4603      	mov	r3, r0
 8003744:	091b      	lsrs	r3, r3, #4
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	4a2b      	ldr	r2, [pc, #172]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x134>)
 800374c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003750:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d115      	bne.n	8003784 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800375c:	e012      	b.n	8003784 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	2b04      	cmp	r3, #4
 8003762:	d102      	bne.n	800376a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003764:	4b25      	ldr	r3, [pc, #148]	; (80037fc <HAL_RCC_GetSysClockFreq+0x138>)
 8003766:	617b      	str	r3, [r7, #20]
 8003768:	e00c      	b.n	8003784 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b08      	cmp	r3, #8
 800376e:	d109      	bne.n	8003784 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003770:	f7ff f886 	bl	8002880 <LL_RCC_HSE_IsEnabledDiv2>
 8003774:	4603      	mov	r3, r0
 8003776:	2b01      	cmp	r3, #1
 8003778:	d102      	bne.n	8003780 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800377a:	4b20      	ldr	r3, [pc, #128]	; (80037fc <HAL_RCC_GetSysClockFreq+0x138>)
 800377c:	617b      	str	r3, [r7, #20]
 800377e:	e001      	b.n	8003784 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003780:	4b1f      	ldr	r3, [pc, #124]	; (8003800 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003782:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003784:	f7ff f9b7 	bl	8002af6 <LL_RCC_GetSysClkSource>
 8003788:	4603      	mov	r3, r0
 800378a:	2b0c      	cmp	r3, #12
 800378c:	d12f      	bne.n	80037ee <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800378e:	f7ff fa89 	bl	8002ca4 <LL_RCC_PLL_GetMainSource>
 8003792:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b02      	cmp	r3, #2
 8003798:	d003      	beq.n	80037a2 <HAL_RCC_GetSysClockFreq+0xde>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b03      	cmp	r3, #3
 800379e:	d003      	beq.n	80037a8 <HAL_RCC_GetSysClockFreq+0xe4>
 80037a0:	e00d      	b.n	80037be <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80037a2:	4b16      	ldr	r3, [pc, #88]	; (80037fc <HAL_RCC_GetSysClockFreq+0x138>)
 80037a4:	60fb      	str	r3, [r7, #12]
        break;
 80037a6:	e00d      	b.n	80037c4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80037a8:	f7ff f86a 	bl	8002880 <LL_RCC_HSE_IsEnabledDiv2>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d102      	bne.n	80037b8 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80037b2:	4b12      	ldr	r3, [pc, #72]	; (80037fc <HAL_RCC_GetSysClockFreq+0x138>)
 80037b4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80037b6:	e005      	b.n	80037c4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80037b8:	4b11      	ldr	r3, [pc, #68]	; (8003800 <HAL_RCC_GetSysClockFreq+0x13c>)
 80037ba:	60fb      	str	r3, [r7, #12]
        break;
 80037bc:	e002      	b.n	80037c4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	60fb      	str	r3, [r7, #12]
        break;
 80037c2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80037c4:	f7ff fa4c 	bl	8002c60 <LL_RCC_PLL_GetN>
 80037c8:	4602      	mov	r2, r0
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	fb03 f402 	mul.w	r4, r3, r2
 80037d0:	f7ff fa5d 	bl	8002c8e <LL_RCC_PLL_GetDivider>
 80037d4:	4603      	mov	r3, r0
 80037d6:	091b      	lsrs	r3, r3, #4
 80037d8:	3301      	adds	r3, #1
 80037da:	fbb4 f4f3 	udiv	r4, r4, r3
 80037de:	f7ff fa4b 	bl	8002c78 <LL_RCC_PLL_GetR>
 80037e2:	4603      	mov	r3, r0
 80037e4:	0f5b      	lsrs	r3, r3, #29
 80037e6:	3301      	adds	r3, #1
 80037e8:	fbb4 f3f3 	udiv	r3, r4, r3
 80037ec:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80037ee:	697b      	ldr	r3, [r7, #20]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	371c      	adds	r7, #28
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd90      	pop	{r4, r7, pc}
 80037f8:	0800bc84 	.word	0x0800bc84
 80037fc:	00f42400 	.word	0x00f42400
 8003800:	01e84800 	.word	0x01e84800

08003804 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003804:	b598      	push	{r3, r4, r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003808:	f7ff ff5c 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 800380c:	4604      	mov	r4, r0
 800380e:	f7ff f9cc 	bl	8002baa <LL_RCC_GetAHBPrescaler>
 8003812:	4603      	mov	r3, r0
 8003814:	091b      	lsrs	r3, r3, #4
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	4a03      	ldr	r2, [pc, #12]	; (8003828 <HAL_RCC_GetHCLKFreq+0x24>)
 800381c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003820:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003824:	4618      	mov	r0, r3
 8003826:	bd98      	pop	{r3, r4, r7, pc}
 8003828:	0800bc24 	.word	0x0800bc24

0800382c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800382c:	b598      	push	{r3, r4, r7, lr}
 800382e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003830:	f7ff ffe8 	bl	8003804 <HAL_RCC_GetHCLKFreq>
 8003834:	4604      	mov	r4, r0
 8003836:	f7ff f9d0 	bl	8002bda <LL_RCC_GetAPB1Prescaler>
 800383a:	4603      	mov	r3, r0
 800383c:	0a1b      	lsrs	r3, r3, #8
 800383e:	4a03      	ldr	r2, [pc, #12]	; (800384c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003844:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003848:	4618      	mov	r0, r3
 800384a:	bd98      	pop	{r3, r4, r7, pc}
 800384c:	0800bc64 	.word	0x0800bc64

08003850 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003850:	b598      	push	{r3, r4, r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003854:	f7ff ffd6 	bl	8003804 <HAL_RCC_GetHCLKFreq>
 8003858:	4604      	mov	r4, r0
 800385a:	f7ff f9c9 	bl	8002bf0 <LL_RCC_GetAPB2Prescaler>
 800385e:	4603      	mov	r3, r0
 8003860:	0adb      	lsrs	r3, r3, #11
 8003862:	4a03      	ldr	r2, [pc, #12]	; (8003870 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003868:	fa24 f303 	lsr.w	r3, r4, r3
}
 800386c:	4618      	mov	r0, r3
 800386e:	bd98      	pop	{r3, r4, r7, pc}
 8003870:	0800bc64 	.word	0x0800bc64

08003874 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003874:	b590      	push	{r4, r7, lr}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	091b      	lsrs	r3, r3, #4
 8003880:	f003 030f 	and.w	r3, r3, #15
 8003884:	4a10      	ldr	r2, [pc, #64]	; (80038c8 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800388a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800388c:	f7ff f998 	bl	8002bc0 <LL_RCC_GetAHB3Prescaler>
 8003890:	4603      	mov	r3, r0
 8003892:	091b      	lsrs	r3, r3, #4
 8003894:	f003 030f 	and.w	r3, r3, #15
 8003898:	4a0c      	ldr	r2, [pc, #48]	; (80038cc <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800389a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a4:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	4a09      	ldr	r2, [pc, #36]	; (80038d0 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80038aa:	fba2 2303 	umull	r2, r3, r2, r3
 80038ae:	0c9c      	lsrs	r4, r3, #18
 80038b0:	f7fe ff3e 	bl	8002730 <HAL_PWREx_GetVoltageRange>
 80038b4:	4603      	mov	r3, r0
 80038b6:	4619      	mov	r1, r3
 80038b8:	4620      	mov	r0, r4
 80038ba:	f000 f80b 	bl	80038d4 <RCC_SetFlashLatency>
 80038be:	4603      	mov	r3, r0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd90      	pop	{r4, r7, pc}
 80038c8:	0800bc84 	.word	0x0800bc84
 80038cc:	0800bc24 	.word	0x0800bc24
 80038d0:	431bde83 	.word	0x431bde83

080038d4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b08e      	sub	sp, #56	; 0x38
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80038de:	4a3a      	ldr	r2, [pc, #232]	; (80039c8 <RCC_SetFlashLatency+0xf4>)
 80038e0:	f107 0320 	add.w	r3, r7, #32
 80038e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038e8:	6018      	str	r0, [r3, #0]
 80038ea:	3304      	adds	r3, #4
 80038ec:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80038ee:	4a37      	ldr	r2, [pc, #220]	; (80039cc <RCC_SetFlashLatency+0xf8>)
 80038f0:	f107 0318 	add.w	r3, r7, #24
 80038f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038f8:	6018      	str	r0, [r3, #0]
 80038fa:	3304      	adds	r3, #4
 80038fc:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80038fe:	4a34      	ldr	r2, [pc, #208]	; (80039d0 <RCC_SetFlashLatency+0xfc>)
 8003900:	f107 030c 	add.w	r3, r7, #12
 8003904:	ca07      	ldmia	r2, {r0, r1, r2}
 8003906:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800390a:	2300      	movs	r3, #0
 800390c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003914:	d11b      	bne.n	800394e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003916:	2300      	movs	r3, #0
 8003918:	633b      	str	r3, [r7, #48]	; 0x30
 800391a:	e014      	b.n	8003946 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800391c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	3338      	adds	r3, #56	; 0x38
 8003922:	443b      	add	r3, r7
 8003924:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003928:	461a      	mov	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4293      	cmp	r3, r2
 800392e:	d807      	bhi.n	8003940 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	3338      	adds	r3, #56	; 0x38
 8003936:	443b      	add	r3, r7
 8003938:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800393c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800393e:	e021      	b.n	8003984 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003942:	3301      	adds	r3, #1
 8003944:	633b      	str	r3, [r7, #48]	; 0x30
 8003946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003948:	2b02      	cmp	r3, #2
 800394a:	d9e7      	bls.n	800391c <RCC_SetFlashLatency+0x48>
 800394c:	e01a      	b.n	8003984 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800394e:	2300      	movs	r3, #0
 8003950:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003952:	e014      	b.n	800397e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	3338      	adds	r3, #56	; 0x38
 800395a:	443b      	add	r3, r7
 800395c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003960:	461a      	mov	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4293      	cmp	r3, r2
 8003966:	d807      	bhi.n	8003978 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	3338      	adds	r3, #56	; 0x38
 800396e:	443b      	add	r3, r7
 8003970:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003974:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003976:	e005      	b.n	8003984 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800397a:	3301      	adds	r3, #1
 800397c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800397e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003980:	2b02      	cmp	r3, #2
 8003982:	d9e7      	bls.n	8003954 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003984:	4b13      	ldr	r3, [pc, #76]	; (80039d4 <RCC_SetFlashLatency+0x100>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f023 0207 	bic.w	r2, r3, #7
 800398c:	4911      	ldr	r1, [pc, #68]	; (80039d4 <RCC_SetFlashLatency+0x100>)
 800398e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003990:	4313      	orrs	r3, r2
 8003992:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003994:	f7fd f8b8 	bl	8000b08 <HAL_GetTick>
 8003998:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800399a:	e008      	b.n	80039ae <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800399c:	f7fd f8b4 	bl	8000b08 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d901      	bls.n	80039ae <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e007      	b.n	80039be <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80039ae:	4b09      	ldr	r3, [pc, #36]	; (80039d4 <RCC_SetFlashLatency+0x100>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d1ef      	bne.n	800399c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3738      	adds	r7, #56	; 0x38
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	0800bb08 	.word	0x0800bb08
 80039cc:	0800bb10 	.word	0x0800bb10
 80039d0:	0800bb18 	.word	0x0800bb18
 80039d4:	58004000 	.word	0x58004000

080039d8 <LL_RCC_LSE_IsReady>:
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80039dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d101      	bne.n	80039f0 <LL_RCC_LSE_IsReady+0x18>
 80039ec:	2301      	movs	r3, #1
 80039ee:	e000      	b.n	80039f2 <LL_RCC_LSE_IsReady+0x1a>
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bc80      	pop	{r7}
 80039f8:	4770      	bx	lr

080039fa <LL_RCC_SetUSARTClockSource>:
{
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003a02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a06:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	0c1b      	lsrs	r3, r3, #16
 8003a0e:	43db      	mvns	r3, r3
 8003a10:	401a      	ands	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bc80      	pop	{r7}
 8003a28:	4770      	bx	lr

08003a2a <LL_RCC_SetI2SClockSource>:
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b083      	sub	sp, #12
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a4a:	bf00      	nop
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bc80      	pop	{r7}
 8003a52:	4770      	bx	lr

08003a54 <LL_RCC_SetLPUARTClockSource>:
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a64:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bc80      	pop	{r7}
 8003a7c:	4770      	bx	lr

08003a7e <LL_RCC_SetI2CClockSource>:
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b083      	sub	sp, #12
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a8a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	091b      	lsrs	r3, r3, #4
 8003a92:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003a96:	43db      	mvns	r3, r3
 8003a98:	401a      	ands	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003aa2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bc80      	pop	{r7}
 8003ab4:	4770      	bx	lr

08003ab6 <LL_RCC_SetLPTIMClockSource>:
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ac2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	0c1b      	lsrs	r3, r3, #16
 8003aca:	041b      	lsls	r3, r3, #16
 8003acc:	43db      	mvns	r3, r3
 8003ace:	401a      	ands	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	041b      	lsls	r3, r3, #16
 8003ad4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr

08003ae8 <LL_RCC_SetRNGClockSource>:
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003afc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bc80      	pop	{r7}
 8003b10:	4770      	bx	lr

08003b12 <LL_RCC_SetADCClockSource>:
{
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr

08003b3c <LL_RCC_SetRTCClockSource>:
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bc80      	pop	{r7}
 8003b64:	4770      	bx	lr

08003b66 <LL_RCC_GetRTCClockSource>:
{
 8003b66:	b480      	push	{r7}
 8003b68:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bc80      	pop	{r7}
 8003b7c:	4770      	bx	lr

08003b7e <LL_RCC_ForceBackupDomainReset>:
{
 8003b7e:	b480      	push	{r7}
 8003b80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003b96:	bf00      	nop
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bc80      	pop	{r7}
 8003b9c:	4770      	bx	lr

08003b9e <LL_RCC_ReleaseBackupDomainReset>:
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003baa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003bb6:	bf00      	nop
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bc80      	pop	{r7}
 8003bbc:	4770      	bx	lr
	...

08003bc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003bcc:	2300      	movs	r3, #0
 8003bce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d058      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003be0:	f7fe fd64 	bl	80026ac <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003be4:	f7fc ff90 	bl	8000b08 <HAL_GetTick>
 8003be8:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003bea:	e009      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bec:	f7fc ff8c 	bl	8000b08 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d902      	bls.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	74fb      	strb	r3, [r7, #19]
        break;
 8003bfe:	e006      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003c00:	4b7b      	ldr	r3, [pc, #492]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c0c:	d1ee      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003c0e:	7cfb      	ldrb	r3, [r7, #19]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d13c      	bne.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003c14:	f7ff ffa7 	bl	8003b66 <LL_RCC_GetRTCClockSource>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d00f      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c2e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c30:	f7ff ffa5 	bl	8003b7e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c34:	f7ff ffb3 	bl	8003b9e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d014      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4c:	f7fc ff5c 	bl	8000b08 <HAL_GetTick>
 8003c50:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003c52:	e00b      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c54:	f7fc ff58 	bl	8000b08 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d902      	bls.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	74fb      	strb	r3, [r7, #19]
            break;
 8003c6a:	e004      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003c6c:	f7ff feb4 	bl	80039d8 <LL_RCC_LSE_IsReady>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d1ee      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003c76:	7cfb      	ldrb	r3, [r7, #19]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d105      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7ff ff5b 	bl	8003b3c <LL_RCC_SetRTCClockSource>
 8003c86:	e004      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c88:	7cfb      	ldrb	r3, [r7, #19]
 8003c8a:	74bb      	strb	r3, [r7, #18]
 8003c8c:	e001      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c8e:	7cfb      	ldrb	r3, [r7, #19]
 8003c90:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d004      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7ff fea9 	bl	80039fa <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d004      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff fe9e 	bl	80039fa <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0320 	and.w	r3, r3, #32
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d004      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff fec0 	bl	8003a54 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d004      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff fee6 	bl	8003ab6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d004      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff fedb 	bl	8003ab6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d004      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7ff fed0 	bl	8003ab6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d004      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7ff fea9 	bl	8003a7e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d004      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff fe9e 	bl	8003a7e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d004      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff fe93 	bl	8003a7e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0310 	and.w	r3, r3, #16
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d011      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff fe5e 	bl	8003a2a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d76:	d107      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d86:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d010      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7ff fea5 	bl	8003ae8 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d107      	bne.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003db0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003db4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d011      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7ff fea3 	bl	8003b12 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dd4:	d107      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003de6:	7cbb      	ldrb	r3, [r7, #18]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3718      	adds	r7, #24
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	58000400 	.word	0x58000400

08003df4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d068      	beq.n	8003ed8 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d106      	bne.n	8003e20 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7fc fcd0 	bl	80007c0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e28:	4b2e      	ldr	r3, [pc, #184]	; (8003ee4 <HAL_RTC_Init+0xf0>)
 8003e2a:	22ca      	movs	r2, #202	; 0xca
 8003e2c:	625a      	str	r2, [r3, #36]	; 0x24
 8003e2e:	4b2d      	ldr	r3, [pc, #180]	; (8003ee4 <HAL_RTC_Init+0xf0>)
 8003e30:	2253      	movs	r2, #83	; 0x53
 8003e32:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 fa0f 	bl	8004258 <RTC_EnterInitMode>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8003e3e:	7bfb      	ldrb	r3, [r7, #15]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d13f      	bne.n	8003ec4 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003e44:	4b27      	ldr	r3, [pc, #156]	; (8003ee4 <HAL_RTC_Init+0xf0>)
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	4a26      	ldr	r2, [pc, #152]	; (8003ee4 <HAL_RTC_Init+0xf0>)
 8003e4a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8003e4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e52:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8003e54:	4b23      	ldr	r3, [pc, #140]	; (8003ee4 <HAL_RTC_Init+0xf0>)
 8003e56:	699a      	ldr	r2, [r3, #24]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6859      	ldr	r1, [r3, #4]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	4319      	orrs	r1, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	430b      	orrs	r3, r1
 8003e68:	491e      	ldr	r1, [pc, #120]	; (8003ee4 <HAL_RTC_Init+0xf0>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68da      	ldr	r2, [r3, #12]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	041b      	lsls	r3, r3, #16
 8003e78:	491a      	ldr	r1, [pc, #104]	; (8003ee4 <HAL_RTC_Init+0xf0>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8003e7e:	4b19      	ldr	r3, [pc, #100]	; (8003ee4 <HAL_RTC_Init+0xf0>)
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8e:	430b      	orrs	r3, r1
 8003e90:	4914      	ldr	r1, [pc, #80]	; (8003ee4 <HAL_RTC_Init+0xf0>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 fa12 	bl	80042c0 <RTC_ExitInitMode>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8003ea0:	7bfb      	ldrb	r3, [r7, #15]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10e      	bne.n	8003ec4 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8003ea6:	4b0f      	ldr	r3, [pc, #60]	; (8003ee4 <HAL_RTC_Init+0xf0>)
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a19      	ldr	r1, [r3, #32]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	4319      	orrs	r1, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	430b      	orrs	r3, r1
 8003ebe:	4909      	ldr	r1, [pc, #36]	; (8003ee4 <HAL_RTC_Init+0xf0>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ec4:	4b07      	ldr	r3, [pc, #28]	; (8003ee4 <HAL_RTC_Init+0xf0>)
 8003ec6:	22ff      	movs	r2, #255	; 0xff
 8003ec8:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8003eca:	7bfb      	ldrb	r3, [r7, #15]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d103      	bne.n	8003ed8 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8003ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	40002800 	.word	0x40002800

08003ee8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003ee8:	b590      	push	{r4, r7, lr}
 8003eea:	b087      	sub	sp, #28
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d101      	bne.n	8003f06 <HAL_RTC_SetAlarm_IT+0x1e>
 8003f02:	2302      	movs	r3, #2
 8003f04:	e0f3      	b.n	80040ee <HAL_RTC_SetAlarm_IT+0x206>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2202      	movs	r2, #2
 8003f12:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8003f16:	4b78      	ldr	r3, [pc, #480]	; (80040f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f1e:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f26:	d06a      	beq.n	8003ffe <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d13a      	bne.n	8003fa4 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003f2e:	4b72      	ldr	r3, [pc, #456]	; (80040f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d102      	bne.n	8003f40 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 f9f5 	bl	800433c <RTC_ByteToBcd2>
 8003f52:	4603      	mov	r3, r0
 8003f54:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	785b      	ldrb	r3, [r3, #1]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 f9ee 	bl	800433c <RTC_ByteToBcd2>
 8003f60:	4603      	mov	r3, r0
 8003f62:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003f64:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	789b      	ldrb	r3, [r3, #2]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 f9e6 	bl	800433c <RTC_ByteToBcd2>
 8003f70:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003f72:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	78db      	ldrb	r3, [r3, #3]
 8003f7a:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003f7c:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 f9d8 	bl	800433c <RTC_ByteToBcd2>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003f90:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003f98:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	617b      	str	r3, [r7, #20]
 8003fa2:	e02c      	b.n	8003ffe <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8003fac:	d00d      	beq.n	8003fca <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fb6:	d008      	beq.n	8003fca <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003fb8:	4b4f      	ldr	r3, [pc, #316]	; (80040f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d102      	bne.n	8003fca <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	785b      	ldrb	r3, [r3, #1]
 8003fd4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003fd6:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003fdc:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	78db      	ldrb	r3, [r3, #3]
 8003fe2:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003fe4:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fec:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003fee:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003ff4:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ffe:	4b3e      	ldr	r3, [pc, #248]	; (80040f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8004000:	22ca      	movs	r2, #202	; 0xca
 8004002:	625a      	str	r2, [r3, #36]	; 0x24
 8004004:	4b3c      	ldr	r3, [pc, #240]	; (80040f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8004006:	2253      	movs	r2, #83	; 0x53
 8004008:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004012:	d12c      	bne.n	800406e <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004014:	4b38      	ldr	r3, [pc, #224]	; (80040f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	4a37      	ldr	r2, [pc, #220]	; (80040f8 <HAL_RTC_SetAlarm_IT+0x210>)
 800401a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800401e:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004020:	4b35      	ldr	r3, [pc, #212]	; (80040f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8004022:	2201      	movs	r2, #1
 8004024:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800402c:	d107      	bne.n	800403e <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	699a      	ldr	r2, [r3, #24]
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	4930      	ldr	r1, [pc, #192]	; (80040f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8004038:	4313      	orrs	r3, r2
 800403a:	644b      	str	r3, [r1, #68]	; 0x44
 800403c:	e006      	b.n	800404c <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800403e:	4a2e      	ldr	r2, [pc, #184]	; (80040f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8004044:	4a2c      	ldr	r2, [pc, #176]	; (80040f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 800404c:	4a2a      	ldr	r2, [pc, #168]	; (80040f8 <HAL_RTC_SetAlarm_IT+0x210>)
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004058:	f043 0201 	orr.w	r2, r3, #1
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004060:	4b25      	ldr	r3, [pc, #148]	; (80040f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	4a24      	ldr	r2, [pc, #144]	; (80040f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8004066:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 800406a:	6193      	str	r3, [r2, #24]
 800406c:	e02b      	b.n	80040c6 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800406e:	4b22      	ldr	r3, [pc, #136]	; (80040f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	4a21      	ldr	r2, [pc, #132]	; (80040f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8004074:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8004078:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800407a:	4b1f      	ldr	r3, [pc, #124]	; (80040f8 <HAL_RTC_SetAlarm_IT+0x210>)
 800407c:	2202      	movs	r2, #2
 800407e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004086:	d107      	bne.n	8004098 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	699a      	ldr	r2, [r3, #24]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	4919      	ldr	r1, [pc, #100]	; (80040f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8004092:	4313      	orrs	r3, r2
 8004094:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004096:	e006      	b.n	80040a6 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8004098:	4a17      	ldr	r2, [pc, #92]	; (80040f8 <HAL_RTC_SetAlarm_IT+0x210>)
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800409e:	4a16      	ldr	r2, [pc, #88]	; (80040f8 <HAL_RTC_SetAlarm_IT+0x210>)
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80040a6:	4a14      	ldr	r2, [pc, #80]	; (80040f8 <HAL_RTC_SetAlarm_IT+0x210>)
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b2:	f043 0202 	orr.w	r2, r3, #2
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80040ba:	4b0f      	ldr	r3, [pc, #60]	; (80040f8 <HAL_RTC_SetAlarm_IT+0x210>)
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	4a0e      	ldr	r2, [pc, #56]	; (80040f8 <HAL_RTC_SetAlarm_IT+0x210>)
 80040c0:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 80040c4:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80040c6:	4b0d      	ldr	r3, [pc, #52]	; (80040fc <HAL_RTC_SetAlarm_IT+0x214>)
 80040c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040cc:	4a0b      	ldr	r2, [pc, #44]	; (80040fc <HAL_RTC_SetAlarm_IT+0x214>)
 80040ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040d2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040d6:	4b08      	ldr	r3, [pc, #32]	; (80040f8 <HAL_RTC_SetAlarm_IT+0x210>)
 80040d8:	22ff      	movs	r2, #255	; 0xff
 80040da:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	371c      	adds	r7, #28
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd90      	pop	{r4, r7, pc}
 80040f6:	bf00      	nop
 80040f8:	40002800 	.word	0x40002800
 80040fc:	58000800 	.word	0x58000800

08004100 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004110:	2b01      	cmp	r3, #1
 8004112:	d101      	bne.n	8004118 <HAL_RTC_DeactivateAlarm+0x18>
 8004114:	2302      	movs	r3, #2
 8004116:	e048      	b.n	80041aa <HAL_RTC_DeactivateAlarm+0xaa>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004128:	4b22      	ldr	r3, [pc, #136]	; (80041b4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800412a:	22ca      	movs	r2, #202	; 0xca
 800412c:	625a      	str	r2, [r3, #36]	; 0x24
 800412e:	4b21      	ldr	r3, [pc, #132]	; (80041b4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004130:	2253      	movs	r2, #83	; 0x53
 8004132:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800413a:	d115      	bne.n	8004168 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800413c:	4b1d      	ldr	r3, [pc, #116]	; (80041b4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	4a1c      	ldr	r2, [pc, #112]	; (80041b4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004142:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004146:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8004148:	4b1a      	ldr	r3, [pc, #104]	; (80041b4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800414a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414c:	4a19      	ldr	r2, [pc, #100]	; (80041b4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800414e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004152:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004158:	f023 0201 	bic.w	r2, r3, #1
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004160:	4b14      	ldr	r3, [pc, #80]	; (80041b4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004162:	2201      	movs	r2, #1
 8004164:	65da      	str	r2, [r3, #92]	; 0x5c
 8004166:	e014      	b.n	8004192 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004168:	4b12      	ldr	r3, [pc, #72]	; (80041b4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	4a11      	ldr	r2, [pc, #68]	; (80041b4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800416e:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8004172:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8004174:	4b0f      	ldr	r3, [pc, #60]	; (80041b4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004178:	4a0e      	ldr	r2, [pc, #56]	; (80041b4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800417a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800417e:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004184:	f023 0202 	bic.w	r2, r3, #2
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800418c:	4b09      	ldr	r3, [pc, #36]	; (80041b4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800418e:	2202      	movs	r2, #2
 8004190:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004192:	4b08      	ldr	r3, [pc, #32]	; (80041b4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004194:	22ff      	movs	r2, #255	; 0xff
 8004196:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bc80      	pop	{r7}
 80041b2:	4770      	bx	lr
 80041b4:	40002800 	.word	0x40002800

080041b8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80041c0:	4b11      	ldr	r3, [pc, #68]	; (8004208 <HAL_RTC_AlarmIRQHandler+0x50>)
 80041c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c8:	4013      	ands	r3, r2
 80041ca:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d005      	beq.n	80041e2 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80041d6:	4b0c      	ldr	r3, [pc, #48]	; (8004208 <HAL_RTC_AlarmIRQHandler+0x50>)
 80041d8:	2201      	movs	r2, #1
 80041da:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f7fc fea2 	bl	8000f26 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d005      	beq.n	80041f8 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80041ec:	4b06      	ldr	r3, [pc, #24]	; (8004208 <HAL_RTC_AlarmIRQHandler+0x50>)
 80041ee:	2202      	movs	r2, #2
 80041f0:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f94a 	bl	800448c <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8004200:	bf00      	nop
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40002800 	.word	0x40002800

0800420c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8004214:	4b0f      	ldr	r3, [pc, #60]	; (8004254 <HAL_RTC_WaitForSynchro+0x48>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	4a0e      	ldr	r2, [pc, #56]	; (8004254 <HAL_RTC_WaitForSynchro+0x48>)
 800421a:	f023 0320 	bic.w	r3, r3, #32
 800421e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004220:	f7fc fc72 	bl	8000b08 <HAL_GetTick>
 8004224:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004226:	e009      	b.n	800423c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004228:	f7fc fc6e 	bl	8000b08 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004236:	d901      	bls.n	800423c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e006      	b.n	800424a <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800423c:	4b05      	ldr	r3, [pc, #20]	; (8004254 <HAL_RTC_WaitForSynchro+0x48>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f003 0320 	and.w	r3, r3, #32
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0ef      	beq.n	8004228 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	40002800 	.word	0x40002800

08004258 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004260:	2300      	movs	r3, #0
 8004262:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004264:	4b15      	ldr	r3, [pc, #84]	; (80042bc <RTC_EnterInitMode+0x64>)
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800426c:	2b00      	cmp	r3, #0
 800426e:	d120      	bne.n	80042b2 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004270:	4b12      	ldr	r3, [pc, #72]	; (80042bc <RTC_EnterInitMode+0x64>)
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	4a11      	ldr	r2, [pc, #68]	; (80042bc <RTC_EnterInitMode+0x64>)
 8004276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800427a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800427c:	f7fc fc44 	bl	8000b08 <HAL_GetTick>
 8004280:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004282:	e00d      	b.n	80042a0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004284:	f7fc fc40 	bl	8000b08 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004292:	d905      	bls.n	80042a0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2203      	movs	r2, #3
 800429c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80042a0:	4b06      	ldr	r3, [pc, #24]	; (80042bc <RTC_EnterInitMode+0x64>)
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d102      	bne.n	80042b2 <RTC_EnterInitMode+0x5a>
 80042ac:	7bfb      	ldrb	r3, [r7, #15]
 80042ae:	2b03      	cmp	r3, #3
 80042b0:	d1e8      	bne.n	8004284 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80042b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	40002800 	.word	0x40002800

080042c0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042c8:	2300      	movs	r3, #0
 80042ca:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80042cc:	4b1a      	ldr	r3, [pc, #104]	; (8004338 <RTC_ExitInitMode+0x78>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	4a19      	ldr	r2, [pc, #100]	; (8004338 <RTC_ExitInitMode+0x78>)
 80042d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042d6:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80042d8:	4b17      	ldr	r3, [pc, #92]	; (8004338 <RTC_ExitInitMode+0x78>)
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	f003 0320 	and.w	r3, r3, #32
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10c      	bne.n	80042fe <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7ff ff91 	bl	800420c <HAL_RTC_WaitForSynchro>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d01e      	beq.n	800432e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2203      	movs	r2, #3
 80042f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	73fb      	strb	r3, [r7, #15]
 80042fc:	e017      	b.n	800432e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80042fe:	4b0e      	ldr	r3, [pc, #56]	; (8004338 <RTC_ExitInitMode+0x78>)
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	4a0d      	ldr	r2, [pc, #52]	; (8004338 <RTC_ExitInitMode+0x78>)
 8004304:	f023 0320 	bic.w	r3, r3, #32
 8004308:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7ff ff7e 	bl	800420c <HAL_RTC_WaitForSynchro>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d005      	beq.n	8004322 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2203      	movs	r2, #3
 800431a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004322:	4b05      	ldr	r3, [pc, #20]	; (8004338 <RTC_ExitInitMode+0x78>)
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	4a04      	ldr	r2, [pc, #16]	; (8004338 <RTC_ExitInitMode+0x78>)
 8004328:	f043 0320 	orr.w	r3, r3, #32
 800432c:	6193      	str	r3, [r2, #24]
  }

  return status;
 800432e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004330:	4618      	mov	r0, r3
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	40002800 	.word	0x40002800

0800433c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	4603      	mov	r3, r0
 8004344:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004346:	2300      	movs	r3, #0
 8004348:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800434a:	79fb      	ldrb	r3, [r7, #7]
 800434c:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800434e:	e005      	b.n	800435c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	3301      	adds	r3, #1
 8004354:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8004356:	7afb      	ldrb	r3, [r7, #11]
 8004358:	3b0a      	subs	r3, #10
 800435a:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800435c:	7afb      	ldrb	r3, [r7, #11]
 800435e:	2b09      	cmp	r3, #9
 8004360:	d8f6      	bhi.n	8004350 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	b2db      	uxtb	r3, r3
 8004366:	011b      	lsls	r3, r3, #4
 8004368:	b2da      	uxtb	r2, r3
 800436a:	7afb      	ldrb	r3, [r7, #11]
 800436c:	4313      	orrs	r3, r2
 800436e:	b2db      	uxtb	r3, r3
}
 8004370:	4618      	mov	r0, r3
 8004372:	3714      	adds	r7, #20
 8004374:	46bd      	mov	sp, r7
 8004376:	bc80      	pop	{r7}
 8004378:	4770      	bx	lr
	...

0800437c <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800438a:	2b01      	cmp	r3, #1
 800438c:	d101      	bne.n	8004392 <HAL_RTCEx_EnableBypassShadow+0x16>
 800438e:	2302      	movs	r3, #2
 8004390:	e01f      	b.n	80043d2 <HAL_RTCEx_EnableBypassShadow+0x56>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2202      	movs	r2, #2
 800439e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043a2:	4b0e      	ldr	r3, [pc, #56]	; (80043dc <HAL_RTCEx_EnableBypassShadow+0x60>)
 80043a4:	22ca      	movs	r2, #202	; 0xca
 80043a6:	625a      	str	r2, [r3, #36]	; 0x24
 80043a8:	4b0c      	ldr	r3, [pc, #48]	; (80043dc <HAL_RTCEx_EnableBypassShadow+0x60>)
 80043aa:	2253      	movs	r2, #83	; 0x53
 80043ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80043ae:	4b0b      	ldr	r3, [pc, #44]	; (80043dc <HAL_RTCEx_EnableBypassShadow+0x60>)
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	4a0a      	ldr	r2, [pc, #40]	; (80043dc <HAL_RTCEx_EnableBypassShadow+0x60>)
 80043b4:	f043 0320 	orr.w	r3, r3, #32
 80043b8:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043ba:	4b08      	ldr	r3, [pc, #32]	; (80043dc <HAL_RTCEx_EnableBypassShadow+0x60>)
 80043bc:	22ff      	movs	r2, #255	; 0xff
 80043be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bc80      	pop	{r7}
 80043da:	4770      	bx	lr
 80043dc:	40002800 	.word	0x40002800

080043e0 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d101      	bne.n	80043f6 <HAL_RTCEx_SetSSRU_IT+0x16>
 80043f2:	2302      	movs	r3, #2
 80043f4:	e027      	b.n	8004446 <HAL_RTCEx_SetSSRU_IT+0x66>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2202      	movs	r2, #2
 8004402:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004406:	4b12      	ldr	r3, [pc, #72]	; (8004450 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004408:	22ca      	movs	r2, #202	; 0xca
 800440a:	625a      	str	r2, [r3, #36]	; 0x24
 800440c:	4b10      	ldr	r3, [pc, #64]	; (8004450 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800440e:	2253      	movs	r2, #83	; 0x53
 8004410:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8004412:	4b0f      	ldr	r3, [pc, #60]	; (8004450 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	4a0e      	ldr	r2, [pc, #56]	; (8004450 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800441c:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 800441e:	4b0d      	ldr	r3, [pc, #52]	; (8004454 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8004420:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004424:	4a0b      	ldr	r2, [pc, #44]	; (8004454 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8004426:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800442a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800442e:	4b08      	ldr	r3, [pc, #32]	; (8004450 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004430:	22ff      	movs	r2, #255	; 0xff
 8004432:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	bc80      	pop	{r7}
 800444e:	4770      	bx	lr
 8004450:	40002800 	.word	0x40002800
 8004454:	58000800 	.word	0x58000800

08004458 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8004460:	4b09      	ldr	r3, [pc, #36]	; (8004488 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8004462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004468:	2b00      	cmp	r3, #0
 800446a:	d005      	beq.n	8004478 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 800446c:	4b06      	ldr	r3, [pc, #24]	; (8004488 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800446e:	2240      	movs	r2, #64	; 0x40
 8004470:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7fc fd61 	bl	8000f3a <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8004480:	bf00      	nop
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40002800 	.word	0x40002800

0800448c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	bc80      	pop	{r7}
 800449c:	4770      	bx	lr
	...

080044a0 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b087      	sub	sp, #28
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80044ac:	4b07      	ldr	r3, [pc, #28]	; (80044cc <HAL_RTCEx_BKUPWrite+0x2c>)
 80044ae:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	4413      	add	r3, r2
 80044b8:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	601a      	str	r2, [r3, #0]
}
 80044c0:	bf00      	nop
 80044c2:	371c      	adds	r7, #28
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bc80      	pop	{r7}
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	4000b100 	.word	0x4000b100

080044d0 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80044da:	4b07      	ldr	r3, [pc, #28]	; (80044f8 <HAL_RTCEx_BKUPRead+0x28>)
 80044dc:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	4413      	add	r3, r2
 80044e6:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bc80      	pop	{r7}
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	4000b100 	.word	0x4000b100

080044fc <LL_PWR_SetRadioBusyTrigger>:
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8004504:	4b06      	ldr	r3, [pc, #24]	; (8004520 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800450c:	4904      	ldr	r1, [pc, #16]	; (8004520 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4313      	orrs	r3, r2
 8004512:	608b      	str	r3, [r1, #8]
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	bc80      	pop	{r7}
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	58000400 	.word	0x58000400

08004524 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004528:	4b05      	ldr	r3, [pc, #20]	; (8004540 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800452a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800452e:	4a04      	ldr	r2, [pc, #16]	; (8004540 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8004530:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004538:	bf00      	nop
 800453a:	46bd      	mov	sp, r7
 800453c:	bc80      	pop	{r7}
 800453e:	4770      	bx	lr
 8004540:	58000400 	.word	0x58000400

08004544 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004548:	4b05      	ldr	r3, [pc, #20]	; (8004560 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800454a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800454e:	4a04      	ldr	r2, [pc, #16]	; (8004560 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8004550:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004558:	bf00      	nop
 800455a:	46bd      	mov	sp, r7
 800455c:	bc80      	pop	{r7}
 800455e:	4770      	bx	lr
 8004560:	58000400 	.word	0x58000400

08004564 <LL_PWR_ClearFlag_RFBUSY>:
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8004568:	4b03      	ldr	r3, [pc, #12]	; (8004578 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800456a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800456e:	619a      	str	r2, [r3, #24]
}
 8004570:	bf00      	nop
 8004572:	46bd      	mov	sp, r7
 8004574:	bc80      	pop	{r7}
 8004576:	4770      	bx	lr
 8004578:	58000400 	.word	0x58000400

0800457c <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8004580:	4b06      	ldr	r3, [pc, #24]	; (800459c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b02      	cmp	r3, #2
 800458a:	d101      	bne.n	8004590 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 800458c:	2301      	movs	r3, #1
 800458e:	e000      	b.n	8004592 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	46bd      	mov	sp, r7
 8004596:	bc80      	pop	{r7}
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	58000400 	.word	0x58000400

080045a0 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 80045a0:	b480      	push	{r7}
 80045a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80045a4:	4b06      	ldr	r3, [pc, #24]	; (80045c0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b04      	cmp	r3, #4
 80045ae:	d101      	bne.n	80045b4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80045b0:	2301      	movs	r3, #1
 80045b2:	e000      	b.n	80045b6 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bc80      	pop	{r7}
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	58000400 	.word	0x58000400

080045c4 <LL_RCC_RF_DisableReset>:
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80045c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80045d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80045dc:	bf00      	nop
 80045de:	46bd      	mov	sp, r7
 80045e0:	bc80      	pop	{r7}
 80045e2:	4770      	bx	lr

080045e4 <LL_RCC_IsRFUnderReset>:
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80045e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045f8:	d101      	bne.n	80045fe <LL_RCC_IsRFUnderReset+0x1a>
 80045fa:	2301      	movs	r3, #1
 80045fc:	e000      	b.n	8004600 <LL_RCC_IsRFUnderReset+0x1c>
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	46bd      	mov	sp, r7
 8004604:	bc80      	pop	{r7}
 8004606:	4770      	bx	lr

08004608 <LL_EXTI_EnableIT_32_63>:
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8004610:	4b06      	ldr	r3, [pc, #24]	; (800462c <LL_EXTI_EnableIT_32_63+0x24>)
 8004612:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004616:	4905      	ldr	r1, [pc, #20]	; (800462c <LL_EXTI_EnableIT_32_63+0x24>)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4313      	orrs	r3, r2
 800461c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	bc80      	pop	{r7}
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	58000800 	.word	0x58000800

08004630 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d103      	bne.n	8004646 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	73fb      	strb	r3, [r7, #15]
    return status;
 8004642:	7bfb      	ldrb	r3, [r7, #15]
 8004644:	e04b      	b.n	80046de <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8004646:	2300      	movs	r3, #0
 8004648:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	799b      	ldrb	r3, [r3, #6]
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b00      	cmp	r3, #0
 8004652:	d105      	bne.n	8004660 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7fc f9b8 	bl	80009d0 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2202      	movs	r2, #2
 8004664:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8004666:	f7ff ffad 	bl	80045c4 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800466a:	4b1f      	ldr	r3, [pc, #124]	; (80046e8 <HAL_SUBGHZ_Init+0xb8>)
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	4613      	mov	r3, r2
 8004670:	00db      	lsls	r3, r3, #3
 8004672:	1a9b      	subs	r3, r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	0cdb      	lsrs	r3, r3, #19
 8004678:	2264      	movs	r2, #100	; 0x64
 800467a:	fb02 f303 	mul.w	r3, r2, r3
 800467e:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d105      	bne.n	8004692 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	609a      	str	r2, [r3, #8]
      break;
 8004690:	e007      	b.n	80046a2 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	3b01      	subs	r3, #1
 8004696:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8004698:	f7ff ffa4 	bl	80045e4 <LL_RCC_IsRFUnderReset>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1ee      	bne.n	8004680 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 80046a2:	f7ff ff3f 	bl	8004524 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80046a6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80046aa:	f7ff ffad 	bl	8004608 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80046ae:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80046b2:	f7ff ff23 	bl	80044fc <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80046b6:	f7ff ff55 	bl	8004564 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80046ba:	7bfb      	ldrb	r3, [r7, #15]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10a      	bne.n	80046d6 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 faad 	bl	8004c24 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	719a      	strb	r2, [r3, #6]

  return status;
 80046dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	20000000 	.word	0x20000000

080046ec <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	607a      	str	r2, [r7, #4]
 80046f6:	461a      	mov	r2, r3
 80046f8:	460b      	mov	r3, r1
 80046fa:	817b      	strh	r3, [r7, #10]
 80046fc:	4613      	mov	r3, r2
 80046fe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	799b      	ldrb	r3, [r3, #6]
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b01      	cmp	r3, #1
 8004708:	d14a      	bne.n	80047a0 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	795b      	ldrb	r3, [r3, #5]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d101      	bne.n	8004716 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8004712:	2302      	movs	r3, #2
 8004714:	e045      	b.n	80047a2 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2201      	movs	r2, #1
 800471a:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2202      	movs	r2, #2
 8004720:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f000 fb4c 	bl	8004dc0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004728:	f7ff ff0c 	bl	8004544 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 800472c:	210d      	movs	r1, #13
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f000 fa98 	bl	8004c64 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004734:	897b      	ldrh	r3, [r7, #10]
 8004736:	0a1b      	lsrs	r3, r3, #8
 8004738:	b29b      	uxth	r3, r3
 800473a:	b2db      	uxtb	r3, r3
 800473c:	4619      	mov	r1, r3
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f000 fa90 	bl	8004c64 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004744:	897b      	ldrh	r3, [r7, #10]
 8004746:	b2db      	uxtb	r3, r3
 8004748:	4619      	mov	r1, r3
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f000 fa8a 	bl	8004c64 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004750:	2300      	movs	r3, #0
 8004752:	82bb      	strh	r3, [r7, #20]
 8004754:	e00a      	b.n	800476c <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004756:	8abb      	ldrh	r3, [r7, #20]
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	4413      	add	r3, r2
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	4619      	mov	r1, r3
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 fa7f 	bl	8004c64 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004766:	8abb      	ldrh	r3, [r7, #20]
 8004768:	3301      	adds	r3, #1
 800476a:	82bb      	strh	r3, [r7, #20]
 800476c:	8aba      	ldrh	r2, [r7, #20]
 800476e:	893b      	ldrh	r3, [r7, #8]
 8004770:	429a      	cmp	r2, r3
 8004772:	d3f0      	bcc.n	8004756 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004774:	f7ff fed6 	bl	8004524 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	f000 fb45 	bl	8004e08 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d002      	beq.n	800478c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	75fb      	strb	r3, [r7, #23]
 800478a:	e001      	b.n	8004790 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 800478c:	2300      	movs	r3, #0
 800478e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2201      	movs	r2, #1
 8004794:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	715a      	strb	r2, [r3, #5]

    return status;
 800479c:	7dfb      	ldrb	r3, [r7, #23]
 800479e:	e000      	b.n	80047a2 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80047a0:	2302      	movs	r3, #2
  }
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3718      	adds	r7, #24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b088      	sub	sp, #32
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	60f8      	str	r0, [r7, #12]
 80047b2:	607a      	str	r2, [r7, #4]
 80047b4:	461a      	mov	r2, r3
 80047b6:	460b      	mov	r3, r1
 80047b8:	817b      	strh	r3, [r7, #10]
 80047ba:	4613      	mov	r3, r2
 80047bc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	799b      	ldrb	r3, [r3, #6]
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d14a      	bne.n	8004862 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	795b      	ldrb	r3, [r3, #5]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d101      	bne.n	80047d8 <HAL_SUBGHZ_ReadRegisters+0x2e>
 80047d4:	2302      	movs	r3, #2
 80047d6:	e045      	b.n	8004864 <HAL_SUBGHZ_ReadRegisters+0xba>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2201      	movs	r2, #1
 80047dc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 faee 	bl	8004dc0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80047e4:	f7ff feae 	bl	8004544 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80047e8:	211d      	movs	r1, #29
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f000 fa3a 	bl	8004c64 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80047f0:	897b      	ldrh	r3, [r7, #10]
 80047f2:	0a1b      	lsrs	r3, r3, #8
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	4619      	mov	r1, r3
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 fa32 	bl	8004c64 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004800:	897b      	ldrh	r3, [r7, #10]
 8004802:	b2db      	uxtb	r3, r3
 8004804:	4619      	mov	r1, r3
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f000 fa2c 	bl	8004c64 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 800480c:	2100      	movs	r1, #0
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f000 fa28 	bl	8004c64 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004814:	2300      	movs	r3, #0
 8004816:	82fb      	strh	r3, [r7, #22]
 8004818:	e009      	b.n	800482e <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800481a:	69b9      	ldr	r1, [r7, #24]
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f000 fa77 	bl	8004d10 <SUBGHZSPI_Receive>
      pData++;
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	3301      	adds	r3, #1
 8004826:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004828:	8afb      	ldrh	r3, [r7, #22]
 800482a:	3301      	adds	r3, #1
 800482c:	82fb      	strh	r3, [r7, #22]
 800482e:	8afa      	ldrh	r2, [r7, #22]
 8004830:	893b      	ldrh	r3, [r7, #8]
 8004832:	429a      	cmp	r2, r3
 8004834:	d3f1      	bcc.n	800481a <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004836:	f7ff fe75 	bl	8004524 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f000 fae4 	bl	8004e08 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d002      	beq.n	800484e <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	77fb      	strb	r3, [r7, #31]
 800484c:	e001      	b.n	8004852 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800484e:	2300      	movs	r3, #0
 8004850:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2201      	movs	r2, #1
 8004856:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	715a      	strb	r2, [r3, #5]

    return status;
 800485e:	7ffb      	ldrb	r3, [r7, #31]
 8004860:	e000      	b.n	8004864 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8004862:	2302      	movs	r3, #2
  }
}
 8004864:	4618      	mov	r0, r3
 8004866:	3720      	adds	r7, #32
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	607a      	str	r2, [r7, #4]
 8004876:	461a      	mov	r2, r3
 8004878:	460b      	mov	r3, r1
 800487a:	72fb      	strb	r3, [r7, #11]
 800487c:	4613      	mov	r3, r2
 800487e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	799b      	ldrb	r3, [r3, #6]
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b01      	cmp	r3, #1
 8004888:	d14a      	bne.n	8004920 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	795b      	ldrb	r3, [r3, #5]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d101      	bne.n	8004896 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8004892:	2302      	movs	r3, #2
 8004894:	e045      	b.n	8004922 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2201      	movs	r2, #1
 800489a:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 fa8f 	bl	8004dc0 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80048a2:	7afb      	ldrb	r3, [r7, #11]
 80048a4:	2b84      	cmp	r3, #132	; 0x84
 80048a6:	d002      	beq.n	80048ae <HAL_SUBGHZ_ExecSetCmd+0x42>
 80048a8:	7afb      	ldrb	r3, [r7, #11]
 80048aa:	2b94      	cmp	r3, #148	; 0x94
 80048ac:	d103      	bne.n	80048b6 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2201      	movs	r2, #1
 80048b2:	711a      	strb	r2, [r3, #4]
 80048b4:	e002      	b.n	80048bc <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80048bc:	f7ff fe42 	bl	8004544 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80048c0:	7afb      	ldrb	r3, [r7, #11]
 80048c2:	4619      	mov	r1, r3
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f000 f9cd 	bl	8004c64 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80048ca:	2300      	movs	r3, #0
 80048cc:	82bb      	strh	r3, [r7, #20]
 80048ce:	e00a      	b.n	80048e6 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80048d0:	8abb      	ldrh	r3, [r7, #20]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	4413      	add	r3, r2
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	4619      	mov	r1, r3
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 f9c2 	bl	8004c64 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80048e0:	8abb      	ldrh	r3, [r7, #20]
 80048e2:	3301      	adds	r3, #1
 80048e4:	82bb      	strh	r3, [r7, #20]
 80048e6:	8aba      	ldrh	r2, [r7, #20]
 80048e8:	893b      	ldrh	r3, [r7, #8]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d3f0      	bcc.n	80048d0 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80048ee:	f7ff fe19 	bl	8004524 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80048f2:	7afb      	ldrb	r3, [r7, #11]
 80048f4:	2b84      	cmp	r3, #132	; 0x84
 80048f6:	d002      	beq.n	80048fe <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f000 fa85 	bl	8004e08 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d002      	beq.n	800490c <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	75fb      	strb	r3, [r7, #23]
 800490a:	e001      	b.n	8004910 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 800490c:	2300      	movs	r3, #0
 800490e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2201      	movs	r2, #1
 8004914:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	715a      	strb	r2, [r3, #5]

    return status;
 800491c:	7dfb      	ldrb	r3, [r7, #23]
 800491e:	e000      	b.n	8004922 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004920:	2302      	movs	r3, #2
  }
}
 8004922:	4618      	mov	r0, r3
 8004924:	3718      	adds	r7, #24
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b088      	sub	sp, #32
 800492e:	af00      	add	r7, sp, #0
 8004930:	60f8      	str	r0, [r7, #12]
 8004932:	607a      	str	r2, [r7, #4]
 8004934:	461a      	mov	r2, r3
 8004936:	460b      	mov	r3, r1
 8004938:	72fb      	strb	r3, [r7, #11]
 800493a:	4613      	mov	r3, r2
 800493c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	799b      	ldrb	r3, [r3, #6]
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b01      	cmp	r3, #1
 800494a:	d13d      	bne.n	80049c8 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	795b      	ldrb	r3, [r3, #5]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d101      	bne.n	8004958 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8004954:	2302      	movs	r3, #2
 8004956:	e038      	b.n	80049ca <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2201      	movs	r2, #1
 800495c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f000 fa2e 	bl	8004dc0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004964:	f7ff fdee 	bl	8004544 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004968:	7afb      	ldrb	r3, [r7, #11]
 800496a:	4619      	mov	r1, r3
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f000 f979 	bl	8004c64 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004972:	2100      	movs	r1, #0
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f000 f975 	bl	8004c64 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800497a:	2300      	movs	r3, #0
 800497c:	82fb      	strh	r3, [r7, #22]
 800497e:	e009      	b.n	8004994 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004980:	69b9      	ldr	r1, [r7, #24]
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f000 f9c4 	bl	8004d10 <SUBGHZSPI_Receive>
      pData++;
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	3301      	adds	r3, #1
 800498c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800498e:	8afb      	ldrh	r3, [r7, #22]
 8004990:	3301      	adds	r3, #1
 8004992:	82fb      	strh	r3, [r7, #22]
 8004994:	8afa      	ldrh	r2, [r7, #22]
 8004996:	893b      	ldrh	r3, [r7, #8]
 8004998:	429a      	cmp	r2, r3
 800499a:	d3f1      	bcc.n	8004980 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800499c:	f7ff fdc2 	bl	8004524 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f000 fa31 	bl	8004e08 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d002      	beq.n	80049b4 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	77fb      	strb	r3, [r7, #31]
 80049b2:	e001      	b.n	80049b8 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 80049b4:	2300      	movs	r3, #0
 80049b6:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2201      	movs	r2, #1
 80049bc:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	715a      	strb	r2, [r3, #5]

    return status;
 80049c4:	7ffb      	ldrb	r3, [r7, #31]
 80049c6:	e000      	b.n	80049ca <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80049c8:	2302      	movs	r3, #2
  }
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3720      	adds	r7, #32
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b086      	sub	sp, #24
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	60f8      	str	r0, [r7, #12]
 80049da:	607a      	str	r2, [r7, #4]
 80049dc:	461a      	mov	r2, r3
 80049de:	460b      	mov	r3, r1
 80049e0:	72fb      	strb	r3, [r7, #11]
 80049e2:	4613      	mov	r3, r2
 80049e4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	799b      	ldrb	r3, [r3, #6]
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d13e      	bne.n	8004a6e <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	795b      	ldrb	r3, [r3, #5]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d101      	bne.n	80049fc <HAL_SUBGHZ_WriteBuffer+0x2a>
 80049f8:	2302      	movs	r3, #2
 80049fa:	e039      	b.n	8004a70 <HAL_SUBGHZ_WriteBuffer+0x9e>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2201      	movs	r2, #1
 8004a00:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f000 f9dc 	bl	8004dc0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004a08:	f7ff fd9c 	bl	8004544 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8004a0c:	210e      	movs	r1, #14
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f000 f928 	bl	8004c64 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004a14:	7afb      	ldrb	r3, [r7, #11]
 8004a16:	4619      	mov	r1, r3
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f000 f923 	bl	8004c64 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004a1e:	2300      	movs	r3, #0
 8004a20:	82bb      	strh	r3, [r7, #20]
 8004a22:	e00a      	b.n	8004a3a <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004a24:	8abb      	ldrh	r3, [r7, #20]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	4413      	add	r3, r2
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 f918 	bl	8004c64 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004a34:	8abb      	ldrh	r3, [r7, #20]
 8004a36:	3301      	adds	r3, #1
 8004a38:	82bb      	strh	r3, [r7, #20]
 8004a3a:	8aba      	ldrh	r2, [r7, #20]
 8004a3c:	893b      	ldrh	r3, [r7, #8]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d3f0      	bcc.n	8004a24 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004a42:	f7ff fd6f 	bl	8004524 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f000 f9de 	bl	8004e08 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d002      	beq.n	8004a5a <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	75fb      	strb	r3, [r7, #23]
 8004a58:	e001      	b.n	8004a5e <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2201      	movs	r2, #1
 8004a62:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	715a      	strb	r2, [r3, #5]

    return status;
 8004a6a:	7dfb      	ldrb	r3, [r7, #23]
 8004a6c:	e000      	b.n	8004a70 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004a6e:	2302      	movs	r3, #2
  }
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3718      	adds	r7, #24
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b088      	sub	sp, #32
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	607a      	str	r2, [r7, #4]
 8004a82:	461a      	mov	r2, r3
 8004a84:	460b      	mov	r3, r1
 8004a86:	72fb      	strb	r3, [r7, #11]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	799b      	ldrb	r3, [r3, #6]
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d141      	bne.n	8004b1e <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	795b      	ldrb	r3, [r3, #5]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d101      	bne.n	8004aa6 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	e03c      	b.n	8004b20 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f000 f987 	bl	8004dc0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004ab2:	f7ff fd47 	bl	8004544 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8004ab6:	211e      	movs	r1, #30
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 f8d3 	bl	8004c64 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004abe:	7afb      	ldrb	r3, [r7, #11]
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f000 f8ce 	bl	8004c64 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004ac8:	2100      	movs	r1, #0
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f000 f8ca 	bl	8004c64 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	82fb      	strh	r3, [r7, #22]
 8004ad4:	e009      	b.n	8004aea <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004ad6:	69b9      	ldr	r1, [r7, #24]
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f000 f919 	bl	8004d10 <SUBGHZSPI_Receive>
      pData++;
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004ae4:	8afb      	ldrh	r3, [r7, #22]
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	82fb      	strh	r3, [r7, #22]
 8004aea:	8afa      	ldrh	r2, [r7, #22]
 8004aec:	893b      	ldrh	r3, [r7, #8]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d3f1      	bcc.n	8004ad6 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004af2:	f7ff fd17 	bl	8004524 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f000 f986 	bl	8004e08 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d002      	beq.n	8004b0a <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	77fb      	strb	r3, [r7, #31]
 8004b08:	e001      	b.n	8004b0e <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2201      	movs	r2, #1
 8004b12:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	715a      	strb	r2, [r3, #5]

    return status;
 8004b1a:	7ffb      	ldrb	r3, [r7, #31]
 8004b1c:	e000      	b.n	8004b20 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004b1e:	2302      	movs	r3, #2
  }
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3720      	adds	r7, #32
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8004b30:	2300      	movs	r3, #0
 8004b32:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8004b34:	f107 020c 	add.w	r2, r7, #12
 8004b38:	2302      	movs	r3, #2
 8004b3a:	2112      	movs	r1, #18
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f7ff fef4 	bl	800492a <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8004b42:	7b3b      	ldrb	r3, [r7, #12]
 8004b44:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8004b46:	89fb      	ldrh	r3, [r7, #14]
 8004b48:	021b      	lsls	r3, r3, #8
 8004b4a:	b21a      	sxth	r2, r3
 8004b4c:	7b7b      	ldrb	r3, [r7, #13]
 8004b4e:	b21b      	sxth	r3, r3
 8004b50:	4313      	orrs	r3, r2
 8004b52:	b21b      	sxth	r3, r3
 8004b54:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8004b56:	89fb      	ldrh	r3, [r7, #14]
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d002      	beq.n	8004b66 <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f005 fb0d 	bl	800a180 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8004b66:	89fb      	ldrh	r3, [r7, #14]
 8004b68:	085b      	lsrs	r3, r3, #1
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d002      	beq.n	8004b78 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f005 fb12 	bl	800a19c <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8004b78:	89fb      	ldrh	r3, [r7, #14]
 8004b7a:	089b      	lsrs	r3, r3, #2
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d002      	beq.n	8004b8a <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f005 fb61 	bl	800a24c <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8004b8a:	89fb      	ldrh	r3, [r7, #14]
 8004b8c:	08db      	lsrs	r3, r3, #3
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d002      	beq.n	8004b9c <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f005 fb66 	bl	800a268 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8004b9c:	89fb      	ldrh	r3, [r7, #14]
 8004b9e:	091b      	lsrs	r3, r3, #4
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d002      	beq.n	8004bae <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f005 fb6b 	bl	800a284 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8004bae:	89fb      	ldrh	r3, [r7, #14]
 8004bb0:	095b      	lsrs	r3, r3, #5
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d002      	beq.n	8004bc0 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f005 fb38 	bl	800a230 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8004bc0:	89fb      	ldrh	r3, [r7, #14]
 8004bc2:	099b      	lsrs	r3, r3, #6
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d002      	beq.n	8004bd2 <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f005 faf3 	bl	800a1b8 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8004bd2:	89fb      	ldrh	r3, [r7, #14]
 8004bd4:	09db      	lsrs	r3, r3, #7
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00e      	beq.n	8004bfc <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8004bde:	89fb      	ldrh	r3, [r7, #14]
 8004be0:	0a1b      	lsrs	r3, r3, #8
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d004      	beq.n	8004bf4 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8004bea:	2101      	movs	r1, #1
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f005 faf1 	bl	800a1d4 <HAL_SUBGHZ_CADStatusCallback>
 8004bf2:	e003      	b.n	8004bfc <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f005 faec 	bl	800a1d4 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8004bfc:	89fb      	ldrh	r3, [r7, #14]
 8004bfe:	0a5b      	lsrs	r3, r3, #9
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d002      	beq.n	8004c0e <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f005 fb01 	bl	800a210 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8004c0e:	f107 020c 	add.w	r2, r7, #12
 8004c12:	2302      	movs	r3, #2
 8004c14:	2102      	movs	r1, #2
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7ff fe28 	bl	800486c <HAL_SUBGHZ_ExecSetCmd>
}
 8004c1c:	bf00      	nop
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004c2c:	4b0c      	ldr	r3, [pc, #48]	; (8004c60 <SUBGHZSPI_Init+0x3c>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a0b      	ldr	r2, [pc, #44]	; (8004c60 <SUBGHZSPI_Init+0x3c>)
 8004c32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c36:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8004c38:	4a09      	ldr	r2, [pc, #36]	; (8004c60 <SUBGHZSPI_Init+0x3c>)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8004c40:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8004c42:	4b07      	ldr	r3, [pc, #28]	; (8004c60 <SUBGHZSPI_Init+0x3c>)
 8004c44:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8004c48:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004c4a:	4b05      	ldr	r3, [pc, #20]	; (8004c60 <SUBGHZSPI_Init+0x3c>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a04      	ldr	r2, [pc, #16]	; (8004c60 <SUBGHZSPI_Init+0x3c>)
 8004c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c54:	6013      	str	r3, [r2, #0]
}
 8004c56:	bf00      	nop
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bc80      	pop	{r7}
 8004c5e:	4770      	bx	lr
 8004c60:	58010000 	.word	0x58010000

08004c64 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b087      	sub	sp, #28
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004c70:	2300      	movs	r3, #0
 8004c72:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004c74:	4b23      	ldr	r3, [pc, #140]	; (8004d04 <SUBGHZSPI_Transmit+0xa0>)
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	1a9b      	subs	r3, r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	0cdb      	lsrs	r3, r3, #19
 8004c82:	2264      	movs	r2, #100	; 0x64
 8004c84:	fb02 f303 	mul.w	r3, r2, r3
 8004c88:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d105      	bne.n	8004c9c <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	609a      	str	r2, [r3, #8]
      break;
 8004c9a:	e008      	b.n	8004cae <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004ca2:	4b19      	ldr	r3, [pc, #100]	; (8004d08 <SUBGHZSPI_Transmit+0xa4>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d1ed      	bne.n	8004c8a <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004cae:	4b17      	ldr	r3, [pc, #92]	; (8004d0c <SUBGHZSPI_Transmit+0xa8>)
 8004cb0:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	78fa      	ldrb	r2, [r7, #3]
 8004cb6:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004cb8:	4b12      	ldr	r3, [pc, #72]	; (8004d04 <SUBGHZSPI_Transmit+0xa0>)
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	1a9b      	subs	r3, r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	0cdb      	lsrs	r3, r3, #19
 8004cc6:	2264      	movs	r2, #100	; 0x64
 8004cc8:	fb02 f303 	mul.w	r3, r2, r3
 8004ccc:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d105      	bne.n	8004ce0 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	609a      	str	r2, [r3, #8]
      break;
 8004cde:	e008      	b.n	8004cf2 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004ce6:	4b08      	ldr	r3, [pc, #32]	; (8004d08 <SUBGHZSPI_Transmit+0xa4>)
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d1ed      	bne.n	8004cce <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8004cf2:	4b05      	ldr	r3, [pc, #20]	; (8004d08 <SUBGHZSPI_Transmit+0xa4>)
 8004cf4:	68db      	ldr	r3, [r3, #12]

  return status;
 8004cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	371c      	adds	r7, #28
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bc80      	pop	{r7}
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	20000000 	.word	0x20000000
 8004d08:	58010000 	.word	0x58010000
 8004d0c:	5801000c 	.word	0x5801000c

08004d10 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b087      	sub	sp, #28
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004d1e:	4b25      	ldr	r3, [pc, #148]	; (8004db4 <SUBGHZSPI_Receive+0xa4>)
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	4613      	mov	r3, r2
 8004d24:	00db      	lsls	r3, r3, #3
 8004d26:	1a9b      	subs	r3, r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	0cdb      	lsrs	r3, r3, #19
 8004d2c:	2264      	movs	r2, #100	; 0x64
 8004d2e:	fb02 f303 	mul.w	r3, r2, r3
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d105      	bne.n	8004d46 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	609a      	str	r2, [r3, #8]
      break;
 8004d44:	e008      	b.n	8004d58 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004d4c:	4b1a      	ldr	r3, [pc, #104]	; (8004db8 <SUBGHZSPI_Receive+0xa8>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d1ed      	bne.n	8004d34 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004d58:	4b18      	ldr	r3, [pc, #96]	; (8004dbc <SUBGHZSPI_Receive+0xac>)
 8004d5a:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	22ff      	movs	r2, #255	; 0xff
 8004d60:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004d62:	4b14      	ldr	r3, [pc, #80]	; (8004db4 <SUBGHZSPI_Receive+0xa4>)
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	4613      	mov	r3, r2
 8004d68:	00db      	lsls	r3, r3, #3
 8004d6a:	1a9b      	subs	r3, r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	0cdb      	lsrs	r3, r3, #19
 8004d70:	2264      	movs	r2, #100	; 0x64
 8004d72:	fb02 f303 	mul.w	r3, r2, r3
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d105      	bne.n	8004d8a <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	609a      	str	r2, [r3, #8]
      break;
 8004d88:	e008      	b.n	8004d9c <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004d90:	4b09      	ldr	r3, [pc, #36]	; (8004db8 <SUBGHZSPI_Receive+0xa8>)
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d1ed      	bne.n	8004d78 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004d9c:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <SUBGHZSPI_Receive+0xa8>)
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	701a      	strb	r2, [r3, #0]

  return status;
 8004da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	371c      	adds	r7, #28
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bc80      	pop	{r7}
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	20000000 	.word	0x20000000
 8004db8:	58010000 	.word	0x58010000
 8004dbc:	5801000c 	.word	0x5801000c

08004dc0 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	791b      	ldrb	r3, [r3, #4]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d111      	bne.n	8004df4 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8004dd0:	4b0c      	ldr	r3, [pc, #48]	; (8004e04 <SUBGHZ_CheckDeviceReady+0x44>)
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	4413      	add	r3, r2
 8004dda:	00db      	lsls	r3, r3, #3
 8004ddc:	0c1b      	lsrs	r3, r3, #16
 8004dde:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004de0:	f7ff fbb0 	bl	8004544 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	3b01      	subs	r3, #1
 8004de8:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1f9      	bne.n	8004de4 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004df0:	f7ff fb98 	bl	8004524 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 f807 	bl	8004e08 <SUBGHZ_WaitOnBusy>
 8004dfa:	4603      	mov	r3, r0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	20000000 	.word	0x20000000

08004e08 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8004e10:	2300      	movs	r3, #0
 8004e12:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8004e14:	4b12      	ldr	r3, [pc, #72]	; (8004e60 <SUBGHZ_WaitOnBusy+0x58>)
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	005b      	lsls	r3, r3, #1
 8004e1c:	4413      	add	r3, r2
 8004e1e:	00db      	lsls	r3, r3, #3
 8004e20:	0d1b      	lsrs	r3, r3, #20
 8004e22:	2264      	movs	r2, #100	; 0x64
 8004e24:	fb02 f303 	mul.w	r3, r2, r3
 8004e28:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8004e2a:	f7ff fbb9 	bl	80045a0 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8004e2e:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d105      	bne.n	8004e42 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2202      	movs	r2, #2
 8004e3e:	609a      	str	r2, [r3, #8]
      break;
 8004e40:	e009      	b.n	8004e56 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	3b01      	subs	r3, #1
 8004e46:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004e48:	f7ff fb98 	bl	800457c <LL_PWR_IsActiveFlag_RFBUSYS>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	4013      	ands	r3, r2
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d0e9      	beq.n	8004e2a <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8004e56:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3718      	adds	r7, #24
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	20000000 	.word	0x20000000

08004e64 <LL_RCC_GetUSARTClockSource>:
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e70:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	401a      	ands	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	041b      	lsls	r3, r3, #16
 8004e7c:	4313      	orrs	r3, r2
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bc80      	pop	{r7}
 8004e86:	4770      	bx	lr

08004e88 <LL_RCC_GetLPUARTClockSource>:
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e94:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4013      	ands	r3, r2
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bc80      	pop	{r7}
 8004ea4:	4770      	bx	lr

08004ea6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b082      	sub	sp, #8
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e042      	b.n	8004f3e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d106      	bne.n	8004ed0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7fc f99a 	bl	8001204 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2224      	movs	r2, #36	; 0x24
 8004ed4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 0201 	bic.w	r2, r2, #1
 8004ee6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 fc4b 	bl	8005784 <UART_SetConfig>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d101      	bne.n	8004ef8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e022      	b.n	8004f3e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d002      	beq.n	8004f06 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 feb3 	bl	8005c6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f14:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689a      	ldr	r2, [r3, #8]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f24:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f042 0201 	orr.w	r2, r2, #1
 8004f34:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 ff39 	bl	8005dae <UART_CheckIdleState>
 8004f3c:	4603      	mov	r3, r0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3708      	adds	r7, #8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
	...

08004f48 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b08a      	sub	sp, #40	; 0x28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	4613      	mov	r3, r2
 8004f54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5c:	2b20      	cmp	r3, #32
 8004f5e:	d142      	bne.n	8004fe6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d002      	beq.n	8004f6c <HAL_UART_Receive_IT+0x24>
 8004f66:	88fb      	ldrh	r3, [r7, #6]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e03b      	b.n	8004fe8 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d101      	bne.n	8004f7e <HAL_UART_Receive_IT+0x36>
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	e034      	b.n	8004fe8 <HAL_UART_Receive_IT+0xa0>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a17      	ldr	r2, [pc, #92]	; (8004ff0 <HAL_UART_Receive_IT+0xa8>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d01f      	beq.n	8004fd6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d018      	beq.n	8004fd6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	e853 3f00 	ldrex	r3, [r3]
 8004fb0:	613b      	str	r3, [r7, #16]
   return(result);
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc2:	623b      	str	r3, [r7, #32]
 8004fc4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc6:	69f9      	ldr	r1, [r7, #28]
 8004fc8:	6a3a      	ldr	r2, [r7, #32]
 8004fca:	e841 2300 	strex	r3, r2, [r1]
 8004fce:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1e6      	bne.n	8004fa4 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004fd6:	88fb      	ldrh	r3, [r7, #6]
 8004fd8:	461a      	mov	r2, r3
 8004fda:	68b9      	ldr	r1, [r7, #8]
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f000 fff9 	bl	8005fd4 <UART_Start_Receive_IT>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	e000      	b.n	8004fe8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004fe6:	2302      	movs	r3, #2
  }
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3728      	adds	r7, #40	; 0x28
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	40008000 	.word	0x40008000

08004ff4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b08a      	sub	sp, #40	; 0x28
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	4613      	mov	r3, r2
 8005000:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005008:	2b20      	cmp	r3, #32
 800500a:	d17a      	bne.n	8005102 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d002      	beq.n	8005018 <HAL_UART_Transmit_DMA+0x24>
 8005012:	88fb      	ldrh	r3, [r7, #6]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e073      	b.n	8005104 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005022:	2b01      	cmp	r3, #1
 8005024:	d101      	bne.n	800502a <HAL_UART_Transmit_DMA+0x36>
 8005026:	2302      	movs	r3, #2
 8005028:	e06c      	b.n	8005104 <HAL_UART_Transmit_DMA+0x110>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	88fa      	ldrh	r2, [r7, #6]
 800503c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	88fa      	ldrh	r2, [r7, #6]
 8005044:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2221      	movs	r2, #33	; 0x21
 8005054:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800505c:	2b00      	cmp	r3, #0
 800505e:	d02c      	beq.n	80050ba <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005064:	4a29      	ldr	r2, [pc, #164]	; (800510c <HAL_UART_Transmit_DMA+0x118>)
 8005066:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800506c:	4a28      	ldr	r2, [pc, #160]	; (8005110 <HAL_UART_Transmit_DMA+0x11c>)
 800506e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005074:	4a27      	ldr	r2, [pc, #156]	; (8005114 <HAL_UART_Transmit_DMA+0x120>)
 8005076:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800507c:	2200      	movs	r2, #0
 800507e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005088:	4619      	mov	r1, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	3328      	adds	r3, #40	; 0x28
 8005090:	461a      	mov	r2, r3
 8005092:	88fb      	ldrh	r3, [r7, #6]
 8005094:	f7fc fdf6 	bl	8001c84 <HAL_DMA_Start_IT>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00d      	beq.n	80050ba <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2210      	movs	r2, #16
 80050a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2220      	movs	r2, #32
 80050b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e024      	b.n	8005104 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2240      	movs	r2, #64	; 0x40
 80050c0:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	3308      	adds	r3, #8
 80050d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	e853 3f00 	ldrex	r3, [r3]
 80050d8:	613b      	str	r3, [r7, #16]
   return(result);
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050e0:	627b      	str	r3, [r7, #36]	; 0x24
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	3308      	adds	r3, #8
 80050e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ea:	623a      	str	r2, [r7, #32]
 80050ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ee:	69f9      	ldr	r1, [r7, #28]
 80050f0:	6a3a      	ldr	r2, [r7, #32]
 80050f2:	e841 2300 	strex	r3, r2, [r1]
 80050f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1e5      	bne.n	80050ca <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	e000      	b.n	8005104 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8005102:	2302      	movs	r3, #2
  }
}
 8005104:	4618      	mov	r0, r3
 8005106:	3728      	adds	r7, #40	; 0x28
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	0800636f 	.word	0x0800636f
 8005110:	08006409 	.word	0x08006409
 8005114:	08006425 	.word	0x08006425

08005118 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b0ba      	sub	sp, #232	; 0xe8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800513e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005142:	f640 030f 	movw	r3, #2063	; 0x80f
 8005146:	4013      	ands	r3, r2
 8005148:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800514c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005150:	2b00      	cmp	r3, #0
 8005152:	d11b      	bne.n	800518c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005158:	f003 0320 	and.w	r3, r3, #32
 800515c:	2b00      	cmp	r3, #0
 800515e:	d015      	beq.n	800518c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005164:	f003 0320 	and.w	r3, r3, #32
 8005168:	2b00      	cmp	r3, #0
 800516a:	d105      	bne.n	8005178 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800516c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d009      	beq.n	800518c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517c:	2b00      	cmp	r3, #0
 800517e:	f000 82d6 	beq.w	800572e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	4798      	blx	r3
      }
      return;
 800518a:	e2d0      	b.n	800572e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800518c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 811f 	beq.w	80053d4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005196:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800519a:	4b8b      	ldr	r3, [pc, #556]	; (80053c8 <HAL_UART_IRQHandler+0x2b0>)
 800519c:	4013      	ands	r3, r2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d106      	bne.n	80051b0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80051a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80051a6:	4b89      	ldr	r3, [pc, #548]	; (80053cc <HAL_UART_IRQHandler+0x2b4>)
 80051a8:	4013      	ands	r3, r2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 8112 	beq.w	80053d4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80051b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051b4:	f003 0301 	and.w	r3, r3, #1
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d011      	beq.n	80051e0 <HAL_UART_IRQHandler+0xc8>
 80051bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00b      	beq.n	80051e0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2201      	movs	r2, #1
 80051ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051d6:	f043 0201 	orr.w	r2, r3, #1
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d011      	beq.n	8005210 <HAL_UART_IRQHandler+0xf8>
 80051ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051f0:	f003 0301 	and.w	r3, r3, #1
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00b      	beq.n	8005210 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2202      	movs	r2, #2
 80051fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005206:	f043 0204 	orr.w	r2, r3, #4
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005214:	f003 0304 	and.w	r3, r3, #4
 8005218:	2b00      	cmp	r3, #0
 800521a:	d011      	beq.n	8005240 <HAL_UART_IRQHandler+0x128>
 800521c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00b      	beq.n	8005240 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2204      	movs	r2, #4
 800522e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005236:	f043 0202 	orr.w	r2, r3, #2
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005244:	f003 0308 	and.w	r3, r3, #8
 8005248:	2b00      	cmp	r3, #0
 800524a:	d017      	beq.n	800527c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800524c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005250:	f003 0320 	and.w	r3, r3, #32
 8005254:	2b00      	cmp	r3, #0
 8005256:	d105      	bne.n	8005264 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005258:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800525c:	4b5a      	ldr	r3, [pc, #360]	; (80053c8 <HAL_UART_IRQHandler+0x2b0>)
 800525e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00b      	beq.n	800527c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2208      	movs	r2, #8
 800526a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005272:	f043 0208 	orr.w	r2, r3, #8
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800527c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005284:	2b00      	cmp	r3, #0
 8005286:	d012      	beq.n	80052ae <HAL_UART_IRQHandler+0x196>
 8005288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800528c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00c      	beq.n	80052ae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800529c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052a4:	f043 0220 	orr.w	r2, r3, #32
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f000 823c 	beq.w	8005732 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80052ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052be:	f003 0320 	and.w	r3, r3, #32
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d013      	beq.n	80052ee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80052c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052ca:	f003 0320 	and.w	r3, r3, #32
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d105      	bne.n	80052de <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80052d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d007      	beq.n	80052ee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d003      	beq.n	80052ee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005302:	2b40      	cmp	r3, #64	; 0x40
 8005304:	d005      	beq.n	8005312 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005306:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800530a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800530e:	2b00      	cmp	r3, #0
 8005310:	d04f      	beq.n	80053b2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 ffc6 	bl	80062a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005322:	2b40      	cmp	r3, #64	; 0x40
 8005324:	d141      	bne.n	80053aa <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	3308      	adds	r3, #8
 800532c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005330:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005334:	e853 3f00 	ldrex	r3, [r3]
 8005338:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800533c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005340:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005344:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	3308      	adds	r3, #8
 800534e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005352:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005356:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800535e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005362:	e841 2300 	strex	r3, r2, [r1]
 8005366:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800536a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1d9      	bne.n	8005326 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005376:	2b00      	cmp	r3, #0
 8005378:	d013      	beq.n	80053a2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800537e:	4a14      	ldr	r2, [pc, #80]	; (80053d0 <HAL_UART_IRQHandler+0x2b8>)
 8005380:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005386:	4618      	mov	r0, r3
 8005388:	f7fc fd58 	bl	8001e3c <HAL_DMA_Abort_IT>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d017      	beq.n	80053c2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800539c:	4610      	mov	r0, r2
 800539e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a0:	e00f      	b.n	80053c2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f9d9 	bl	800575a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a8:	e00b      	b.n	80053c2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f9d5 	bl	800575a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053b0:	e007      	b.n	80053c2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 f9d1 	bl	800575a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80053c0:	e1b7      	b.n	8005732 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053c2:	bf00      	nop
    return;
 80053c4:	e1b5      	b.n	8005732 <HAL_UART_IRQHandler+0x61a>
 80053c6:	bf00      	nop
 80053c8:	10000001 	.word	0x10000001
 80053cc:	04000120 	.word	0x04000120
 80053d0:	080064a5 	.word	0x080064a5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053d8:	2b01      	cmp	r3, #1
 80053da:	f040 814a 	bne.w	8005672 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80053de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053e2:	f003 0310 	and.w	r3, r3, #16
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f000 8143 	beq.w	8005672 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80053ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053f0:	f003 0310 	and.w	r3, r3, #16
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f000 813c 	beq.w	8005672 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2210      	movs	r2, #16
 8005400:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540c:	2b40      	cmp	r3, #64	; 0x40
 800540e:	f040 80b5 	bne.w	800557c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 800541e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005422:	2b00      	cmp	r3, #0
 8005424:	f000 8187 	beq.w	8005736 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800542e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005432:	429a      	cmp	r2, r3
 8005434:	f080 817f 	bcs.w	8005736 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800543e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0320 	and.w	r3, r3, #32
 800544e:	2b00      	cmp	r3, #0
 8005450:	f040 8086 	bne.w	8005560 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005460:	e853 3f00 	ldrex	r3, [r3]
 8005464:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005468:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800546c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005470:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	461a      	mov	r2, r3
 800547a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800547e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005482:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005486:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800548a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800548e:	e841 2300 	strex	r3, r2, [r1]
 8005492:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005496:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1da      	bne.n	8005454 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	3308      	adds	r3, #8
 80054a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054a8:	e853 3f00 	ldrex	r3, [r3]
 80054ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80054ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054b0:	f023 0301 	bic.w	r3, r3, #1
 80054b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	3308      	adds	r3, #8
 80054be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80054c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80054c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80054ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80054ce:	e841 2300 	strex	r3, r2, [r1]
 80054d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80054d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1e1      	bne.n	800549e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	3308      	adds	r3, #8
 80054e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054e4:	e853 3f00 	ldrex	r3, [r3]
 80054e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80054ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	3308      	adds	r3, #8
 80054fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80054fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005500:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005502:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005504:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005506:	e841 2300 	strex	r3, r2, [r1]
 800550a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800550c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1e3      	bne.n	80054da <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2220      	movs	r2, #32
 8005516:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005528:	e853 3f00 	ldrex	r3, [r3]
 800552c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800552e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005530:	f023 0310 	bic.w	r3, r3, #16
 8005534:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	461a      	mov	r2, r3
 800553e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005542:	65bb      	str	r3, [r7, #88]	; 0x58
 8005544:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005546:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005548:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800554a:	e841 2300 	strex	r3, r2, [r1]
 800554e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005550:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1e4      	bne.n	8005520 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800555a:	4618      	mov	r0, r3
 800555c:	f7fc fc10 	bl	8001d80 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800556c:	b29b      	uxth	r3, r3
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	b29b      	uxth	r3, r3
 8005572:	4619      	mov	r1, r3
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f8f9 	bl	800576c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800557a:	e0dc      	b.n	8005736 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005588:	b29b      	uxth	r3, r3
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005596:	b29b      	uxth	r3, r3
 8005598:	2b00      	cmp	r3, #0
 800559a:	f000 80ce 	beq.w	800573a <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 800559e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f000 80c9 	beq.w	800573a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b0:	e853 3f00 	ldrex	r3, [r3]
 80055b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	461a      	mov	r2, r3
 80055c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055ca:	647b      	str	r3, [r7, #68]	; 0x44
 80055cc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055d2:	e841 2300 	strex	r3, r2, [r1]
 80055d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1e4      	bne.n	80055a8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	3308      	adds	r3, #8
 80055e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	e853 3f00 	ldrex	r3, [r3]
 80055ec:	623b      	str	r3, [r7, #32]
   return(result);
 80055ee:	6a3b      	ldr	r3, [r7, #32]
 80055f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055f4:	f023 0301 	bic.w	r3, r3, #1
 80055f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	3308      	adds	r3, #8
 8005602:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005606:	633a      	str	r2, [r7, #48]	; 0x30
 8005608:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800560c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800560e:	e841 2300 	strex	r3, r2, [r1]
 8005612:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1e1      	bne.n	80055de <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2220      	movs	r2, #32
 800561e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	e853 3f00 	ldrex	r3, [r3]
 800563a:	60fb      	str	r3, [r7, #12]
   return(result);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f023 0310 	bic.w	r3, r3, #16
 8005642:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	461a      	mov	r2, r3
 800564c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005650:	61fb      	str	r3, [r7, #28]
 8005652:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005654:	69b9      	ldr	r1, [r7, #24]
 8005656:	69fa      	ldr	r2, [r7, #28]
 8005658:	e841 2300 	strex	r3, r2, [r1]
 800565c:	617b      	str	r3, [r7, #20]
   return(result);
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d1e4      	bne.n	800562e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005664:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005668:	4619      	mov	r1, r3
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f87e 	bl	800576c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005670:	e063      	b.n	800573a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005676:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00e      	beq.n	800569c <HAL_UART_IRQHandler+0x584>
 800567e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d008      	beq.n	800569c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005692:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f001 fba3 	bl	8006de0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800569a:	e051      	b.n	8005740 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800569c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d014      	beq.n	80056d2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80056a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d105      	bne.n	80056c0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80056b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d008      	beq.n	80056d2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d03a      	beq.n	800573e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	4798      	blx	r3
    }
    return;
 80056d0:	e035      	b.n	800573e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80056d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d009      	beq.n	80056f2 <HAL_UART_IRQHandler+0x5da>
 80056de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 fef0 	bl	80064d0 <UART_EndTransmit_IT>
    return;
 80056f0:	e026      	b.n	8005740 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80056f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d009      	beq.n	8005712 <HAL_UART_IRQHandler+0x5fa>
 80056fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005702:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f001 fb7a 	bl	8006e04 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005710:	e016      	b.n	8005740 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005716:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d010      	beq.n	8005740 <HAL_UART_IRQHandler+0x628>
 800571e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005722:	2b00      	cmp	r3, #0
 8005724:	da0c      	bge.n	8005740 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f001 fb63 	bl	8006df2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800572c:	e008      	b.n	8005740 <HAL_UART_IRQHandler+0x628>
      return;
 800572e:	bf00      	nop
 8005730:	e006      	b.n	8005740 <HAL_UART_IRQHandler+0x628>
    return;
 8005732:	bf00      	nop
 8005734:	e004      	b.n	8005740 <HAL_UART_IRQHandler+0x628>
      return;
 8005736:	bf00      	nop
 8005738:	e002      	b.n	8005740 <HAL_UART_IRQHandler+0x628>
      return;
 800573a:	bf00      	nop
 800573c:	e000      	b.n	8005740 <HAL_UART_IRQHandler+0x628>
    return;
 800573e:	bf00      	nop
  }
}
 8005740:	37e8      	adds	r7, #232	; 0xe8
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop

08005748 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	bc80      	pop	{r7}
 8005758:	4770      	bx	lr

0800575a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800575a:	b480      	push	{r7}
 800575c:	b083      	sub	sp, #12
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005762:	bf00      	nop
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	bc80      	pop	{r7}
 800576a:	4770      	bx	lr

0800576c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	460b      	mov	r3, r1
 8005776:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	bc80      	pop	{r7}
 8005780:	4770      	bx	lr
	...

08005784 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005788:	b08c      	sub	sp, #48	; 0x30
 800578a:	af00      	add	r7, sp, #0
 800578c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800578e:	2300      	movs	r3, #0
 8005790:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	689a      	ldr	r2, [r3, #8]
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	431a      	orrs	r2, r3
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	431a      	orrs	r2, r3
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	69db      	ldr	r3, [r3, #28]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	4b94      	ldr	r3, [pc, #592]	; (8005a04 <UART_SetConfig+0x280>)
 80057b4:	4013      	ands	r3, r2
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	6812      	ldr	r2, [r2, #0]
 80057ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057bc:	430b      	orrs	r3, r1
 80057be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	68da      	ldr	r2, [r3, #12]
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a89      	ldr	r2, [pc, #548]	; (8005a08 <UART_SetConfig+0x284>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d004      	beq.n	80057f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057ec:	4313      	orrs	r3, r2
 80057ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80057fa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	6812      	ldr	r2, [r2, #0]
 8005802:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005804:	430b      	orrs	r3, r1
 8005806:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580e:	f023 010f 	bic.w	r1, r3, #15
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a7a      	ldr	r2, [pc, #488]	; (8005a0c <UART_SetConfig+0x288>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d127      	bne.n	8005878 <UART_SetConfig+0xf4>
 8005828:	2003      	movs	r0, #3
 800582a:	f7ff fb1b 	bl	8004e64 <LL_RCC_GetUSARTClockSource>
 800582e:	4603      	mov	r3, r0
 8005830:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8005834:	2b03      	cmp	r3, #3
 8005836:	d81b      	bhi.n	8005870 <UART_SetConfig+0xec>
 8005838:	a201      	add	r2, pc, #4	; (adr r2, 8005840 <UART_SetConfig+0xbc>)
 800583a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800583e:	bf00      	nop
 8005840:	08005851 	.word	0x08005851
 8005844:	08005861 	.word	0x08005861
 8005848:	08005859 	.word	0x08005859
 800584c:	08005869 	.word	0x08005869
 8005850:	2301      	movs	r3, #1
 8005852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005856:	e080      	b.n	800595a <UART_SetConfig+0x1d6>
 8005858:	2302      	movs	r3, #2
 800585a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800585e:	e07c      	b.n	800595a <UART_SetConfig+0x1d6>
 8005860:	2304      	movs	r3, #4
 8005862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005866:	e078      	b.n	800595a <UART_SetConfig+0x1d6>
 8005868:	2308      	movs	r3, #8
 800586a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800586e:	e074      	b.n	800595a <UART_SetConfig+0x1d6>
 8005870:	2310      	movs	r3, #16
 8005872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005876:	e070      	b.n	800595a <UART_SetConfig+0x1d6>
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a64      	ldr	r2, [pc, #400]	; (8005a10 <UART_SetConfig+0x28c>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d138      	bne.n	80058f4 <UART_SetConfig+0x170>
 8005882:	200c      	movs	r0, #12
 8005884:	f7ff faee 	bl	8004e64 <LL_RCC_GetUSARTClockSource>
 8005888:	4603      	mov	r3, r0
 800588a:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800588e:	2b0c      	cmp	r3, #12
 8005890:	d82c      	bhi.n	80058ec <UART_SetConfig+0x168>
 8005892:	a201      	add	r2, pc, #4	; (adr r2, 8005898 <UART_SetConfig+0x114>)
 8005894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005898:	080058cd 	.word	0x080058cd
 800589c:	080058ed 	.word	0x080058ed
 80058a0:	080058ed 	.word	0x080058ed
 80058a4:	080058ed 	.word	0x080058ed
 80058a8:	080058dd 	.word	0x080058dd
 80058ac:	080058ed 	.word	0x080058ed
 80058b0:	080058ed 	.word	0x080058ed
 80058b4:	080058ed 	.word	0x080058ed
 80058b8:	080058d5 	.word	0x080058d5
 80058bc:	080058ed 	.word	0x080058ed
 80058c0:	080058ed 	.word	0x080058ed
 80058c4:	080058ed 	.word	0x080058ed
 80058c8:	080058e5 	.word	0x080058e5
 80058cc:	2300      	movs	r3, #0
 80058ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058d2:	e042      	b.n	800595a <UART_SetConfig+0x1d6>
 80058d4:	2302      	movs	r3, #2
 80058d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058da:	e03e      	b.n	800595a <UART_SetConfig+0x1d6>
 80058dc:	2304      	movs	r3, #4
 80058de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058e2:	e03a      	b.n	800595a <UART_SetConfig+0x1d6>
 80058e4:	2308      	movs	r3, #8
 80058e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058ea:	e036      	b.n	800595a <UART_SetConfig+0x1d6>
 80058ec:	2310      	movs	r3, #16
 80058ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058f2:	e032      	b.n	800595a <UART_SetConfig+0x1d6>
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a43      	ldr	r2, [pc, #268]	; (8005a08 <UART_SetConfig+0x284>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d12a      	bne.n	8005954 <UART_SetConfig+0x1d0>
 80058fe:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005902:	f7ff fac1 	bl	8004e88 <LL_RCC_GetLPUARTClockSource>
 8005906:	4603      	mov	r3, r0
 8005908:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800590c:	d01a      	beq.n	8005944 <UART_SetConfig+0x1c0>
 800590e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005912:	d81b      	bhi.n	800594c <UART_SetConfig+0x1c8>
 8005914:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005918:	d00c      	beq.n	8005934 <UART_SetConfig+0x1b0>
 800591a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800591e:	d815      	bhi.n	800594c <UART_SetConfig+0x1c8>
 8005920:	2b00      	cmp	r3, #0
 8005922:	d003      	beq.n	800592c <UART_SetConfig+0x1a8>
 8005924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005928:	d008      	beq.n	800593c <UART_SetConfig+0x1b8>
 800592a:	e00f      	b.n	800594c <UART_SetConfig+0x1c8>
 800592c:	2300      	movs	r3, #0
 800592e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005932:	e012      	b.n	800595a <UART_SetConfig+0x1d6>
 8005934:	2302      	movs	r3, #2
 8005936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800593a:	e00e      	b.n	800595a <UART_SetConfig+0x1d6>
 800593c:	2304      	movs	r3, #4
 800593e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005942:	e00a      	b.n	800595a <UART_SetConfig+0x1d6>
 8005944:	2308      	movs	r3, #8
 8005946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800594a:	e006      	b.n	800595a <UART_SetConfig+0x1d6>
 800594c:	2310      	movs	r3, #16
 800594e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005952:	e002      	b.n	800595a <UART_SetConfig+0x1d6>
 8005954:	2310      	movs	r3, #16
 8005956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a2a      	ldr	r2, [pc, #168]	; (8005a08 <UART_SetConfig+0x284>)
 8005960:	4293      	cmp	r3, r2
 8005962:	f040 80a4 	bne.w	8005aae <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005966:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800596a:	2b08      	cmp	r3, #8
 800596c:	d823      	bhi.n	80059b6 <UART_SetConfig+0x232>
 800596e:	a201      	add	r2, pc, #4	; (adr r2, 8005974 <UART_SetConfig+0x1f0>)
 8005970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005974:	08005999 	.word	0x08005999
 8005978:	080059b7 	.word	0x080059b7
 800597c:	080059a1 	.word	0x080059a1
 8005980:	080059b7 	.word	0x080059b7
 8005984:	080059a7 	.word	0x080059a7
 8005988:	080059b7 	.word	0x080059b7
 800598c:	080059b7 	.word	0x080059b7
 8005990:	080059b7 	.word	0x080059b7
 8005994:	080059af 	.word	0x080059af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005998:	f7fd ff48 	bl	800382c <HAL_RCC_GetPCLK1Freq>
 800599c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800599e:	e010      	b.n	80059c2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059a0:	4b1c      	ldr	r3, [pc, #112]	; (8005a14 <UART_SetConfig+0x290>)
 80059a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80059a4:	e00d      	b.n	80059c2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059a6:	f7fd fe8d 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 80059aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059ac:	e009      	b.n	80059c2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80059b4:	e005      	b.n	80059c2 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80059b6:	2300      	movs	r3, #0
 80059b8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80059c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80059c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 8137 	beq.w	8005c38 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ce:	4a12      	ldr	r2, [pc, #72]	; (8005a18 <UART_SetConfig+0x294>)
 80059d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059d4:	461a      	mov	r2, r3
 80059d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80059dc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	4613      	mov	r3, r2
 80059e4:	005b      	lsls	r3, r3, #1
 80059e6:	4413      	add	r3, r2
 80059e8:	69ba      	ldr	r2, [r7, #24]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d305      	bcc.n	80059fa <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d910      	bls.n	8005a1c <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005a00:	e11a      	b.n	8005c38 <UART_SetConfig+0x4b4>
 8005a02:	bf00      	nop
 8005a04:	cfff69f3 	.word	0xcfff69f3
 8005a08:	40008000 	.word	0x40008000
 8005a0c:	40013800 	.word	0x40013800
 8005a10:	40004400 	.word	0x40004400
 8005a14:	00f42400 	.word	0x00f42400
 8005a18:	0800bd14 	.word	0x0800bd14
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	2200      	movs	r2, #0
 8005a20:	60bb      	str	r3, [r7, #8]
 8005a22:	60fa      	str	r2, [r7, #12]
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a28:	4a8e      	ldr	r2, [pc, #568]	; (8005c64 <UART_SetConfig+0x4e0>)
 8005a2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	2200      	movs	r2, #0
 8005a32:	603b      	str	r3, [r7, #0]
 8005a34:	607a      	str	r2, [r7, #4]
 8005a36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a3e:	f7fa fba3 	bl	8000188 <__aeabi_uldivmod>
 8005a42:	4602      	mov	r2, r0
 8005a44:	460b      	mov	r3, r1
 8005a46:	4610      	mov	r0, r2
 8005a48:	4619      	mov	r1, r3
 8005a4a:	f04f 0200 	mov.w	r2, #0
 8005a4e:	f04f 0300 	mov.w	r3, #0
 8005a52:	020b      	lsls	r3, r1, #8
 8005a54:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005a58:	0202      	lsls	r2, r0, #8
 8005a5a:	6979      	ldr	r1, [r7, #20]
 8005a5c:	6849      	ldr	r1, [r1, #4]
 8005a5e:	0849      	lsrs	r1, r1, #1
 8005a60:	2000      	movs	r0, #0
 8005a62:	460c      	mov	r4, r1
 8005a64:	4605      	mov	r5, r0
 8005a66:	eb12 0804 	adds.w	r8, r2, r4
 8005a6a:	eb43 0905 	adc.w	r9, r3, r5
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	469a      	mov	sl, r3
 8005a76:	4693      	mov	fp, r2
 8005a78:	4652      	mov	r2, sl
 8005a7a:	465b      	mov	r3, fp
 8005a7c:	4640      	mov	r0, r8
 8005a7e:	4649      	mov	r1, r9
 8005a80:	f7fa fb82 	bl	8000188 <__aeabi_uldivmod>
 8005a84:	4602      	mov	r2, r0
 8005a86:	460b      	mov	r3, r1
 8005a88:	4613      	mov	r3, r2
 8005a8a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a8c:	6a3b      	ldr	r3, [r7, #32]
 8005a8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a92:	d308      	bcc.n	8005aa6 <UART_SetConfig+0x322>
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a9a:	d204      	bcs.n	8005aa6 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6a3a      	ldr	r2, [r7, #32]
 8005aa2:	60da      	str	r2, [r3, #12]
 8005aa4:	e0c8      	b.n	8005c38 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005aac:	e0c4      	b.n	8005c38 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	69db      	ldr	r3, [r3, #28]
 8005ab2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ab6:	d168      	bne.n	8005b8a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8005ab8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	d828      	bhi.n	8005b12 <UART_SetConfig+0x38e>
 8005ac0:	a201      	add	r2, pc, #4	; (adr r2, 8005ac8 <UART_SetConfig+0x344>)
 8005ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac6:	bf00      	nop
 8005ac8:	08005aed 	.word	0x08005aed
 8005acc:	08005af5 	.word	0x08005af5
 8005ad0:	08005afd 	.word	0x08005afd
 8005ad4:	08005b13 	.word	0x08005b13
 8005ad8:	08005b03 	.word	0x08005b03
 8005adc:	08005b13 	.word	0x08005b13
 8005ae0:	08005b13 	.word	0x08005b13
 8005ae4:	08005b13 	.word	0x08005b13
 8005ae8:	08005b0b 	.word	0x08005b0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005aec:	f7fd fe9e 	bl	800382c <HAL_RCC_GetPCLK1Freq>
 8005af0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005af2:	e014      	b.n	8005b1e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005af4:	f7fd feac 	bl	8003850 <HAL_RCC_GetPCLK2Freq>
 8005af8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005afa:	e010      	b.n	8005b1e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005afc:	4b5a      	ldr	r3, [pc, #360]	; (8005c68 <UART_SetConfig+0x4e4>)
 8005afe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b00:	e00d      	b.n	8005b1e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b02:	f7fd fddf 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 8005b06:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b08:	e009      	b.n	8005b1e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b10:	e005      	b.n	8005b1e <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8005b12:	2300      	movs	r3, #0
 8005b14:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005b1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f000 8089 	beq.w	8005c38 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	4a4e      	ldr	r2, [pc, #312]	; (8005c64 <UART_SetConfig+0x4e0>)
 8005b2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b30:	461a      	mov	r2, r3
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b38:	005a      	lsls	r2, r3, #1
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	085b      	lsrs	r3, r3, #1
 8005b40:	441a      	add	r2, r3
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b4e:	6a3b      	ldr	r3, [r7, #32]
 8005b50:	2b0f      	cmp	r3, #15
 8005b52:	d916      	bls.n	8005b82 <UART_SetConfig+0x3fe>
 8005b54:	6a3b      	ldr	r3, [r7, #32]
 8005b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b5a:	d212      	bcs.n	8005b82 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b5c:	6a3b      	ldr	r3, [r7, #32]
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	f023 030f 	bic.w	r3, r3, #15
 8005b64:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	085b      	lsrs	r3, r3, #1
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	f003 0307 	and.w	r3, r3, #7
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	8bfb      	ldrh	r3, [r7, #30]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	8bfa      	ldrh	r2, [r7, #30]
 8005b7e:	60da      	str	r2, [r3, #12]
 8005b80:	e05a      	b.n	8005c38 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005b88:	e056      	b.n	8005c38 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b8e:	2b08      	cmp	r3, #8
 8005b90:	d827      	bhi.n	8005be2 <UART_SetConfig+0x45e>
 8005b92:	a201      	add	r2, pc, #4	; (adr r2, 8005b98 <UART_SetConfig+0x414>)
 8005b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b98:	08005bbd 	.word	0x08005bbd
 8005b9c:	08005bc5 	.word	0x08005bc5
 8005ba0:	08005bcd 	.word	0x08005bcd
 8005ba4:	08005be3 	.word	0x08005be3
 8005ba8:	08005bd3 	.word	0x08005bd3
 8005bac:	08005be3 	.word	0x08005be3
 8005bb0:	08005be3 	.word	0x08005be3
 8005bb4:	08005be3 	.word	0x08005be3
 8005bb8:	08005bdb 	.word	0x08005bdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bbc:	f7fd fe36 	bl	800382c <HAL_RCC_GetPCLK1Freq>
 8005bc0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005bc2:	e014      	b.n	8005bee <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bc4:	f7fd fe44 	bl	8003850 <HAL_RCC_GetPCLK2Freq>
 8005bc8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005bca:	e010      	b.n	8005bee <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bcc:	4b26      	ldr	r3, [pc, #152]	; (8005c68 <UART_SetConfig+0x4e4>)
 8005bce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005bd0:	e00d      	b.n	8005bee <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bd2:	f7fd fd77 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 8005bd6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005bd8:	e009      	b.n	8005bee <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005be0:	e005      	b.n	8005bee <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8005be2:	2300      	movs	r3, #0
 8005be4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005bec:	bf00      	nop
    }

    if (pclk != 0U)
 8005bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d021      	beq.n	8005c38 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf8:	4a1a      	ldr	r2, [pc, #104]	; (8005c64 <UART_SetConfig+0x4e0>)
 8005bfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c02:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	085b      	lsrs	r3, r3, #1
 8005c0c:	441a      	add	r2, r3
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c1a:	6a3b      	ldr	r3, [r7, #32]
 8005c1c:	2b0f      	cmp	r3, #15
 8005c1e:	d908      	bls.n	8005c32 <UART_SetConfig+0x4ae>
 8005c20:	6a3b      	ldr	r3, [r7, #32]
 8005c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c26:	d204      	bcs.n	8005c32 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	6a3a      	ldr	r2, [r7, #32]
 8005c2e:	60da      	str	r2, [r3, #12]
 8005c30:	e002      	b.n	8005c38 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	2200      	movs	r2, #0
 8005c52:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005c54:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3730      	adds	r7, #48	; 0x30
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c62:	bf00      	nop
 8005c64:	0800bd14 	.word	0x0800bd14
 8005c68:	00f42400 	.word	0x00f42400

08005c6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00a      	beq.n	8005c96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00a      	beq.n	8005cb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cbc:	f003 0304 	and.w	r3, r3, #4
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d00a      	beq.n	8005cda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cde:	f003 0308 	and.w	r3, r3, #8
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00a      	beq.n	8005cfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d00:	f003 0310 	and.w	r3, r3, #16
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00a      	beq.n	8005d1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d22:	f003 0320 	and.w	r3, r3, #32
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00a      	beq.n	8005d40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d01a      	beq.n	8005d82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d6a:	d10a      	bne.n	8005d82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00a      	beq.n	8005da4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	605a      	str	r2, [r3, #4]
  }
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bc80      	pop	{r7}
 8005dac:	4770      	bx	lr

08005dae <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b086      	sub	sp, #24
 8005db2:	af02      	add	r7, sp, #8
 8005db4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005dbe:	f7fa fea3 	bl	8000b08 <HAL_GetTick>
 8005dc2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0308 	and.w	r3, r3, #8
 8005dce:	2b08      	cmp	r3, #8
 8005dd0:	d10e      	bne.n	8005df0 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dd2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 f82f 	bl	8005e44 <UART_WaitOnFlagUntilTimeout>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d001      	beq.n	8005df0 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e025      	b.n	8005e3c <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0304 	and.w	r3, r3, #4
 8005dfa:	2b04      	cmp	r3, #4
 8005dfc:	d10e      	bne.n	8005e1c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dfe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 f819 	bl	8005e44 <UART_WaitOnFlagUntilTimeout>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e00f      	b.n	8005e3c <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2220      	movs	r2, #32
 8005e28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b09c      	sub	sp, #112	; 0x70
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	603b      	str	r3, [r7, #0]
 8005e50:	4613      	mov	r3, r2
 8005e52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e54:	e0a9      	b.n	8005faa <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e5c:	f000 80a5 	beq.w	8005faa <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e60:	f7fa fe52 	bl	8000b08 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d302      	bcc.n	8005e76 <UART_WaitOnFlagUntilTimeout+0x32>
 8005e70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d140      	bne.n	8005ef8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e7e:	e853 3f00 	ldrex	r3, [r3]
 8005e82:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e86:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e8a:	667b      	str	r3, [r7, #100]	; 0x64
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	461a      	mov	r2, r3
 8005e92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e96:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e98:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005e9a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005e9c:	e841 2300 	strex	r3, r2, [r1]
 8005ea0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1e6      	bne.n	8005e76 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	3308      	adds	r3, #8
 8005eae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eb2:	e853 3f00 	ldrex	r3, [r3]
 8005eb6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eba:	f023 0301 	bic.w	r3, r3, #1
 8005ebe:	663b      	str	r3, [r7, #96]	; 0x60
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	3308      	adds	r3, #8
 8005ec6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ec8:	64ba      	str	r2, [r7, #72]	; 0x48
 8005eca:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ecc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ece:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ed0:	e841 2300 	strex	r3, r2, [r1]
 8005ed4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1e5      	bne.n	8005ea8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2220      	movs	r2, #32
 8005ee0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e069      	b.n	8005fcc <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0304 	and.w	r3, r3, #4
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d051      	beq.n	8005faa <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	69db      	ldr	r3, [r3, #28]
 8005f0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f14:	d149      	bne.n	8005faa <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f1e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f28:	e853 3f00 	ldrex	r3, [r3]
 8005f2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f3e:	637b      	str	r3, [r7, #52]	; 0x34
 8005f40:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f46:	e841 2300 	strex	r3, r2, [r1]
 8005f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1e6      	bne.n	8005f20 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	3308      	adds	r3, #8
 8005f58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	e853 3f00 	ldrex	r3, [r3]
 8005f60:	613b      	str	r3, [r7, #16]
   return(result);
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	f023 0301 	bic.w	r3, r3, #1
 8005f68:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	3308      	adds	r3, #8
 8005f70:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f72:	623a      	str	r2, [r7, #32]
 8005f74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f76:	69f9      	ldr	r1, [r7, #28]
 8005f78:	6a3a      	ldr	r2, [r7, #32]
 8005f7a:	e841 2300 	strex	r3, r2, [r1]
 8005f7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1e5      	bne.n	8005f52 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2220      	movs	r2, #32
 8005f8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2220      	movs	r2, #32
 8005f92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e010      	b.n	8005fcc <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	69da      	ldr	r2, [r3, #28]
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	68ba      	ldr	r2, [r7, #8]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	bf0c      	ite	eq
 8005fba:	2301      	moveq	r3, #1
 8005fbc:	2300      	movne	r3, #0
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	79fb      	ldrb	r3, [r7, #7]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	f43f af46 	beq.w	8005e56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3770      	adds	r7, #112	; 0x70
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b0a3      	sub	sp, #140	; 0x8c
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	88fa      	ldrh	r2, [r7, #6]
 8005fec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	88fa      	ldrh	r2, [r7, #6]
 8005ff4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006006:	d10e      	bne.n	8006026 <UART_Start_Receive_IT+0x52>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d105      	bne.n	800601c <UART_Start_Receive_IT+0x48>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006016:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800601a:	e02d      	b.n	8006078 <UART_Start_Receive_IT+0xa4>
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	22ff      	movs	r2, #255	; 0xff
 8006020:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006024:	e028      	b.n	8006078 <UART_Start_Receive_IT+0xa4>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10d      	bne.n	800604a <UART_Start_Receive_IT+0x76>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d104      	bne.n	8006040 <UART_Start_Receive_IT+0x6c>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	22ff      	movs	r2, #255	; 0xff
 800603a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800603e:	e01b      	b.n	8006078 <UART_Start_Receive_IT+0xa4>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	227f      	movs	r2, #127	; 0x7f
 8006044:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006048:	e016      	b.n	8006078 <UART_Start_Receive_IT+0xa4>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006052:	d10d      	bne.n	8006070 <UART_Start_Receive_IT+0x9c>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d104      	bne.n	8006066 <UART_Start_Receive_IT+0x92>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	227f      	movs	r2, #127	; 0x7f
 8006060:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006064:	e008      	b.n	8006078 <UART_Start_Receive_IT+0xa4>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	223f      	movs	r2, #63	; 0x3f
 800606a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800606e:	e003      	b.n	8006078 <UART_Start_Receive_IT+0xa4>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2222      	movs	r2, #34	; 0x22
 8006084:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	3308      	adds	r3, #8
 800608e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006090:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006092:	e853 3f00 	ldrex	r3, [r3]
 8006096:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006098:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800609a:	f043 0301 	orr.w	r3, r3, #1
 800609e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	3308      	adds	r3, #8
 80060a8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80060ac:	673a      	str	r2, [r7, #112]	; 0x70
 80060ae:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80060b2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80060b4:	e841 2300 	strex	r3, r2, [r1]
 80060b8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80060ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1e3      	bne.n	8006088 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060c8:	d153      	bne.n	8006172 <UART_Start_Receive_IT+0x19e>
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80060d0:	88fa      	ldrh	r2, [r7, #6]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d34d      	bcc.n	8006172 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060de:	d107      	bne.n	80060f0 <UART_Start_Receive_IT+0x11c>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d103      	bne.n	80060f0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4a4a      	ldr	r2, [pc, #296]	; (8006214 <UART_Start_Receive_IT+0x240>)
 80060ec:	671a      	str	r2, [r3, #112]	; 0x70
 80060ee:	e002      	b.n	80060f6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	4a49      	ldr	r2, [pc, #292]	; (8006218 <UART_Start_Receive_IT+0x244>)
 80060f4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d01a      	beq.n	800613c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800610e:	e853 3f00 	ldrex	r3, [r3]
 8006112:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800611a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	461a      	mov	r2, r3
 8006124:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006128:	65fb      	str	r3, [r7, #92]	; 0x5c
 800612a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800612e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006130:	e841 2300 	strex	r3, r2, [r1]
 8006134:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006136:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1e4      	bne.n	8006106 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	3308      	adds	r3, #8
 8006142:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006146:	e853 3f00 	ldrex	r3, [r3]
 800614a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800614c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006152:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	3308      	adds	r3, #8
 800615a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800615c:	64ba      	str	r2, [r7, #72]	; 0x48
 800615e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006160:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006162:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006164:	e841 2300 	strex	r3, r2, [r1]
 8006168:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800616a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1e5      	bne.n	800613c <UART_Start_Receive_IT+0x168>
 8006170:	e04a      	b.n	8006208 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800617a:	d107      	bne.n	800618c <UART_Start_Receive_IT+0x1b8>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d103      	bne.n	800618c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	4a25      	ldr	r2, [pc, #148]	; (800621c <UART_Start_Receive_IT+0x248>)
 8006188:	671a      	str	r2, [r3, #112]	; 0x70
 800618a:	e002      	b.n	8006192 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	4a24      	ldr	r2, [pc, #144]	; (8006220 <UART_Start_Receive_IT+0x24c>)
 8006190:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d019      	beq.n	80061d6 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061aa:	e853 3f00 	ldrex	r3, [r3]
 80061ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80061b6:	677b      	str	r3, [r7, #116]	; 0x74
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	461a      	mov	r2, r3
 80061be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061c0:	637b      	str	r3, [r7, #52]	; 0x34
 80061c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061c8:	e841 2300 	strex	r3, r2, [r1]
 80061cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80061ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1e6      	bne.n	80061a2 <UART_Start_Receive_IT+0x1ce>
 80061d4:	e018      	b.n	8006208 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	e853 3f00 	ldrex	r3, [r3]
 80061e2:	613b      	str	r3, [r7, #16]
   return(result);
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	f043 0320 	orr.w	r3, r3, #32
 80061ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	461a      	mov	r2, r3
 80061f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061f4:	623b      	str	r3, [r7, #32]
 80061f6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f8:	69f9      	ldr	r1, [r7, #28]
 80061fa:	6a3a      	ldr	r2, [r7, #32]
 80061fc:	e841 2300 	strex	r3, r2, [r1]
 8006200:	61bb      	str	r3, [r7, #24]
   return(result);
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1e6      	bne.n	80061d6 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	378c      	adds	r7, #140	; 0x8c
 800620e:	46bd      	mov	sp, r7
 8006210:	bc80      	pop	{r7}
 8006212:	4770      	bx	lr
 8006214:	08006ae1 	.word	0x08006ae1
 8006218:	080067e9 	.word	0x080067e9
 800621c:	08006687 	.word	0x08006687
 8006220:	08006527 	.word	0x08006527

08006224 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006224:	b480      	push	{r7}
 8006226:	b08f      	sub	sp, #60	; 0x3c
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006232:	6a3b      	ldr	r3, [r7, #32]
 8006234:	e853 3f00 	ldrex	r3, [r3]
 8006238:	61fb      	str	r3, [r7, #28]
   return(result);
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006240:	637b      	str	r3, [r7, #52]	; 0x34
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	461a      	mov	r2, r3
 8006248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800624a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800624c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006250:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006252:	e841 2300 	strex	r3, r2, [r1]
 8006256:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1e6      	bne.n	800622c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	3308      	adds	r3, #8
 8006264:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	e853 3f00 	ldrex	r3, [r3]
 800626c:	60bb      	str	r3, [r7, #8]
   return(result);
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006274:	633b      	str	r3, [r7, #48]	; 0x30
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	3308      	adds	r3, #8
 800627c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800627e:	61ba      	str	r2, [r7, #24]
 8006280:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006282:	6979      	ldr	r1, [r7, #20]
 8006284:	69ba      	ldr	r2, [r7, #24]
 8006286:	e841 2300 	strex	r3, r2, [r1]
 800628a:	613b      	str	r3, [r7, #16]
   return(result);
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1e5      	bne.n	800625e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2220      	movs	r2, #32
 8006296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800629a:	bf00      	nop
 800629c:	373c      	adds	r7, #60	; 0x3c
 800629e:	46bd      	mov	sp, r7
 80062a0:	bc80      	pop	{r7}
 80062a2:	4770      	bx	lr

080062a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b095      	sub	sp, #84	; 0x54
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b4:	e853 3f00 	ldrex	r3, [r3]
 80062b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80062ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	461a      	mov	r2, r3
 80062c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062ca:	643b      	str	r3, [r7, #64]	; 0x40
 80062cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062d2:	e841 2300 	strex	r3, r2, [r1]
 80062d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1e6      	bne.n	80062ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	3308      	adds	r3, #8
 80062e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e6:	6a3b      	ldr	r3, [r7, #32]
 80062e8:	e853 3f00 	ldrex	r3, [r3]
 80062ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062f4:	f023 0301 	bic.w	r3, r3, #1
 80062f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	3308      	adds	r3, #8
 8006300:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006302:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006304:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006306:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800630a:	e841 2300 	strex	r3, r2, [r1]
 800630e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1e3      	bne.n	80062de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800631a:	2b01      	cmp	r3, #1
 800631c:	d118      	bne.n	8006350 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	e853 3f00 	ldrex	r3, [r3]
 800632a:	60bb      	str	r3, [r7, #8]
   return(result);
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	f023 0310 	bic.w	r3, r3, #16
 8006332:	647b      	str	r3, [r7, #68]	; 0x44
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	461a      	mov	r2, r3
 800633a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800633c:	61bb      	str	r3, [r7, #24]
 800633e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006340:	6979      	ldr	r1, [r7, #20]
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	e841 2300 	strex	r3, r2, [r1]
 8006348:	613b      	str	r3, [r7, #16]
   return(result);
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1e6      	bne.n	800631e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2220      	movs	r2, #32
 8006354:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006364:	bf00      	nop
 8006366:	3754      	adds	r7, #84	; 0x54
 8006368:	46bd      	mov	sp, r7
 800636a:	bc80      	pop	{r7}
 800636c:	4770      	bx	lr

0800636e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b090      	sub	sp, #64	; 0x40
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0320 	and.w	r3, r3, #32
 8006386:	2b00      	cmp	r3, #0
 8006388:	d137      	bne.n	80063fa <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800638a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800638c:	2200      	movs	r2, #0
 800638e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	3308      	adds	r3, #8
 8006398:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639c:	e853 3f00 	ldrex	r3, [r3]
 80063a0:	623b      	str	r3, [r7, #32]
   return(result);
 80063a2:	6a3b      	ldr	r3, [r7, #32]
 80063a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80063aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	3308      	adds	r3, #8
 80063b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063b2:	633a      	str	r2, [r7, #48]	; 0x30
 80063b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063ba:	e841 2300 	strex	r3, r2, [r1]
 80063be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1e5      	bne.n	8006392 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80063c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	e853 3f00 	ldrex	r3, [r3]
 80063d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063da:	637b      	str	r3, [r7, #52]	; 0x34
 80063dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	461a      	mov	r2, r3
 80063e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063e4:	61fb      	str	r3, [r7, #28]
 80063e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e8:	69b9      	ldr	r1, [r7, #24]
 80063ea:	69fa      	ldr	r2, [r7, #28]
 80063ec:	e841 2300 	strex	r3, r2, [r1]
 80063f0:	617b      	str	r3, [r7, #20]
   return(result);
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d1e6      	bne.n	80063c6 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80063f8:	e002      	b.n	8006400 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80063fa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80063fc:	f7fb f86e 	bl	80014dc <HAL_UART_TxCpltCallback>
}
 8006400:	bf00      	nop
 8006402:	3740      	adds	r7, #64	; 0x40
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006414:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f7ff f996 	bl	8005748 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800641c:	bf00      	nop
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b086      	sub	sp, #24
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006430:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006438:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006440:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800644c:	2b80      	cmp	r3, #128	; 0x80
 800644e:	d109      	bne.n	8006464 <UART_DMAError+0x40>
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	2b21      	cmp	r3, #33	; 0x21
 8006454:	d106      	bne.n	8006464 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	2200      	movs	r2, #0
 800645a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800645e:	6978      	ldr	r0, [r7, #20]
 8006460:	f7ff fee0 	bl	8006224 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800646e:	2b40      	cmp	r3, #64	; 0x40
 8006470:	d109      	bne.n	8006486 <UART_DMAError+0x62>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2b22      	cmp	r3, #34	; 0x22
 8006476:	d106      	bne.n	8006486 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	2200      	movs	r2, #0
 800647c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006480:	6978      	ldr	r0, [r7, #20]
 8006482:	f7ff ff0f 	bl	80062a4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800648c:	f043 0210 	orr.w	r2, r3, #16
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006496:	6978      	ldr	r0, [r7, #20]
 8006498:	f7ff f95f 	bl	800575a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800649c:	bf00      	nop
 800649e:	3718      	adds	r7, #24
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f7ff f949 	bl	800575a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064c8:	bf00      	nop
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b088      	sub	sp, #32
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	e853 3f00 	ldrex	r3, [r3]
 80064e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064ec:	61fb      	str	r3, [r7, #28]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	461a      	mov	r2, r3
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	61bb      	str	r3, [r7, #24]
 80064f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fa:	6979      	ldr	r1, [r7, #20]
 80064fc:	69ba      	ldr	r2, [r7, #24]
 80064fe:	e841 2300 	strex	r3, r2, [r1]
 8006502:	613b      	str	r3, [r7, #16]
   return(result);
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1e6      	bne.n	80064d8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2220      	movs	r2, #32
 800650e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f7fa ffdf 	bl	80014dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800651e:	bf00      	nop
 8006520:	3720      	adds	r7, #32
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b096      	sub	sp, #88	; 0x58
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006534:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800653e:	2b22      	cmp	r3, #34	; 0x22
 8006540:	f040 8095 	bne.w	800666e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800654e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006552:	b2d9      	uxtb	r1, r3
 8006554:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006558:	b2da      	uxtb	r2, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800655e:	400a      	ands	r2, r1
 8006560:	b2d2      	uxtb	r2, r2
 8006562:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006568:	1c5a      	adds	r2, r3, #1
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006574:	b29b      	uxth	r3, r3
 8006576:	3b01      	subs	r3, #1
 8006578:	b29a      	uxth	r2, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006586:	b29b      	uxth	r3, r3
 8006588:	2b00      	cmp	r3, #0
 800658a:	d178      	bne.n	800667e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006594:	e853 3f00 	ldrex	r3, [r3]
 8006598:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800659a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800659c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065a0:	653b      	str	r3, [r7, #80]	; 0x50
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	461a      	mov	r2, r3
 80065a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065aa:	647b      	str	r3, [r7, #68]	; 0x44
 80065ac:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065b2:	e841 2300 	strex	r3, r2, [r1]
 80065b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1e6      	bne.n	800658c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	3308      	adds	r3, #8
 80065c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c8:	e853 3f00 	ldrex	r3, [r3]
 80065cc:	623b      	str	r3, [r7, #32]
   return(result);
 80065ce:	6a3b      	ldr	r3, [r7, #32]
 80065d0:	f023 0301 	bic.w	r3, r3, #1
 80065d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	3308      	adds	r3, #8
 80065dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065de:	633a      	str	r2, [r7, #48]	; 0x30
 80065e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065e6:	e841 2300 	strex	r3, r2, [r1]
 80065ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1e5      	bne.n	80065be <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2220      	movs	r2, #32
 80065f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006604:	2b01      	cmp	r3, #1
 8006606:	d12e      	bne.n	8006666 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	e853 3f00 	ldrex	r3, [r3]
 800661a:	60fb      	str	r3, [r7, #12]
   return(result);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f023 0310 	bic.w	r3, r3, #16
 8006622:	64bb      	str	r3, [r7, #72]	; 0x48
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	461a      	mov	r2, r3
 800662a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800662c:	61fb      	str	r3, [r7, #28]
 800662e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006630:	69b9      	ldr	r1, [r7, #24]
 8006632:	69fa      	ldr	r2, [r7, #28]
 8006634:	e841 2300 	strex	r3, r2, [r1]
 8006638:	617b      	str	r3, [r7, #20]
   return(result);
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1e6      	bne.n	800660e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	69db      	ldr	r3, [r3, #28]
 8006646:	f003 0310 	and.w	r3, r3, #16
 800664a:	2b10      	cmp	r3, #16
 800664c:	d103      	bne.n	8006656 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2210      	movs	r2, #16
 8006654:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800665c:	4619      	mov	r1, r3
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f7ff f884 	bl	800576c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006664:	e00b      	b.n	800667e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f7fa ff4e 	bl	8001508 <HAL_UART_RxCpltCallback>
}
 800666c:	e007      	b.n	800667e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	699a      	ldr	r2, [r3, #24]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f042 0208 	orr.w	r2, r2, #8
 800667c:	619a      	str	r2, [r3, #24]
}
 800667e:	bf00      	nop
 8006680:	3758      	adds	r7, #88	; 0x58
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b096      	sub	sp, #88	; 0x58
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006694:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800669e:	2b22      	cmp	r3, #34	; 0x22
 80066a0:	f040 8095 	bne.w	80067ce <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066aa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066b2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80066b4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80066b8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80066bc:	4013      	ands	r3, r2
 80066be:	b29a      	uxth	r2, r3
 80066c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066c2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066c8:	1c9a      	adds	r2, r3, #2
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	3b01      	subs	r3, #1
 80066d8:	b29a      	uxth	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d178      	bne.n	80067de <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f4:	e853 3f00 	ldrex	r3, [r3]
 80066f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006700:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	461a      	mov	r2, r3
 8006708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800670a:	643b      	str	r3, [r7, #64]	; 0x40
 800670c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006710:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006712:	e841 2300 	strex	r3, r2, [r1]
 8006716:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1e6      	bne.n	80066ec <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	3308      	adds	r3, #8
 8006724:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006726:	6a3b      	ldr	r3, [r7, #32]
 8006728:	e853 3f00 	ldrex	r3, [r3]
 800672c:	61fb      	str	r3, [r7, #28]
   return(result);
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	f023 0301 	bic.w	r3, r3, #1
 8006734:	64bb      	str	r3, [r7, #72]	; 0x48
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	3308      	adds	r3, #8
 800673c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800673e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006740:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006742:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006744:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006746:	e841 2300 	strex	r3, r2, [r1]
 800674a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1e5      	bne.n	800671e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2220      	movs	r2, #32
 8006756:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006764:	2b01      	cmp	r3, #1
 8006766:	d12e      	bne.n	80067c6 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	e853 3f00 	ldrex	r3, [r3]
 800677a:	60bb      	str	r3, [r7, #8]
   return(result);
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	f023 0310 	bic.w	r3, r3, #16
 8006782:	647b      	str	r3, [r7, #68]	; 0x44
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	461a      	mov	r2, r3
 800678a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800678c:	61bb      	str	r3, [r7, #24]
 800678e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006790:	6979      	ldr	r1, [r7, #20]
 8006792:	69ba      	ldr	r2, [r7, #24]
 8006794:	e841 2300 	strex	r3, r2, [r1]
 8006798:	613b      	str	r3, [r7, #16]
   return(result);
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d1e6      	bne.n	800676e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	69db      	ldr	r3, [r3, #28]
 80067a6:	f003 0310 	and.w	r3, r3, #16
 80067aa:	2b10      	cmp	r3, #16
 80067ac:	d103      	bne.n	80067b6 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2210      	movs	r2, #16
 80067b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80067bc:	4619      	mov	r1, r3
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f7fe ffd4 	bl	800576c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80067c4:	e00b      	b.n	80067de <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f7fa fe9e 	bl	8001508 <HAL_UART_RxCpltCallback>
}
 80067cc:	e007      	b.n	80067de <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	699a      	ldr	r2, [r3, #24]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f042 0208 	orr.w	r2, r2, #8
 80067dc:	619a      	str	r2, [r3, #24]
}
 80067de:	bf00      	nop
 80067e0:	3758      	adds	r7, #88	; 0x58
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
	...

080067e8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b0a6      	sub	sp, #152	; 0x98
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80067f6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	69db      	ldr	r3, [r3, #28]
 8006800:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800681e:	2b22      	cmp	r3, #34	; 0x22
 8006820:	f040 814f 	bne.w	8006ac2 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800682a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800682e:	e0f6      	b.n	8006a1e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006836:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800683a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800683e:	b2d9      	uxtb	r1, r3
 8006840:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8006844:	b2da      	uxtb	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800684a:	400a      	ands	r2, r1
 800684c:	b2d2      	uxtb	r2, r2
 800684e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006854:	1c5a      	adds	r2, r3, #1
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006860:	b29b      	uxth	r3, r3
 8006862:	3b01      	subs	r3, #1
 8006864:	b29a      	uxth	r2, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006876:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800687a:	f003 0307 	and.w	r3, r3, #7
 800687e:	2b00      	cmp	r3, #0
 8006880:	d053      	beq.n	800692a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006882:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	2b00      	cmp	r3, #0
 800688c:	d011      	beq.n	80068b2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800688e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00b      	beq.n	80068b2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2201      	movs	r2, #1
 80068a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068a8:	f043 0201 	orr.w	r2, r3, #1
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80068b6:	f003 0302 	and.w	r3, r3, #2
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d011      	beq.n	80068e2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80068be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068c2:	f003 0301 	and.w	r3, r3, #1
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00b      	beq.n	80068e2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2202      	movs	r2, #2
 80068d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068d8:	f043 0204 	orr.w	r2, r3, #4
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80068e6:	f003 0304 	and.w	r3, r3, #4
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d011      	beq.n	8006912 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80068ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00b      	beq.n	8006912 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2204      	movs	r2, #4
 8006900:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006908:	f043 0202 	orr.w	r2, r3, #2
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006918:	2b00      	cmp	r3, #0
 800691a:	d006      	beq.n	800692a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f7fe ff1c 	bl	800575a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006930:	b29b      	uxth	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	d173      	bne.n	8006a1e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800693e:	e853 3f00 	ldrex	r3, [r3]
 8006942:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006944:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006946:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800694a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	461a      	mov	r2, r3
 8006954:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006958:	66bb      	str	r3, [r7, #104]	; 0x68
 800695a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800695e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006960:	e841 2300 	strex	r3, r2, [r1]
 8006964:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006966:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006968:	2b00      	cmp	r3, #0
 800696a:	d1e4      	bne.n	8006936 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	3308      	adds	r3, #8
 8006972:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006976:	e853 3f00 	ldrex	r3, [r3]
 800697a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800697c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800697e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006982:	f023 0301 	bic.w	r3, r3, #1
 8006986:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	3308      	adds	r3, #8
 800698e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006990:	657a      	str	r2, [r7, #84]	; 0x54
 8006992:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006994:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006996:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006998:	e841 2300 	strex	r3, r2, [r1]
 800699c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800699e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1e3      	bne.n	800696c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2220      	movs	r2, #32
 80069a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d12e      	bne.n	8006a18 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c8:	e853 3f00 	ldrex	r3, [r3]
 80069cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80069ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d0:	f023 0310 	bic.w	r3, r3, #16
 80069d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	461a      	mov	r2, r3
 80069dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069de:	643b      	str	r3, [r7, #64]	; 0x40
 80069e0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069e6:	e841 2300 	strex	r3, r2, [r1]
 80069ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1e6      	bne.n	80069c0 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	69db      	ldr	r3, [r3, #28]
 80069f8:	f003 0310 	and.w	r3, r3, #16
 80069fc:	2b10      	cmp	r3, #16
 80069fe:	d103      	bne.n	8006a08 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2210      	movs	r2, #16
 8006a06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a0e:	4619      	mov	r1, r3
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f7fe feab 	bl	800576c <HAL_UARTEx_RxEventCallback>
 8006a16:	e002      	b.n	8006a1e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f7fa fd75 	bl	8001508 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006a1e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d006      	beq.n	8006a34 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8006a26:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006a2a:	f003 0320 	and.w	r3, r3, #32
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	f47f aefe 	bne.w	8006830 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a3a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006a3e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d045      	beq.n	8006ad2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006a4c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d23e      	bcs.n	8006ad2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	3308      	adds	r3, #8
 8006a5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5c:	6a3b      	ldr	r3, [r7, #32]
 8006a5e:	e853 3f00 	ldrex	r3, [r3]
 8006a62:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a6a:	673b      	str	r3, [r7, #112]	; 0x70
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	3308      	adds	r3, #8
 8006a72:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006a74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a7c:	e841 2300 	strex	r3, r2, [r1]
 8006a80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d1e5      	bne.n	8006a54 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a14      	ldr	r2, [pc, #80]	; (8006adc <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8006a8c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	e853 3f00 	ldrex	r3, [r3]
 8006a9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	f043 0320 	orr.w	r3, r3, #32
 8006aa2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aac:	61bb      	str	r3, [r7, #24]
 8006aae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab0:	6979      	ldr	r1, [r7, #20]
 8006ab2:	69ba      	ldr	r2, [r7, #24]
 8006ab4:	e841 2300 	strex	r3, r2, [r1]
 8006ab8:	613b      	str	r3, [r7, #16]
   return(result);
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1e6      	bne.n	8006a8e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ac0:	e007      	b.n	8006ad2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	699a      	ldr	r2, [r3, #24]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f042 0208 	orr.w	r2, r2, #8
 8006ad0:	619a      	str	r2, [r3, #24]
}
 8006ad2:	bf00      	nop
 8006ad4:	3798      	adds	r7, #152	; 0x98
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop
 8006adc:	08006527 	.word	0x08006527

08006ae0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b0a8      	sub	sp, #160	; 0xa0
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006aee:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	69db      	ldr	r3, [r3, #28]
 8006af8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b16:	2b22      	cmp	r3, #34	; 0x22
 8006b18:	f040 8153 	bne.w	8006dc2 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006b22:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006b26:	e0fa      	b.n	8006d1e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8006b3a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8006b3e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006b42:	4013      	ands	r3, r2
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b4a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b50:	1c9a      	adds	r2, r3, #2
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	b29a      	uxth	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	69db      	ldr	r3, [r3, #28]
 8006b6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006b72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b76:	f003 0307 	and.w	r3, r3, #7
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d053      	beq.n	8006c26 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d011      	beq.n	8006bae <UART_RxISR_16BIT_FIFOEN+0xce>
 8006b8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00b      	beq.n	8006bae <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ba4:	f043 0201 	orr.w	r2, r3, #1
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006bb2:	f003 0302 	and.w	r3, r3, #2
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d011      	beq.n	8006bde <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006bba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006bbe:	f003 0301 	and.w	r3, r3, #1
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00b      	beq.n	8006bde <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2202      	movs	r2, #2
 8006bcc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bd4:	f043 0204 	orr.w	r2, r3, #4
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006be2:	f003 0304 	and.w	r3, r3, #4
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d011      	beq.n	8006c0e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006bea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006bee:	f003 0301 	and.w	r3, r3, #1
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00b      	beq.n	8006c0e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2204      	movs	r2, #4
 8006bfc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c04:	f043 0202 	orr.w	r2, r3, #2
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d006      	beq.n	8006c26 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f7fe fd9e 	bl	800575a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d175      	bne.n	8006d1e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c3a:	e853 3f00 	ldrex	r3, [r3]
 8006c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006c40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	461a      	mov	r2, r3
 8006c50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c54:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c56:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c58:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006c5a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006c5c:	e841 2300 	strex	r3, r2, [r1]
 8006c60:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006c62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1e4      	bne.n	8006c32 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	3308      	adds	r3, #8
 8006c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c72:	e853 3f00 	ldrex	r3, [r3]
 8006c76:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c7e:	f023 0301 	bic.w	r3, r3, #1
 8006c82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	3308      	adds	r3, #8
 8006c8c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006c90:	65ba      	str	r2, [r7, #88]	; 0x58
 8006c92:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c98:	e841 2300 	strex	r3, r2, [r1]
 8006c9c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1e1      	bne.n	8006c68 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2220      	movs	r2, #32
 8006ca8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d12e      	bne.n	8006d18 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc8:	e853 3f00 	ldrex	r3, [r3]
 8006ccc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd0:	f023 0310 	bic.w	r3, r3, #16
 8006cd4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	461a      	mov	r2, r3
 8006cdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006cde:	647b      	str	r3, [r7, #68]	; 0x44
 8006ce0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ce4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ce6:	e841 2300 	strex	r3, r2, [r1]
 8006cea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1e6      	bne.n	8006cc0 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	69db      	ldr	r3, [r3, #28]
 8006cf8:	f003 0310 	and.w	r3, r3, #16
 8006cfc:	2b10      	cmp	r3, #16
 8006cfe:	d103      	bne.n	8006d08 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2210      	movs	r2, #16
 8006d06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d0e:	4619      	mov	r1, r3
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f7fe fd2b 	bl	800576c <HAL_UARTEx_RxEventCallback>
 8006d16:	e002      	b.n	8006d1e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f7fa fbf5 	bl	8001508 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006d1e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d006      	beq.n	8006d34 <UART_RxISR_16BIT_FIFOEN+0x254>
 8006d26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d2a:	f003 0320 	and.w	r3, r3, #32
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	f47f aefa 	bne.w	8006b28 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d3a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006d3e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d045      	beq.n	8006dd2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006d4c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d23e      	bcs.n	8006dd2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	3308      	adds	r3, #8
 8006d5a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5e:	e853 3f00 	ldrex	r3, [r3]
 8006d62:	623b      	str	r3, [r7, #32]
   return(result);
 8006d64:	6a3b      	ldr	r3, [r7, #32]
 8006d66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d6a:	677b      	str	r3, [r7, #116]	; 0x74
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	3308      	adds	r3, #8
 8006d72:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006d74:	633a      	str	r2, [r7, #48]	; 0x30
 8006d76:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d7c:	e841 2300 	strex	r3, r2, [r1]
 8006d80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d1e5      	bne.n	8006d54 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a14      	ldr	r2, [pc, #80]	; (8006ddc <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8006d8c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	e853 3f00 	ldrex	r3, [r3]
 8006d9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f043 0320 	orr.w	r3, r3, #32
 8006da2:	673b      	str	r3, [r7, #112]	; 0x70
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	461a      	mov	r2, r3
 8006daa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006dac:	61fb      	str	r3, [r7, #28]
 8006dae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db0:	69b9      	ldr	r1, [r7, #24]
 8006db2:	69fa      	ldr	r2, [r7, #28]
 8006db4:	e841 2300 	strex	r3, r2, [r1]
 8006db8:	617b      	str	r3, [r7, #20]
   return(result);
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1e6      	bne.n	8006d8e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006dc0:	e007      	b.n	8006dd2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	699a      	ldr	r2, [r3, #24]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f042 0208 	orr.w	r2, r2, #8
 8006dd0:	619a      	str	r2, [r3, #24]
}
 8006dd2:	bf00      	nop
 8006dd4:	37a0      	adds	r7, #160	; 0xa0
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	08006687 	.word	0x08006687

08006de0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bc80      	pop	{r7}
 8006df0:	4770      	bx	lr

08006df2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006df2:	b480      	push	{r7}
 8006df4:	b083      	sub	sp, #12
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006dfa:	bf00      	nop
 8006dfc:	370c      	adds	r7, #12
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bc80      	pop	{r7}
 8006e02:	4770      	bx	lr

08006e04 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bc80      	pop	{r7}
 8006e14:	4770      	bx	lr

08006e16 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b088      	sub	sp, #32
 8006e1a:	af02      	add	r7, sp, #8
 8006e1c:	60f8      	str	r0, [r7, #12]
 8006e1e:	1d3b      	adds	r3, r7, #4
 8006e20:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8006e24:	2300      	movs	r3, #0
 8006e26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d101      	bne.n	8006e36 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8006e32:	2302      	movs	r3, #2
 8006e34:	e046      	b.n	8006ec4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2224      	movs	r2, #36	; 0x24
 8006e42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f022 0201 	bic.w	r2, r2, #1
 8006e54:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	430a      	orrs	r2, r1
 8006e68:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d105      	bne.n	8006e7c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8006e70:	1d3b      	adds	r3, r7, #4
 8006e72:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006e76:	68f8      	ldr	r0, [r7, #12]
 8006e78:	f000 f911 	bl	800709e <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f042 0201 	orr.w	r2, r2, #1
 8006e8a:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e8c:	f7f9 fe3c 	bl	8000b08 <HAL_GetTick>
 8006e90:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e96:	9300      	str	r3, [sp, #0]
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	f7fe ffcf 	bl	8005e44 <UART_WaitOnFlagUntilTimeout>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d002      	beq.n	8006eb2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8006eac:	2303      	movs	r3, #3
 8006eae:	75fb      	strb	r3, [r7, #23]
 8006eb0:	e003      	b.n	8006eba <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2220      	movs	r2, #32
 8006eb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 8006ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3718      	adds	r7, #24
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b089      	sub	sp, #36	; 0x24
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d101      	bne.n	8006ee2 <HAL_UARTEx_EnableStopMode+0x16>
 8006ede:	2302      	movs	r3, #2
 8006ee0:	e021      	b.n	8006f26 <HAL_UARTEx_EnableStopMode+0x5a>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	e853 3f00 	ldrex	r3, [r3]
 8006ef6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	f043 0302 	orr.w	r3, r3, #2
 8006efe:	61fb      	str	r3, [r7, #28]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	461a      	mov	r2, r3
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	61bb      	str	r3, [r7, #24]
 8006f0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0c:	6979      	ldr	r1, [r7, #20]
 8006f0e:	69ba      	ldr	r2, [r7, #24]
 8006f10:	e841 2300 	strex	r3, r2, [r1]
 8006f14:	613b      	str	r3, [r7, #16]
   return(result);
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1e6      	bne.n	8006eea <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3724      	adds	r7, #36	; 0x24
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bc80      	pop	{r7}
 8006f2e:	4770      	bx	lr

08006f30 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d101      	bne.n	8006f46 <HAL_UARTEx_EnableFifoMode+0x16>
 8006f42:	2302      	movs	r3, #2
 8006f44:	e02b      	b.n	8006f9e <HAL_UARTEx_EnableFifoMode+0x6e>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2224      	movs	r2, #36	; 0x24
 8006f52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f022 0201 	bic.w	r2, r2, #1
 8006f6c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f74:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006f7c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 f8ac 	bl	80070e4 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2220      	movs	r2, #32
 8006f90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b084      	sub	sp, #16
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
 8006fae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d101      	bne.n	8006fbe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006fba:	2302      	movs	r3, #2
 8006fbc:	e02d      	b.n	800701a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2224      	movs	r2, #36	; 0x24
 8006fca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f022 0201 	bic.w	r2, r2, #1
 8006fe4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	683a      	ldr	r2, [r7, #0]
 8006ff6:	430a      	orrs	r2, r1
 8006ff8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 f872 	bl	80070e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2220      	movs	r2, #32
 800700c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}

08007022 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007022:	b580      	push	{r7, lr}
 8007024:	b084      	sub	sp, #16
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
 800702a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007032:	2b01      	cmp	r3, #1
 8007034:	d101      	bne.n	800703a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007036:	2302      	movs	r3, #2
 8007038:	e02d      	b.n	8007096 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2201      	movs	r2, #1
 800703e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2224      	movs	r2, #36	; 0x24
 8007046:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f022 0201 	bic.w	r2, r2, #1
 8007060:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	683a      	ldr	r2, [r7, #0]
 8007072:	430a      	orrs	r2, r1
 8007074:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f834 	bl	80070e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2220      	movs	r2, #32
 8007088:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800709e:	b480      	push	{r7}
 80070a0:	b085      	sub	sp, #20
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	60f8      	str	r0, [r7, #12]
 80070a6:	1d3b      	adds	r3, r7, #4
 80070a8:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	f023 0210 	bic.w	r2, r3, #16
 80070b6:	893b      	ldrh	r3, [r7, #8]
 80070b8:	4619      	mov	r1, r3
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	430a      	orrs	r2, r1
 80070c0:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 80070cc:	7abb      	ldrb	r3, [r7, #10]
 80070ce:	061a      	lsls	r2, r3, #24
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	430a      	orrs	r2, r1
 80070d6:	605a      	str	r2, [r3, #4]
}
 80070d8:	bf00      	nop
 80070da:	3714      	adds	r7, #20
 80070dc:	46bd      	mov	sp, r7
 80070de:	bc80      	pop	{r7}
 80070e0:	4770      	bx	lr
	...

080070e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d108      	bne.n	8007106 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007104:	e031      	b.n	800716a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007106:	2308      	movs	r3, #8
 8007108:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800710a:	2308      	movs	r3, #8
 800710c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	0e5b      	lsrs	r3, r3, #25
 8007116:	b2db      	uxtb	r3, r3
 8007118:	f003 0307 	and.w	r3, r3, #7
 800711c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	0f5b      	lsrs	r3, r3, #29
 8007126:	b2db      	uxtb	r3, r3
 8007128:	f003 0307 	and.w	r3, r3, #7
 800712c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800712e:	7bbb      	ldrb	r3, [r7, #14]
 8007130:	7b3a      	ldrb	r2, [r7, #12]
 8007132:	4910      	ldr	r1, [pc, #64]	; (8007174 <UARTEx_SetNbDataToProcess+0x90>)
 8007134:	5c8a      	ldrb	r2, [r1, r2]
 8007136:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800713a:	7b3a      	ldrb	r2, [r7, #12]
 800713c:	490e      	ldr	r1, [pc, #56]	; (8007178 <UARTEx_SetNbDataToProcess+0x94>)
 800713e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007140:	fb93 f3f2 	sdiv	r3, r3, r2
 8007144:	b29a      	uxth	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800714c:	7bfb      	ldrb	r3, [r7, #15]
 800714e:	7b7a      	ldrb	r2, [r7, #13]
 8007150:	4908      	ldr	r1, [pc, #32]	; (8007174 <UARTEx_SetNbDataToProcess+0x90>)
 8007152:	5c8a      	ldrb	r2, [r1, r2]
 8007154:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007158:	7b7a      	ldrb	r2, [r7, #13]
 800715a:	4907      	ldr	r1, [pc, #28]	; (8007178 <UARTEx_SetNbDataToProcess+0x94>)
 800715c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800715e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007162:	b29a      	uxth	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800716a:	bf00      	nop
 800716c:	3714      	adds	r7, #20
 800716e:	46bd      	mov	sp, r7
 8007170:	bc80      	pop	{r7}
 8007172:	4770      	bx	lr
 8007174:	0800bd2c 	.word	0x0800bd2c
 8007178:	0800bd34 	.word	0x0800bd34

0800717c <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af02      	add	r7, sp, #8
 8007182:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8007184:	4a24      	ldr	r2, [pc, #144]	; (8007218 <RadioInit+0x9c>)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 800718a:	4b24      	ldr	r3, [pc, #144]	; (800721c <RadioInit+0xa0>)
 800718c:	2200      	movs	r2, #0
 800718e:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8007190:	4b22      	ldr	r3, [pc, #136]	; (800721c <RadioInit+0xa0>)
 8007192:	2200      	movs	r2, #0
 8007194:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8007196:	4b21      	ldr	r3, [pc, #132]	; (800721c <RadioInit+0xa0>)
 8007198:	2200      	movs	r2, #0
 800719a:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800719c:	4b1f      	ldr	r3, [pc, #124]	; (800721c <RadioInit+0xa0>)
 800719e:	2200      	movs	r2, #0
 80071a0:	659a      	str	r2, [r3, #88]	; 0x58

    SUBGRF_Init( RadioOnDioIrq );
 80071a2:	481f      	ldr	r0, [pc, #124]	; (8007220 <RadioInit+0xa4>)
 80071a4:	f001 ff88 	bl	80090b8 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 80071a8:	4b1c      	ldr	r3, [pc, #112]	; (800721c <RadioInit+0xa0>)
 80071aa:	2200      	movs	r2, #0
 80071ac:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 80071ae:	4b1b      	ldr	r3, [pc, #108]	; (800721c <RadioInit+0xa0>)
 80071b0:	2200      	movs	r2, #0
 80071b2:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 80071b4:	f002 fa16 	bl	80095e4 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80071b8:	2100      	movs	r1, #0
 80071ba:	2000      	movs	r0, #0
 80071bc:	f002 fdde 	bl	8009d7c <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 80071c0:	2204      	movs	r2, #4
 80071c2:	2100      	movs	r1, #0
 80071c4:	2001      	movs	r0, #1
 80071c6:	f002 fb9b 	bl	8009900 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80071ca:	2300      	movs	r3, #0
 80071cc:	2200      	movs	r2, #0
 80071ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80071d2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80071d6:	f002 facb 	bl	8009770 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 80071da:	f000 fe83 	bl	8007ee4 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80071de:	2300      	movs	r3, #0
 80071e0:	9300      	str	r3, [sp, #0]
 80071e2:	4b10      	ldr	r3, [pc, #64]	; (8007224 <RadioInit+0xa8>)
 80071e4:	2200      	movs	r2, #0
 80071e6:	f04f 31ff 	mov.w	r1, #4294967295
 80071ea:	480f      	ldr	r0, [pc, #60]	; (8007228 <RadioInit+0xac>)
 80071ec:	f003 ff3a 	bl	800b064 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80071f0:	2300      	movs	r3, #0
 80071f2:	9300      	str	r3, [sp, #0]
 80071f4:	4b0d      	ldr	r3, [pc, #52]	; (800722c <RadioInit+0xb0>)
 80071f6:	2200      	movs	r2, #0
 80071f8:	f04f 31ff 	mov.w	r1, #4294967295
 80071fc:	480c      	ldr	r0, [pc, #48]	; (8007230 <RadioInit+0xb4>)
 80071fe:	f003 ff31 	bl	800b064 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8007202:	4809      	ldr	r0, [pc, #36]	; (8007228 <RadioInit+0xac>)
 8007204:	f003 ffd2 	bl	800b1ac <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8007208:	4809      	ldr	r0, [pc, #36]	; (8007230 <RadioInit+0xb4>)
 800720a:	f003 ffcf 	bl	800b1ac <UTIL_TIMER_Stop>
}
 800720e:	bf00      	nop
 8007210:	3708      	adds	r7, #8
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	20000280 	.word	0x20000280
 800721c:	20000284 	.word	0x20000284
 8007220:	080082d1 	.word	0x080082d1
 8007224:	08008259 	.word	0x08008259
 8007228:	200002e0 	.word	0x200002e0
 800722c:	0800826d 	.word	0x0800826d
 8007230:	200002f8 	.word	0x200002f8

08007234 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8007234:	b580      	push	{r7, lr}
 8007236:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8007238:	f001 ff80 	bl	800913c <SUBGRF_GetOperatingMode>
 800723c:	4603      	mov	r3, r0
 800723e:	2b07      	cmp	r3, #7
 8007240:	d00a      	beq.n	8007258 <RadioGetStatus+0x24>
 8007242:	2b07      	cmp	r3, #7
 8007244:	dc0a      	bgt.n	800725c <RadioGetStatus+0x28>
 8007246:	2b04      	cmp	r3, #4
 8007248:	d002      	beq.n	8007250 <RadioGetStatus+0x1c>
 800724a:	2b05      	cmp	r3, #5
 800724c:	d002      	beq.n	8007254 <RadioGetStatus+0x20>
 800724e:	e005      	b.n	800725c <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8007250:	2302      	movs	r3, #2
 8007252:	e004      	b.n	800725e <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8007254:	2301      	movs	r3, #1
 8007256:	e002      	b.n	800725e <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8007258:	2303      	movs	r3, #3
 800725a:	e000      	b.n	800725e <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 800725c:	2300      	movs	r3, #0
    }
}
 800725e:	4618      	mov	r0, r3
 8007260:	bd80      	pop	{r7, pc}
	...

08007264 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	4603      	mov	r3, r0
 800726c:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 800726e:	4a2a      	ldr	r2, [pc, #168]	; (8007318 <RadioSetModem+0xb4>)
 8007270:	79fb      	ldrb	r3, [r7, #7]
 8007272:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8007274:	79fb      	ldrb	r3, [r7, #7]
 8007276:	4618      	mov	r0, r3
 8007278:	f003 f943 	bl	800a502 <RFW_SetRadioModem>
    switch( modem )
 800727c:	79fb      	ldrb	r3, [r7, #7]
 800727e:	2b05      	cmp	r3, #5
 8007280:	d80e      	bhi.n	80072a0 <RadioSetModem+0x3c>
 8007282:	a201      	add	r2, pc, #4	; (adr r2, 8007288 <RadioSetModem+0x24>)
 8007284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007288:	080072af 	.word	0x080072af
 800728c:	080072bd 	.word	0x080072bd
 8007290:	080072a1 	.word	0x080072a1
 8007294:	080072e3 	.word	0x080072e3
 8007298:	080072f1 	.word	0x080072f1
 800729c:	080072ff 	.word	0x080072ff
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 80072a0:	2003      	movs	r0, #3
 80072a2:	f002 fb07 	bl	80098b4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80072a6:	4b1c      	ldr	r3, [pc, #112]	; (8007318 <RadioSetModem+0xb4>)
 80072a8:	2200      	movs	r2, #0
 80072aa:	735a      	strb	r2, [r3, #13]
        break;
 80072ac:	e02f      	b.n	800730e <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80072ae:	2000      	movs	r0, #0
 80072b0:	f002 fb00 	bl	80098b4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80072b4:	4b18      	ldr	r3, [pc, #96]	; (8007318 <RadioSetModem+0xb4>)
 80072b6:	2200      	movs	r2, #0
 80072b8:	735a      	strb	r2, [r3, #13]
        break;
 80072ba:	e028      	b.n	800730e <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80072bc:	2001      	movs	r0, #1
 80072be:	f002 faf9 	bl	80098b4 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80072c2:	4b15      	ldr	r3, [pc, #84]	; (8007318 <RadioSetModem+0xb4>)
 80072c4:	7b5a      	ldrb	r2, [r3, #13]
 80072c6:	4b14      	ldr	r3, [pc, #80]	; (8007318 <RadioSetModem+0xb4>)
 80072c8:	7b1b      	ldrb	r3, [r3, #12]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d01e      	beq.n	800730c <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80072ce:	4b12      	ldr	r3, [pc, #72]	; (8007318 <RadioSetModem+0xb4>)
 80072d0:	7b1a      	ldrb	r2, [r3, #12]
 80072d2:	4b11      	ldr	r3, [pc, #68]	; (8007318 <RadioSetModem+0xb4>)
 80072d4:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80072d6:	4b10      	ldr	r3, [pc, #64]	; (8007318 <RadioSetModem+0xb4>)
 80072d8:	7b5b      	ldrb	r3, [r3, #13]
 80072da:	4618      	mov	r0, r3
 80072dc:	f000 ff86 	bl	80081ec <RadioSetPublicNetwork>
        }
        break;
 80072e0:	e014      	b.n	800730c <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80072e2:	2002      	movs	r0, #2
 80072e4:	f002 fae6 	bl	80098b4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80072e8:	4b0b      	ldr	r3, [pc, #44]	; (8007318 <RadioSetModem+0xb4>)
 80072ea:	2200      	movs	r2, #0
 80072ec:	735a      	strb	r2, [r3, #13]
        break;
 80072ee:	e00e      	b.n	800730e <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80072f0:	2002      	movs	r0, #2
 80072f2:	f002 fadf 	bl	80098b4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80072f6:	4b08      	ldr	r3, [pc, #32]	; (8007318 <RadioSetModem+0xb4>)
 80072f8:	2200      	movs	r2, #0
 80072fa:	735a      	strb	r2, [r3, #13]
        break;
 80072fc:	e007      	b.n	800730e <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80072fe:	2000      	movs	r0, #0
 8007300:	f002 fad8 	bl	80098b4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007304:	4b04      	ldr	r3, [pc, #16]	; (8007318 <RadioSetModem+0xb4>)
 8007306:	2200      	movs	r2, #0
 8007308:	735a      	strb	r2, [r3, #13]
        break;
 800730a:	e000      	b.n	800730e <RadioSetModem+0xaa>
        break;
 800730c:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 800730e:	bf00      	nop
 8007310:	3708      	adds	r7, #8
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	20000284 	.word	0x20000284

0800731c <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f002 fa7f 	bl	8009828 <SUBGRF_SetRfFrequency>
}
 800732a:	bf00      	nop
 800732c:	3708      	adds	r7, #8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b090      	sub	sp, #64	; 0x40
 8007336:	af0a      	add	r7, sp, #40	; 0x28
 8007338:	60f8      	str	r0, [r7, #12]
 800733a:	60b9      	str	r1, [r7, #8]
 800733c:	603b      	str	r3, [r7, #0]
 800733e:	4613      	mov	r3, r2
 8007340:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8007342:	2301      	movs	r3, #1
 8007344:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8007346:	2300      	movs	r3, #0
 8007348:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 800734a:	2300      	movs	r3, #0
 800734c:	613b      	str	r3, [r7, #16]

    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 800734e:	f000 fddc 	bl	8007f0a <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8007352:	2000      	movs	r0, #0
 8007354:	f7ff ff86 	bl	8007264 <RadioSetModem>

    RadioSetChannel( freq );
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f7ff ffdf 	bl	800731c <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800735e:	2301      	movs	r3, #1
 8007360:	9309      	str	r3, [sp, #36]	; 0x24
 8007362:	2300      	movs	r3, #0
 8007364:	9308      	str	r3, [sp, #32]
 8007366:	2300      	movs	r3, #0
 8007368:	9307      	str	r3, [sp, #28]
 800736a:	2300      	movs	r3, #0
 800736c:	9306      	str	r3, [sp, #24]
 800736e:	2300      	movs	r3, #0
 8007370:	9305      	str	r3, [sp, #20]
 8007372:	2300      	movs	r3, #0
 8007374:	9304      	str	r3, [sp, #16]
 8007376:	2300      	movs	r3, #0
 8007378:	9303      	str	r3, [sp, #12]
 800737a:	2300      	movs	r3, #0
 800737c:	9302      	str	r3, [sp, #8]
 800737e:	2303      	movs	r3, #3
 8007380:	9301      	str	r3, [sp, #4]
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	2300      	movs	r3, #0
 8007388:	f44f 7216 	mov.w	r2, #600	; 0x258
 800738c:	68b9      	ldr	r1, [r7, #8]
 800738e:	2000      	movs	r0, #0
 8007390:	f000 f83c 	bl	800740c <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8007394:	2000      	movs	r0, #0
 8007396:	f000 fdbf 	bl	8007f18 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800739a:	f000 ff55 	bl	8008248 <RadioGetWakeupTime>
 800739e:	4603      	mov	r3, r0
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7f9 fbc5 	bl	8000b30 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80073a6:	f004 f81b 	bl	800b3e0 <UTIL_TIMER_GetCurrentTime>
 80073aa:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80073ac:	e00d      	b.n	80073ca <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 80073ae:	2000      	movs	r0, #0
 80073b0:	f000 fe9a 	bl	80080e8 <RadioRssi>
 80073b4:	4603      	mov	r3, r0
 80073b6:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 80073b8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80073bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	dd02      	ble.n	80073ca <RadioIsChannelFree+0x98>
        {
            status = false;
 80073c4:	2300      	movs	r3, #0
 80073c6:	75fb      	strb	r3, [r7, #23]
            break;
 80073c8:	e006      	b.n	80073d8 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80073ca:	6938      	ldr	r0, [r7, #16]
 80073cc:	f004 f81a 	bl	800b404 <UTIL_TIMER_GetElapsedTime>
 80073d0:	4602      	mov	r2, r0
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d8ea      	bhi.n	80073ae <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 80073d8:	f000 fd97 	bl	8007f0a <RadioStandby>

    return status;
 80073dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3718      	adds	r7, #24
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b082      	sub	sp, #8
 80073ea:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80073ec:	2300      	movs	r3, #0
 80073ee:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80073f0:	2300      	movs	r3, #0
 80073f2:	2200      	movs	r2, #0
 80073f4:	2100      	movs	r1, #0
 80073f6:	2000      	movs	r0, #0
 80073f8:	f002 f9ba 	bl	8009770 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80073fc:	f001 ff6f 	bl	80092de <SUBGRF_GetRandom>
 8007400:	6078      	str	r0, [r7, #4]

    return rnd;
 8007402:	687b      	ldr	r3, [r7, #4]
}
 8007404:	4618      	mov	r0, r3
 8007406:	3708      	adds	r7, #8
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b08a      	sub	sp, #40	; 0x28
 8007410:	af00      	add	r7, sp, #0
 8007412:	60b9      	str	r1, [r7, #8]
 8007414:	607a      	str	r2, [r7, #4]
 8007416:	461a      	mov	r2, r3
 8007418:	4603      	mov	r3, r0
 800741a:	73fb      	strb	r3, [r7, #15]
 800741c:	4613      	mov	r3, r2
 800741e:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8007420:	4ab9      	ldr	r2, [pc, #740]	; (8007708 <RadioSetRxConfig+0x2fc>)
 8007422:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8007426:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8007428:	f003 f829 	bl	800a47e <RFW_DeInit>
    if( rxContinuous == true )
 800742c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8007430:	2b00      	cmp	r3, #0
 8007432:	d001      	beq.n	8007438 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8007434:	2300      	movs	r3, #0
 8007436:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8007438:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800743c:	2b00      	cmp	r3, #0
 800743e:	d004      	beq.n	800744a <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8007440:	4ab2      	ldr	r2, [pc, #712]	; (800770c <RadioSetRxConfig+0x300>)
 8007442:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8007446:	7013      	strb	r3, [r2, #0]
 8007448:	e002      	b.n	8007450 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 800744a:	4bb0      	ldr	r3, [pc, #704]	; (800770c <RadioSetRxConfig+0x300>)
 800744c:	22ff      	movs	r2, #255	; 0xff
 800744e:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8007450:	7bfb      	ldrb	r3, [r7, #15]
 8007452:	2b05      	cmp	r3, #5
 8007454:	d009      	beq.n	800746a <RadioSetRxConfig+0x5e>
 8007456:	2b05      	cmp	r3, #5
 8007458:	f300 81ca 	bgt.w	80077f0 <RadioSetRxConfig+0x3e4>
 800745c:	2b00      	cmp	r3, #0
 800745e:	f000 80bf 	beq.w	80075e0 <RadioSetRxConfig+0x1d4>
 8007462:	2b01      	cmp	r3, #1
 8007464:	f000 8124 	beq.w	80076b0 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8007468:	e1c2      	b.n	80077f0 <RadioSetRxConfig+0x3e4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 800746a:	2001      	movs	r0, #1
 800746c:	f002 f87c 	bl	8009568 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007470:	4ba5      	ldr	r3, [pc, #660]	; (8007708 <RadioSetRxConfig+0x2fc>)
 8007472:	2200      	movs	r2, #0
 8007474:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8007478:	4aa3      	ldr	r2, [pc, #652]	; (8007708 <RadioSetRxConfig+0x2fc>)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 800747e:	4ba2      	ldr	r3, [pc, #648]	; (8007708 <RadioSetRxConfig+0x2fc>)
 8007480:	2209      	movs	r2, #9
 8007482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8007486:	4ba0      	ldr	r3, [pc, #640]	; (8007708 <RadioSetRxConfig+0x2fc>)
 8007488:	f44f 7248 	mov.w	r2, #800	; 0x320
 800748c:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800748e:	68b8      	ldr	r0, [r7, #8]
 8007490:	f002 ff28 	bl	800a2e4 <SUBGRF_GetFskBandwidthRegValue>
 8007494:	4603      	mov	r3, r0
 8007496:	461a      	mov	r2, r3
 8007498:	4b9b      	ldr	r3, [pc, #620]	; (8007708 <RadioSetRxConfig+0x2fc>)
 800749a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800749e:	4b9a      	ldr	r3, [pc, #616]	; (8007708 <RadioSetRxConfig+0x2fc>)
 80074a0:	2200      	movs	r2, #0
 80074a2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80074a4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80074a6:	00db      	lsls	r3, r3, #3
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	4b97      	ldr	r3, [pc, #604]	; (8007708 <RadioSetRxConfig+0x2fc>)
 80074ac:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 80074ae:	4b96      	ldr	r3, [pc, #600]	; (8007708 <RadioSetRxConfig+0x2fc>)
 80074b0:	2200      	movs	r2, #0
 80074b2:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80074b4:	4b94      	ldr	r3, [pc, #592]	; (8007708 <RadioSetRxConfig+0x2fc>)
 80074b6:	2210      	movs	r2, #16
 80074b8:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80074ba:	4b93      	ldr	r3, [pc, #588]	; (8007708 <RadioSetRxConfig+0x2fc>)
 80074bc:	2200      	movs	r2, #0
 80074be:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80074c0:	4b91      	ldr	r3, [pc, #580]	; (8007708 <RadioSetRxConfig+0x2fc>)
 80074c2:	2200      	movs	r2, #0
 80074c4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80074c6:	4b91      	ldr	r3, [pc, #580]	; (800770c <RadioSetRxConfig+0x300>)
 80074c8:	781a      	ldrb	r2, [r3, #0]
 80074ca:	4b8f      	ldr	r3, [pc, #572]	; (8007708 <RadioSetRxConfig+0x2fc>)
 80074cc:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80074ce:	4b8e      	ldr	r3, [pc, #568]	; (8007708 <RadioSetRxConfig+0x2fc>)
 80074d0:	2201      	movs	r2, #1
 80074d2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 80074d4:	4b8c      	ldr	r3, [pc, #560]	; (8007708 <RadioSetRxConfig+0x2fc>)
 80074d6:	2200      	movs	r2, #0
 80074d8:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 80074da:	2005      	movs	r0, #5
 80074dc:	f7ff fec2 	bl	8007264 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80074e0:	488b      	ldr	r0, [pc, #556]	; (8007710 <RadioSetRxConfig+0x304>)
 80074e2:	f002 fadb 	bl	8009a9c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80074e6:	488b      	ldr	r0, [pc, #556]	; (8007714 <RadioSetRxConfig+0x308>)
 80074e8:	f002 fbaa 	bl	8009c40 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80074ec:	4a8a      	ldr	r2, [pc, #552]	; (8007718 <RadioSetRxConfig+0x30c>)
 80074ee:	f107 031c 	add.w	r3, r7, #28
 80074f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80074f6:	e883 0003 	stmia.w	r3, {r0, r1}
 80074fa:	f107 031c 	add.w	r3, r7, #28
 80074fe:	4618      	mov	r0, r3
 8007500:	f001 fe6b 	bl	80091da <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8007504:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007508:	f001 feb6 	bl	8009278 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 800750c:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8007510:	f000 fe09 	bl	8008126 <RadioRead>
 8007514:	4603      	mov	r3, r0
 8007516:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 800751a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800751e:	f023 0310 	bic.w	r3, r3, #16
 8007522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8007526:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800752a:	4619      	mov	r1, r3
 800752c:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8007530:	f000 fde7 	bl	8008102 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8007534:	2104      	movs	r1, #4
 8007536:	f640 00b9 	movw	r0, #2233	; 0x8b9
 800753a:	f000 fde2 	bl	8008102 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 800753e:	f640 009b 	movw	r0, #2203	; 0x89b
 8007542:	f000 fdf0 	bl	8008126 <RadioRead>
 8007546:	4603      	mov	r3, r0
 8007548:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800754c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007550:	f023 031c 	bic.w	r3, r3, #28
 8007554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8007558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800755c:	f043 0308 	orr.w	r3, r3, #8
 8007560:	b2db      	uxtb	r3, r3
 8007562:	4619      	mov	r1, r3
 8007564:	f640 009b 	movw	r0, #2203	; 0x89b
 8007568:	f000 fdcb 	bl	8008102 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 800756c:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8007570:	f000 fdd9 	bl	8008126 <RadioRead>
 8007574:	4603      	mov	r3, r0
 8007576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800757a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800757e:	f023 0318 	bic.w	r3, r3, #24
 8007582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8007586:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800758a:	f043 0318 	orr.w	r3, r3, #24
 800758e:	b2db      	uxtb	r3, r3
 8007590:	4619      	mov	r1, r3
 8007592:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8007596:	f000 fdb4 	bl	8008102 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 800759a:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800759e:	f000 fdc2 	bl	8008126 <RadioRead>
 80075a2:	4603      	mov	r3, r0
 80075a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80075a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 80075b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075b8:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	4619      	mov	r1, r3
 80075c0:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80075c4:	f000 fd9d 	bl	8008102 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80075c8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80075ca:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80075ce:	fb02 f303 	mul.w	r3, r2, r3
 80075d2:	461a      	mov	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80075da:	4a4b      	ldr	r2, [pc, #300]	; (8007708 <RadioSetRxConfig+0x2fc>)
 80075dc:	6093      	str	r3, [r2, #8]
            break;
 80075de:	e108      	b.n	80077f2 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80075e0:	2000      	movs	r0, #0
 80075e2:	f001 ffc1 	bl	8009568 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80075e6:	4b48      	ldr	r3, [pc, #288]	; (8007708 <RadioSetRxConfig+0x2fc>)
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80075ee:	4a46      	ldr	r2, [pc, #280]	; (8007708 <RadioSetRxConfig+0x2fc>)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80075f4:	4b44      	ldr	r3, [pc, #272]	; (8007708 <RadioSetRxConfig+0x2fc>)
 80075f6:	220b      	movs	r2, #11
 80075f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80075fc:	68b8      	ldr	r0, [r7, #8]
 80075fe:	f002 fe71 	bl	800a2e4 <SUBGRF_GetFskBandwidthRegValue>
 8007602:	4603      	mov	r3, r0
 8007604:	461a      	mov	r2, r3
 8007606:	4b40      	ldr	r3, [pc, #256]	; (8007708 <RadioSetRxConfig+0x2fc>)
 8007608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800760c:	4b3e      	ldr	r3, [pc, #248]	; (8007708 <RadioSetRxConfig+0x2fc>)
 800760e:	2200      	movs	r2, #0
 8007610:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8007612:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007614:	00db      	lsls	r3, r3, #3
 8007616:	b29a      	uxth	r2, r3
 8007618:	4b3b      	ldr	r3, [pc, #236]	; (8007708 <RadioSetRxConfig+0x2fc>)
 800761a:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800761c:	4b3a      	ldr	r3, [pc, #232]	; (8007708 <RadioSetRxConfig+0x2fc>)
 800761e:	2204      	movs	r2, #4
 8007620:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8007622:	4b39      	ldr	r3, [pc, #228]	; (8007708 <RadioSetRxConfig+0x2fc>)
 8007624:	2218      	movs	r2, #24
 8007626:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8007628:	4b37      	ldr	r3, [pc, #220]	; (8007708 <RadioSetRxConfig+0x2fc>)
 800762a:	2200      	movs	r2, #0
 800762c:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800762e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007632:	f083 0301 	eor.w	r3, r3, #1
 8007636:	b2db      	uxtb	r3, r3
 8007638:	461a      	mov	r2, r3
 800763a:	4b33      	ldr	r3, [pc, #204]	; (8007708 <RadioSetRxConfig+0x2fc>)
 800763c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800763e:	4b33      	ldr	r3, [pc, #204]	; (800770c <RadioSetRxConfig+0x300>)
 8007640:	781a      	ldrb	r2, [r3, #0]
 8007642:	4b31      	ldr	r3, [pc, #196]	; (8007708 <RadioSetRxConfig+0x2fc>)
 8007644:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8007646:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800764a:	2b00      	cmp	r3, #0
 800764c:	d003      	beq.n	8007656 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800764e:	4b2e      	ldr	r3, [pc, #184]	; (8007708 <RadioSetRxConfig+0x2fc>)
 8007650:	22f2      	movs	r2, #242	; 0xf2
 8007652:	75da      	strb	r2, [r3, #23]
 8007654:	e002      	b.n	800765c <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8007656:	4b2c      	ldr	r3, [pc, #176]	; (8007708 <RadioSetRxConfig+0x2fc>)
 8007658:	2201      	movs	r2, #1
 800765a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800765c:	4b2a      	ldr	r3, [pc, #168]	; (8007708 <RadioSetRxConfig+0x2fc>)
 800765e:	2201      	movs	r2, #1
 8007660:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8007662:	f000 fc52 	bl	8007f0a <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8007666:	2000      	movs	r0, #0
 8007668:	f7ff fdfc 	bl	8007264 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800766c:	4828      	ldr	r0, [pc, #160]	; (8007710 <RadioSetRxConfig+0x304>)
 800766e:	f002 fa15 	bl	8009a9c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007672:	4828      	ldr	r0, [pc, #160]	; (8007714 <RadioSetRxConfig+0x308>)
 8007674:	f002 fae4 	bl	8009c40 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8007678:	4a28      	ldr	r2, [pc, #160]	; (800771c <RadioSetRxConfig+0x310>)
 800767a:	f107 0314 	add.w	r3, r7, #20
 800767e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007682:	e883 0003 	stmia.w	r3, {r0, r1}
 8007686:	f107 0314 	add.w	r3, r7, #20
 800768a:	4618      	mov	r0, r3
 800768c:	f001 fda5 	bl	80091da <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8007690:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007694:	f001 fdf0 	bl	8009278 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8007698:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800769a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800769e:	fb02 f303 	mul.w	r3, r2, r3
 80076a2:	461a      	mov	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80076aa:	4a17      	ldr	r2, [pc, #92]	; (8007708 <RadioSetRxConfig+0x2fc>)
 80076ac:	6093      	str	r3, [r2, #8]
            break;
 80076ae:	e0a0      	b.n	80077f2 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80076b0:	2000      	movs	r0, #0
 80076b2:	f001 ff59 	bl	8009568 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80076b6:	4b14      	ldr	r3, [pc, #80]	; (8007708 <RadioSetRxConfig+0x2fc>)
 80076b8:	2201      	movs	r2, #1
 80076ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	b2da      	uxtb	r2, r3
 80076c2:	4b11      	ldr	r3, [pc, #68]	; (8007708 <RadioSetRxConfig+0x2fc>)
 80076c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80076c8:	4a15      	ldr	r2, [pc, #84]	; (8007720 <RadioSetRxConfig+0x314>)
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	4413      	add	r3, r2
 80076ce:	781a      	ldrb	r2, [r3, #0]
 80076d0:	4b0d      	ldr	r3, [pc, #52]	; (8007708 <RadioSetRxConfig+0x2fc>)
 80076d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80076d6:	4a0c      	ldr	r2, [pc, #48]	; (8007708 <RadioSetRxConfig+0x2fc>)
 80076d8:	7bbb      	ldrb	r3, [r7, #14]
 80076da:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d105      	bne.n	80076f0 <RadioSetRxConfig+0x2e4>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2b0b      	cmp	r3, #11
 80076e8:	d008      	beq.n	80076fc <RadioSetRxConfig+0x2f0>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2b0c      	cmp	r3, #12
 80076ee:	d005      	beq.n	80076fc <RadioSetRxConfig+0x2f0>
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d116      	bne.n	8007724 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2b0c      	cmp	r3, #12
 80076fa:	d113      	bne.n	8007724 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80076fc:	4b02      	ldr	r3, [pc, #8]	; (8007708 <RadioSetRxConfig+0x2fc>)
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8007704:	e012      	b.n	800772c <RadioSetRxConfig+0x320>
 8007706:	bf00      	nop
 8007708:	20000284 	.word	0x20000284
 800770c:	20000008 	.word	0x20000008
 8007710:	200002bc 	.word	0x200002bc
 8007714:	20000292 	.word	0x20000292
 8007718:	0800bb24 	.word	0x0800bb24
 800771c:	0800bb2c 	.word	0x0800bb2c
 8007720:	0800bdc0 	.word	0x0800bdc0
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8007724:	4b35      	ldr	r3, [pc, #212]	; (80077fc <RadioSetRxConfig+0x3f0>)
 8007726:	2200      	movs	r2, #0
 8007728:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800772c:	4b33      	ldr	r3, [pc, #204]	; (80077fc <RadioSetRxConfig+0x3f0>)
 800772e:	2201      	movs	r2, #1
 8007730:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007732:	4b32      	ldr	r3, [pc, #200]	; (80077fc <RadioSetRxConfig+0x3f0>)
 8007734:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007738:	2b05      	cmp	r3, #5
 800773a:	d004      	beq.n	8007746 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800773c:	4b2f      	ldr	r3, [pc, #188]	; (80077fc <RadioSetRxConfig+0x3f0>)
 800773e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007742:	2b06      	cmp	r3, #6
 8007744:	d10a      	bne.n	800775c <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8007746:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007748:	2b0b      	cmp	r3, #11
 800774a:	d803      	bhi.n	8007754 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800774c:	4b2b      	ldr	r3, [pc, #172]	; (80077fc <RadioSetRxConfig+0x3f0>)
 800774e:	220c      	movs	r2, #12
 8007750:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8007752:	e006      	b.n	8007762 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007754:	4a29      	ldr	r2, [pc, #164]	; (80077fc <RadioSetRxConfig+0x3f0>)
 8007756:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007758:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800775a:	e002      	b.n	8007762 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800775c:	4a27      	ldr	r2, [pc, #156]	; (80077fc <RadioSetRxConfig+0x3f0>)
 800775e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007760:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8007762:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8007766:	4b25      	ldr	r3, [pc, #148]	; (80077fc <RadioSetRxConfig+0x3f0>)
 8007768:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800776a:	4b25      	ldr	r3, [pc, #148]	; (8007800 <RadioSetRxConfig+0x3f4>)
 800776c:	781a      	ldrb	r2, [r3, #0]
 800776e:	4b23      	ldr	r3, [pc, #140]	; (80077fc <RadioSetRxConfig+0x3f0>)
 8007770:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8007772:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8007776:	4b21      	ldr	r3, [pc, #132]	; (80077fc <RadioSetRxConfig+0x3f0>)
 8007778:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800777c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8007780:	4b1e      	ldr	r3, [pc, #120]	; (80077fc <RadioSetRxConfig+0x3f0>)
 8007782:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8007786:	f000 fbc0 	bl	8007f0a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800778a:	2001      	movs	r0, #1
 800778c:	f7ff fd6a 	bl	8007264 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007790:	481c      	ldr	r0, [pc, #112]	; (8007804 <RadioSetRxConfig+0x3f8>)
 8007792:	f002 f983 	bl	8009a9c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007796:	481c      	ldr	r0, [pc, #112]	; (8007808 <RadioSetRxConfig+0x3fc>)
 8007798:	f002 fa52 	bl	8009c40 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800779c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	4618      	mov	r0, r3
 80077a2:	f001 fef0 	bl	8009586 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80077a6:	4b15      	ldr	r3, [pc, #84]	; (80077fc <RadioSetRxConfig+0x3f0>)
 80077a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d10d      	bne.n	80077cc <RadioSetRxConfig+0x3c0>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80077b0:	f240 7036 	movw	r0, #1846	; 0x736
 80077b4:	f002 fba0 	bl	8009ef8 <SUBGRF_ReadRegister>
 80077b8:	4603      	mov	r3, r0
 80077ba:	f023 0304 	bic.w	r3, r3, #4
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	4619      	mov	r1, r3
 80077c2:	f240 7036 	movw	r0, #1846	; 0x736
 80077c6:	f002 fb83 	bl	8009ed0 <SUBGRF_WriteRegister>
 80077ca:	e00c      	b.n	80077e6 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80077cc:	f240 7036 	movw	r0, #1846	; 0x736
 80077d0:	f002 fb92 	bl	8009ef8 <SUBGRF_ReadRegister>
 80077d4:	4603      	mov	r3, r0
 80077d6:	f043 0304 	orr.w	r3, r3, #4
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	4619      	mov	r1, r3
 80077de:	f240 7036 	movw	r0, #1846	; 0x736
 80077e2:	f002 fb75 	bl	8009ed0 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80077e6:	4b05      	ldr	r3, [pc, #20]	; (80077fc <RadioSetRxConfig+0x3f0>)
 80077e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80077ec:	609a      	str	r2, [r3, #8]
            break;
 80077ee:	e000      	b.n	80077f2 <RadioSetRxConfig+0x3e6>
            break;
 80077f0:	bf00      	nop
    }
}
 80077f2:	bf00      	nop
 80077f4:	3728      	adds	r7, #40	; 0x28
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	20000284 	.word	0x20000284
 8007800:	20000008 	.word	0x20000008
 8007804:	200002bc 	.word	0x200002bc
 8007808:	20000292 	.word	0x20000292

0800780c <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b086      	sub	sp, #24
 8007810:	af00      	add	r7, sp, #0
 8007812:	60ba      	str	r2, [r7, #8]
 8007814:	607b      	str	r3, [r7, #4]
 8007816:	4603      	mov	r3, r0
 8007818:	73fb      	strb	r3, [r7, #15]
 800781a:	460b      	mov	r3, r1
 800781c:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 800781e:	f002 fe2e 	bl	800a47e <RFW_DeInit>
    switch( modem )
 8007822:	7bfb      	ldrb	r3, [r7, #15]
 8007824:	2b04      	cmp	r3, #4
 8007826:	f000 80c7 	beq.w	80079b8 <RadioSetTxConfig+0x1ac>
 800782a:	2b04      	cmp	r3, #4
 800782c:	f300 80d6 	bgt.w	80079dc <RadioSetTxConfig+0x1d0>
 8007830:	2b00      	cmp	r3, #0
 8007832:	d002      	beq.n	800783a <RadioSetTxConfig+0x2e>
 8007834:	2b01      	cmp	r3, #1
 8007836:	d059      	beq.n	80078ec <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8007838:	e0d0      	b.n	80079dc <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800783a:	4b74      	ldr	r3, [pc, #464]	; (8007a0c <RadioSetTxConfig+0x200>)
 800783c:	2200      	movs	r2, #0
 800783e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8007842:	4a72      	ldr	r2, [pc, #456]	; (8007a0c <RadioSetTxConfig+0x200>)
 8007844:	6a3b      	ldr	r3, [r7, #32]
 8007846:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8007848:	4b70      	ldr	r3, [pc, #448]	; (8007a0c <RadioSetTxConfig+0x200>)
 800784a:	220b      	movs	r2, #11
 800784c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f002 fd47 	bl	800a2e4 <SUBGRF_GetFskBandwidthRegValue>
 8007856:	4603      	mov	r3, r0
 8007858:	461a      	mov	r2, r3
 800785a:	4b6c      	ldr	r3, [pc, #432]	; (8007a0c <RadioSetTxConfig+0x200>)
 800785c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8007860:	4a6a      	ldr	r2, [pc, #424]	; (8007a0c <RadioSetTxConfig+0x200>)
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007866:	4b69      	ldr	r3, [pc, #420]	; (8007a0c <RadioSetTxConfig+0x200>)
 8007868:	2200      	movs	r2, #0
 800786a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800786c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800786e:	00db      	lsls	r3, r3, #3
 8007870:	b29a      	uxth	r2, r3
 8007872:	4b66      	ldr	r3, [pc, #408]	; (8007a0c <RadioSetTxConfig+0x200>)
 8007874:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8007876:	4b65      	ldr	r3, [pc, #404]	; (8007a0c <RadioSetTxConfig+0x200>)
 8007878:	2204      	movs	r2, #4
 800787a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 800787c:	4b63      	ldr	r3, [pc, #396]	; (8007a0c <RadioSetTxConfig+0x200>)
 800787e:	2218      	movs	r2, #24
 8007880:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8007882:	4b62      	ldr	r3, [pc, #392]	; (8007a0c <RadioSetTxConfig+0x200>)
 8007884:	2200      	movs	r2, #0
 8007886:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8007888:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800788c:	f083 0301 	eor.w	r3, r3, #1
 8007890:	b2db      	uxtb	r3, r3
 8007892:	461a      	mov	r2, r3
 8007894:	4b5d      	ldr	r3, [pc, #372]	; (8007a0c <RadioSetTxConfig+0x200>)
 8007896:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8007898:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800789c:	2b00      	cmp	r3, #0
 800789e:	d003      	beq.n	80078a8 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80078a0:	4b5a      	ldr	r3, [pc, #360]	; (8007a0c <RadioSetTxConfig+0x200>)
 80078a2:	22f2      	movs	r2, #242	; 0xf2
 80078a4:	75da      	strb	r2, [r3, #23]
 80078a6:	e002      	b.n	80078ae <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80078a8:	4b58      	ldr	r3, [pc, #352]	; (8007a0c <RadioSetTxConfig+0x200>)
 80078aa:	2201      	movs	r2, #1
 80078ac:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80078ae:	4b57      	ldr	r3, [pc, #348]	; (8007a0c <RadioSetTxConfig+0x200>)
 80078b0:	2201      	movs	r2, #1
 80078b2:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80078b4:	f000 fb29 	bl	8007f0a <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 80078b8:	2000      	movs	r0, #0
 80078ba:	f7ff fcd3 	bl	8007264 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80078be:	4854      	ldr	r0, [pc, #336]	; (8007a10 <RadioSetTxConfig+0x204>)
 80078c0:	f002 f8ec 	bl	8009a9c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80078c4:	4853      	ldr	r0, [pc, #332]	; (8007a14 <RadioSetTxConfig+0x208>)
 80078c6:	f002 f9bb 	bl	8009c40 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80078ca:	4a53      	ldr	r2, [pc, #332]	; (8007a18 <RadioSetTxConfig+0x20c>)
 80078cc:	f107 0310 	add.w	r3, r7, #16
 80078d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80078d4:	e883 0003 	stmia.w	r3, {r0, r1}
 80078d8:	f107 0310 	add.w	r3, r7, #16
 80078dc:	4618      	mov	r0, r3
 80078de:	f001 fc7c 	bl	80091da <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80078e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80078e6:	f001 fcc7 	bl	8009278 <SUBGRF_SetWhiteningSeed>
            break;
 80078ea:	e078      	b.n	80079de <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80078ec:	4b47      	ldr	r3, [pc, #284]	; (8007a0c <RadioSetTxConfig+0x200>)
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80078f4:	6a3b      	ldr	r3, [r7, #32]
 80078f6:	b2da      	uxtb	r2, r3
 80078f8:	4b44      	ldr	r3, [pc, #272]	; (8007a0c <RadioSetTxConfig+0x200>)
 80078fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80078fe:	4a47      	ldr	r2, [pc, #284]	; (8007a1c <RadioSetTxConfig+0x210>)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4413      	add	r3, r2
 8007904:	781a      	ldrb	r2, [r3, #0]
 8007906:	4b41      	ldr	r3, [pc, #260]	; (8007a0c <RadioSetTxConfig+0x200>)
 8007908:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800790c:	4a3f      	ldr	r2, [pc, #252]	; (8007a0c <RadioSetTxConfig+0x200>)
 800790e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007912:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d105      	bne.n	8007928 <RadioSetTxConfig+0x11c>
 800791c:	6a3b      	ldr	r3, [r7, #32]
 800791e:	2b0b      	cmp	r3, #11
 8007920:	d008      	beq.n	8007934 <RadioSetTxConfig+0x128>
 8007922:	6a3b      	ldr	r3, [r7, #32]
 8007924:	2b0c      	cmp	r3, #12
 8007926:	d005      	beq.n	8007934 <RadioSetTxConfig+0x128>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2b01      	cmp	r3, #1
 800792c:	d107      	bne.n	800793e <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800792e:	6a3b      	ldr	r3, [r7, #32]
 8007930:	2b0c      	cmp	r3, #12
 8007932:	d104      	bne.n	800793e <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8007934:	4b35      	ldr	r3, [pc, #212]	; (8007a0c <RadioSetTxConfig+0x200>)
 8007936:	2201      	movs	r2, #1
 8007938:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800793c:	e003      	b.n	8007946 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800793e:	4b33      	ldr	r3, [pc, #204]	; (8007a0c <RadioSetTxConfig+0x200>)
 8007940:	2200      	movs	r2, #0
 8007942:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007946:	4b31      	ldr	r3, [pc, #196]	; (8007a0c <RadioSetTxConfig+0x200>)
 8007948:	2201      	movs	r2, #1
 800794a:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800794c:	4b2f      	ldr	r3, [pc, #188]	; (8007a0c <RadioSetTxConfig+0x200>)
 800794e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007952:	2b05      	cmp	r3, #5
 8007954:	d004      	beq.n	8007960 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8007956:	4b2d      	ldr	r3, [pc, #180]	; (8007a0c <RadioSetTxConfig+0x200>)
 8007958:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800795c:	2b06      	cmp	r3, #6
 800795e:	d10a      	bne.n	8007976 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8007960:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007962:	2b0b      	cmp	r3, #11
 8007964:	d803      	bhi.n	800796e <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8007966:	4b29      	ldr	r3, [pc, #164]	; (8007a0c <RadioSetTxConfig+0x200>)
 8007968:	220c      	movs	r2, #12
 800796a:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800796c:	e006      	b.n	800797c <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800796e:	4a27      	ldr	r2, [pc, #156]	; (8007a0c <RadioSetTxConfig+0x200>)
 8007970:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007972:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8007974:	e002      	b.n	800797c <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007976:	4a25      	ldr	r2, [pc, #148]	; (8007a0c <RadioSetTxConfig+0x200>)
 8007978:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800797a:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800797c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8007980:	4b22      	ldr	r3, [pc, #136]	; (8007a0c <RadioSetTxConfig+0x200>)
 8007982:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8007984:	4b26      	ldr	r3, [pc, #152]	; (8007a20 <RadioSetTxConfig+0x214>)
 8007986:	781a      	ldrb	r2, [r3, #0]
 8007988:	4b20      	ldr	r3, [pc, #128]	; (8007a0c <RadioSetTxConfig+0x200>)
 800798a:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800798c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8007990:	4b1e      	ldr	r3, [pc, #120]	; (8007a0c <RadioSetTxConfig+0x200>)
 8007992:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8007996:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800799a:	4b1c      	ldr	r3, [pc, #112]	; (8007a0c <RadioSetTxConfig+0x200>)
 800799c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80079a0:	f000 fab3 	bl	8007f0a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80079a4:	2001      	movs	r0, #1
 80079a6:	f7ff fc5d 	bl	8007264 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80079aa:	4819      	ldr	r0, [pc, #100]	; (8007a10 <RadioSetTxConfig+0x204>)
 80079ac:	f002 f876 	bl	8009a9c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80079b0:	4818      	ldr	r0, [pc, #96]	; (8007a14 <RadioSetTxConfig+0x208>)
 80079b2:	f002 f945 	bl	8009c40 <SUBGRF_SetPacketParams>
            break;
 80079b6:	e012      	b.n	80079de <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 80079b8:	2004      	movs	r0, #4
 80079ba:	f7ff fc53 	bl	8007264 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80079be:	4b13      	ldr	r3, [pc, #76]	; (8007a0c <RadioSetTxConfig+0x200>)
 80079c0:	2202      	movs	r2, #2
 80079c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 80079c6:	4a11      	ldr	r2, [pc, #68]	; (8007a0c <RadioSetTxConfig+0x200>)
 80079c8:	6a3b      	ldr	r3, [r7, #32]
 80079ca:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80079cc:	4b0f      	ldr	r3, [pc, #60]	; (8007a0c <RadioSetTxConfig+0x200>)
 80079ce:	2216      	movs	r2, #22
 80079d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80079d4:	480e      	ldr	r0, [pc, #56]	; (8007a10 <RadioSetTxConfig+0x204>)
 80079d6:	f002 f861 	bl	8009a9c <SUBGRF_SetModulationParams>
            break;
 80079da:	e000      	b.n	80079de <RadioSetTxConfig+0x1d2>
            break;
 80079dc:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80079de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079e2:	4618      	mov	r0, r3
 80079e4:	f002 fb90 	bl	800a108 <SUBGRF_SetRfTxPower>
 80079e8:	4603      	mov	r3, r0
 80079ea:	461a      	mov	r2, r3
 80079ec:	4b07      	ldr	r3, [pc, #28]	; (8007a0c <RadioSetTxConfig+0x200>)
 80079ee:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 80079f2:	4b06      	ldr	r3, [pc, #24]	; (8007a0c <RadioSetTxConfig+0x200>)
 80079f4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80079f8:	4618      	mov	r0, r3
 80079fa:	f002 fd54 	bl	800a4a6 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80079fe:	4a03      	ldr	r2, [pc, #12]	; (8007a0c <RadioSetTxConfig+0x200>)
 8007a00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a02:	6053      	str	r3, [r2, #4]
}
 8007a04:	bf00      	nop
 8007a06:	3718      	adds	r7, #24
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	20000284 	.word	0x20000284
 8007a10:	200002bc 	.word	0x200002bc
 8007a14:	20000292 	.word	0x20000292
 8007a18:	0800bb2c 	.word	0x0800bb2c
 8007a1c:	0800bdc0 	.word	0x0800bdc0
 8007a20:	20000008 	.word	0x20000008

08007a24 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
    return true;
 8007a2c:	2301      	movs	r3, #1
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	370c      	adds	r7, #12
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bc80      	pop	{r7}
 8007a36:	4770      	bx	lr

08007a38 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	4603      	mov	r3, r0
 8007a40:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8007a42:	2300      	movs	r3, #0
 8007a44:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8007a46:	79fb      	ldrb	r3, [r7, #7]
 8007a48:	2b0a      	cmp	r3, #10
 8007a4a:	d83e      	bhi.n	8007aca <RadioGetLoRaBandwidthInHz+0x92>
 8007a4c:	a201      	add	r2, pc, #4	; (adr r2, 8007a54 <RadioGetLoRaBandwidthInHz+0x1c>)
 8007a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a52:	bf00      	nop
 8007a54:	08007a81 	.word	0x08007a81
 8007a58:	08007a91 	.word	0x08007a91
 8007a5c:	08007aa1 	.word	0x08007aa1
 8007a60:	08007ab1 	.word	0x08007ab1
 8007a64:	08007ab9 	.word	0x08007ab9
 8007a68:	08007abf 	.word	0x08007abf
 8007a6c:	08007ac5 	.word	0x08007ac5
 8007a70:	08007acb 	.word	0x08007acb
 8007a74:	08007a89 	.word	0x08007a89
 8007a78:	08007a99 	.word	0x08007a99
 8007a7c:	08007aa9 	.word	0x08007aa9
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8007a80:	f641 6384 	movw	r3, #7812	; 0x1e84
 8007a84:	60fb      	str	r3, [r7, #12]
        break;
 8007a86:	e020      	b.n	8007aca <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8007a88:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8007a8c:	60fb      	str	r3, [r7, #12]
        break;
 8007a8e:	e01c      	b.n	8007aca <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8007a90:	f643 5309 	movw	r3, #15625	; 0x3d09
 8007a94:	60fb      	str	r3, [r7, #12]
        break;
 8007a96:	e018      	b.n	8007aca <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8007a98:	f245 1361 	movw	r3, #20833	; 0x5161
 8007a9c:	60fb      	str	r3, [r7, #12]
        break;
 8007a9e:	e014      	b.n	8007aca <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8007aa0:	f647 2312 	movw	r3, #31250	; 0x7a12
 8007aa4:	60fb      	str	r3, [r7, #12]
        break;
 8007aa6:	e010      	b.n	8007aca <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8007aa8:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8007aac:	60fb      	str	r3, [r7, #12]
        break;
 8007aae:	e00c      	b.n	8007aca <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8007ab0:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007ab4:	60fb      	str	r3, [r7, #12]
        break;
 8007ab6:	e008      	b.n	8007aca <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8007ab8:	4b07      	ldr	r3, [pc, #28]	; (8007ad8 <RadioGetLoRaBandwidthInHz+0xa0>)
 8007aba:	60fb      	str	r3, [r7, #12]
        break;
 8007abc:	e005      	b.n	8007aca <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8007abe:	4b07      	ldr	r3, [pc, #28]	; (8007adc <RadioGetLoRaBandwidthInHz+0xa4>)
 8007ac0:	60fb      	str	r3, [r7, #12]
        break;
 8007ac2:	e002      	b.n	8007aca <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8007ac4:	4b06      	ldr	r3, [pc, #24]	; (8007ae0 <RadioGetLoRaBandwidthInHz+0xa8>)
 8007ac6:	60fb      	str	r3, [r7, #12]
        break;
 8007ac8:	bf00      	nop
    }

    return bandwidthInHz;
 8007aca:	68fb      	ldr	r3, [r7, #12]
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3714      	adds	r7, #20
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bc80      	pop	{r7}
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop
 8007ad8:	0001e848 	.word	0x0001e848
 8007adc:	0003d090 	.word	0x0003d090
 8007ae0:	0007a120 	.word	0x0007a120

08007ae4 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	4608      	mov	r0, r1
 8007aee:	4611      	mov	r1, r2
 8007af0:	461a      	mov	r2, r3
 8007af2:	4603      	mov	r3, r0
 8007af4:	70fb      	strb	r3, [r7, #3]
 8007af6:	460b      	mov	r3, r1
 8007af8:	803b      	strh	r3, [r7, #0]
 8007afa:	4613      	mov	r3, r2
 8007afc:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8007afe:	883b      	ldrh	r3, [r7, #0]
 8007b00:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007b02:	78ba      	ldrb	r2, [r7, #2]
 8007b04:	f082 0201 	eor.w	r2, r2, #1
 8007b08:	b2d2      	uxtb	r2, r2
 8007b0a:	2a00      	cmp	r2, #0
 8007b0c:	d001      	beq.n	8007b12 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8007b0e:	2208      	movs	r2, #8
 8007b10:	e000      	b.n	8007b14 <RadioGetGfskTimeOnAirNumerator+0x30>
 8007b12:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8007b14:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007b16:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8007b1a:	7c3b      	ldrb	r3, [r7, #16]
 8007b1c:	7d39      	ldrb	r1, [r7, #20]
 8007b1e:	2900      	cmp	r1, #0
 8007b20:	d001      	beq.n	8007b26 <RadioGetGfskTimeOnAirNumerator+0x42>
 8007b22:	2102      	movs	r1, #2
 8007b24:	e000      	b.n	8007b28 <RadioGetGfskTimeOnAirNumerator+0x44>
 8007b26:	2100      	movs	r1, #0
 8007b28:	440b      	add	r3, r1
 8007b2a:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007b2c:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	370c      	adds	r7, #12
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bc80      	pop	{r7}
 8007b36:	4770      	bx	lr

08007b38 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b08b      	sub	sp, #44	; 0x2c
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	4611      	mov	r1, r2
 8007b44:	461a      	mov	r2, r3
 8007b46:	460b      	mov	r3, r1
 8007b48:	71fb      	strb	r3, [r7, #7]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8007b4e:	79fb      	ldrb	r3, [r7, #7]
 8007b50:	3304      	adds	r3, #4
 8007b52:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8007b54:	2300      	movs	r3, #0
 8007b56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	2b05      	cmp	r3, #5
 8007b5e:	d002      	beq.n	8007b66 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	2b06      	cmp	r3, #6
 8007b64:	d104      	bne.n	8007b70 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8007b66:	88bb      	ldrh	r3, [r7, #4]
 8007b68:	2b0b      	cmp	r3, #11
 8007b6a:	d801      	bhi.n	8007b70 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8007b6c:	230c      	movs	r3, #12
 8007b6e:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d105      	bne.n	8007b82 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	2b0b      	cmp	r3, #11
 8007b7a:	d008      	beq.n	8007b8e <RadioGetLoRaTimeOnAirNumerator+0x56>
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	2b0c      	cmp	r3, #12
 8007b80:	d005      	beq.n	8007b8e <RadioGetLoRaTimeOnAirNumerator+0x56>
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d105      	bne.n	8007b94 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	2b0c      	cmp	r3, #12
 8007b8c:	d102      	bne.n	8007b94 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007b94:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007b98:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8007b9a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007b9e:	2a00      	cmp	r2, #0
 8007ba0:	d001      	beq.n	8007ba6 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8007ba2:	2210      	movs	r2, #16
 8007ba4:	e000      	b.n	8007ba8 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8007ba6:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007ba8:	4413      	add	r3, r2
 8007baa:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8007bb0:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8007bb2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8007bb6:	2a00      	cmp	r2, #0
 8007bb8:	d001      	beq.n	8007bbe <RadioGetLoRaTimeOnAirNumerator+0x86>
 8007bba:	2200      	movs	r2, #0
 8007bbc:	e000      	b.n	8007bc0 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8007bbe:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8007bc0:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007bc2:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	2b06      	cmp	r3, #6
 8007bc8:	d803      	bhi.n	8007bd2 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	623b      	str	r3, [r7, #32]
 8007bd0:	e00e      	b.n	8007bf0 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	3308      	adds	r3, #8
 8007bd6:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8007bd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d004      	beq.n	8007bea <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	3b02      	subs	r3, #2
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	623b      	str	r3, [r7, #32]
 8007be8:	e002      	b.n	8007bf0 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	da01      	bge.n	8007bfa <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8007bfa:	69fa      	ldr	r2, [r7, #28]
 8007bfc:	6a3b      	ldr	r3, [r7, #32]
 8007bfe:	4413      	add	r3, r2
 8007c00:	1e5a      	subs	r2, r3, #1
 8007c02:	6a3b      	ldr	r3, [r7, #32]
 8007c04:	fb92 f3f3 	sdiv	r3, r2, r3
 8007c08:	697a      	ldr	r2, [r7, #20]
 8007c0a:	fb03 f202 	mul.w	r2, r3, r2
 8007c0e:	88bb      	ldrh	r3, [r7, #4]
 8007c10:	4413      	add	r3, r2
    int32_t intermediate =
 8007c12:	330c      	adds	r3, #12
 8007c14:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	2b06      	cmp	r3, #6
 8007c1a:	d802      	bhi.n	8007c22 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	3302      	adds	r3, #2
 8007c20:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	1c5a      	adds	r2, r3, #1
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	3b02      	subs	r3, #2
 8007c2c:	fa02 f303 	lsl.w	r3, r2, r3
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	372c      	adds	r7, #44	; 0x2c
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bc80      	pop	{r7}
 8007c38:	4770      	bx	lr
	...

08007c3c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b08a      	sub	sp, #40	; 0x28
 8007c40:	af04      	add	r7, sp, #16
 8007c42:	60b9      	str	r1, [r7, #8]
 8007c44:	607a      	str	r2, [r7, #4]
 8007c46:	461a      	mov	r2, r3
 8007c48:	4603      	mov	r3, r0
 8007c4a:	73fb      	strb	r3, [r7, #15]
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8007c50:	2300      	movs	r3, #0
 8007c52:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8007c54:	2301      	movs	r3, #1
 8007c56:	613b      	str	r3, [r7, #16]

    switch( modem )
 8007c58:	7bfb      	ldrb	r3, [r7, #15]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d002      	beq.n	8007c64 <RadioTimeOnAir+0x28>
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d017      	beq.n	8007c92 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8007c62:	e035      	b.n	8007cd0 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8007c64:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8007c68:	8c3a      	ldrh	r2, [r7, #32]
 8007c6a:	7bb9      	ldrb	r1, [r7, #14]
 8007c6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007c70:	9301      	str	r3, [sp, #4]
 8007c72:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007c76:	9300      	str	r3, [sp, #0]
 8007c78:	4603      	mov	r3, r0
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f7ff ff32 	bl	8007ae4 <RadioGetGfskTimeOnAirNumerator>
 8007c80:	4603      	mov	r3, r0
 8007c82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c86:	fb02 f303 	mul.w	r3, r2, r3
 8007c8a:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	613b      	str	r3, [r7, #16]
        break;
 8007c90:	e01e      	b.n	8007cd0 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8007c92:	8c39      	ldrh	r1, [r7, #32]
 8007c94:	7bba      	ldrb	r2, [r7, #14]
 8007c96:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007c9a:	9302      	str	r3, [sp, #8]
 8007c9c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007ca0:	9301      	str	r3, [sp, #4]
 8007ca2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007ca6:	9300      	str	r3, [sp, #0]
 8007ca8:	460b      	mov	r3, r1
 8007caa:	6879      	ldr	r1, [r7, #4]
 8007cac:	68b8      	ldr	r0, [r7, #8]
 8007cae:	f7ff ff43 	bl	8007b38 <RadioGetLoRaTimeOnAirNumerator>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007cb8:	fb02 f303 	mul.w	r3, r2, r3
 8007cbc:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8007cbe:	4a0a      	ldr	r2, [pc, #40]	; (8007ce8 <RadioTimeOnAir+0xac>)
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7ff feb6 	bl	8007a38 <RadioGetLoRaBandwidthInHz>
 8007ccc:	6138      	str	r0, [r7, #16]
        break;
 8007cce:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 8007cd0:	697a      	ldr	r2, [r7, #20]
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	1e5a      	subs	r2, r3, #1
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3718      	adds	r7, #24
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	0800bdc0 	.word	0x0800bdc0

08007cec <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f240 2101 	movw	r1, #513	; 0x201
 8007d00:	f240 2001 	movw	r0, #513	; 0x201
 8007d04:	f001 fd34 	bl	8009770 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8007d08:	4b71      	ldr	r3, [pc, #452]	; (8007ed0 <RadioSend+0x1e4>)
 8007d0a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007d0e:	2101      	movs	r1, #1
 8007d10:	4618      	mov	r0, r3
 8007d12:	f002 f9d1 	bl	800a0b8 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8007d16:	4b6e      	ldr	r3, [pc, #440]	; (8007ed0 <RadioSend+0x1e4>)
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d112      	bne.n	8007d44 <RadioSend+0x58>
 8007d1e:	4b6c      	ldr	r3, [pc, #432]	; (8007ed0 <RadioSend+0x1e4>)
 8007d20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d24:	2b06      	cmp	r3, #6
 8007d26:	d10d      	bne.n	8007d44 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8007d28:	f640 0089 	movw	r0, #2185	; 0x889
 8007d2c:	f002 f8e4 	bl	8009ef8 <SUBGRF_ReadRegister>
 8007d30:	4603      	mov	r3, r0
 8007d32:	f023 0304 	bic.w	r3, r3, #4
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	4619      	mov	r1, r3
 8007d3a:	f640 0089 	movw	r0, #2185	; 0x889
 8007d3e:	f002 f8c7 	bl	8009ed0 <SUBGRF_WriteRegister>
 8007d42:	e00c      	b.n	8007d5e <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8007d44:	f640 0089 	movw	r0, #2185	; 0x889
 8007d48:	f002 f8d6 	bl	8009ef8 <SUBGRF_ReadRegister>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	f043 0304 	orr.w	r3, r3, #4
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	4619      	mov	r1, r3
 8007d56:	f640 0089 	movw	r0, #2185	; 0x889
 8007d5a:	f002 f8b9 	bl	8009ed0 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch( SubgRf.Modem )
 8007d5e:	4b5c      	ldr	r3, [pc, #368]	; (8007ed0 <RadioSend+0x1e4>)
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	2b04      	cmp	r3, #4
 8007d64:	f200 80a7 	bhi.w	8007eb6 <RadioSend+0x1ca>
 8007d68:	a201      	add	r2, pc, #4	; (adr r2, 8007d70 <RadioSend+0x84>)
 8007d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6e:	bf00      	nop
 8007d70:	08007d9f 	.word	0x08007d9f
 8007d74:	08007d85 	.word	0x08007d85
 8007d78:	08007d9f 	.word	0x08007d9f
 8007d7c:	08007dff 	.word	0x08007dff
 8007d80:	08007e1f 	.word	0x08007e1f
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8007d84:	4a52      	ldr	r2, [pc, #328]	; (8007ed0 <RadioSend+0x1e4>)
 8007d86:	78fb      	ldrb	r3, [r7, #3]
 8007d88:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007d8a:	4852      	ldr	r0, [pc, #328]	; (8007ed4 <RadioSend+0x1e8>)
 8007d8c:	f001 ff58 	bl	8009c40 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8007d90:	78fb      	ldrb	r3, [r7, #3]
 8007d92:	2200      	movs	r2, #0
 8007d94:	4619      	mov	r1, r3
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f001 fa0c 	bl	80091b4 <SUBGRF_SendPayload>
            break;
 8007d9c:	e08c      	b.n	8007eb8 <RadioSend+0x1cc>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8007d9e:	f002 fb74 	bl	800a48a <RFW_Is_Init>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d11d      	bne.n	8007de4 <RadioSend+0xf8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8007da8:	f107 020d 	add.w	r2, r7, #13
 8007dac:	78fb      	ldrb	r3, [r7, #3]
 8007dae:	4619      	mov	r1, r3
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f002 fb82 	bl	800a4ba <RFW_TransmitInit>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d10c      	bne.n	8007dd6 <RadioSend+0xea>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8007dbc:	7b7a      	ldrb	r2, [r7, #13]
 8007dbe:	4b44      	ldr	r3, [pc, #272]	; (8007ed0 <RadioSend+0x1e4>)
 8007dc0:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007dc2:	4844      	ldr	r0, [pc, #272]	; (8007ed4 <RadioSend+0x1e8>)
 8007dc4:	f001 ff3c 	bl	8009c40 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8007dc8:	7b7b      	ldrb	r3, [r7, #13]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	4619      	mov	r1, r3
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f001 f9f0 	bl	80091b4 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8007dd4:	e070      	b.n	8007eb8 <RadioSend+0x1cc>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 8007dd6:	4b40      	ldr	r3, [pc, #256]	; (8007ed8 <RadioSend+0x1ec>)
 8007dd8:	2201      	movs	r2, #1
 8007dda:	2100      	movs	r1, #0
 8007ddc:	2002      	movs	r0, #2
 8007dde:	f003 fbdd 	bl	800b59c <UTIL_ADV_TRACE_COND_FSend>
 8007de2:	e072      	b.n	8007eca <RadioSend+0x1de>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8007de4:	4a3a      	ldr	r2, [pc, #232]	; (8007ed0 <RadioSend+0x1e4>)
 8007de6:	78fb      	ldrb	r3, [r7, #3]
 8007de8:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007dea:	483a      	ldr	r0, [pc, #232]	; (8007ed4 <RadioSend+0x1e8>)
 8007dec:	f001 ff28 	bl	8009c40 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8007df0:	78fb      	ldrb	r3, [r7, #3]
 8007df2:	2200      	movs	r2, #0
 8007df4:	4619      	mov	r1, r3
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f001 f9dc 	bl	80091b4 <SUBGRF_SendPayload>
            break;
 8007dfc:	e05c      	b.n	8007eb8 <RadioSend+0x1cc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8007dfe:	4b34      	ldr	r3, [pc, #208]	; (8007ed0 <RadioSend+0x1e4>)
 8007e00:	2202      	movs	r2, #2
 8007e02:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8007e04:	4a32      	ldr	r2, [pc, #200]	; (8007ed0 <RadioSend+0x1e4>)
 8007e06:	78fb      	ldrb	r3, [r7, #3]
 8007e08:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007e0a:	4832      	ldr	r0, [pc, #200]	; (8007ed4 <RadioSend+0x1e8>)
 8007e0c:	f001 ff18 	bl	8009c40 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8007e10:	78fb      	ldrb	r3, [r7, #3]
 8007e12:	2200      	movs	r2, #0
 8007e14:	4619      	mov	r1, r3
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f001 f9cc 	bl	80091b4 <SUBGRF_SendPayload>
            break;
 8007e1c:	e04c      	b.n	8007eb8 <RadioSend+0x1cc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8007e1e:	78fb      	ldrb	r3, [r7, #3]
 8007e20:	461a      	mov	r2, r3
 8007e22:	6879      	ldr	r1, [r7, #4]
 8007e24:	482d      	ldr	r0, [pc, #180]	; (8007edc <RadioSend+0x1f0>)
 8007e26:	f000 fcbc 	bl	80087a2 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8007e2a:	4b29      	ldr	r3, [pc, #164]	; (8007ed0 <RadioSend+0x1e4>)
 8007e2c:	2202      	movs	r2, #2
 8007e2e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8007e30:	78fb      	ldrb	r3, [r7, #3]
 8007e32:	3301      	adds	r3, #1
 8007e34:	b2da      	uxtb	r2, r3
 8007e36:	4b26      	ldr	r3, [pc, #152]	; (8007ed0 <RadioSend+0x1e4>)
 8007e38:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007e3a:	4826      	ldr	r0, [pc, #152]	; (8007ed4 <RadioSend+0x1e8>)
 8007e3c:	f001 ff00 	bl	8009c40 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8007e40:	2100      	movs	r1, #0
 8007e42:	20f1      	movs	r0, #241	; 0xf1
 8007e44:	f000 f95d 	bl	8008102 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8007e48:	2100      	movs	r1, #0
 8007e4a:	20f0      	movs	r0, #240	; 0xf0
 8007e4c:	f000 f959 	bl	8008102 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8007e50:	4b1f      	ldr	r3, [pc, #124]	; (8007ed0 <RadioSend+0x1e4>)
 8007e52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e54:	2b64      	cmp	r3, #100	; 0x64
 8007e56:	d108      	bne.n	8007e6a <RadioSend+0x17e>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8007e58:	2170      	movs	r1, #112	; 0x70
 8007e5a:	20f3      	movs	r0, #243	; 0xf3
 8007e5c:	f000 f951 	bl	8008102 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8007e60:	211d      	movs	r1, #29
 8007e62:	20f2      	movs	r0, #242	; 0xf2
 8007e64:	f000 f94d 	bl	8008102 <RadioWrite>
 8007e68:	e007      	b.n	8007e7a <RadioSend+0x18e>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8007e6a:	21e1      	movs	r1, #225	; 0xe1
 8007e6c:	20f3      	movs	r0, #243	; 0xf3
 8007e6e:	f000 f948 	bl	8008102 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8007e72:	2104      	movs	r1, #4
 8007e74:	20f2      	movs	r0, #242	; 0xf2
 8007e76:	f000 f944 	bl	8008102 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8007e7a:	78fb      	ldrb	r3, [r7, #3]
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	00db      	lsls	r3, r3, #3
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	3302      	adds	r3, #2
 8007e84:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8007e86:	89fb      	ldrh	r3, [r7, #14]
 8007e88:	0a1b      	lsrs	r3, r3, #8
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	4619      	mov	r1, r3
 8007e90:	20f4      	movs	r0, #244	; 0xf4
 8007e92:	f000 f936 	bl	8008102 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8007e96:	89fb      	ldrh	r3, [r7, #14]
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	20f5      	movs	r0, #245	; 0xf5
 8007e9e:	f000 f930 	bl	8008102 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8007ea2:	78fb      	ldrb	r3, [r7, #3]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8007eac:	4619      	mov	r1, r3
 8007eae:	480b      	ldr	r0, [pc, #44]	; (8007edc <RadioSend+0x1f0>)
 8007eb0:	f001 f980 	bl	80091b4 <SUBGRF_SendPayload>
            break;
 8007eb4:	e000      	b.n	8007eb8 <RadioSend+0x1cc>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8007eb6:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8007eb8:	4b05      	ldr	r3, [pc, #20]	; (8007ed0 <RadioSend+0x1e4>)
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	4808      	ldr	r0, [pc, #32]	; (8007ee0 <RadioSend+0x1f4>)
 8007ec0:	f003 f9e4 	bl	800b28c <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8007ec4:	4806      	ldr	r0, [pc, #24]	; (8007ee0 <RadioSend+0x1f4>)
 8007ec6:	f003 f903 	bl	800b0d0 <UTIL_TIMER_Start>
}
 8007eca:	3710      	adds	r7, #16
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	20000284 	.word	0x20000284
 8007ed4:	20000292 	.word	0x20000292
 8007ed8:	0800bb34 	.word	0x0800bb34
 8007edc:	20000180 	.word	0x20000180
 8007ee0:	200002e0 	.word	0x200002e0

08007ee4 <RadioSleep>:

static void RadioSleep( void )
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8007eea:	2300      	movs	r3, #0
 8007eec:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8007eee:	793b      	ldrb	r3, [r7, #4]
 8007ef0:	f043 0304 	orr.w	r3, r3, #4
 8007ef4:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8007ef6:	7938      	ldrb	r0, [r7, #4]
 8007ef8:	f001 fa38 	bl	800936c <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8007efc:	2002      	movs	r0, #2
 8007efe:	f7f8 fe17 	bl	8000b30 <HAL_Delay>
}
 8007f02:	bf00      	nop
 8007f04:	3708      	adds	r7, #8
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <RadioStandby>:

static void RadioStandby( void )
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8007f0e:	2000      	movs	r0, #0
 8007f10:	f001 fa5e 	bl	80093d0 <SUBGRF_SetStandby>
}
 8007f14:	bf00      	nop
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init( ) )
 8007f20:	f002 fab3 	bl	800a48a <RFW_Is_Init>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d102      	bne.n	8007f30 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8007f2a:	f002 fad6 	bl	800a4da <RFW_ReceiveInit>
 8007f2e:	e007      	b.n	8007f40 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8007f30:	2300      	movs	r3, #0
 8007f32:	2200      	movs	r2, #0
 8007f34:	f240 2162 	movw	r1, #610	; 0x262
 8007f38:	f240 2062 	movw	r0, #610	; 0x262
 8007f3c:	f001 fc18 	bl	8009770 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d006      	beq.n	8007f54 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8007f46:	6879      	ldr	r1, [r7, #4]
 8007f48:	4811      	ldr	r0, [pc, #68]	; (8007f90 <RadioRx+0x78>)
 8007f4a:	f003 f99f 	bl	800b28c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8007f4e:	4810      	ldr	r0, [pc, #64]	; (8007f90 <RadioRx+0x78>)
 8007f50:	f003 f8be 	bl	800b0d0 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8007f54:	4b0f      	ldr	r3, [pc, #60]	; (8007f94 <RadioRx+0x7c>)
 8007f56:	2200      	movs	r2, #0
 8007f58:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8007f5a:	4b0e      	ldr	r3, [pc, #56]	; (8007f94 <RadioRx+0x7c>)
 8007f5c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007f60:	2100      	movs	r1, #0
 8007f62:	4618      	mov	r0, r3
 8007f64:	f002 f8a8 	bl	800a0b8 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8007f68:	4b0a      	ldr	r3, [pc, #40]	; (8007f94 <RadioRx+0x7c>)
 8007f6a:	785b      	ldrb	r3, [r3, #1]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d004      	beq.n	8007f7a <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8007f70:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007f74:	f001 fa68 	bl	8009448 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8007f78:	e005      	b.n	8007f86 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8007f7a:	4b06      	ldr	r3, [pc, #24]	; (8007f94 <RadioRx+0x7c>)
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	019b      	lsls	r3, r3, #6
 8007f80:	4618      	mov	r0, r3
 8007f82:	f001 fa61 	bl	8009448 <SUBGRF_SetRx>
}
 8007f86:	bf00      	nop
 8007f88:	3708      	adds	r7, #8
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	200002f8 	.word	0x200002f8
 8007f94:	20000284 	.word	0x20000284

08007f98 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init() )
 8007fa0:	f002 fa73 	bl	800a48a <RFW_Is_Init>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d102      	bne.n	8007fb0 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8007faa:	f002 fa96 	bl	800a4da <RFW_ReceiveInit>
 8007fae:	e007      	b.n	8007fc0 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f240 2162 	movw	r1, #610	; 0x262
 8007fb8:	f240 2062 	movw	r0, #610	; 0x262
 8007fbc:	f001 fbd8 	bl	8009770 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d006      	beq.n	8007fd4 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8007fc6:	6879      	ldr	r1, [r7, #4]
 8007fc8:	4811      	ldr	r0, [pc, #68]	; (8008010 <RadioRxBoosted+0x78>)
 8007fca:	f003 f95f 	bl	800b28c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8007fce:	4810      	ldr	r0, [pc, #64]	; (8008010 <RadioRxBoosted+0x78>)
 8007fd0:	f003 f87e 	bl	800b0d0 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8007fd4:	4b0f      	ldr	r3, [pc, #60]	; (8008014 <RadioRxBoosted+0x7c>)
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8007fda:	4b0e      	ldr	r3, [pc, #56]	; (8008014 <RadioRxBoosted+0x7c>)
 8007fdc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f002 f868 	bl	800a0b8 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8007fe8:	4b0a      	ldr	r3, [pc, #40]	; (8008014 <RadioRxBoosted+0x7c>)
 8007fea:	785b      	ldrb	r3, [r3, #1]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d004      	beq.n	8007ffa <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8007ff0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007ff4:	f001 fa48 	bl	8009488 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8007ff8:	e005      	b.n	8008006 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8007ffa:	4b06      	ldr	r3, [pc, #24]	; (8008014 <RadioRxBoosted+0x7c>)
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	019b      	lsls	r3, r3, #6
 8008000:	4618      	mov	r0, r3
 8008002:	f001 fa41 	bl	8009488 <SUBGRF_SetRxBoosted>
}
 8008006:	bf00      	nop
 8008008:	3708      	adds	r7, #8
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	200002f8 	.word	0x200002f8
 8008014:	20000284 	.word	0x20000284

08008018 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	005a      	lsls	r2, r3, #1
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	4413      	add	r3, r2
 800802a:	4a0c      	ldr	r2, [pc, #48]	; (800805c <RadioSetRxDutyCycle+0x44>)
 800802c:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800802e:	2300      	movs	r3, #0
 8008030:	2200      	movs	r2, #0
 8008032:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008036:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800803a:	f001 fb99 	bl	8009770 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800803e:	4b07      	ldr	r3, [pc, #28]	; (800805c <RadioSetRxDutyCycle+0x44>)
 8008040:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008044:	2100      	movs	r1, #0
 8008046:	4618      	mov	r0, r3
 8008048:	f002 f836 	bl	800a0b8 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800804c:	6839      	ldr	r1, [r7, #0]
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f001 fa3e 	bl	80094d0 <SUBGRF_SetRxDutyCycle>
}
 8008054:	bf00      	nop
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}
 800805c:	20000284 	.word	0x20000284

08008060 <RadioStartCad>:

static void RadioStartCad( void )
{
 8008060:	b580      	push	{r7, lr}
 8008062:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008064:	4b09      	ldr	r3, [pc, #36]	; (800808c <RadioStartCad+0x2c>)
 8008066:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800806a:	2100      	movs	r1, #0
 800806c:	4618      	mov	r0, r3
 800806e:	f002 f823 	bl	800a0b8 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8008072:	2300      	movs	r3, #0
 8008074:	2200      	movs	r2, #0
 8008076:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800807a:	f44f 70c0 	mov.w	r0, #384	; 0x180
 800807e:	f001 fb77 	bl	8009770 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8008082:	f001 fa51 	bl	8009528 <SUBGRF_SetCad>
}
 8008086:	bf00      	nop
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	20000284 	.word	0x20000284

08008090 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	460b      	mov	r3, r1
 800809a:	70fb      	strb	r3, [r7, #3]
 800809c:	4613      	mov	r3, r2
 800809e:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 80080a0:	883b      	ldrh	r3, [r7, #0]
 80080a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80080a6:	fb02 f303 	mul.w	r3, r2, r3
 80080aa:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f001 fbbb 	bl	8009828 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 80080b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80080b6:	4618      	mov	r0, r3
 80080b8:	f002 f826 	bl	800a108 <SUBGRF_SetRfTxPower>
 80080bc:	4603      	mov	r3, r0
 80080be:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 80080c0:	7afb      	ldrb	r3, [r7, #11]
 80080c2:	2101      	movs	r1, #1
 80080c4:	4618      	mov	r0, r3
 80080c6:	f001 fff7 	bl	800a0b8 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 80080ca:	f001 fa3b 	bl	8009544 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 80080ce:	68f9      	ldr	r1, [r7, #12]
 80080d0:	4804      	ldr	r0, [pc, #16]	; (80080e4 <RadioSetTxContinuousWave+0x54>)
 80080d2:	f003 f8db 	bl	800b28c <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80080d6:	4803      	ldr	r0, [pc, #12]	; (80080e4 <RadioSetTxContinuousWave+0x54>)
 80080d8:	f002 fffa 	bl	800b0d0 <UTIL_TIMER_Start>
}
 80080dc:	bf00      	nop
 80080de:	3710      	adds	r7, #16
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	200002e0 	.word	0x200002e0

080080e8 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	4603      	mov	r3, r0
 80080f0:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 80080f2:	f001 fe5a 	bl	8009daa <SUBGRF_GetRssiInst>
 80080f6:	4603      	mov	r3, r0
 80080f8:	b21b      	sxth	r3, r3
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3708      	adds	r7, #8
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b082      	sub	sp, #8
 8008106:	af00      	add	r7, sp, #0
 8008108:	4603      	mov	r3, r0
 800810a:	460a      	mov	r2, r1
 800810c:	80fb      	strh	r3, [r7, #6]
 800810e:	4613      	mov	r3, r2
 8008110:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8008112:	797a      	ldrb	r2, [r7, #5]
 8008114:	88fb      	ldrh	r3, [r7, #6]
 8008116:	4611      	mov	r1, r2
 8008118:	4618      	mov	r0, r3
 800811a:	f001 fed9 	bl	8009ed0 <SUBGRF_WriteRegister>
}
 800811e:	bf00      	nop
 8008120:	3708      	adds	r7, #8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b082      	sub	sp, #8
 800812a:	af00      	add	r7, sp, #0
 800812c:	4603      	mov	r3, r0
 800812e:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8008130:	88fb      	ldrh	r3, [r7, #6]
 8008132:	4618      	mov	r0, r3
 8008134:	f001 fee0 	bl	8009ef8 <SUBGRF_ReadRegister>
 8008138:	4603      	mov	r3, r0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3708      	adds	r7, #8
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b082      	sub	sp, #8
 8008146:	af00      	add	r7, sp, #0
 8008148:	4603      	mov	r3, r0
 800814a:	6039      	str	r1, [r7, #0]
 800814c:	80fb      	strh	r3, [r7, #6]
 800814e:	4613      	mov	r3, r2
 8008150:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8008152:	797b      	ldrb	r3, [r7, #5]
 8008154:	b29a      	uxth	r2, r3
 8008156:	88fb      	ldrh	r3, [r7, #6]
 8008158:	6839      	ldr	r1, [r7, #0]
 800815a:	4618      	mov	r0, r3
 800815c:	f001 fee0 	bl	8009f20 <SUBGRF_WriteRegisters>
}
 8008160:	bf00      	nop
 8008162:	3708      	adds	r7, #8
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	4603      	mov	r3, r0
 8008170:	6039      	str	r1, [r7, #0]
 8008172:	80fb      	strh	r3, [r7, #6]
 8008174:	4613      	mov	r3, r2
 8008176:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8008178:	797b      	ldrb	r3, [r7, #5]
 800817a:	b29a      	uxth	r2, r3
 800817c:	88fb      	ldrh	r3, [r7, #6]
 800817e:	6839      	ldr	r1, [r7, #0]
 8008180:	4618      	mov	r0, r3
 8008182:	f001 feef 	bl	8009f64 <SUBGRF_ReadRegisters>
}
 8008186:	bf00      	nop
 8008188:	3708      	adds	r7, #8
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
	...

08008190 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	4603      	mov	r3, r0
 8008198:	460a      	mov	r2, r1
 800819a:	71fb      	strb	r3, [r7, #7]
 800819c:	4613      	mov	r3, r2
 800819e:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 80081a0:	79fb      	ldrb	r3, [r7, #7]
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d10a      	bne.n	80081bc <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 80081a6:	4a0e      	ldr	r2, [pc, #56]	; (80081e0 <RadioSetMaxPayloadLength+0x50>)
 80081a8:	79bb      	ldrb	r3, [r7, #6]
 80081aa:	7013      	strb	r3, [r2, #0]
 80081ac:	4b0c      	ldr	r3, [pc, #48]	; (80081e0 <RadioSetMaxPayloadLength+0x50>)
 80081ae:	781a      	ldrb	r2, [r3, #0]
 80081b0:	4b0c      	ldr	r3, [pc, #48]	; (80081e4 <RadioSetMaxPayloadLength+0x54>)
 80081b2:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80081b4:	480c      	ldr	r0, [pc, #48]	; (80081e8 <RadioSetMaxPayloadLength+0x58>)
 80081b6:	f001 fd43 	bl	8009c40 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 80081ba:	e00d      	b.n	80081d8 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80081bc:	4b09      	ldr	r3, [pc, #36]	; (80081e4 <RadioSetMaxPayloadLength+0x54>)
 80081be:	7d5b      	ldrb	r3, [r3, #21]
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d109      	bne.n	80081d8 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80081c4:	4a06      	ldr	r2, [pc, #24]	; (80081e0 <RadioSetMaxPayloadLength+0x50>)
 80081c6:	79bb      	ldrb	r3, [r7, #6]
 80081c8:	7013      	strb	r3, [r2, #0]
 80081ca:	4b05      	ldr	r3, [pc, #20]	; (80081e0 <RadioSetMaxPayloadLength+0x50>)
 80081cc:	781a      	ldrb	r2, [r3, #0]
 80081ce:	4b05      	ldr	r3, [pc, #20]	; (80081e4 <RadioSetMaxPayloadLength+0x54>)
 80081d0:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80081d2:	4805      	ldr	r0, [pc, #20]	; (80081e8 <RadioSetMaxPayloadLength+0x58>)
 80081d4:	f001 fd34 	bl	8009c40 <SUBGRF_SetPacketParams>
}
 80081d8:	bf00      	nop
 80081da:	3708      	adds	r7, #8
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	20000008 	.word	0x20000008
 80081e4:	20000284 	.word	0x20000284
 80081e8:	20000292 	.word	0x20000292

080081ec <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	4603      	mov	r3, r0
 80081f4:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80081f6:	4a13      	ldr	r2, [pc, #76]	; (8008244 <RadioSetPublicNetwork+0x58>)
 80081f8:	79fb      	ldrb	r3, [r7, #7]
 80081fa:	7313      	strb	r3, [r2, #12]
 80081fc:	4b11      	ldr	r3, [pc, #68]	; (8008244 <RadioSetPublicNetwork+0x58>)
 80081fe:	7b1a      	ldrb	r2, [r3, #12]
 8008200:	4b10      	ldr	r3, [pc, #64]	; (8008244 <RadioSetPublicNetwork+0x58>)
 8008202:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8008204:	2001      	movs	r0, #1
 8008206:	f7ff f82d 	bl	8007264 <RadioSetModem>
    if( enable == true )
 800820a:	79fb      	ldrb	r3, [r7, #7]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00a      	beq.n	8008226 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8008210:	2134      	movs	r1, #52	; 0x34
 8008212:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8008216:	f001 fe5b 	bl	8009ed0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800821a:	2144      	movs	r1, #68	; 0x44
 800821c:	f240 7041 	movw	r0, #1857	; 0x741
 8008220:	f001 fe56 	bl	8009ed0 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8008224:	e009      	b.n	800823a <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8008226:	2114      	movs	r1, #20
 8008228:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800822c:	f001 fe50 	bl	8009ed0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8008230:	2124      	movs	r1, #36	; 0x24
 8008232:	f240 7041 	movw	r0, #1857	; 0x741
 8008236:	f001 fe4b 	bl	8009ed0 <SUBGRF_WriteRegister>
}
 800823a:	bf00      	nop
 800823c:	3708      	adds	r7, #8
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	20000284 	.word	0x20000284

08008248 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8008248:	b580      	push	{r7, lr}
 800824a:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800824c:	f001 ff90 	bl	800a170 <SUBGRF_GetRadioWakeUpTime>
 8008250:	4603      	mov	r3, r0
 8008252:	3303      	adds	r3, #3
}
 8008254:	4618      	mov	r0, r3
 8008256:	bd80      	pop	{r7, pc}

08008258 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8008260:	f000 f80e 	bl	8008280 <RadioOnTxTimeoutProcess>
}
 8008264:	bf00      	nop
 8008266:	3708      	adds	r7, #8
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8008274:	f000 f818 	bl	80082a8 <RadioOnRxTimeoutProcess>
}
 8008278:	bf00      	nop
 800827a:	3708      	adds	r7, #8
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8008280:	b580      	push	{r7, lr}
 8008282:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8008284:	4b07      	ldr	r3, [pc, #28]	; (80082a4 <RadioOnTxTimeoutProcess+0x24>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d008      	beq.n	800829e <RadioOnTxTimeoutProcess+0x1e>
 800828c:	4b05      	ldr	r3, [pc, #20]	; (80082a4 <RadioOnTxTimeoutProcess+0x24>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d003      	beq.n	800829e <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8008296:	4b03      	ldr	r3, [pc, #12]	; (80082a4 <RadioOnTxTimeoutProcess+0x24>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	4798      	blx	r3
    }
}
 800829e:	bf00      	nop
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	20000280 	.word	0x20000280

080082a8 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80082ac:	4b07      	ldr	r3, [pc, #28]	; (80082cc <RadioOnRxTimeoutProcess+0x24>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d008      	beq.n	80082c6 <RadioOnRxTimeoutProcess+0x1e>
 80082b4:	4b05      	ldr	r3, [pc, #20]	; (80082cc <RadioOnRxTimeoutProcess+0x24>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	68db      	ldr	r3, [r3, #12]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d003      	beq.n	80082c6 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 80082be:	4b03      	ldr	r3, [pc, #12]	; (80082cc <RadioOnRxTimeoutProcess+0x24>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	4798      	blx	r3
    }
}
 80082c6:	bf00      	nop
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	20000280 	.word	0x20000280

080082d0 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	4603      	mov	r3, r0
 80082d8:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 80082da:	4a05      	ldr	r2, [pc, #20]	; (80082f0 <RadioOnDioIrq+0x20>)
 80082dc:	88fb      	ldrh	r3, [r7, #6]
 80082de:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 80082e2:	f000 f807 	bl	80082f4 <RadioIrqProcess>
}
 80082e6:	bf00      	nop
 80082e8:	3708      	adds	r7, #8
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	20000284 	.word	0x20000284

080082f4 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 80082f4:	b590      	push	{r4, r7, lr}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 80082fa:	2300      	movs	r3, #0
 80082fc:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 80082fe:	2300      	movs	r3, #0
 8008300:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8008302:	4ba8      	ldr	r3, [pc, #672]	; (80085a4 <RadioIrqProcess+0x2b0>)
 8008304:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800830c:	f000 810c 	beq.w	8008528 <RadioIrqProcess+0x234>
 8008310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008314:	f300 81e8 	bgt.w	80086e8 <RadioIrqProcess+0x3f4>
 8008318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800831c:	f000 80f0 	beq.w	8008500 <RadioIrqProcess+0x20c>
 8008320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008324:	f300 81e0 	bgt.w	80086e8 <RadioIrqProcess+0x3f4>
 8008328:	2b80      	cmp	r3, #128	; 0x80
 800832a:	f000 80d5 	beq.w	80084d8 <RadioIrqProcess+0x1e4>
 800832e:	2b80      	cmp	r3, #128	; 0x80
 8008330:	f300 81da 	bgt.w	80086e8 <RadioIrqProcess+0x3f4>
 8008334:	2b20      	cmp	r3, #32
 8008336:	dc49      	bgt.n	80083cc <RadioIrqProcess+0xd8>
 8008338:	2b00      	cmp	r3, #0
 800833a:	f340 81d5 	ble.w	80086e8 <RadioIrqProcess+0x3f4>
 800833e:	3b01      	subs	r3, #1
 8008340:	2b1f      	cmp	r3, #31
 8008342:	f200 81d1 	bhi.w	80086e8 <RadioIrqProcess+0x3f4>
 8008346:	a201      	add	r2, pc, #4	; (adr r2, 800834c <RadioIrqProcess+0x58>)
 8008348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800834c:	080083d5 	.word	0x080083d5
 8008350:	0800840f 	.word	0x0800840f
 8008354:	080086e9 	.word	0x080086e9
 8008358:	080085c5 	.word	0x080085c5
 800835c:	080086e9 	.word	0x080086e9
 8008360:	080086e9 	.word	0x080086e9
 8008364:	080086e9 	.word	0x080086e9
 8008368:	08008641 	.word	0x08008641
 800836c:	080086e9 	.word	0x080086e9
 8008370:	080086e9 	.word	0x080086e9
 8008374:	080086e9 	.word	0x080086e9
 8008378:	080086e9 	.word	0x080086e9
 800837c:	080086e9 	.word	0x080086e9
 8008380:	080086e9 	.word	0x080086e9
 8008384:	080086e9 	.word	0x080086e9
 8008388:	0800865d 	.word	0x0800865d
 800838c:	080086e9 	.word	0x080086e9
 8008390:	080086e9 	.word	0x080086e9
 8008394:	080086e9 	.word	0x080086e9
 8008398:	080086e9 	.word	0x080086e9
 800839c:	080086e9 	.word	0x080086e9
 80083a0:	080086e9 	.word	0x080086e9
 80083a4:	080086e9 	.word	0x080086e9
 80083a8:	080086e9 	.word	0x080086e9
 80083ac:	080086e9 	.word	0x080086e9
 80083b0:	080086e9 	.word	0x080086e9
 80083b4:	080086e9 	.word	0x080086e9
 80083b8:	080086e9 	.word	0x080086e9
 80083bc:	080086e9 	.word	0x080086e9
 80083c0:	080086e9 	.word	0x080086e9
 80083c4:	080086e9 	.word	0x080086e9
 80083c8:	0800866b 	.word	0x0800866b
 80083cc:	2b40      	cmp	r3, #64	; 0x40
 80083ce:	f000 816d 	beq.w	80086ac <RadioIrqProcess+0x3b8>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 80083d2:	e189      	b.n	80086e8 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 80083d4:	4874      	ldr	r0, [pc, #464]	; (80085a8 <RadioIrqProcess+0x2b4>)
 80083d6:	f002 fee9 	bl	800b1ac <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80083da:	2000      	movs	r0, #0
 80083dc:	f000 fff8 	bl	80093d0 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80083e0:	f002 f85a 	bl	800a498 <RFW_Is_LongPacketModeEnabled>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d101      	bne.n	80083ee <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 80083ea:	f002 f87e 	bl	800a4ea <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80083ee:	4b6f      	ldr	r3, [pc, #444]	; (80085ac <RadioIrqProcess+0x2b8>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f000 817a 	beq.w	80086ec <RadioIrqProcess+0x3f8>
 80083f8:	4b6c      	ldr	r3, [pc, #432]	; (80085ac <RadioIrqProcess+0x2b8>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	f000 8174 	beq.w	80086ec <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 8008404:	4b69      	ldr	r3, [pc, #420]	; (80085ac <RadioIrqProcess+0x2b8>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4798      	blx	r3
        break;
 800840c:	e16e      	b.n	80086ec <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 800840e:	4868      	ldr	r0, [pc, #416]	; (80085b0 <RadioIrqProcess+0x2bc>)
 8008410:	f002 fecc 	bl	800b1ac <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8008414:	4b63      	ldr	r3, [pc, #396]	; (80085a4 <RadioIrqProcess+0x2b0>)
 8008416:	785b      	ldrb	r3, [r3, #1]
 8008418:	f083 0301 	eor.w	r3, r3, #1
 800841c:	b2db      	uxtb	r3, r3
 800841e:	2b00      	cmp	r3, #0
 8008420:	d014      	beq.n	800844c <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8008422:	2000      	movs	r0, #0
 8008424:	f000 ffd4 	bl	80093d0 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8008428:	2100      	movs	r1, #0
 800842a:	f640 1002 	movw	r0, #2306	; 0x902
 800842e:	f001 fd4f 	bl	8009ed0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8008432:	f640 1044 	movw	r0, #2372	; 0x944
 8008436:	f001 fd5f 	bl	8009ef8 <SUBGRF_ReadRegister>
 800843a:	4603      	mov	r3, r0
 800843c:	f043 0302 	orr.w	r3, r3, #2
 8008440:	b2db      	uxtb	r3, r3
 8008442:	4619      	mov	r1, r3
 8008444:	f640 1044 	movw	r0, #2372	; 0x944
 8008448:	f001 fd42 	bl	8009ed0 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 800844c:	1dfb      	adds	r3, r7, #7
 800844e:	22ff      	movs	r2, #255	; 0xff
 8008450:	4619      	mov	r1, r3
 8008452:	4858      	ldr	r0, [pc, #352]	; (80085b4 <RadioIrqProcess+0x2c0>)
 8008454:	f000 fe8c 	bl	8009170 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8008458:	4857      	ldr	r0, [pc, #348]	; (80085b8 <RadioIrqProcess+0x2c4>)
 800845a:	f001 fce7 	bl	8009e2c <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800845e:	4b53      	ldr	r3, [pc, #332]	; (80085ac <RadioIrqProcess+0x2b8>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d036      	beq.n	80084d4 <RadioIrqProcess+0x1e0>
 8008466:	4b51      	ldr	r3, [pc, #324]	; (80085ac <RadioIrqProcess+0x2b8>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d031      	beq.n	80084d4 <RadioIrqProcess+0x1e0>
            switch( SubgRf.PacketStatus.packetType )
 8008470:	4b4c      	ldr	r3, [pc, #304]	; (80085a4 <RadioIrqProcess+0x2b0>)
 8008472:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008476:	2b01      	cmp	r3, #1
 8008478:	d10e      	bne.n	8008498 <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 800847a:	4b4c      	ldr	r3, [pc, #304]	; (80085ac <RadioIrqProcess+0x2b8>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	689c      	ldr	r4, [r3, #8]
 8008480:	79fb      	ldrb	r3, [r7, #7]
 8008482:	b299      	uxth	r1, r3
 8008484:	4b47      	ldr	r3, [pc, #284]	; (80085a4 <RadioIrqProcess+0x2b0>)
 8008486:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 800848a:	b21a      	sxth	r2, r3
 800848c:	4b45      	ldr	r3, [pc, #276]	; (80085a4 <RadioIrqProcess+0x2b0>)
 800848e:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8008492:	4848      	ldr	r0, [pc, #288]	; (80085b4 <RadioIrqProcess+0x2c0>)
 8008494:	47a0      	blx	r4
                break;
 8008496:	e01e      	b.n	80084d6 <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8008498:	4b42      	ldr	r3, [pc, #264]	; (80085a4 <RadioIrqProcess+0x2b0>)
 800849a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800849c:	463a      	mov	r2, r7
 800849e:	4611      	mov	r1, r2
 80084a0:	4618      	mov	r0, r3
 80084a2:	f001 ff47 	bl	800a334 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 80084a6:	4b41      	ldr	r3, [pc, #260]	; (80085ac <RadioIrqProcess+0x2b8>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	689c      	ldr	r4, [r3, #8]
 80084ac:	79fb      	ldrb	r3, [r7, #7]
 80084ae:	b299      	uxth	r1, r3
 80084b0:	4b3c      	ldr	r3, [pc, #240]	; (80085a4 <RadioIrqProcess+0x2b0>)
 80084b2:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 80084b6:	b218      	sxth	r0, r3
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80084be:	4a3f      	ldr	r2, [pc, #252]	; (80085bc <RadioIrqProcess+0x2c8>)
 80084c0:	fb82 c203 	smull	ip, r2, r2, r3
 80084c4:	1192      	asrs	r2, r2, #6
 80084c6:	17db      	asrs	r3, r3, #31
 80084c8:	1ad3      	subs	r3, r2, r3
 80084ca:	b25b      	sxtb	r3, r3
 80084cc:	4602      	mov	r2, r0
 80084ce:	4839      	ldr	r0, [pc, #228]	; (80085b4 <RadioIrqProcess+0x2c0>)
 80084d0:	47a0      	blx	r4
                break;
 80084d2:	e000      	b.n	80084d6 <RadioIrqProcess+0x1e2>
        }
 80084d4:	bf00      	nop
        break;
 80084d6:	e118      	b.n	800870a <RadioIrqProcess+0x416>
        SUBGRF_SetStandby( STDBY_RC );
 80084d8:	2000      	movs	r0, #0
 80084da:	f000 ff79 	bl	80093d0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80084de:	4b33      	ldr	r3, [pc, #204]	; (80085ac <RadioIrqProcess+0x2b8>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	f000 8104 	beq.w	80086f0 <RadioIrqProcess+0x3fc>
 80084e8:	4b30      	ldr	r3, [pc, #192]	; (80085ac <RadioIrqProcess+0x2b8>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	699b      	ldr	r3, [r3, #24]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	f000 80fe 	beq.w	80086f0 <RadioIrqProcess+0x3fc>
            RadioEvents->CadDone( false );
 80084f4:	4b2d      	ldr	r3, [pc, #180]	; (80085ac <RadioIrqProcess+0x2b8>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	2000      	movs	r0, #0
 80084fc:	4798      	blx	r3
        break;
 80084fe:	e0f7      	b.n	80086f0 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 8008500:	2000      	movs	r0, #0
 8008502:	f000 ff65 	bl	80093d0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8008506:	4b29      	ldr	r3, [pc, #164]	; (80085ac <RadioIrqProcess+0x2b8>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2b00      	cmp	r3, #0
 800850c:	f000 80f2 	beq.w	80086f4 <RadioIrqProcess+0x400>
 8008510:	4b26      	ldr	r3, [pc, #152]	; (80085ac <RadioIrqProcess+0x2b8>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	699b      	ldr	r3, [r3, #24]
 8008516:	2b00      	cmp	r3, #0
 8008518:	f000 80ec 	beq.w	80086f4 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( true );
 800851c:	4b23      	ldr	r3, [pc, #140]	; (80085ac <RadioIrqProcess+0x2b8>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	699b      	ldr	r3, [r3, #24]
 8008522:	2001      	movs	r0, #1
 8008524:	4798      	blx	r3
        break;
 8008526:	e0e5      	b.n	80086f4 <RadioIrqProcess+0x400>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8008528:	4b25      	ldr	r3, [pc, #148]	; (80085c0 <RadioIrqProcess+0x2cc>)
 800852a:	2201      	movs	r2, #1
 800852c:	2100      	movs	r1, #0
 800852e:	2002      	movs	r0, #2
 8008530:	f003 f834 	bl	800b59c <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8008534:	f000 fe02 	bl	800913c <SUBGRF_GetOperatingMode>
 8008538:	4603      	mov	r3, r0
 800853a:	2b04      	cmp	r3, #4
 800853c:	d115      	bne.n	800856a <RadioIrqProcess+0x276>
            TimerStop( &TxTimeoutTimer );
 800853e:	481a      	ldr	r0, [pc, #104]	; (80085a8 <RadioIrqProcess+0x2b4>)
 8008540:	f002 fe34 	bl	800b1ac <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8008544:	2000      	movs	r0, #0
 8008546:	f000 ff43 	bl	80093d0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800854a:	4b18      	ldr	r3, [pc, #96]	; (80085ac <RadioIrqProcess+0x2b8>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	f000 80d2 	beq.w	80086f8 <RadioIrqProcess+0x404>
 8008554:	4b15      	ldr	r3, [pc, #84]	; (80085ac <RadioIrqProcess+0x2b8>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	2b00      	cmp	r3, #0
 800855c:	f000 80cc 	beq.w	80086f8 <RadioIrqProcess+0x404>
                RadioEvents->TxTimeout( );
 8008560:	4b12      	ldr	r3, [pc, #72]	; (80085ac <RadioIrqProcess+0x2b8>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	4798      	blx	r3
        break;
 8008568:	e0c6      	b.n	80086f8 <RadioIrqProcess+0x404>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800856a:	f000 fde7 	bl	800913c <SUBGRF_GetOperatingMode>
 800856e:	4603      	mov	r3, r0
 8008570:	2b05      	cmp	r3, #5
 8008572:	f040 80c1 	bne.w	80086f8 <RadioIrqProcess+0x404>
            TimerStop( &RxTimeoutTimer );
 8008576:	480e      	ldr	r0, [pc, #56]	; (80085b0 <RadioIrqProcess+0x2bc>)
 8008578:	f002 fe18 	bl	800b1ac <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800857c:	2000      	movs	r0, #0
 800857e:	f000 ff27 	bl	80093d0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008582:	4b0a      	ldr	r3, [pc, #40]	; (80085ac <RadioIrqProcess+0x2b8>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	f000 80b6 	beq.w	80086f8 <RadioIrqProcess+0x404>
 800858c:	4b07      	ldr	r3, [pc, #28]	; (80085ac <RadioIrqProcess+0x2b8>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	68db      	ldr	r3, [r3, #12]
 8008592:	2b00      	cmp	r3, #0
 8008594:	f000 80b0 	beq.w	80086f8 <RadioIrqProcess+0x404>
                RadioEvents->RxTimeout( );
 8008598:	4b04      	ldr	r3, [pc, #16]	; (80085ac <RadioIrqProcess+0x2b8>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	4798      	blx	r3
        break;
 80085a0:	e0aa      	b.n	80086f8 <RadioIrqProcess+0x404>
 80085a2:	bf00      	nop
 80085a4:	20000284 	.word	0x20000284
 80085a8:	200002e0 	.word	0x200002e0
 80085ac:	20000280 	.word	0x20000280
 80085b0:	200002f8 	.word	0x200002f8
 80085b4:	20000180 	.word	0x20000180
 80085b8:	200002a8 	.word	0x200002a8
 80085bc:	10624dd3 	.word	0x10624dd3
 80085c0:	0800bb4c 	.word	0x0800bb4c
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 80085c4:	4b53      	ldr	r3, [pc, #332]	; (8008714 <RadioIrqProcess+0x420>)
 80085c6:	2201      	movs	r2, #1
 80085c8:	2100      	movs	r1, #0
 80085ca:	2002      	movs	r0, #2
 80085cc:	f002 ffe6 	bl	800b59c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 80085d0:	4b51      	ldr	r3, [pc, #324]	; (8008718 <RadioIrqProcess+0x424>)
 80085d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f000 8091 	beq.w	80086fc <RadioIrqProcess+0x408>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 80085da:	4a50      	ldr	r2, [pc, #320]	; (800871c <RadioIrqProcess+0x428>)
 80085dc:	4b4e      	ldr	r3, [pc, #312]	; (8008718 <RadioIrqProcess+0x424>)
 80085de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085e0:	0c1b      	lsrs	r3, r3, #16
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	4619      	mov	r1, r3
 80085e6:	f640 1003 	movw	r0, #2307	; 0x903
 80085ea:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 80085ec:	4a4b      	ldr	r2, [pc, #300]	; (800871c <RadioIrqProcess+0x428>)
 80085ee:	4b4a      	ldr	r3, [pc, #296]	; (8008718 <RadioIrqProcess+0x424>)
 80085f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085f2:	0a1b      	lsrs	r3, r3, #8
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	4619      	mov	r1, r3
 80085f8:	f640 1004 	movw	r0, #2308	; 0x904
 80085fc:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 80085fe:	4a47      	ldr	r2, [pc, #284]	; (800871c <RadioIrqProcess+0x428>)
 8008600:	4b45      	ldr	r3, [pc, #276]	; (8008718 <RadioIrqProcess+0x424>)
 8008602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008604:	b2db      	uxtb	r3, r3
 8008606:	4619      	mov	r1, r3
 8008608:	f640 1005 	movw	r0, #2309	; 0x905
 800860c:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 800860e:	4c43      	ldr	r4, [pc, #268]	; (800871c <RadioIrqProcess+0x428>)
 8008610:	4b43      	ldr	r3, [pc, #268]	; (8008720 <RadioIrqProcess+0x42c>)
 8008612:	f640 1002 	movw	r0, #2306	; 0x902
 8008616:	4798      	blx	r3
 8008618:	4603      	mov	r3, r0
 800861a:	f043 0301 	orr.w	r3, r3, #1
 800861e:	b2db      	uxtb	r3, r3
 8008620:	4619      	mov	r1, r3
 8008622:	f640 1002 	movw	r0, #2306	; 0x902
 8008626:	47a0      	blx	r4
          SubgRf.RxDcPreambleDetectTimeout = 0;
 8008628:	4b3b      	ldr	r3, [pc, #236]	; (8008718 <RadioIrqProcess+0x424>)
 800862a:	2200      	movs	r2, #0
 800862c:	659a      	str	r2, [r3, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800862e:	2300      	movs	r3, #0
 8008630:	2200      	movs	r2, #0
 8008632:	f240 2162 	movw	r1, #610	; 0x262
 8008636:	f240 2062 	movw	r0, #610	; 0x262
 800863a:	f001 f899 	bl	8009770 <SUBGRF_SetDioIrqParams>
        break;
 800863e:	e05d      	b.n	80086fc <RadioIrqProcess+0x408>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8008640:	4b38      	ldr	r3, [pc, #224]	; (8008724 <RadioIrqProcess+0x430>)
 8008642:	2201      	movs	r2, #1
 8008644:	2100      	movs	r1, #0
 8008646:	2002      	movs	r0, #2
 8008648:	f002 ffa8 	bl	800b59c <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 800864c:	f001 ff1d 	bl	800a48a <RFW_Is_Init>
 8008650:	4603      	mov	r3, r0
 8008652:	2b01      	cmp	r3, #1
 8008654:	d154      	bne.n	8008700 <RadioIrqProcess+0x40c>
            RFW_ReceivePayload( );
 8008656:	f001 ff4e 	bl	800a4f6 <RFW_ReceivePayload>
        break;
 800865a:	e051      	b.n	8008700 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 800865c:	4b32      	ldr	r3, [pc, #200]	; (8008728 <RadioIrqProcess+0x434>)
 800865e:	2201      	movs	r2, #1
 8008660:	2100      	movs	r1, #0
 8008662:	2002      	movs	r0, #2
 8008664:	f002 ff9a 	bl	800b59c <UTIL_ADV_TRACE_COND_FSend>
        break;
 8008668:	e04f      	b.n	800870a <RadioIrqProcess+0x416>
        TimerStop( &RxTimeoutTimer );
 800866a:	4830      	ldr	r0, [pc, #192]	; (800872c <RadioIrqProcess+0x438>)
 800866c:	f002 fd9e 	bl	800b1ac <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8008670:	4b29      	ldr	r3, [pc, #164]	; (8008718 <RadioIrqProcess+0x424>)
 8008672:	785b      	ldrb	r3, [r3, #1]
 8008674:	f083 0301 	eor.w	r3, r3, #1
 8008678:	b2db      	uxtb	r3, r3
 800867a:	2b00      	cmp	r3, #0
 800867c:	d002      	beq.n	8008684 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 800867e:	2000      	movs	r0, #0
 8008680:	f000 fea6 	bl	80093d0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008684:	4b2a      	ldr	r3, [pc, #168]	; (8008730 <RadioIrqProcess+0x43c>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d03b      	beq.n	8008704 <RadioIrqProcess+0x410>
 800868c:	4b28      	ldr	r3, [pc, #160]	; (8008730 <RadioIrqProcess+0x43c>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	68db      	ldr	r3, [r3, #12]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d036      	beq.n	8008704 <RadioIrqProcess+0x410>
            RadioEvents->RxTimeout( );
 8008696:	4b26      	ldr	r3, [pc, #152]	; (8008730 <RadioIrqProcess+0x43c>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 800869e:	4b25      	ldr	r3, [pc, #148]	; (8008734 <RadioIrqProcess+0x440>)
 80086a0:	2201      	movs	r2, #1
 80086a2:	2100      	movs	r1, #0
 80086a4:	2002      	movs	r0, #2
 80086a6:	f002 ff79 	bl	800b59c <UTIL_ADV_TRACE_COND_FSend>
        break;
 80086aa:	e02b      	b.n	8008704 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 80086ac:	4b22      	ldr	r3, [pc, #136]	; (8008738 <RadioIrqProcess+0x444>)
 80086ae:	2201      	movs	r2, #1
 80086b0:	2100      	movs	r1, #0
 80086b2:	2002      	movs	r0, #2
 80086b4:	f002 ff72 	bl	800b59c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 80086b8:	4b17      	ldr	r3, [pc, #92]	; (8008718 <RadioIrqProcess+0x424>)
 80086ba:	785b      	ldrb	r3, [r3, #1]
 80086bc:	f083 0301 	eor.w	r3, r3, #1
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d002      	beq.n	80086cc <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 80086c6:	2000      	movs	r0, #0
 80086c8:	f000 fe82 	bl	80093d0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80086cc:	4b18      	ldr	r3, [pc, #96]	; (8008730 <RadioIrqProcess+0x43c>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d019      	beq.n	8008708 <RadioIrqProcess+0x414>
 80086d4:	4b16      	ldr	r3, [pc, #88]	; (8008730 <RadioIrqProcess+0x43c>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d014      	beq.n	8008708 <RadioIrqProcess+0x414>
            RadioEvents->RxError( );
 80086de:	4b14      	ldr	r3, [pc, #80]	; (8008730 <RadioIrqProcess+0x43c>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	4798      	blx	r3
        break;
 80086e6:	e00f      	b.n	8008708 <RadioIrqProcess+0x414>
        break;
 80086e8:	bf00      	nop
 80086ea:	e00e      	b.n	800870a <RadioIrqProcess+0x416>
        break;
 80086ec:	bf00      	nop
 80086ee:	e00c      	b.n	800870a <RadioIrqProcess+0x416>
        break;
 80086f0:	bf00      	nop
 80086f2:	e00a      	b.n	800870a <RadioIrqProcess+0x416>
        break;
 80086f4:	bf00      	nop
 80086f6:	e008      	b.n	800870a <RadioIrqProcess+0x416>
        break;
 80086f8:	bf00      	nop
 80086fa:	e006      	b.n	800870a <RadioIrqProcess+0x416>
        break;
 80086fc:	bf00      	nop
 80086fe:	e004      	b.n	800870a <RadioIrqProcess+0x416>
        break;
 8008700:	bf00      	nop
 8008702:	e002      	b.n	800870a <RadioIrqProcess+0x416>
        break;
 8008704:	bf00      	nop
 8008706:	e000      	b.n	800870a <RadioIrqProcess+0x416>
        break;
 8008708:	bf00      	nop
    }
}
 800870a:	bf00      	nop
 800870c:	370c      	adds	r7, #12
 800870e:	46bd      	mov	sp, r7
 8008710:	bd90      	pop	{r4, r7, pc}
 8008712:	bf00      	nop
 8008714:	0800bb60 	.word	0x0800bb60
 8008718:	20000284 	.word	0x20000284
 800871c:	08008103 	.word	0x08008103
 8008720:	08008127 	.word	0x08008127
 8008724:	0800bb6c 	.word	0x0800bb6c
 8008728:	0800bb78 	.word	0x0800bb78
 800872c:	200002f8 	.word	0x200002f8
 8008730:	20000280 	.word	0x20000280
 8008734:	0800bb84 	.word	0x0800bb84
 8008738:	0800bb90 	.word	0x0800bb90

0800873c <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 800873c:	b580      	push	{r7, lr}
 800873e:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8008740:	4b09      	ldr	r3, [pc, #36]	; (8008768 <RadioTxPrbs+0x2c>)
 8008742:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008746:	2101      	movs	r1, #1
 8008748:	4618      	mov	r0, r3
 800874a:	f001 fcb5 	bl	800a0b8 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 800874e:	4b07      	ldr	r3, [pc, #28]	; (800876c <RadioTxPrbs+0x30>)
 8008750:	212d      	movs	r1, #45	; 0x2d
 8008752:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8008756:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8008758:	f000 fefd 	bl	8009556 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800875c:	4804      	ldr	r0, [pc, #16]	; (8008770 <RadioTxPrbs+0x34>)
 800875e:	f000 fe53 	bl	8009408 <SUBGRF_SetTx>
}
 8008762:	bf00      	nop
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	20000284 	.word	0x20000284
 800876c:	08008103 	.word	0x08008103
 8008770:	000fffff 	.word	0x000fffff

08008774 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	4603      	mov	r3, r0
 800877c:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800877e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008782:	4618      	mov	r0, r3
 8008784:	f001 fcc0 	bl	800a108 <SUBGRF_SetRfTxPower>
 8008788:	4603      	mov	r3, r0
 800878a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800878c:	7bfb      	ldrb	r3, [r7, #15]
 800878e:	2101      	movs	r1, #1
 8008790:	4618      	mov	r0, r3
 8008792:	f001 fc91 	bl	800a0b8 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8008796:	f000 fed5 	bl	8009544 <SUBGRF_SetTxContinuousWave>
}
 800879a:	bf00      	nop
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 80087a2:	b480      	push	{r7}
 80087a4:	b089      	sub	sp, #36	; 0x24
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	60f8      	str	r0, [r7, #12]
 80087aa:	60b9      	str	r1, [r7, #8]
 80087ac:	4613      	mov	r3, r2
 80087ae:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 80087b0:	2300      	movs	r3, #0
 80087b2:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 80087b4:	2300      	movs	r3, #0
 80087b6:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 80087b8:	2300      	movs	r3, #0
 80087ba:	61bb      	str	r3, [r7, #24]
 80087bc:	e011      	b.n	80087e2 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	68ba      	ldr	r2, [r7, #8]
 80087c2:	4413      	add	r3, r2
 80087c4:	781a      	ldrb	r2, [r3, #0]
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	68b9      	ldr	r1, [r7, #8]
 80087ca:	440b      	add	r3, r1
 80087cc:	43d2      	mvns	r2, r2
 80087ce:	b2d2      	uxtb	r2, r2
 80087d0:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	68fa      	ldr	r2, [r7, #12]
 80087d6:	4413      	add	r3, r2
 80087d8:	2200      	movs	r2, #0
 80087da:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	3301      	adds	r3, #1
 80087e0:	61bb      	str	r3, [r7, #24]
 80087e2:	79fb      	ldrb	r3, [r7, #7]
 80087e4:	69ba      	ldr	r2, [r7, #24]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	dbe9      	blt.n	80087be <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 80087ea:	2300      	movs	r3, #0
 80087ec:	61bb      	str	r3, [r7, #24]
 80087ee:	e049      	b.n	8008884 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	425a      	negs	r2, r3
 80087f4:	f003 0307 	and.w	r3, r3, #7
 80087f8:	f002 0207 	and.w	r2, r2, #7
 80087fc:	bf58      	it	pl
 80087fe:	4253      	negpl	r3, r2
 8008800:	b2db      	uxtb	r3, r3
 8008802:	f1c3 0307 	rsb	r3, r3, #7
 8008806:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	2b00      	cmp	r3, #0
 800880c:	da00      	bge.n	8008810 <payload_integration+0x6e>
 800880e:	3307      	adds	r3, #7
 8008810:	10db      	asrs	r3, r3, #3
 8008812:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8008814:	69bb      	ldr	r3, [r7, #24]
 8008816:	3301      	adds	r3, #1
 8008818:	425a      	negs	r2, r3
 800881a:	f003 0307 	and.w	r3, r3, #7
 800881e:	f002 0207 	and.w	r2, r2, #7
 8008822:	bf58      	it	pl
 8008824:	4253      	negpl	r3, r2
 8008826:	b2db      	uxtb	r3, r3
 8008828:	f1c3 0307 	rsb	r3, r3, #7
 800882c:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	3301      	adds	r3, #1
 8008832:	2b00      	cmp	r3, #0
 8008834:	da00      	bge.n	8008838 <payload_integration+0x96>
 8008836:	3307      	adds	r3, #7
 8008838:	10db      	asrs	r3, r3, #3
 800883a:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800883c:	7dbb      	ldrb	r3, [r7, #22]
 800883e:	68ba      	ldr	r2, [r7, #8]
 8008840:	4413      	add	r3, r2
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	461a      	mov	r2, r3
 8008846:	7dfb      	ldrb	r3, [r7, #23]
 8008848:	fa42 f303 	asr.w	r3, r2, r3
 800884c:	b2db      	uxtb	r3, r3
 800884e:	f003 0301 	and.w	r3, r3, #1
 8008852:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8008854:	7ffa      	ldrb	r2, [r7, #31]
 8008856:	7cfb      	ldrb	r3, [r7, #19]
 8008858:	4053      	eors	r3, r2
 800885a:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800885c:	7d3b      	ldrb	r3, [r7, #20]
 800885e:	68fa      	ldr	r2, [r7, #12]
 8008860:	4413      	add	r3, r2
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	b25a      	sxtb	r2, r3
 8008866:	7ff9      	ldrb	r1, [r7, #31]
 8008868:	7d7b      	ldrb	r3, [r7, #21]
 800886a:	fa01 f303 	lsl.w	r3, r1, r3
 800886e:	b25b      	sxtb	r3, r3
 8008870:	4313      	orrs	r3, r2
 8008872:	b259      	sxtb	r1, r3
 8008874:	7d3b      	ldrb	r3, [r7, #20]
 8008876:	68fa      	ldr	r2, [r7, #12]
 8008878:	4413      	add	r3, r2
 800887a:	b2ca      	uxtb	r2, r1
 800887c:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	3301      	adds	r3, #1
 8008882:	61bb      	str	r3, [r7, #24]
 8008884:	79fb      	ldrb	r3, [r7, #7]
 8008886:	00db      	lsls	r3, r3, #3
 8008888:	69ba      	ldr	r2, [r7, #24]
 800888a:	429a      	cmp	r2, r3
 800888c:	dbb0      	blt.n	80087f0 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800888e:	7ffb      	ldrb	r3, [r7, #31]
 8008890:	01db      	lsls	r3, r3, #7
 8008892:	b25a      	sxtb	r2, r3
 8008894:	7ffb      	ldrb	r3, [r7, #31]
 8008896:	019b      	lsls	r3, r3, #6
 8008898:	b25b      	sxtb	r3, r3
 800889a:	4313      	orrs	r3, r2
 800889c:	b25b      	sxtb	r3, r3
 800889e:	7ffa      	ldrb	r2, [r7, #31]
 80088a0:	2a00      	cmp	r2, #0
 80088a2:	d101      	bne.n	80088a8 <payload_integration+0x106>
 80088a4:	2220      	movs	r2, #32
 80088a6:	e000      	b.n	80088aa <payload_integration+0x108>
 80088a8:	2200      	movs	r2, #0
 80088aa:	4313      	orrs	r3, r2
 80088ac:	b259      	sxtb	r1, r3
 80088ae:	79fb      	ldrb	r3, [r7, #7]
 80088b0:	68fa      	ldr	r2, [r7, #12]
 80088b2:	4413      	add	r3, r2
 80088b4:	b2ca      	uxtb	r2, r1
 80088b6:	701a      	strb	r2, [r3, #0]
}
 80088b8:	bf00      	nop
 80088ba:	3724      	adds	r7, #36	; 0x24
 80088bc:	46bd      	mov	sp, r7
 80088be:	bc80      	pop	{r7}
 80088c0:	4770      	bx	lr
	...

080088c4 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b08c      	sub	sp, #48	; 0x30
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60b9      	str	r1, [r7, #8]
 80088cc:	607a      	str	r2, [r7, #4]
 80088ce:	603b      	str	r3, [r7, #0]
 80088d0:	4603      	mov	r3, r0
 80088d2:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 80088d4:	2300      	movs	r3, #0
 80088d6:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 80088d8:	2300      	movs	r3, #0
 80088da:	623b      	str	r3, [r7, #32]
 80088dc:	2300      	movs	r3, #0
 80088de:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80088e0:	f001 fdcd 	bl	800a47e <RFW_DeInit>

    if( rxContinuous != 0 )
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d001      	beq.n	80088ee <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 80088ea:	2300      	movs	r3, #0
 80088ec:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	bf14      	ite	ne
 80088f4:	2301      	movne	r3, #1
 80088f6:	2300      	moveq	r3, #0
 80088f8:	b2da      	uxtb	r2, r3
 80088fa:	4ba3      	ldr	r3, [pc, #652]	; (8008b88 <RadioSetRxGenericConfig+0x2c4>)
 80088fc:	705a      	strb	r2, [r3, #1]

    switch( modem )
 80088fe:	7bfb      	ldrb	r3, [r7, #15]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d003      	beq.n	800890c <RadioSetRxGenericConfig+0x48>
 8008904:	2b01      	cmp	r3, #1
 8008906:	f000 80dc 	beq.w	8008ac2 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 800890a:	e194      	b.n	8008c36 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d003      	beq.n	800891c <RadioSetRxGenericConfig+0x58>
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d102      	bne.n	8008922 <RadioSetRxGenericConfig+0x5e>
            return -1;
 800891c:	f04f 33ff 	mov.w	r3, #4294967295
 8008920:	e18a      	b.n	8008c38 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	7f9b      	ldrb	r3, [r3, #30]
 8008926:	2b08      	cmp	r3, #8
 8008928:	d902      	bls.n	8008930 <RadioSetRxGenericConfig+0x6c>
            return -1;
 800892a:	f04f 33ff 	mov.w	r3, #4294967295
 800892e:	e183      	b.n	8008c38 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	6919      	ldr	r1, [r3, #16]
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	7f9b      	ldrb	r3, [r3, #30]
 8008938:	b29a      	uxth	r2, r3
 800893a:	f107 0320 	add.w	r3, r7, #32
 800893e:	4618      	mov	r0, r3
 8008940:	f001 ff28 	bl	800a794 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	bf14      	ite	ne
 800894c:	2301      	movne	r3, #1
 800894e:	2300      	moveq	r3, #0
 8008950:	b2db      	uxtb	r3, r3
 8008952:	4618      	mov	r0, r3
 8008954:	f000 fe08 	bl	8009568 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008958:	4b8b      	ldr	r3, [pc, #556]	; (8008b88 <RadioSetRxGenericConfig+0x2c4>)
 800895a:	2200      	movs	r2, #0
 800895c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	4a88      	ldr	r2, [pc, #544]	; (8008b88 <RadioSetRxGenericConfig+0x2c4>)
 8008966:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	f893 2020 	ldrb.w	r2, [r3, #32]
 800896e:	4b86      	ldr	r3, [pc, #536]	; (8008b88 <RadioSetRxGenericConfig+0x2c4>)
 8008970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	4618      	mov	r0, r3
 800897a:	f001 fcb3 	bl	800a2e4 <SUBGRF_GetFskBandwidthRegValue>
 800897e:	4603      	mov	r3, r0
 8008980:	461a      	mov	r2, r3
 8008982:	4b81      	ldr	r3, [pc, #516]	; (8008b88 <RadioSetRxGenericConfig+0x2c4>)
 8008984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008988:	4b7f      	ldr	r3, [pc, #508]	; (8008b88 <RadioSetRxGenericConfig+0x2c4>)
 800898a:	2200      	movs	r2, #0
 800898c:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	b29b      	uxth	r3, r3
 8008994:	00db      	lsls	r3, r3, #3
 8008996:	b29a      	uxth	r2, r3
 8008998:	4b7b      	ldr	r3, [pc, #492]	; (8008b88 <RadioSetRxGenericConfig+0x2c4>)
 800899a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	7fda      	ldrb	r2, [r3, #31]
 80089a0:	4b79      	ldr	r3, [pc, #484]	; (8008b88 <RadioSetRxGenericConfig+0x2c4>)
 80089a2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	7f9b      	ldrb	r3, [r3, #30]
 80089a8:	00db      	lsls	r3, r3, #3
 80089aa:	b2da      	uxtb	r2, r3
 80089ac:	4b76      	ldr	r3, [pc, #472]	; (8008b88 <RadioSetRxGenericConfig+0x2c4>)
 80089ae:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80089b6:	4b74      	ldr	r3, [pc, #464]	; (8008b88 <RadioSetRxGenericConfig+0x2c4>)
 80089b8:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d105      	bne.n	80089d0 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	695b      	ldr	r3, [r3, #20]
 80089c8:	b2da      	uxtb	r2, r3
 80089ca:	4b6f      	ldr	r3, [pc, #444]	; (8008b88 <RadioSetRxGenericConfig+0x2c4>)
 80089cc:	759a      	strb	r2, [r3, #22]
 80089ce:	e00b      	b.n	80089e8 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80089d6:	2b02      	cmp	r3, #2
 80089d8:	d103      	bne.n	80089e2 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80089da:	4b6b      	ldr	r3, [pc, #428]	; (8008b88 <RadioSetRxGenericConfig+0x2c4>)
 80089dc:	22ff      	movs	r2, #255	; 0xff
 80089de:	759a      	strb	r2, [r3, #22]
 80089e0:	e002      	b.n	80089e8 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80089e2:	4b69      	ldr	r3, [pc, #420]	; (8008b88 <RadioSetRxGenericConfig+0x2c4>)
 80089e4:	22ff      	movs	r2, #255	; 0xff
 80089e6:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	d004      	beq.n	80089fc <RadioSetRxGenericConfig+0x138>
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d12d      	bne.n	8008a58 <RadioSetRxGenericConfig+0x194>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008a02:	2bf1      	cmp	r3, #241	; 0xf1
 8008a04:	d00c      	beq.n	8008a20 <RadioSetRxGenericConfig+0x15c>
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008a0c:	2bf2      	cmp	r3, #242	; 0xf2
 8008a0e:	d007      	beq.n	8008a20 <RadioSetRxGenericConfig+0x15c>
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d002      	beq.n	8008a20 <RadioSetRxGenericConfig+0x15c>
            return -1;
 8008a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8008a1e:	e10b      	b.n	8008c38 <RadioSetRxGenericConfig+0x374>
          ConfigGeneric.rtx = CONFIG_RX;
 8008a20:	2300      	movs	r3, #0
 8008a22:	773b      	strb	r3, [r7, #28]
          ConfigGeneric.RxConfig = config;
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	61bb      	str	r3, [r7, #24]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8008a28:	4b58      	ldr	r3, [pc, #352]	; (8008b8c <RadioSetRxGenericConfig+0x2c8>)
 8008a2a:	6819      	ldr	r1, [r3, #0]
 8008a2c:	f107 0314 	add.w	r3, r7, #20
 8008a30:	4a57      	ldr	r2, [pc, #348]	; (8008b90 <RadioSetRxGenericConfig+0x2cc>)
 8008a32:	4618      	mov	r0, r3
 8008a34:	f001 fd16 	bl	800a464 <RFW_Init>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d002      	beq.n	8008a44 <RadioSetRxGenericConfig+0x180>
            return -1;
 8008a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a42:	e0f9      	b.n	8008c38 <RadioSetRxGenericConfig+0x374>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8008a44:	4b50      	ldr	r3, [pc, #320]	; (8008b88 <RadioSetRxGenericConfig+0x2c4>)
 8008a46:	2200      	movs	r2, #0
 8008a48:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8008a4a:	4b4f      	ldr	r3, [pc, #316]	; (8008b88 <RadioSetRxGenericConfig+0x2c4>)
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008a50:	4b4d      	ldr	r3, [pc, #308]	; (8008b88 <RadioSetRxGenericConfig+0x2c4>)
 8008a52:	2200      	movs	r2, #0
 8008a54:	755a      	strb	r2, [r3, #21]
        {
 8008a56:	e00e      	b.n	8008a76 <RadioSetRxGenericConfig+0x1b2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8008a5e:	4b4a      	ldr	r3, [pc, #296]	; (8008b88 <RadioSetRxGenericConfig+0x2c4>)
 8008a60:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8008a68:	4b47      	ldr	r3, [pc, #284]	; (8008b88 <RadioSetRxGenericConfig+0x2c4>)
 8008a6a:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8008a72:	4b45      	ldr	r3, [pc, #276]	; (8008b88 <RadioSetRxGenericConfig+0x2c4>)
 8008a74:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8008a76:	f7ff fa48 	bl	8007f0a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8008a7a:	2000      	movs	r0, #0
 8008a7c:	f7fe fbf2 	bl	8007264 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008a80:	4844      	ldr	r0, [pc, #272]	; (8008b94 <RadioSetRxGenericConfig+0x2d0>)
 8008a82:	f001 f80b 	bl	8009a9c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008a86:	4844      	ldr	r0, [pc, #272]	; (8008b98 <RadioSetRxGenericConfig+0x2d4>)
 8008a88:	f001 f8da 	bl	8009c40 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008a8c:	f107 0320 	add.w	r3, r7, #32
 8008a90:	4618      	mov	r0, r3
 8008a92:	f000 fba2 	bl	80091da <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	8b9b      	ldrh	r3, [r3, #28]
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f000 fbec 	bl	8009278 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	8b1b      	ldrh	r3, [r3, #24]
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f000 fbc7 	bl	8009238 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8008ab0:	fb03 f202 	mul.w	r2, r3, r2
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008abc:	4a32      	ldr	r2, [pc, #200]	; (8008b88 <RadioSetRxGenericConfig+0x2c4>)
 8008abe:	6093      	str	r3, [r2, #8]
        break;
 8008ac0:	e0b9      	b.n	8008c36 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d102      	bne.n	8008ad0 <RadioSetRxGenericConfig+0x20c>
            return -1;
 8008aca:	f04f 33ff 	mov.w	r3, #4294967295
 8008ace:	e0b3      	b.n	8008c38 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d104      	bne.n	8008ae4 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	695b      	ldr	r3, [r3, #20]
 8008ade:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008ae2:	e002      	b.n	8008aea <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8008ae4:	23ff      	movs	r3, #255	; 0xff
 8008ae6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	bf14      	ite	ne
 8008af2:	2301      	movne	r3, #1
 8008af4:	2300      	moveq	r3, #0
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	4618      	mov	r0, r3
 8008afa:	f000 fd35 	bl	8009568 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	4618      	mov	r0, r3
 8008b04:	f000 fd3f 	bl	8009586 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008b08:	4b1f      	ldr	r3, [pc, #124]	; (8008b88 <RadioSetRxGenericConfig+0x2c4>)
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8008b16:	4b1c      	ldr	r3, [pc, #112]	; (8008b88 <RadioSetRxGenericConfig+0x2c4>)
 8008b18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8008b22:	4b19      	ldr	r3, [pc, #100]	; (8008b88 <RadioSetRxGenericConfig+0x2c4>)
 8008b24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8008b2e:	4b16      	ldr	r3, [pc, #88]	; (8008b88 <RadioSetRxGenericConfig+0x2c4>)
 8008b30:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008b3a:	2b02      	cmp	r3, #2
 8008b3c:	d010      	beq.n	8008b60 <RadioSetRxGenericConfig+0x29c>
 8008b3e:	2b02      	cmp	r3, #2
 8008b40:	dc2c      	bgt.n	8008b9c <RadioSetRxGenericConfig+0x2d8>
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d002      	beq.n	8008b4c <RadioSetRxGenericConfig+0x288>
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d005      	beq.n	8008b56 <RadioSetRxGenericConfig+0x292>
            break;
 8008b4a:	e027      	b.n	8008b9c <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008b4c:	4b0e      	ldr	r3, [pc, #56]	; (8008b88 <RadioSetRxGenericConfig+0x2c4>)
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008b54:	e023      	b.n	8008b9e <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008b56:	4b0c      	ldr	r3, [pc, #48]	; (8008b88 <RadioSetRxGenericConfig+0x2c4>)
 8008b58:	2201      	movs	r2, #1
 8008b5a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008b5e:	e01e      	b.n	8008b9e <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008b66:	2b0b      	cmp	r3, #11
 8008b68:	d004      	beq.n	8008b74 <RadioSetRxGenericConfig+0x2b0>
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008b70:	2b0c      	cmp	r3, #12
 8008b72:	d104      	bne.n	8008b7e <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008b74:	4b04      	ldr	r3, [pc, #16]	; (8008b88 <RadioSetRxGenericConfig+0x2c4>)
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008b7c:	e00f      	b.n	8008b9e <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008b7e:	4b02      	ldr	r3, [pc, #8]	; (8008b88 <RadioSetRxGenericConfig+0x2c4>)
 8008b80:	2200      	movs	r2, #0
 8008b82:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008b86:	e00a      	b.n	8008b9e <RadioSetRxGenericConfig+0x2da>
 8008b88:	20000284 	.word	0x20000284
 8008b8c:	20000280 	.word	0x20000280
 8008b90:	200002f8 	.word	0x200002f8
 8008b94:	200002bc 	.word	0x200002bc
 8008b98:	20000292 	.word	0x20000292
            break;
 8008b9c:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008b9e:	4b28      	ldr	r3, [pc, #160]	; (8008c40 <RadioSetRxGenericConfig+0x37c>)
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8008ba8:	4b25      	ldr	r3, [pc, #148]	; (8008c40 <RadioSetRxGenericConfig+0x37c>)
 8008baa:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8008bb2:	4b23      	ldr	r3, [pc, #140]	; (8008c40 <RadioSetRxGenericConfig+0x37c>)
 8008bb4:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8008bb6:	4a22      	ldr	r2, [pc, #136]	; (8008c40 <RadioSetRxGenericConfig+0x37c>)
 8008bb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008bbc:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8008bc4:	4b1e      	ldr	r3, [pc, #120]	; (8008c40 <RadioSetRxGenericConfig+0x37c>)
 8008bc6:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8008bd0:	4b1b      	ldr	r3, [pc, #108]	; (8008c40 <RadioSetRxGenericConfig+0x37c>)
 8008bd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8008bd6:	f7ff f998 	bl	8007f0a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8008bda:	2001      	movs	r0, #1
 8008bdc:	f7fe fb42 	bl	8007264 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008be0:	4818      	ldr	r0, [pc, #96]	; (8008c44 <RadioSetRxGenericConfig+0x380>)
 8008be2:	f000 ff5b 	bl	8009a9c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008be6:	4818      	ldr	r0, [pc, #96]	; (8008c48 <RadioSetRxGenericConfig+0x384>)
 8008be8:	f001 f82a 	bl	8009c40 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8008bec:	4b14      	ldr	r3, [pc, #80]	; (8008c40 <RadioSetRxGenericConfig+0x37c>)
 8008bee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d10d      	bne.n	8008c12 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8008bf6:	f240 7036 	movw	r0, #1846	; 0x736
 8008bfa:	f001 f97d 	bl	8009ef8 <SUBGRF_ReadRegister>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	f023 0304 	bic.w	r3, r3, #4
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	4619      	mov	r1, r3
 8008c08:	f240 7036 	movw	r0, #1846	; 0x736
 8008c0c:	f001 f960 	bl	8009ed0 <SUBGRF_WriteRegister>
 8008c10:	e00c      	b.n	8008c2c <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8008c12:	f240 7036 	movw	r0, #1846	; 0x736
 8008c16:	f001 f96f 	bl	8009ef8 <SUBGRF_ReadRegister>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	f043 0304 	orr.w	r3, r3, #4
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	4619      	mov	r1, r3
 8008c24:	f240 7036 	movw	r0, #1846	; 0x736
 8008c28:	f001 f952 	bl	8009ed0 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8008c2c:	4b04      	ldr	r3, [pc, #16]	; (8008c40 <RadioSetRxGenericConfig+0x37c>)
 8008c2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c32:	609a      	str	r2, [r3, #8]
        break;
 8008c34:	bf00      	nop
    }
    return status;
 8008c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3730      	adds	r7, #48	; 0x30
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}
 8008c40:	20000284 	.word	0x20000284
 8008c44:	200002bc 	.word	0x200002bc
 8008c48:	20000292 	.word	0x20000292

08008c4c <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b08e      	sub	sp, #56	; 0x38
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60b9      	str	r1, [r7, #8]
 8008c54:	607b      	str	r3, [r7, #4]
 8008c56:	4603      	mov	r3, r0
 8008c58:	73fb      	strb	r3, [r7, #15]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	73bb      	strb	r3, [r7, #14]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8008c5e:	2300      	movs	r3, #0
 8008c60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c62:	2300      	movs	r3, #0
 8008c64:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8008c66:	f001 fc0a 	bl	800a47e <RFW_DeInit>
    switch( modem )
 8008c6a:	7bfb      	ldrb	r3, [r7, #15]
 8008c6c:	2b03      	cmp	r3, #3
 8008c6e:	f200 8204 	bhi.w	800907a <RadioSetTxGenericConfig+0x42e>
 8008c72:	a201      	add	r2, pc, #4	; (adr r2, 8008c78 <RadioSetTxGenericConfig+0x2c>)
 8008c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c78:	08008dfd 	.word	0x08008dfd
 8008c7c:	08008f45 	.word	0x08008f45
 8008c80:	0800903d 	.word	0x0800903d
 8008c84:	08008c89 	.word	0x08008c89
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	7c9b      	ldrb	r3, [r3, #18]
 8008c8c:	2b08      	cmp	r3, #8
 8008c8e:	d902      	bls.n	8008c96 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8008c90:	f04f 33ff 	mov.w	r3, #4294967295
 8008c94:	e206      	b.n	80090a4 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	6899      	ldr	r1, [r3, #8]
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	7c9b      	ldrb	r3, [r3, #18]
 8008c9e:	b29a      	uxth	r2, r3
 8008ca0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f001 fd75 	bl	800a794 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d102      	bne.n	8008cb8 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8008cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8008cb6:	e1f5      	b.n	80090a4 <RadioSetTxGenericConfig+0x458>
        }
        else if (config->msk.BitRate<= 10000)
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f242 7210 	movw	r2, #10000	; 0x2710
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d813      	bhi.n	8008cec <RadioSetTxGenericConfig+0xa0>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
 8008cc4:	2302      	movs	r3, #2
 8008cc6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8008cca:	4b99      	ldr	r3, [pc, #612]	; (8008f30 <RadioSetTxGenericConfig+0x2e4>)
 8008ccc:	2203      	movs	r2, #3
 8008cce:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8008cd0:	4b97      	ldr	r3, [pc, #604]	; (8008f30 <RadioSetTxGenericConfig+0x2e4>)
 8008cd2:	2203      	movs	r2, #3
 8008cd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a94      	ldr	r2, [pc, #592]	; (8008f30 <RadioSetTxGenericConfig+0x2e4>)
 8008cde:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	7cda      	ldrb	r2, [r3, #19]
 8008ce4:	4b92      	ldr	r3, [pc, #584]	; (8008f30 <RadioSetTxGenericConfig+0x2e4>)
 8008ce6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cea:	e017      	b.n	8008d1c <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
          radio_modem= MODEM_FSK;
 8008cec:	2300      	movs	r3, #0
 8008cee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008cf2:	4b8f      	ldr	r3, [pc, #572]	; (8008f30 <RadioSetTxGenericConfig+0x2e4>)
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008cf8:	4b8d      	ldr	r3, [pc, #564]	; (8008f30 <RadioSetTxGenericConfig+0x2e4>)
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a8a      	ldr	r2, [pc, #552]	; (8008f30 <RadioSetTxGenericConfig+0x2e4>)
 8008d06:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	7cda      	ldrb	r2, [r3, #19]
 8008d0c:	4b88      	ldr	r3, [pc, #544]	; (8008f30 <RadioSetTxGenericConfig+0x2e4>)
 8008d0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	089b      	lsrs	r3, r3, #2
 8008d18:	4a85      	ldr	r2, [pc, #532]	; (8008f30 <RadioSetTxGenericConfig+0x2e4>)
 8008d1a:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	b29b      	uxth	r3, r3
 8008d22:	00db      	lsls	r3, r3, #3
 8008d24:	b29a      	uxth	r2, r3
 8008d26:	4b82      	ldr	r3, [pc, #520]	; (8008f30 <RadioSetTxGenericConfig+0x2e4>)
 8008d28:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8008d2a:	4b81      	ldr	r3, [pc, #516]	; (8008f30 <RadioSetTxGenericConfig+0x2e4>)
 8008d2c:	2204      	movs	r2, #4
 8008d2e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	7c9b      	ldrb	r3, [r3, #18]
 8008d34:	00db      	lsls	r3, r3, #3
 8008d36:	b2da      	uxtb	r2, r3
 8008d38:	4b7d      	ldr	r3, [pc, #500]	; (8008f30 <RadioSetTxGenericConfig+0x2e4>)
 8008d3a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8008d3c:	4b7c      	ldr	r3, [pc, #496]	; (8008f30 <RadioSetTxGenericConfig+0x2e4>)
 8008d3e:	2200      	movs	r2, #0
 8008d40:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	7d9b      	ldrb	r3, [r3, #22]
 8008d46:	2b02      	cmp	r3, #2
 8008d48:	d003      	beq.n	8008d52 <RadioSetTxGenericConfig+0x106>
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	7d1b      	ldrb	r3, [r3, #20]
 8008d4e:	2b02      	cmp	r3, #2
 8008d50:	d12b      	bne.n	8008daa <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	7d5b      	ldrb	r3, [r3, #21]
 8008d56:	2bf1      	cmp	r3, #241	; 0xf1
 8008d58:	d00a      	beq.n	8008d70 <RadioSetTxGenericConfig+0x124>
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	7d5b      	ldrb	r3, [r3, #21]
 8008d5e:	2bf2      	cmp	r3, #242	; 0xf2
 8008d60:	d006      	beq.n	8008d70 <RadioSetTxGenericConfig+0x124>
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	7d5b      	ldrb	r3, [r3, #21]
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d002      	beq.n	8008d70 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 8008d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d6e:	e199      	b.n	80090a4 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig= config;
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8008d74:	2301      	movs	r3, #1
 8008d76:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8008d7a:	4b6e      	ldr	r3, [pc, #440]	; (8008f34 <RadioSetTxGenericConfig+0x2e8>)
 8008d7c:	6819      	ldr	r1, [r3, #0]
 8008d7e:	f107 0320 	add.w	r3, r7, #32
 8008d82:	4a6d      	ldr	r2, [pc, #436]	; (8008f38 <RadioSetTxGenericConfig+0x2ec>)
 8008d84:	4618      	mov	r0, r3
 8008d86:	f001 fb6d 	bl	800a464 <RFW_Init>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d002      	beq.n	8008d96 <RadioSetTxGenericConfig+0x14a>
            {
              return -1;
 8008d90:	f04f 33ff 	mov.w	r3, #4294967295
 8008d94:	e186      	b.n	80090a4 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8008d96:	4b66      	ldr	r3, [pc, #408]	; (8008f30 <RadioSetTxGenericConfig+0x2e4>)
 8008d98:	2200      	movs	r2, #0
 8008d9a:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8008d9c:	4b64      	ldr	r3, [pc, #400]	; (8008f30 <RadioSetTxGenericConfig+0x2e4>)
 8008d9e:	2201      	movs	r2, #1
 8008da0:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008da2:	4b63      	ldr	r3, [pc, #396]	; (8008f30 <RadioSetTxGenericConfig+0x2e4>)
 8008da4:	2200      	movs	r2, #0
 8008da6:	755a      	strb	r2, [r3, #21]
        {
 8008da8:	e00b      	b.n	8008dc2 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	7d5a      	ldrb	r2, [r3, #21]
 8008dae:	4b60      	ldr	r3, [pc, #384]	; (8008f30 <RadioSetTxGenericConfig+0x2e4>)
 8008db0:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	7d9a      	ldrb	r2, [r3, #22]
 8008db6:	4b5e      	ldr	r3, [pc, #376]	; (8008f30 <RadioSetTxGenericConfig+0x2e4>)
 8008db8:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	7d1a      	ldrb	r2, [r3, #20]
 8008dbe:	4b5c      	ldr	r3, [pc, #368]	; (8008f30 <RadioSetTxGenericConfig+0x2e4>)
 8008dc0:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8008dc2:	f7ff f8a2 	bl	8007f0a <RadioStandby>
        RadioSetModem( radio_modem );
 8008dc6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7fe fa4a 	bl	8007264 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008dd0:	485a      	ldr	r0, [pc, #360]	; (8008f3c <RadioSetTxGenericConfig+0x2f0>)
 8008dd2:	f000 fe63 	bl	8009a9c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008dd6:	485a      	ldr	r0, [pc, #360]	; (8008f40 <RadioSetTxGenericConfig+0x2f4>)
 8008dd8:	f000 ff32 	bl	8009c40 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008ddc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008de0:	4618      	mov	r0, r3
 8008de2:	f000 f9fa 	bl	80091da <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	8a1b      	ldrh	r3, [r3, #16]
 8008dea:	4618      	mov	r0, r3
 8008dec:	f000 fa44 	bl	8009278 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	899b      	ldrh	r3, [r3, #12]
 8008df4:	4618      	mov	r0, r3
 8008df6:	f000 fa1f 	bl	8009238 <SUBGRF_SetCrcPolynomial>
        break;
 8008dfa:	e13f      	b.n	800907c <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d102      	bne.n	8008e0a <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8008e04:	f04f 33ff 	mov.w	r3, #4294967295
 8008e08:	e14c      	b.n	80090a4 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	7c9b      	ldrb	r3, [r3, #18]
 8008e0e:	2b08      	cmp	r3, #8
 8008e10:	d902      	bls.n	8008e18 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8008e12:	f04f 33ff 	mov.w	r3, #4294967295
 8008e16:	e145      	b.n	80090a4 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	6899      	ldr	r1, [r3, #8]
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	7c9b      	ldrb	r3, [r3, #18]
 8008e20:	b29a      	uxth	r2, r3
 8008e22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008e26:	4618      	mov	r0, r3
 8008e28:	f001 fcb4 	bl	800a794 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008e2c:	4b40      	ldr	r3, [pc, #256]	; (8008f30 <RadioSetTxGenericConfig+0x2e4>)
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a3d      	ldr	r2, [pc, #244]	; (8008f30 <RadioSetTxGenericConfig+0x2e4>)
 8008e3a:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	7cda      	ldrb	r2, [r3, #19]
 8008e40:	4b3b      	ldr	r3, [pc, #236]	; (8008f30 <RadioSetTxGenericConfig+0x2e4>)
 8008e42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	699b      	ldr	r3, [r3, #24]
 8008e4a:	4a39      	ldr	r2, [pc, #228]	; (8008f30 <RadioSetTxGenericConfig+0x2e4>)
 8008e4c:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008e4e:	4b38      	ldr	r3, [pc, #224]	; (8008f30 <RadioSetTxGenericConfig+0x2e4>)
 8008e50:	2200      	movs	r2, #0
 8008e52:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	00db      	lsls	r3, r3, #3
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	4b34      	ldr	r3, [pc, #208]	; (8008f30 <RadioSetTxGenericConfig+0x2e4>)
 8008e60:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8008e62:	4b33      	ldr	r3, [pc, #204]	; (8008f30 <RadioSetTxGenericConfig+0x2e4>)
 8008e64:	2204      	movs	r2, #4
 8008e66:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	7c9b      	ldrb	r3, [r3, #18]
 8008e6c:	00db      	lsls	r3, r3, #3
 8008e6e:	b2da      	uxtb	r2, r3
 8008e70:	4b2f      	ldr	r3, [pc, #188]	; (8008f30 <RadioSetTxGenericConfig+0x2e4>)
 8008e72:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8008e74:	4b2e      	ldr	r3, [pc, #184]	; (8008f30 <RadioSetTxGenericConfig+0x2e4>)
 8008e76:	2200      	movs	r2, #0
 8008e78:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	7d9b      	ldrb	r3, [r3, #22]
 8008e7e:	2b02      	cmp	r3, #2
 8008e80:	d003      	beq.n	8008e8a <RadioSetTxGenericConfig+0x23e>
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	7d1b      	ldrb	r3, [r3, #20]
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	d12a      	bne.n	8008ee0 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	7d5b      	ldrb	r3, [r3, #21]
 8008e8e:	2bf1      	cmp	r3, #241	; 0xf1
 8008e90:	d00a      	beq.n	8008ea8 <RadioSetTxGenericConfig+0x25c>
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	7d5b      	ldrb	r3, [r3, #21]
 8008e96:	2bf2      	cmp	r3, #242	; 0xf2
 8008e98:	d006      	beq.n	8008ea8 <RadioSetTxGenericConfig+0x25c>
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	7d5b      	ldrb	r3, [r3, #21]
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d002      	beq.n	8008ea8 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 8008ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ea6:	e0fd      	b.n	80090a4 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8008eb0:	4b20      	ldr	r3, [pc, #128]	; (8008f34 <RadioSetTxGenericConfig+0x2e8>)
 8008eb2:	6819      	ldr	r1, [r3, #0]
 8008eb4:	f107 0314 	add.w	r3, r7, #20
 8008eb8:	4a1f      	ldr	r2, [pc, #124]	; (8008f38 <RadioSetTxGenericConfig+0x2ec>)
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f001 fad2 	bl	800a464 <RFW_Init>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d002      	beq.n	8008ecc <RadioSetTxGenericConfig+0x280>
            {
              return -1;
 8008ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8008eca:	e0eb      	b.n	80090a4 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8008ecc:	4b18      	ldr	r3, [pc, #96]	; (8008f30 <RadioSetTxGenericConfig+0x2e4>)
 8008ece:	2200      	movs	r2, #0
 8008ed0:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8008ed2:	4b17      	ldr	r3, [pc, #92]	; (8008f30 <RadioSetTxGenericConfig+0x2e4>)
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008ed8:	4b15      	ldr	r3, [pc, #84]	; (8008f30 <RadioSetTxGenericConfig+0x2e4>)
 8008eda:	2200      	movs	r2, #0
 8008edc:	755a      	strb	r2, [r3, #21]
        {
 8008ede:	e00b      	b.n	8008ef8 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	7d5a      	ldrb	r2, [r3, #21]
 8008ee4:	4b12      	ldr	r3, [pc, #72]	; (8008f30 <RadioSetTxGenericConfig+0x2e4>)
 8008ee6:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	7d9a      	ldrb	r2, [r3, #22]
 8008eec:	4b10      	ldr	r3, [pc, #64]	; (8008f30 <RadioSetTxGenericConfig+0x2e4>)
 8008eee:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	7d1a      	ldrb	r2, [r3, #20]
 8008ef4:	4b0e      	ldr	r3, [pc, #56]	; (8008f30 <RadioSetTxGenericConfig+0x2e4>)
 8008ef6:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8008ef8:	f7ff f807 	bl	8007f0a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8008efc:	2000      	movs	r0, #0
 8008efe:	f7fe f9b1 	bl	8007264 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008f02:	480e      	ldr	r0, [pc, #56]	; (8008f3c <RadioSetTxGenericConfig+0x2f0>)
 8008f04:	f000 fdca 	bl	8009a9c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008f08:	480d      	ldr	r0, [pc, #52]	; (8008f40 <RadioSetTxGenericConfig+0x2f4>)
 8008f0a:	f000 fe99 	bl	8009c40 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008f0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008f12:	4618      	mov	r0, r3
 8008f14:	f000 f961 	bl	80091da <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	8a1b      	ldrh	r3, [r3, #16]
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f000 f9ab 	bl	8009278 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	899b      	ldrh	r3, [r3, #12]
 8008f26:	4618      	mov	r0, r3
 8008f28:	f000 f986 	bl	8009238 <SUBGRF_SetCrcPolynomial>
        break;
 8008f2c:	e0a6      	b.n	800907c <RadioSetTxGenericConfig+0x430>
 8008f2e:	bf00      	nop
 8008f30:	20000284 	.word	0x20000284
 8008f34:	20000280 	.word	0x20000280
 8008f38:	200002e0 	.word	0x200002e0
 8008f3c:	200002bc 	.word	0x200002bc
 8008f40:	20000292 	.word	0x20000292
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008f44:	4b59      	ldr	r3, [pc, #356]	; (80090ac <RadioSetTxGenericConfig+0x460>)
 8008f46:	2201      	movs	r2, #1
 8008f48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	781a      	ldrb	r2, [r3, #0]
 8008f50:	4b56      	ldr	r3, [pc, #344]	; (80090ac <RadioSetTxGenericConfig+0x460>)
 8008f52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	785a      	ldrb	r2, [r3, #1]
 8008f5a:	4b54      	ldr	r3, [pc, #336]	; (80090ac <RadioSetTxGenericConfig+0x460>)
 8008f5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	789a      	ldrb	r2, [r3, #2]
 8008f64:	4b51      	ldr	r3, [pc, #324]	; (80090ac <RadioSetTxGenericConfig+0x460>)
 8008f66:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	78db      	ldrb	r3, [r3, #3]
 8008f6e:	2b02      	cmp	r3, #2
 8008f70:	d010      	beq.n	8008f94 <RadioSetTxGenericConfig+0x348>
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	dc20      	bgt.n	8008fb8 <RadioSetTxGenericConfig+0x36c>
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d002      	beq.n	8008f80 <RadioSetTxGenericConfig+0x334>
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d005      	beq.n	8008f8a <RadioSetTxGenericConfig+0x33e>
            {
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
          default:
            break;
 8008f7e:	e01b      	b.n	8008fb8 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008f80:	4b4a      	ldr	r3, [pc, #296]	; (80090ac <RadioSetTxGenericConfig+0x460>)
 8008f82:	2200      	movs	r2, #0
 8008f84:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008f88:	e017      	b.n	8008fba <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008f8a:	4b48      	ldr	r3, [pc, #288]	; (80090ac <RadioSetTxGenericConfig+0x460>)
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008f92:	e012      	b.n	8008fba <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	2b0b      	cmp	r3, #11
 8008f9a:	d003      	beq.n	8008fa4 <RadioSetTxGenericConfig+0x358>
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	2b0c      	cmp	r3, #12
 8008fa2:	d104      	bne.n	8008fae <RadioSetTxGenericConfig+0x362>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008fa4:	4b41      	ldr	r3, [pc, #260]	; (80090ac <RadioSetTxGenericConfig+0x460>)
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008fac:	e005      	b.n	8008fba <RadioSetTxGenericConfig+0x36e>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008fae:	4b3f      	ldr	r3, [pc, #252]	; (80090ac <RadioSetTxGenericConfig+0x460>)
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008fb6:	e000      	b.n	8008fba <RadioSetTxGenericConfig+0x36e>
            break;
 8008fb8:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008fba:	4b3c      	ldr	r3, [pc, #240]	; (80090ac <RadioSetTxGenericConfig+0x460>)
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	889a      	ldrh	r2, [r3, #4]
 8008fc4:	4b39      	ldr	r3, [pc, #228]	; (80090ac <RadioSetTxGenericConfig+0x460>)
 8008fc6:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	799a      	ldrb	r2, [r3, #6]
 8008fcc:	4b37      	ldr	r3, [pc, #220]	; (80090ac <RadioSetTxGenericConfig+0x460>)
 8008fce:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	79da      	ldrb	r2, [r3, #7]
 8008fd4:	4b35      	ldr	r3, [pc, #212]	; (80090ac <RadioSetTxGenericConfig+0x460>)
 8008fd6:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	7a1a      	ldrb	r2, [r3, #8]
 8008fde:	4b33      	ldr	r3, [pc, #204]	; (80090ac <RadioSetTxGenericConfig+0x460>)
 8008fe0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 8008fe4:	f7fe ff91 	bl	8007f0a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8008fe8:	2001      	movs	r0, #1
 8008fea:	f7fe f93b 	bl	8007264 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008fee:	4830      	ldr	r0, [pc, #192]	; (80090b0 <RadioSetTxGenericConfig+0x464>)
 8008ff0:	f000 fd54 	bl	8009a9c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008ff4:	482f      	ldr	r0, [pc, #188]	; (80090b4 <RadioSetTxGenericConfig+0x468>)
 8008ff6:	f000 fe23 	bl	8009c40 <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8008ffa:	4b2c      	ldr	r3, [pc, #176]	; (80090ac <RadioSetTxGenericConfig+0x460>)
 8008ffc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009000:	2b06      	cmp	r3, #6
 8009002:	d10d      	bne.n	8009020 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8009004:	f640 0089 	movw	r0, #2185	; 0x889
 8009008:	f000 ff76 	bl	8009ef8 <SUBGRF_ReadRegister>
 800900c:	4603      	mov	r3, r0
 800900e:	f023 0304 	bic.w	r3, r3, #4
 8009012:	b2db      	uxtb	r3, r3
 8009014:	4619      	mov	r1, r3
 8009016:	f640 0089 	movw	r0, #2185	; 0x889
 800901a:	f000 ff59 	bl	8009ed0 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        // WORKAROUND END
        break;
 800901e:	e02d      	b.n	800907c <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8009020:	f640 0089 	movw	r0, #2185	; 0x889
 8009024:	f000 ff68 	bl	8009ef8 <SUBGRF_ReadRegister>
 8009028:	4603      	mov	r3, r0
 800902a:	f043 0304 	orr.w	r3, r3, #4
 800902e:	b2db      	uxtb	r3, r3
 8009030:	4619      	mov	r1, r3
 8009032:	f640 0089 	movw	r0, #2185	; 0x889
 8009036:	f000 ff4b 	bl	8009ed0 <SUBGRF_WriteRegister>
        break;
 800903a:	e01f      	b.n	800907c <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d004      	beq.n	800904e <RadioSetTxGenericConfig+0x402>
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800904c:	d902      	bls.n	8009054 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 800904e:	f04f 33ff 	mov.w	r3, #4294967295
 8009052:	e027      	b.n	80090a4 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8009054:	2003      	movs	r0, #3
 8009056:	f7fe f905 	bl	8007264 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800905a:	4b14      	ldr	r3, [pc, #80]	; (80090ac <RadioSetTxGenericConfig+0x460>)
 800905c:	2202      	movs	r2, #2
 800905e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a11      	ldr	r2, [pc, #68]	; (80090ac <RadioSetTxGenericConfig+0x460>)
 8009068:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800906a:	4b10      	ldr	r3, [pc, #64]	; (80090ac <RadioSetTxGenericConfig+0x460>)
 800906c:	2216      	movs	r2, #22
 800906e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009072:	480f      	ldr	r0, [pc, #60]	; (80090b0 <RadioSetTxGenericConfig+0x464>)
 8009074:	f000 fd12 	bl	8009a9c <SUBGRF_SetModulationParams>
        break;
 8009078:	e000      	b.n	800907c <RadioSetTxGenericConfig+0x430>
    default:
        break;
 800907a:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800907c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009080:	4618      	mov	r0, r3
 8009082:	f001 f841 	bl	800a108 <SUBGRF_SetRfTxPower>
 8009086:	4603      	mov	r3, r0
 8009088:	461a      	mov	r2, r3
 800908a:	4b08      	ldr	r3, [pc, #32]	; (80090ac <RadioSetTxGenericConfig+0x460>)
 800908c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8009090:	4b06      	ldr	r3, [pc, #24]	; (80090ac <RadioSetTxGenericConfig+0x460>)
 8009092:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009096:	4618      	mov	r0, r3
 8009098:	f001 fa05 	bl	800a4a6 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800909c:	4a03      	ldr	r2, [pc, #12]	; (80090ac <RadioSetTxGenericConfig+0x460>)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6053      	str	r3, [r2, #4]
    return 0;
 80090a2:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3738      	adds	r7, #56	; 0x38
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	20000284 	.word	0x20000284
 80090b0:	200002bc 	.word	0x200002bc
 80090b4:	20000292 	.word	0x20000292

080090b8 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d002      	beq.n	80090cc <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 80090c6:	4a1a      	ldr	r2, [pc, #104]	; (8009130 <SUBGRF_Init+0x78>)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 80090cc:	f7f7 fc6e 	bl	80009ac <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80090d0:	2002      	movs	r0, #2
 80090d2:	f001 f8e5 	bl	800a2a0 <Radio_SMPS_Set>

    ImageCalibrated = false;
 80090d6:	4b17      	ldr	r3, [pc, #92]	; (8009134 <SUBGRF_Init+0x7c>)
 80090d8:	2200      	movs	r2, #0
 80090da:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 80090dc:	2000      	movs	r0, #0
 80090de:	f000 f977 	bl	80093d0 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 80090e2:	f001 fa95 	bl	800a610 <RBI_IsTCXO>
 80090e6:	4603      	mov	r3, r0
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d10e      	bne.n	800910a <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80090ec:	2140      	movs	r1, #64	; 0x40
 80090ee:	2001      	movs	r0, #1
 80090f0:	f000 fb78 	bl	80097e4 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80090f4:	2100      	movs	r1, #0
 80090f6:	f640 1011 	movw	r0, #2321	; 0x911
 80090fa:	f000 fee9 	bl	8009ed0 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 80090fe:	237f      	movs	r3, #127	; 0x7f
 8009100:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8009102:	7b38      	ldrb	r0, [r7, #12]
 8009104:	f000 fa85 	bl	8009612 <SUBGRF_Calibrate>
 8009108:	e009      	b.n	800911e <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800910a:	2120      	movs	r1, #32
 800910c:	f640 1011 	movw	r0, #2321	; 0x911
 8009110:	f000 fede 	bl	8009ed0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8009114:	2120      	movs	r1, #32
 8009116:	f640 1012 	movw	r0, #2322	; 0x912
 800911a:	f000 fed9 	bl	8009ed0 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 800911e:	f001 fa5b 	bl	800a5d8 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8009122:	4b05      	ldr	r3, [pc, #20]	; (8009138 <SUBGRF_Init+0x80>)
 8009124:	2201      	movs	r2, #1
 8009126:	701a      	strb	r2, [r3, #0]
}
 8009128:	bf00      	nop
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}
 8009130:	2000031c 	.word	0x2000031c
 8009134:	20000318 	.word	0x20000318
 8009138:	20000310 	.word	0x20000310

0800913c <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 800913c:	b480      	push	{r7}
 800913e:	af00      	add	r7, sp, #0
    return OperatingMode;
 8009140:	4b02      	ldr	r3, [pc, #8]	; (800914c <SUBGRF_GetOperatingMode+0x10>)
 8009142:	781b      	ldrb	r3, [r3, #0]
}
 8009144:	4618      	mov	r0, r3
 8009146:	46bd      	mov	sp, r7
 8009148:	bc80      	pop	{r7}
 800914a:	4770      	bx	lr
 800914c:	20000310 	.word	0x20000310

08009150 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	460b      	mov	r3, r1
 800915a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800915c:	78fb      	ldrb	r3, [r7, #3]
 800915e:	461a      	mov	r2, r3
 8009160:	6879      	ldr	r1, [r7, #4]
 8009162:	2000      	movs	r0, #0
 8009164:	f000 ff20 	bl	8009fa8 <SUBGRF_WriteBuffer>
}
 8009168:	bf00      	nop
 800916a:	3708      	adds	r7, #8
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b086      	sub	sp, #24
 8009174:	af00      	add	r7, sp, #0
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	60b9      	str	r1, [r7, #8]
 800917a:	4613      	mov	r3, r2
 800917c:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800917e:	2300      	movs	r3, #0
 8009180:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8009182:	f107 0317 	add.w	r3, r7, #23
 8009186:	4619      	mov	r1, r3
 8009188:	68b8      	ldr	r0, [r7, #8]
 800918a:	f000 fe23 	bl	8009dd4 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	79fa      	ldrb	r2, [r7, #7]
 8009194:	429a      	cmp	r2, r3
 8009196:	d201      	bcs.n	800919c <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8009198:	2301      	movs	r3, #1
 800919a:	e007      	b.n	80091ac <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 800919c:	7df8      	ldrb	r0, [r7, #23]
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	461a      	mov	r2, r3
 80091a4:	68f9      	ldr	r1, [r7, #12]
 80091a6:	f000 ff21 	bl	8009fec <SUBGRF_ReadBuffer>

    return 0;
 80091aa:	2300      	movs	r3, #0
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3718      	adds	r7, #24
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	460b      	mov	r3, r1
 80091be:	607a      	str	r2, [r7, #4]
 80091c0:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 80091c2:	7afb      	ldrb	r3, [r7, #11]
 80091c4:	4619      	mov	r1, r3
 80091c6:	68f8      	ldr	r0, [r7, #12]
 80091c8:	f7ff ffc2 	bl	8009150 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 f91b 	bl	8009408 <SUBGRF_SetTx>
}
 80091d2:	bf00      	nop
 80091d4:	3710      	adds	r7, #16
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b082      	sub	sp, #8
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80091e2:	2208      	movs	r2, #8
 80091e4:	6879      	ldr	r1, [r7, #4]
 80091e6:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 80091ea:	f000 fe99 	bl	8009f20 <SUBGRF_WriteRegisters>
    return 0;
 80091ee:	2300      	movs	r3, #0
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3708      	adds	r7, #8
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	4603      	mov	r3, r0
 8009200:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8009202:	88fb      	ldrh	r3, [r7, #6]
 8009204:	0a1b      	lsrs	r3, r3, #8
 8009206:	b29b      	uxth	r3, r3
 8009208:	b2db      	uxtb	r3, r3
 800920a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800920c:	88fb      	ldrh	r3, [r7, #6]
 800920e:	b2db      	uxtb	r3, r3
 8009210:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8009212:	f000 fb6b 	bl	80098ec <SUBGRF_GetPacketType>
 8009216:	4603      	mov	r3, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d108      	bne.n	800922e <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800921c:	f107 030c 	add.w	r3, r7, #12
 8009220:	2202      	movs	r2, #2
 8009222:	4619      	mov	r1, r3
 8009224:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8009228:	f000 fe7a 	bl	8009f20 <SUBGRF_WriteRegisters>
            break;
 800922c:	e000      	b.n	8009230 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800922e:	bf00      	nop
    }
}
 8009230:	bf00      	nop
 8009232:	3710      	adds	r7, #16
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	4603      	mov	r3, r0
 8009240:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8009242:	88fb      	ldrh	r3, [r7, #6]
 8009244:	0a1b      	lsrs	r3, r3, #8
 8009246:	b29b      	uxth	r3, r3
 8009248:	b2db      	uxtb	r3, r3
 800924a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800924c:	88fb      	ldrh	r3, [r7, #6]
 800924e:	b2db      	uxtb	r3, r3
 8009250:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8009252:	f000 fb4b 	bl	80098ec <SUBGRF_GetPacketType>
 8009256:	4603      	mov	r3, r0
 8009258:	2b00      	cmp	r3, #0
 800925a:	d108      	bne.n	800926e <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800925c:	f107 030c 	add.w	r3, r7, #12
 8009260:	2202      	movs	r2, #2
 8009262:	4619      	mov	r1, r3
 8009264:	f240 60be 	movw	r0, #1726	; 0x6be
 8009268:	f000 fe5a 	bl	8009f20 <SUBGRF_WriteRegisters>
            break;
 800926c:	e000      	b.n	8009270 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800926e:	bf00      	nop
    }
}
 8009270:	bf00      	nop
 8009272:	3710      	adds	r7, #16
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	4603      	mov	r3, r0
 8009280:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8009282:	2300      	movs	r3, #0
 8009284:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8009286:	f000 fb31 	bl	80098ec <SUBGRF_GetPacketType>
 800928a:	4603      	mov	r3, r0
 800928c:	2b00      	cmp	r3, #0
 800928e:	d121      	bne.n	80092d4 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8009290:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8009294:	f000 fe30 	bl	8009ef8 <SUBGRF_ReadRegister>
 8009298:	4603      	mov	r3, r0
 800929a:	f023 0301 	bic.w	r3, r3, #1
 800929e:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 80092a0:	88fb      	ldrh	r3, [r7, #6]
 80092a2:	0a1b      	lsrs	r3, r3, #8
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	b25b      	sxtb	r3, r3
 80092a8:	f003 0301 	and.w	r3, r3, #1
 80092ac:	b25a      	sxtb	r2, r3
 80092ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092b2:	4313      	orrs	r3, r2
 80092b4:	b25b      	sxtb	r3, r3
 80092b6:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80092b8:	7bfb      	ldrb	r3, [r7, #15]
 80092ba:	4619      	mov	r1, r3
 80092bc:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80092c0:	f000 fe06 	bl	8009ed0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 80092c4:	88fb      	ldrh	r3, [r7, #6]
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	4619      	mov	r1, r3
 80092ca:	f240 60b9 	movw	r0, #1721	; 0x6b9
 80092ce:	f000 fdff 	bl	8009ed0 <SUBGRF_WriteRegister>
            break;
 80092d2:	e000      	b.n	80092d6 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 80092d4:	bf00      	nop
    }
}
 80092d6:	bf00      	nop
 80092d8:	3710      	adds	r7, #16
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}

080092de <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b082      	sub	sp, #8
 80092e2:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 80092e4:	2300      	movs	r3, #0
 80092e6:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 80092e8:	2300      	movs	r3, #0
 80092ea:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 80092ec:	2300      	movs	r3, #0
 80092ee:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80092f0:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80092f4:	f000 fe00 	bl	8009ef8 <SUBGRF_ReadRegister>
 80092f8:	4603      	mov	r3, r0
 80092fa:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80092fc:	79fb      	ldrb	r3, [r7, #7]
 80092fe:	f023 0301 	bic.w	r3, r3, #1
 8009302:	b2db      	uxtb	r3, r3
 8009304:	4619      	mov	r1, r3
 8009306:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800930a:	f000 fde1 	bl	8009ed0 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800930e:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8009312:	f000 fdf1 	bl	8009ef8 <SUBGRF_ReadRegister>
 8009316:	4603      	mov	r3, r0
 8009318:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800931a:	79bb      	ldrb	r3, [r7, #6]
 800931c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009320:	b2db      	uxtb	r3, r3
 8009322:	4619      	mov	r1, r3
 8009324:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8009328:	f000 fdd2 	bl	8009ed0 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800932c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8009330:	f000 f88a 	bl	8009448 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8009334:	463b      	mov	r3, r7
 8009336:	2204      	movs	r2, #4
 8009338:	4619      	mov	r1, r3
 800933a:	f640 0019 	movw	r0, #2073	; 0x819
 800933e:	f000 fe11 	bl	8009f64 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8009342:	2000      	movs	r0, #0
 8009344:	f000 f844 	bl	80093d0 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8009348:	79fb      	ldrb	r3, [r7, #7]
 800934a:	4619      	mov	r1, r3
 800934c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8009350:	f000 fdbe 	bl	8009ed0 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8009354:	79bb      	ldrb	r3, [r7, #6]
 8009356:	4619      	mov	r1, r3
 8009358:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800935c:	f000 fdb8 	bl	8009ed0 <SUBGRF_WriteRegister>

    return number;
 8009360:	683b      	ldr	r3, [r7, #0]
}
 8009362:	4618      	mov	r0, r3
 8009364:	3708      	adds	r7, #8
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
	...

0800936c <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8009374:	2000      	movs	r0, #0
 8009376:	f001 f936 	bl	800a5e6 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800937a:	2002      	movs	r0, #2
 800937c:	f000 ff90 	bl	800a2a0 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009380:	793b      	ldrb	r3, [r7, #4]
 8009382:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009386:	b2db      	uxtb	r3, r3
 8009388:	009b      	lsls	r3, r3, #2
 800938a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800938c:	793b      	ldrb	r3, [r7, #4]
 800938e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009392:	b2db      	uxtb	r3, r3
 8009394:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009396:	b25b      	sxtb	r3, r3
 8009398:	4313      	orrs	r3, r2
 800939a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800939c:	793b      	ldrb	r3, [r7, #4]
 800939e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80093a6:	4313      	orrs	r3, r2
 80093a8:	b25b      	sxtb	r3, r3
 80093aa:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80093ac:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 80093ae:	f107 030f 	add.w	r3, r7, #15
 80093b2:	2201      	movs	r2, #1
 80093b4:	4619      	mov	r1, r3
 80093b6:	2084      	movs	r0, #132	; 0x84
 80093b8:	f000 fe3a 	bl	800a030 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 80093bc:	4b03      	ldr	r3, [pc, #12]	; (80093cc <SUBGRF_SetSleep+0x60>)
 80093be:	2200      	movs	r2, #0
 80093c0:	701a      	strb	r2, [r3, #0]
}
 80093c2:	bf00      	nop
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	20000310 	.word	0x20000310

080093d0 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	4603      	mov	r3, r0
 80093d8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80093da:	1dfb      	adds	r3, r7, #7
 80093dc:	2201      	movs	r2, #1
 80093de:	4619      	mov	r1, r3
 80093e0:	2080      	movs	r0, #128	; 0x80
 80093e2:	f000 fe25 	bl	800a030 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80093e6:	79fb      	ldrb	r3, [r7, #7]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d103      	bne.n	80093f4 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 80093ec:	4b05      	ldr	r3, [pc, #20]	; (8009404 <SUBGRF_SetStandby+0x34>)
 80093ee:	2201      	movs	r2, #1
 80093f0:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 80093f2:	e002      	b.n	80093fa <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 80093f4:	4b03      	ldr	r3, [pc, #12]	; (8009404 <SUBGRF_SetStandby+0x34>)
 80093f6:	2202      	movs	r2, #2
 80093f8:	701a      	strb	r2, [r3, #0]
}
 80093fa:	bf00      	nop
 80093fc:	3708      	adds	r7, #8
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop
 8009404:	20000310 	.word	0x20000310

08009408 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8009410:	4b0c      	ldr	r3, [pc, #48]	; (8009444 <SUBGRF_SetTx+0x3c>)
 8009412:	2204      	movs	r2, #4
 8009414:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	0c1b      	lsrs	r3, r3, #16
 800941a:	b2db      	uxtb	r3, r3
 800941c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	0a1b      	lsrs	r3, r3, #8
 8009422:	b2db      	uxtb	r3, r3
 8009424:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	b2db      	uxtb	r3, r3
 800942a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800942c:	f107 030c 	add.w	r3, r7, #12
 8009430:	2203      	movs	r2, #3
 8009432:	4619      	mov	r1, r3
 8009434:	2083      	movs	r0, #131	; 0x83
 8009436:	f000 fdfb 	bl	800a030 <SUBGRF_WriteCommand>
}
 800943a:	bf00      	nop
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
 8009442:	bf00      	nop
 8009444:	20000310 	.word	0x20000310

08009448 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8009450:	4b0c      	ldr	r3, [pc, #48]	; (8009484 <SUBGRF_SetRx+0x3c>)
 8009452:	2205      	movs	r2, #5
 8009454:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	0c1b      	lsrs	r3, r3, #16
 800945a:	b2db      	uxtb	r3, r3
 800945c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	0a1b      	lsrs	r3, r3, #8
 8009462:	b2db      	uxtb	r3, r3
 8009464:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	b2db      	uxtb	r3, r3
 800946a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800946c:	f107 030c 	add.w	r3, r7, #12
 8009470:	2203      	movs	r2, #3
 8009472:	4619      	mov	r1, r3
 8009474:	2082      	movs	r0, #130	; 0x82
 8009476:	f000 fddb 	bl	800a030 <SUBGRF_WriteCommand>
}
 800947a:	bf00      	nop
 800947c:	3710      	adds	r7, #16
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	20000310 	.word	0x20000310

08009488 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8009490:	4b0e      	ldr	r3, [pc, #56]	; (80094cc <SUBGRF_SetRxBoosted+0x44>)
 8009492:	2205      	movs	r2, #5
 8009494:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8009496:	2197      	movs	r1, #151	; 0x97
 8009498:	f640 00ac 	movw	r0, #2220	; 0x8ac
 800949c:	f000 fd18 	bl	8009ed0 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	0c1b      	lsrs	r3, r3, #16
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	0a1b      	lsrs	r3, r3, #8
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	b2db      	uxtb	r3, r3
 80094b4:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80094b6:	f107 030c 	add.w	r3, r7, #12
 80094ba:	2203      	movs	r2, #3
 80094bc:	4619      	mov	r1, r3
 80094be:	2082      	movs	r0, #130	; 0x82
 80094c0:	f000 fdb6 	bl	800a030 <SUBGRF_WriteCommand>
}
 80094c4:	bf00      	nop
 80094c6:	3710      	adds	r7, #16
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	20000310 	.word	0x20000310

080094d0 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	0c1b      	lsrs	r3, r3, #16
 80094de:	b2db      	uxtb	r3, r3
 80094e0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	0a1b      	lsrs	r3, r3, #8
 80094e6:	b2db      	uxtb	r3, r3
 80094e8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	b2db      	uxtb	r3, r3
 80094ee:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	0c1b      	lsrs	r3, r3, #16
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	0a1b      	lsrs	r3, r3, #8
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	b2db      	uxtb	r3, r3
 8009504:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8009506:	f107 0308 	add.w	r3, r7, #8
 800950a:	2206      	movs	r2, #6
 800950c:	4619      	mov	r1, r3
 800950e:	2094      	movs	r0, #148	; 0x94
 8009510:	f000 fd8e 	bl	800a030 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8009514:	4b03      	ldr	r3, [pc, #12]	; (8009524 <SUBGRF_SetRxDutyCycle+0x54>)
 8009516:	2206      	movs	r2, #6
 8009518:	701a      	strb	r2, [r3, #0]
}
 800951a:	bf00      	nop
 800951c:	3710      	adds	r7, #16
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	20000310 	.word	0x20000310

08009528 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8009528:	b580      	push	{r7, lr}
 800952a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800952c:	2200      	movs	r2, #0
 800952e:	2100      	movs	r1, #0
 8009530:	20c5      	movs	r0, #197	; 0xc5
 8009532:	f000 fd7d 	bl	800a030 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8009536:	4b02      	ldr	r3, [pc, #8]	; (8009540 <SUBGRF_SetCad+0x18>)
 8009538:	2207      	movs	r2, #7
 800953a:	701a      	strb	r2, [r3, #0]
}
 800953c:	bf00      	nop
 800953e:	bd80      	pop	{r7, pc}
 8009540:	20000310 	.word	0x20000310

08009544 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8009544:	b580      	push	{r7, lr}
 8009546:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8009548:	2200      	movs	r2, #0
 800954a:	2100      	movs	r1, #0
 800954c:	20d1      	movs	r0, #209	; 0xd1
 800954e:	f000 fd6f 	bl	800a030 <SUBGRF_WriteCommand>
}
 8009552:	bf00      	nop
 8009554:	bd80      	pop	{r7, pc}

08009556 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8009556:	b580      	push	{r7, lr}
 8009558:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800955a:	2200      	movs	r2, #0
 800955c:	2100      	movs	r1, #0
 800955e:	20d2      	movs	r0, #210	; 0xd2
 8009560:	f000 fd66 	bl	800a030 <SUBGRF_WriteCommand>
}
 8009564:	bf00      	nop
 8009566:	bd80      	pop	{r7, pc}

08009568 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	4603      	mov	r3, r0
 8009570:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8009572:	1dfb      	adds	r3, r7, #7
 8009574:	2201      	movs	r2, #1
 8009576:	4619      	mov	r1, r3
 8009578:	209f      	movs	r0, #159	; 0x9f
 800957a:	f000 fd59 	bl	800a030 <SUBGRF_WriteCommand>
}
 800957e:	bf00      	nop
 8009580:	3708      	adds	r7, #8
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}

08009586 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8009586:	b580      	push	{r7, lr}
 8009588:	b084      	sub	sp, #16
 800958a:	af00      	add	r7, sp, #0
 800958c:	4603      	mov	r3, r0
 800958e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8009590:	1dfb      	adds	r3, r7, #7
 8009592:	2201      	movs	r2, #1
 8009594:	4619      	mov	r1, r3
 8009596:	20a0      	movs	r0, #160	; 0xa0
 8009598:	f000 fd4a 	bl	800a030 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800959c:	79fb      	ldrb	r3, [r7, #7]
 800959e:	2b3f      	cmp	r3, #63	; 0x3f
 80095a0:	d91c      	bls.n	80095dc <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 80095a2:	79fb      	ldrb	r3, [r7, #7]
 80095a4:	085b      	lsrs	r3, r3, #1
 80095a6:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 80095a8:	2300      	movs	r3, #0
 80095aa:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 80095ac:	2300      	movs	r3, #0
 80095ae:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 80095b0:	e005      	b.n	80095be <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 80095b2:	7bfb      	ldrb	r3, [r7, #15]
 80095b4:	089b      	lsrs	r3, r3, #2
 80095b6:	73fb      	strb	r3, [r7, #15]
            exp++;
 80095b8:	7bbb      	ldrb	r3, [r7, #14]
 80095ba:	3301      	adds	r3, #1
 80095bc:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 80095be:	7bfb      	ldrb	r3, [r7, #15]
 80095c0:	2b1f      	cmp	r3, #31
 80095c2:	d8f6      	bhi.n	80095b2 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 80095c4:	7bfb      	ldrb	r3, [r7, #15]
 80095c6:	00db      	lsls	r3, r3, #3
 80095c8:	b2da      	uxtb	r2, r3
 80095ca:	7bbb      	ldrb	r3, [r7, #14]
 80095cc:	4413      	add	r3, r2
 80095ce:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 80095d0:	7b7b      	ldrb	r3, [r7, #13]
 80095d2:	4619      	mov	r1, r3
 80095d4:	f240 7006 	movw	r0, #1798	; 0x706
 80095d8:	f000 fc7a 	bl	8009ed0 <SUBGRF_WriteRegister>
    }
}
 80095dc:	bf00      	nop
 80095de:	3710      	adds	r7, #16
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80095ea:	f001 f818 	bl	800a61e <RBI_IsDCDC>
 80095ee:	4603      	mov	r3, r0
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d102      	bne.n	80095fa <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 80095f4:	2301      	movs	r3, #1
 80095f6:	71fb      	strb	r3, [r7, #7]
 80095f8:	e001      	b.n	80095fe <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 80095fa:	2300      	movs	r3, #0
 80095fc:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80095fe:	1dfb      	adds	r3, r7, #7
 8009600:	2201      	movs	r2, #1
 8009602:	4619      	mov	r1, r3
 8009604:	2096      	movs	r0, #150	; 0x96
 8009606:	f000 fd13 	bl	800a030 <SUBGRF_WriteCommand>
}
 800960a:	bf00      	nop
 800960c:	3708      	adds	r7, #8
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8009612:	b580      	push	{r7, lr}
 8009614:	b084      	sub	sp, #16
 8009616:	af00      	add	r7, sp, #0
 8009618:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800961a:	793b      	ldrb	r3, [r7, #4]
 800961c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009620:	b2db      	uxtb	r3, r3
 8009622:	019b      	lsls	r3, r3, #6
 8009624:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8009626:	793b      	ldrb	r3, [r7, #4]
 8009628:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800962c:	b2db      	uxtb	r3, r3
 800962e:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8009630:	b25b      	sxtb	r3, r3
 8009632:	4313      	orrs	r3, r2
 8009634:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8009636:	793b      	ldrb	r3, [r7, #4]
 8009638:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800963c:	b2db      	uxtb	r3, r3
 800963e:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8009640:	b25b      	sxtb	r3, r3
 8009642:	4313      	orrs	r3, r2
 8009644:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8009646:	793b      	ldrb	r3, [r7, #4]
 8009648:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800964c:	b2db      	uxtb	r3, r3
 800964e:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8009650:	b25b      	sxtb	r3, r3
 8009652:	4313      	orrs	r3, r2
 8009654:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8009656:	793b      	ldrb	r3, [r7, #4]
 8009658:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800965c:	b2db      	uxtb	r3, r3
 800965e:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8009660:	b25b      	sxtb	r3, r3
 8009662:	4313      	orrs	r3, r2
 8009664:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8009666:	793b      	ldrb	r3, [r7, #4]
 8009668:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800966c:	b2db      	uxtb	r3, r3
 800966e:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8009670:	b25b      	sxtb	r3, r3
 8009672:	4313      	orrs	r3, r2
 8009674:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8009676:	793b      	ldrb	r3, [r7, #4]
 8009678:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800967c:	b2db      	uxtb	r3, r3
 800967e:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8009680:	4313      	orrs	r3, r2
 8009682:	b25b      	sxtb	r3, r3
 8009684:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8009686:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8009688:	f107 030f 	add.w	r3, r7, #15
 800968c:	2201      	movs	r2, #1
 800968e:	4619      	mov	r1, r3
 8009690:	2089      	movs	r0, #137	; 0x89
 8009692:	f000 fccd 	bl	800a030 <SUBGRF_WriteCommand>
}
 8009696:	bf00      	nop
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
	...

080096a0 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	4a1b      	ldr	r2, [pc, #108]	; (8009718 <SUBGRF_CalibrateImage+0x78>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d904      	bls.n	80096ba <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 80096b0:	23e1      	movs	r3, #225	; 0xe1
 80096b2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 80096b4:	23e9      	movs	r3, #233	; 0xe9
 80096b6:	737b      	strb	r3, [r7, #13]
 80096b8:	e022      	b.n	8009700 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	4a17      	ldr	r2, [pc, #92]	; (800971c <SUBGRF_CalibrateImage+0x7c>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d904      	bls.n	80096cc <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 80096c2:	23d7      	movs	r3, #215	; 0xd7
 80096c4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 80096c6:	23db      	movs	r3, #219	; 0xdb
 80096c8:	737b      	strb	r3, [r7, #13]
 80096ca:	e019      	b.n	8009700 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	4a14      	ldr	r2, [pc, #80]	; (8009720 <SUBGRF_CalibrateImage+0x80>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d904      	bls.n	80096de <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 80096d4:	23c1      	movs	r3, #193	; 0xc1
 80096d6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 80096d8:	23c5      	movs	r3, #197	; 0xc5
 80096da:	737b      	strb	r3, [r7, #13]
 80096dc:	e010      	b.n	8009700 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	4a10      	ldr	r2, [pc, #64]	; (8009724 <SUBGRF_CalibrateImage+0x84>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d904      	bls.n	80096f0 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80096e6:	2375      	movs	r3, #117	; 0x75
 80096e8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80096ea:	2381      	movs	r3, #129	; 0x81
 80096ec:	737b      	strb	r3, [r7, #13]
 80096ee:	e007      	b.n	8009700 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	4a0d      	ldr	r2, [pc, #52]	; (8009728 <SUBGRF_CalibrateImage+0x88>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d903      	bls.n	8009700 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 80096f8:	236b      	movs	r3, #107	; 0x6b
 80096fa:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80096fc:	236f      	movs	r3, #111	; 0x6f
 80096fe:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8009700:	f107 030c 	add.w	r3, r7, #12
 8009704:	2202      	movs	r2, #2
 8009706:	4619      	mov	r1, r3
 8009708:	2098      	movs	r0, #152	; 0x98
 800970a:	f000 fc91 	bl	800a030 <SUBGRF_WriteCommand>
}
 800970e:	bf00      	nop
 8009710:	3710      	adds	r7, #16
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	35a4e900 	.word	0x35a4e900
 800971c:	32a9f880 	.word	0x32a9f880
 8009720:	2de54480 	.word	0x2de54480
 8009724:	1b6b0b00 	.word	0x1b6b0b00
 8009728:	1954fc40 	.word	0x1954fc40

0800972c <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800972c:	b590      	push	{r4, r7, lr}
 800972e:	b085      	sub	sp, #20
 8009730:	af00      	add	r7, sp, #0
 8009732:	4604      	mov	r4, r0
 8009734:	4608      	mov	r0, r1
 8009736:	4611      	mov	r1, r2
 8009738:	461a      	mov	r2, r3
 800973a:	4623      	mov	r3, r4
 800973c:	71fb      	strb	r3, [r7, #7]
 800973e:	4603      	mov	r3, r0
 8009740:	71bb      	strb	r3, [r7, #6]
 8009742:	460b      	mov	r3, r1
 8009744:	717b      	strb	r3, [r7, #5]
 8009746:	4613      	mov	r3, r2
 8009748:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800974a:	79fb      	ldrb	r3, [r7, #7]
 800974c:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800974e:	79bb      	ldrb	r3, [r7, #6]
 8009750:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8009752:	797b      	ldrb	r3, [r7, #5]
 8009754:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8009756:	793b      	ldrb	r3, [r7, #4]
 8009758:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800975a:	f107 030c 	add.w	r3, r7, #12
 800975e:	2204      	movs	r2, #4
 8009760:	4619      	mov	r1, r3
 8009762:	2095      	movs	r0, #149	; 0x95
 8009764:	f000 fc64 	bl	800a030 <SUBGRF_WriteCommand>
}
 8009768:	bf00      	nop
 800976a:	3714      	adds	r7, #20
 800976c:	46bd      	mov	sp, r7
 800976e:	bd90      	pop	{r4, r7, pc}

08009770 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8009770:	b590      	push	{r4, r7, lr}
 8009772:	b085      	sub	sp, #20
 8009774:	af00      	add	r7, sp, #0
 8009776:	4604      	mov	r4, r0
 8009778:	4608      	mov	r0, r1
 800977a:	4611      	mov	r1, r2
 800977c:	461a      	mov	r2, r3
 800977e:	4623      	mov	r3, r4
 8009780:	80fb      	strh	r3, [r7, #6]
 8009782:	4603      	mov	r3, r0
 8009784:	80bb      	strh	r3, [r7, #4]
 8009786:	460b      	mov	r3, r1
 8009788:	807b      	strh	r3, [r7, #2]
 800978a:	4613      	mov	r3, r2
 800978c:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800978e:	88fb      	ldrh	r3, [r7, #6]
 8009790:	0a1b      	lsrs	r3, r3, #8
 8009792:	b29b      	uxth	r3, r3
 8009794:	b2db      	uxtb	r3, r3
 8009796:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8009798:	88fb      	ldrh	r3, [r7, #6]
 800979a:	b2db      	uxtb	r3, r3
 800979c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800979e:	88bb      	ldrh	r3, [r7, #4]
 80097a0:	0a1b      	lsrs	r3, r3, #8
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 80097a8:	88bb      	ldrh	r3, [r7, #4]
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80097ae:	887b      	ldrh	r3, [r7, #2]
 80097b0:	0a1b      	lsrs	r3, r3, #8
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80097b8:	887b      	ldrh	r3, [r7, #2]
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80097be:	883b      	ldrh	r3, [r7, #0]
 80097c0:	0a1b      	lsrs	r3, r3, #8
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80097c8:	883b      	ldrh	r3, [r7, #0]
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80097ce:	f107 0308 	add.w	r3, r7, #8
 80097d2:	2208      	movs	r2, #8
 80097d4:	4619      	mov	r1, r3
 80097d6:	2008      	movs	r0, #8
 80097d8:	f000 fc2a 	bl	800a030 <SUBGRF_WriteCommand>
}
 80097dc:	bf00      	nop
 80097de:	3714      	adds	r7, #20
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd90      	pop	{r4, r7, pc}

080097e4 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	4603      	mov	r3, r0
 80097ec:	6039      	str	r1, [r7, #0]
 80097ee:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80097f0:	79fb      	ldrb	r3, [r7, #7]
 80097f2:	f003 0307 	and.w	r3, r3, #7
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	0c1b      	lsrs	r3, r3, #16
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	0a1b      	lsrs	r3, r3, #8
 8009806:	b2db      	uxtb	r3, r3
 8009808:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	b2db      	uxtb	r3, r3
 800980e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8009810:	f107 030c 	add.w	r3, r7, #12
 8009814:	2204      	movs	r2, #4
 8009816:	4619      	mov	r1, r3
 8009818:	2097      	movs	r0, #151	; 0x97
 800981a:	f000 fc09 	bl	800a030 <SUBGRF_WriteCommand>
}
 800981e:	bf00      	nop
 8009820:	3710      	adds	r7, #16
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
	...

08009828 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8009828:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800982c:	b084      	sub	sp, #16
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8009832:	2300      	movs	r3, #0
 8009834:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8009836:	4b1d      	ldr	r3, [pc, #116]	; (80098ac <SUBGRF_SetRfFrequency+0x84>)
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	f083 0301 	eor.w	r3, r3, #1
 800983e:	b2db      	uxtb	r3, r3
 8009840:	2b00      	cmp	r3, #0
 8009842:	d005      	beq.n	8009850 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f7ff ff2b 	bl	80096a0 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800984a:	4b18      	ldr	r3, [pc, #96]	; (80098ac <SUBGRF_SetRfFrequency+0x84>)
 800984c:	2201      	movs	r2, #1
 800984e:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	461c      	mov	r4, r3
 8009856:	4615      	mov	r5, r2
 8009858:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800985c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8009860:	4a13      	ldr	r2, [pc, #76]	; (80098b0 <SUBGRF_SetRfFrequency+0x88>)
 8009862:	f04f 0300 	mov.w	r3, #0
 8009866:	4640      	mov	r0, r8
 8009868:	4649      	mov	r1, r9
 800986a:	f7f6 fc8d 	bl	8000188 <__aeabi_uldivmod>
 800986e:	4602      	mov	r2, r0
 8009870:	460b      	mov	r3, r1
 8009872:	4613      	mov	r3, r2
 8009874:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	0e1b      	lsrs	r3, r3, #24
 800987a:	b2db      	uxtb	r3, r3
 800987c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	0c1b      	lsrs	r3, r3, #16
 8009882:	b2db      	uxtb	r3, r3
 8009884:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	0a1b      	lsrs	r3, r3, #8
 800988a:	b2db      	uxtb	r3, r3
 800988c:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	b2db      	uxtb	r3, r3
 8009892:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8009894:	f107 0308 	add.w	r3, r7, #8
 8009898:	2204      	movs	r2, #4
 800989a:	4619      	mov	r1, r3
 800989c:	2086      	movs	r0, #134	; 0x86
 800989e:	f000 fbc7 	bl	800a030 <SUBGRF_WriteCommand>
}
 80098a2:	bf00      	nop
 80098a4:	3710      	adds	r7, #16
 80098a6:	46bd      	mov	sp, r7
 80098a8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80098ac:	20000318 	.word	0x20000318
 80098b0:	01e84800 	.word	0x01e84800

080098b4 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b082      	sub	sp, #8
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	4603      	mov	r3, r0
 80098bc:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 80098be:	79fa      	ldrb	r2, [r7, #7]
 80098c0:	4b09      	ldr	r3, [pc, #36]	; (80098e8 <SUBGRF_SetPacketType+0x34>)
 80098c2:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 80098c4:	79fb      	ldrb	r3, [r7, #7]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d104      	bne.n	80098d4 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 80098ca:	2100      	movs	r1, #0
 80098cc:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80098d0:	f000 fafe 	bl	8009ed0 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80098d4:	1dfb      	adds	r3, r7, #7
 80098d6:	2201      	movs	r2, #1
 80098d8:	4619      	mov	r1, r3
 80098da:	208a      	movs	r0, #138	; 0x8a
 80098dc:	f000 fba8 	bl	800a030 <SUBGRF_WriteCommand>
}
 80098e0:	bf00      	nop
 80098e2:	3708      	adds	r7, #8
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	20000311 	.word	0x20000311

080098ec <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 80098ec:	b480      	push	{r7}
 80098ee:	af00      	add	r7, sp, #0
    return PacketType;
 80098f0:	4b02      	ldr	r3, [pc, #8]	; (80098fc <SUBGRF_GetPacketType+0x10>)
 80098f2:	781b      	ldrb	r3, [r3, #0]
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bc80      	pop	{r7}
 80098fa:	4770      	bx	lr
 80098fc:	20000311 	.word	0x20000311

08009900 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b084      	sub	sp, #16
 8009904:	af00      	add	r7, sp, #0
 8009906:	4603      	mov	r3, r0
 8009908:	71fb      	strb	r3, [r7, #7]
 800990a:	460b      	mov	r3, r1
 800990c:	71bb      	strb	r3, [r7, #6]
 800990e:	4613      	mov	r3, r2
 8009910:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8009912:	79fb      	ldrb	r3, [r7, #7]
 8009914:	2b01      	cmp	r3, #1
 8009916:	d149      	bne.n	80099ac <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8009918:	2000      	movs	r0, #0
 800991a:	f000 fe87 	bl	800a62c <RBI_GetRFOMaxPowerConfig>
 800991e:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8009920:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009924:	68fa      	ldr	r2, [r7, #12]
 8009926:	429a      	cmp	r2, r3
 8009928:	da01      	bge.n	800992e <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2b0e      	cmp	r3, #14
 8009932:	d10e      	bne.n	8009952 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8009934:	2301      	movs	r3, #1
 8009936:	2201      	movs	r2, #1
 8009938:	2100      	movs	r1, #0
 800993a:	2004      	movs	r0, #4
 800993c:	f7ff fef6 	bl	800972c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009940:	79ba      	ldrb	r2, [r7, #6]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	b2db      	uxtb	r3, r3
 8009946:	1ad3      	subs	r3, r2, r3
 8009948:	b2db      	uxtb	r3, r3
 800994a:	330e      	adds	r3, #14
 800994c:	b2db      	uxtb	r3, r3
 800994e:	71bb      	strb	r3, [r7, #6]
 8009950:	e01f      	b.n	8009992 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2b0a      	cmp	r3, #10
 8009956:	d10e      	bne.n	8009976 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8009958:	2301      	movs	r3, #1
 800995a:	2201      	movs	r2, #1
 800995c:	2100      	movs	r1, #0
 800995e:	2001      	movs	r0, #1
 8009960:	f7ff fee4 	bl	800972c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8009964:	79ba      	ldrb	r2, [r7, #6]
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	b2db      	uxtb	r3, r3
 800996a:	1ad3      	subs	r3, r2, r3
 800996c:	b2db      	uxtb	r3, r3
 800996e:	330d      	adds	r3, #13
 8009970:	b2db      	uxtb	r3, r3
 8009972:	71bb      	strb	r3, [r7, #6]
 8009974:	e00d      	b.n	8009992 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 8009976:	2301      	movs	r3, #1
 8009978:	2201      	movs	r2, #1
 800997a:	2100      	movs	r1, #0
 800997c:	2006      	movs	r0, #6
 800997e:	f7ff fed5 	bl	800972c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009982:	79ba      	ldrb	r2, [r7, #6]
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	b2db      	uxtb	r3, r3
 8009988:	1ad3      	subs	r3, r2, r3
 800998a:	b2db      	uxtb	r3, r3
 800998c:	330e      	adds	r3, #14
 800998e:	b2db      	uxtb	r3, r3
 8009990:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8009992:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009996:	f113 0f11 	cmn.w	r3, #17
 800999a:	da01      	bge.n	80099a0 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 800999c:	23ef      	movs	r3, #239	; 0xef
 800999e:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 80099a0:	2118      	movs	r1, #24
 80099a2:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80099a6:	f000 fa93 	bl	8009ed0 <SUBGRF_WriteRegister>
 80099aa:	e067      	b.n	8009a7c <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 80099ac:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80099b0:	f000 faa2 	bl	8009ef8 <SUBGRF_ReadRegister>
 80099b4:	4603      	mov	r3, r0
 80099b6:	f043 031e 	orr.w	r3, r3, #30
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	4619      	mov	r1, r3
 80099be:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80099c2:	f000 fa85 	bl	8009ed0 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 80099c6:	2001      	movs	r0, #1
 80099c8:	f000 fe30 	bl	800a62c <RBI_GetRFOMaxPowerConfig>
 80099cc:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 80099ce:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80099d2:	68fa      	ldr	r2, [r7, #12]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	da01      	bge.n	80099dc <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2b14      	cmp	r3, #20
 80099e0:	d10e      	bne.n	8009a00 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 80099e2:	2301      	movs	r3, #1
 80099e4:	2200      	movs	r2, #0
 80099e6:	2105      	movs	r1, #5
 80099e8:	2003      	movs	r0, #3
 80099ea:	f7ff fe9f 	bl	800972c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80099ee:	79ba      	ldrb	r2, [r7, #6]
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	1ad3      	subs	r3, r2, r3
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	3316      	adds	r3, #22
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	71bb      	strb	r3, [r7, #6]
 80099fe:	e031      	b.n	8009a64 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2b11      	cmp	r3, #17
 8009a04:	d10e      	bne.n	8009a24 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8009a06:	2301      	movs	r3, #1
 8009a08:	2200      	movs	r2, #0
 8009a0a:	2103      	movs	r1, #3
 8009a0c:	2002      	movs	r0, #2
 8009a0e:	f7ff fe8d 	bl	800972c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009a12:	79ba      	ldrb	r2, [r7, #6]
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	1ad3      	subs	r3, r2, r3
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	3316      	adds	r3, #22
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	71bb      	strb	r3, [r7, #6]
 8009a22:	e01f      	b.n	8009a64 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2b0e      	cmp	r3, #14
 8009a28:	d10e      	bne.n	8009a48 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	2102      	movs	r1, #2
 8009a30:	2002      	movs	r0, #2
 8009a32:	f7ff fe7b 	bl	800972c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009a36:	79ba      	ldrb	r2, [r7, #6]
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	330e      	adds	r3, #14
 8009a42:	b2db      	uxtb	r3, r3
 8009a44:	71bb      	strb	r3, [r7, #6]
 8009a46:	e00d      	b.n	8009a64 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8009a48:	2301      	movs	r3, #1
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	2107      	movs	r1, #7
 8009a4e:	2004      	movs	r0, #4
 8009a50:	f7ff fe6c 	bl	800972c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009a54:	79ba      	ldrb	r2, [r7, #6]
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	b2db      	uxtb	r3, r3
 8009a5a:	1ad3      	subs	r3, r2, r3
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	3316      	adds	r3, #22
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8009a64:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009a68:	f113 0f09 	cmn.w	r3, #9
 8009a6c:	da01      	bge.n	8009a72 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8009a6e:	23f7      	movs	r3, #247	; 0xf7
 8009a70:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8009a72:	2138      	movs	r1, #56	; 0x38
 8009a74:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8009a78:	f000 fa2a 	bl	8009ed0 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8009a7c:	79bb      	ldrb	r3, [r7, #6]
 8009a7e:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8009a80:	797b      	ldrb	r3, [r7, #5]
 8009a82:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8009a84:	f107 0308 	add.w	r3, r7, #8
 8009a88:	2202      	movs	r2, #2
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	208e      	movs	r0, #142	; 0x8e
 8009a8e:	f000 facf 	bl	800a030 <SUBGRF_WriteCommand>
}
 8009a92:	bf00      	nop
 8009a94:	3710      	adds	r7, #16
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
	...

08009a9c <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8009a9c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009aa0:	b086      	sub	sp, #24
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8009aaa:	4a61      	ldr	r2, [pc, #388]	; (8009c30 <SUBGRF_SetModulationParams+0x194>)
 8009aac:	f107 0308 	add.w	r3, r7, #8
 8009ab0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009ab4:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	781a      	ldrb	r2, [r3, #0]
 8009abc:	4b5d      	ldr	r3, [pc, #372]	; (8009c34 <SUBGRF_SetModulationParams+0x198>)
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d004      	beq.n	8009ace <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f7ff fef3 	bl	80098b4 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	2b03      	cmp	r3, #3
 8009ad4:	f200 80a5 	bhi.w	8009c22 <SUBGRF_SetModulationParams+0x186>
 8009ad8:	a201      	add	r2, pc, #4	; (adr r2, 8009ae0 <SUBGRF_SetModulationParams+0x44>)
 8009ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ade:	bf00      	nop
 8009ae0:	08009af1 	.word	0x08009af1
 8009ae4:	08009bb1 	.word	0x08009bb1
 8009ae8:	08009b73 	.word	0x08009b73
 8009aec:	08009bdf 	.word	0x08009bdf
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8009af0:	2308      	movs	r3, #8
 8009af2:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	4a4f      	ldr	r2, [pc, #316]	; (8009c38 <SUBGRF_SetModulationParams+0x19c>)
 8009afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009afe:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	0c1b      	lsrs	r3, r3, #16
 8009b04:	b2db      	uxtb	r3, r3
 8009b06:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	0a1b      	lsrs	r3, r3, #8
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	7b1b      	ldrb	r3, [r3, #12]
 8009b1a:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	7b5b      	ldrb	r3, [r3, #13]
 8009b20:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	689b      	ldr	r3, [r3, #8]
 8009b26:	2200      	movs	r2, #0
 8009b28:	461c      	mov	r4, r3
 8009b2a:	4615      	mov	r5, r2
 8009b2c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8009b30:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8009b34:	4a41      	ldr	r2, [pc, #260]	; (8009c3c <SUBGRF_SetModulationParams+0x1a0>)
 8009b36:	f04f 0300 	mov.w	r3, #0
 8009b3a:	4640      	mov	r0, r8
 8009b3c:	4649      	mov	r1, r9
 8009b3e:	f7f6 fb23 	bl	8000188 <__aeabi_uldivmod>
 8009b42:	4602      	mov	r2, r0
 8009b44:	460b      	mov	r3, r1
 8009b46:	4613      	mov	r3, r2
 8009b48:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	0c1b      	lsrs	r3, r3, #16
 8009b4e:	b2db      	uxtb	r3, r3
 8009b50:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	0a1b      	lsrs	r3, r3, #8
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009b60:	7cfb      	ldrb	r3, [r7, #19]
 8009b62:	b29a      	uxth	r2, r3
 8009b64:	f107 0308 	add.w	r3, r7, #8
 8009b68:	4619      	mov	r1, r3
 8009b6a:	208b      	movs	r0, #139	; 0x8b
 8009b6c:	f000 fa60 	bl	800a030 <SUBGRF_WriteCommand>
        break;
 8009b70:	e058      	b.n	8009c24 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 8009b72:	2304      	movs	r3, #4
 8009b74:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	691b      	ldr	r3, [r3, #16]
 8009b7a:	4a2f      	ldr	r2, [pc, #188]	; (8009c38 <SUBGRF_SetModulationParams+0x19c>)
 8009b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b80:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	0c1b      	lsrs	r3, r3, #16
 8009b86:	b2db      	uxtb	r3, r3
 8009b88:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	0a1b      	lsrs	r3, r3, #8
 8009b8e:	b2db      	uxtb	r3, r3
 8009b90:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	7d1b      	ldrb	r3, [r3, #20]
 8009b9c:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009b9e:	7cfb      	ldrb	r3, [r7, #19]
 8009ba0:	b29a      	uxth	r2, r3
 8009ba2:	f107 0308 	add.w	r3, r7, #8
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	208b      	movs	r0, #139	; 0x8b
 8009baa:	f000 fa41 	bl	800a030 <SUBGRF_WriteCommand>
        break;
 8009bae:	e039      	b.n	8009c24 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 8009bb0:	2304      	movs	r3, #4
 8009bb2:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	7e1b      	ldrb	r3, [r3, #24]
 8009bb8:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	7e5b      	ldrb	r3, [r3, #25]
 8009bbe:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	7e9b      	ldrb	r3, [r3, #26]
 8009bc4:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	7edb      	ldrb	r3, [r3, #27]
 8009bca:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009bcc:	7cfb      	ldrb	r3, [r7, #19]
 8009bce:	b29a      	uxth	r2, r3
 8009bd0:	f107 0308 	add.w	r3, r7, #8
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	208b      	movs	r0, #139	; 0x8b
 8009bd8:	f000 fa2a 	bl	800a030 <SUBGRF_WriteCommand>

        break;
 8009bdc:	e022      	b.n	8009c24 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 8009bde:	2305      	movs	r3, #5
 8009be0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	4a14      	ldr	r2, [pc, #80]	; (8009c38 <SUBGRF_SetModulationParams+0x19c>)
 8009be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bec:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	0c1b      	lsrs	r3, r3, #16
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	0a1b      	lsrs	r3, r3, #8
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	7b1b      	ldrb	r3, [r3, #12]
 8009c08:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	7b5b      	ldrb	r3, [r3, #13]
 8009c0e:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009c10:	7cfb      	ldrb	r3, [r7, #19]
 8009c12:	b29a      	uxth	r2, r3
 8009c14:	f107 0308 	add.w	r3, r7, #8
 8009c18:	4619      	mov	r1, r3
 8009c1a:	208b      	movs	r0, #139	; 0x8b
 8009c1c:	f000 fa08 	bl	800a030 <SUBGRF_WriteCommand>
        break;
 8009c20:	e000      	b.n	8009c24 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 8009c22:	bf00      	nop
    }
}
 8009c24:	bf00      	nop
 8009c26:	3718      	adds	r7, #24
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009c2e:	bf00      	nop
 8009c30:	0800bba0 	.word	0x0800bba0
 8009c34:	20000311 	.word	0x20000311
 8009c38:	3d090000 	.word	0x3d090000
 8009c3c:	01e84800 	.word	0x01e84800

08009c40 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b086      	sub	sp, #24
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8009c4c:	4a48      	ldr	r2, [pc, #288]	; (8009d70 <SUBGRF_SetPacketParams+0x130>)
 8009c4e:	f107 030c 	add.w	r3, r7, #12
 8009c52:	ca07      	ldmia	r2, {r0, r1, r2}
 8009c54:	c303      	stmia	r3!, {r0, r1}
 8009c56:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	781a      	ldrb	r2, [r3, #0]
 8009c5c:	4b45      	ldr	r3, [pc, #276]	; (8009d74 <SUBGRF_SetPacketParams+0x134>)
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d004      	beq.n	8009c6e <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f7ff fe23 	bl	80098b4 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	781b      	ldrb	r3, [r3, #0]
 8009c72:	2b03      	cmp	r3, #3
 8009c74:	d878      	bhi.n	8009d68 <SUBGRF_SetPacketParams+0x128>
 8009c76:	a201      	add	r2, pc, #4	; (adr r2, 8009c7c <SUBGRF_SetPacketParams+0x3c>)
 8009c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c7c:	08009c8d 	.word	0x08009c8d
 8009c80:	08009d1d 	.word	0x08009d1d
 8009c84:	08009d11 	.word	0x08009d11
 8009c88:	08009c8d 	.word	0x08009c8d
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	7a5b      	ldrb	r3, [r3, #9]
 8009c90:	2bf1      	cmp	r3, #241	; 0xf1
 8009c92:	d10a      	bne.n	8009caa <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8009c94:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009c98:	f7ff faae 	bl	80091f8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8009c9c:	f248 0005 	movw	r0, #32773	; 0x8005
 8009ca0:	f7ff faca 	bl	8009238 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8009ca4:	2302      	movs	r3, #2
 8009ca6:	75bb      	strb	r3, [r7, #22]
 8009ca8:	e011      	b.n	8009cce <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	7a5b      	ldrb	r3, [r3, #9]
 8009cae:	2bf2      	cmp	r3, #242	; 0xf2
 8009cb0:	d10a      	bne.n	8009cc8 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8009cb2:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8009cb6:	f7ff fa9f 	bl	80091f8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8009cba:	f241 0021 	movw	r0, #4129	; 0x1021
 8009cbe:	f7ff fabb 	bl	8009238 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8009cc2:	2306      	movs	r3, #6
 8009cc4:	75bb      	strb	r3, [r7, #22]
 8009cc6:	e002      	b.n	8009cce <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	7a5b      	ldrb	r3, [r3, #9]
 8009ccc:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8009cce:	2309      	movs	r3, #9
 8009cd0:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	885b      	ldrh	r3, [r3, #2]
 8009cd6:	0a1b      	lsrs	r3, r3, #8
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	885b      	ldrh	r3, [r3, #2]
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	791b      	ldrb	r3, [r3, #4]
 8009cea:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	795b      	ldrb	r3, [r3, #5]
 8009cf0:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	799b      	ldrb	r3, [r3, #6]
 8009cf6:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	79db      	ldrb	r3, [r3, #7]
 8009cfc:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	7a1b      	ldrb	r3, [r3, #8]
 8009d02:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8009d04:	7dbb      	ldrb	r3, [r7, #22]
 8009d06:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	7a9b      	ldrb	r3, [r3, #10]
 8009d0c:	753b      	strb	r3, [r7, #20]
        break;
 8009d0e:	e022      	b.n	8009d56 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8009d10:	2301      	movs	r3, #1
 8009d12:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	7b1b      	ldrb	r3, [r3, #12]
 8009d18:	733b      	strb	r3, [r7, #12]
        break;
 8009d1a:	e01c      	b.n	8009d56 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8009d1c:	2306      	movs	r3, #6
 8009d1e:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	89db      	ldrh	r3, [r3, #14]
 8009d24:	0a1b      	lsrs	r3, r3, #8
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	b2db      	uxtb	r3, r3
 8009d2a:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	89db      	ldrh	r3, [r3, #14]
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	7c1a      	ldrb	r2, [r3, #16]
 8009d38:	4b0f      	ldr	r3, [pc, #60]	; (8009d78 <SUBGRF_SetPacketParams+0x138>)
 8009d3a:	4611      	mov	r1, r2
 8009d3c:	7019      	strb	r1, [r3, #0]
 8009d3e:	4613      	mov	r3, r2
 8009d40:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	7c5b      	ldrb	r3, [r3, #17]
 8009d46:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	7c9b      	ldrb	r3, [r3, #18]
 8009d4c:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	7cdb      	ldrb	r3, [r3, #19]
 8009d52:	747b      	strb	r3, [r7, #17]
        break;
 8009d54:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8009d56:	7dfb      	ldrb	r3, [r7, #23]
 8009d58:	b29a      	uxth	r2, r3
 8009d5a:	f107 030c 	add.w	r3, r7, #12
 8009d5e:	4619      	mov	r1, r3
 8009d60:	208c      	movs	r0, #140	; 0x8c
 8009d62:	f000 f965 	bl	800a030 <SUBGRF_WriteCommand>
 8009d66:	e000      	b.n	8009d6a <SUBGRF_SetPacketParams+0x12a>
        return;
 8009d68:	bf00      	nop
}
 8009d6a:	3718      	adds	r7, #24
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	0800bba8 	.word	0x0800bba8
 8009d74:	20000311 	.word	0x20000311
 8009d78:	20000312 	.word	0x20000312

08009d7c <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	4603      	mov	r3, r0
 8009d84:	460a      	mov	r2, r1
 8009d86:	71fb      	strb	r3, [r7, #7]
 8009d88:	4613      	mov	r3, r2
 8009d8a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8009d8c:	79fb      	ldrb	r3, [r7, #7]
 8009d8e:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8009d90:	79bb      	ldrb	r3, [r7, #6]
 8009d92:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8009d94:	f107 030c 	add.w	r3, r7, #12
 8009d98:	2202      	movs	r2, #2
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	208f      	movs	r0, #143	; 0x8f
 8009d9e:	f000 f947 	bl	800a030 <SUBGRF_WriteCommand>
}
 8009da2:	bf00      	nop
 8009da4:	3710      	adds	r7, #16
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}

08009daa <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8009daa:	b580      	push	{r7, lr}
 8009dac:	b082      	sub	sp, #8
 8009dae:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8009db0:	2300      	movs	r3, #0
 8009db2:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8009db4:	1d3b      	adds	r3, r7, #4
 8009db6:	2201      	movs	r2, #1
 8009db8:	4619      	mov	r1, r3
 8009dba:	2015      	movs	r0, #21
 8009dbc:	f000 f95a 	bl	800a074 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8009dc0:	793b      	ldrb	r3, [r7, #4]
 8009dc2:	425b      	negs	r3, r3
 8009dc4:	105b      	asrs	r3, r3, #1
 8009dc6:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8009dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3708      	adds	r7, #8
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8009dde:	f107 030c 	add.w	r3, r7, #12
 8009de2:	2202      	movs	r2, #2
 8009de4:	4619      	mov	r1, r3
 8009de6:	2013      	movs	r0, #19
 8009de8:	f000 f944 	bl	800a074 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8009dec:	f7ff fd7e 	bl	80098ec <SUBGRF_GetPacketType>
 8009df0:	4603      	mov	r3, r0
 8009df2:	2b01      	cmp	r3, #1
 8009df4:	d10d      	bne.n	8009e12 <SUBGRF_GetRxBufferStatus+0x3e>
 8009df6:	4b0c      	ldr	r3, [pc, #48]	; (8009e28 <SUBGRF_GetRxBufferStatus+0x54>)
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d108      	bne.n	8009e12 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8009e00:	f240 7002 	movw	r0, #1794	; 0x702
 8009e04:	f000 f878 	bl	8009ef8 <SUBGRF_ReadRegister>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	701a      	strb	r2, [r3, #0]
 8009e10:	e002      	b.n	8009e18 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8009e12:	7b3a      	ldrb	r2, [r7, #12]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8009e18:	7b7a      	ldrb	r2, [r7, #13]
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	701a      	strb	r2, [r3, #0]
}
 8009e1e:	bf00      	nop
 8009e20:	3710      	adds	r7, #16
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	20000312 	.word	0x20000312

08009e2c <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8009e34:	f107 030c 	add.w	r3, r7, #12
 8009e38:	2203      	movs	r2, #3
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	2014      	movs	r0, #20
 8009e3e:	f000 f919 	bl	800a074 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8009e42:	f7ff fd53 	bl	80098ec <SUBGRF_GetPacketType>
 8009e46:	4603      	mov	r3, r0
 8009e48:	461a      	mov	r2, r3
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d002      	beq.n	8009e5c <SUBGRF_GetPacketStatus+0x30>
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d013      	beq.n	8009e82 <SUBGRF_GetPacketStatus+0x56>
 8009e5a:	e02a      	b.n	8009eb2 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8009e5c:	7b3a      	ldrb	r2, [r7, #12]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8009e62:	7b7b      	ldrb	r3, [r7, #13]
 8009e64:	425b      	negs	r3, r3
 8009e66:	105b      	asrs	r3, r3, #1
 8009e68:	b25a      	sxtb	r2, r3
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8009e6e:	7bbb      	ldrb	r3, [r7, #14]
 8009e70:	425b      	negs	r3, r3
 8009e72:	105b      	asrs	r3, r3, #1
 8009e74:	b25a      	sxtb	r2, r3
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	609a      	str	r2, [r3, #8]
            break;
 8009e80:	e020      	b.n	8009ec4 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8009e82:	7b3b      	ldrb	r3, [r7, #12]
 8009e84:	425b      	negs	r3, r3
 8009e86:	105b      	asrs	r3, r3, #1
 8009e88:	b25a      	sxtb	r2, r3
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8009e8e:	7b7b      	ldrb	r3, [r7, #13]
 8009e90:	b25b      	sxtb	r3, r3
 8009e92:	3302      	adds	r3, #2
 8009e94:	109b      	asrs	r3, r3, #2
 8009e96:	b25a      	sxtb	r2, r3
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8009e9c:	7bbb      	ldrb	r3, [r7, #14]
 8009e9e:	425b      	negs	r3, r3
 8009ea0:	105b      	asrs	r3, r3, #1
 8009ea2:	b25a      	sxtb	r2, r3
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8009ea8:	4b08      	ldr	r3, [pc, #32]	; (8009ecc <SUBGRF_GetPacketStatus+0xa0>)
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	611a      	str	r2, [r3, #16]
            break;
 8009eb0:	e008      	b.n	8009ec4 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8009eb2:	2214      	movs	r2, #20
 8009eb4:	2100      	movs	r1, #0
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 fc8b 	bl	800a7d2 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	220f      	movs	r2, #15
 8009ec0:	701a      	strb	r2, [r3, #0]
            break;
 8009ec2:	bf00      	nop
    }
}
 8009ec4:	bf00      	nop
 8009ec6:	3710      	adds	r7, #16
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}
 8009ecc:	20000314 	.word	0x20000314

08009ed0 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b082      	sub	sp, #8
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	460a      	mov	r2, r1
 8009eda:	80fb      	strh	r3, [r7, #6]
 8009edc:	4613      	mov	r3, r2
 8009ede:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8009ee0:	1d7a      	adds	r2, r7, #5
 8009ee2:	88f9      	ldrh	r1, [r7, #6]
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	4803      	ldr	r0, [pc, #12]	; (8009ef4 <SUBGRF_WriteRegister+0x24>)
 8009ee8:	f7fa fc00 	bl	80046ec <HAL_SUBGHZ_WriteRegisters>
}
 8009eec:	bf00      	nop
 8009eee:	3708      	adds	r7, #8
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}
 8009ef4:	20000070 	.word	0x20000070

08009ef8 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b084      	sub	sp, #16
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	4603      	mov	r3, r0
 8009f00:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8009f02:	f107 020f 	add.w	r2, r7, #15
 8009f06:	88f9      	ldrh	r1, [r7, #6]
 8009f08:	2301      	movs	r3, #1
 8009f0a:	4804      	ldr	r0, [pc, #16]	; (8009f1c <SUBGRF_ReadRegister+0x24>)
 8009f0c:	f7fa fc4d 	bl	80047aa <HAL_SUBGHZ_ReadRegisters>
    return data;
 8009f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3710      	adds	r7, #16
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	20000070 	.word	0x20000070

08009f20 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b086      	sub	sp, #24
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	4603      	mov	r3, r0
 8009f28:	6039      	str	r1, [r7, #0]
 8009f2a:	80fb      	strh	r3, [r7, #6]
 8009f2c:	4613      	mov	r3, r2
 8009f2e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f30:	f3ef 8310 	mrs	r3, PRIMASK
 8009f34:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f36:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009f38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f3a:	b672      	cpsid	i
}
 8009f3c:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8009f3e:	88bb      	ldrh	r3, [r7, #4]
 8009f40:	88f9      	ldrh	r1, [r7, #6]
 8009f42:	683a      	ldr	r2, [r7, #0]
 8009f44:	4806      	ldr	r0, [pc, #24]	; (8009f60 <SUBGRF_WriteRegisters+0x40>)
 8009f46:	f7fa fbd1 	bl	80046ec <HAL_SUBGHZ_WriteRegisters>
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	f383 8810 	msr	PRIMASK, r3
}
 8009f54:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009f56:	bf00      	nop
 8009f58:	3718      	adds	r7, #24
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
 8009f5e:	bf00      	nop
 8009f60:	20000070 	.word	0x20000070

08009f64 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b086      	sub	sp, #24
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	6039      	str	r1, [r7, #0]
 8009f6e:	80fb      	strh	r3, [r7, #6]
 8009f70:	4613      	mov	r3, r2
 8009f72:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f74:	f3ef 8310 	mrs	r3, PRIMASK
 8009f78:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009f7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f7e:	b672      	cpsid	i
}
 8009f80:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8009f82:	88bb      	ldrh	r3, [r7, #4]
 8009f84:	88f9      	ldrh	r1, [r7, #6]
 8009f86:	683a      	ldr	r2, [r7, #0]
 8009f88:	4806      	ldr	r0, [pc, #24]	; (8009fa4 <SUBGRF_ReadRegisters+0x40>)
 8009f8a:	f7fa fc0e 	bl	80047aa <HAL_SUBGHZ_ReadRegisters>
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	f383 8810 	msr	PRIMASK, r3
}
 8009f98:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009f9a:	bf00      	nop
 8009f9c:	3718      	adds	r7, #24
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	20000070 	.word	0x20000070

08009fa8 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b086      	sub	sp, #24
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	4603      	mov	r3, r0
 8009fb0:	6039      	str	r1, [r7, #0]
 8009fb2:	71fb      	strb	r3, [r7, #7]
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fb8:	f3ef 8310 	mrs	r3, PRIMASK
 8009fbc:	60fb      	str	r3, [r7, #12]
  return(result);
 8009fbe:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009fc0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009fc2:	b672      	cpsid	i
}
 8009fc4:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8009fc6:	79bb      	ldrb	r3, [r7, #6]
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	79f9      	ldrb	r1, [r7, #7]
 8009fcc:	683a      	ldr	r2, [r7, #0]
 8009fce:	4806      	ldr	r0, [pc, #24]	; (8009fe8 <SUBGRF_WriteBuffer+0x40>)
 8009fd0:	f7fa fcff 	bl	80049d2 <HAL_SUBGHZ_WriteBuffer>
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	f383 8810 	msr	PRIMASK, r3
}
 8009fde:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009fe0:	bf00      	nop
 8009fe2:	3718      	adds	r7, #24
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}
 8009fe8:	20000070 	.word	0x20000070

08009fec <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b086      	sub	sp, #24
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	6039      	str	r1, [r7, #0]
 8009ff6:	71fb      	strb	r3, [r7, #7]
 8009ff8:	4613      	mov	r3, r2
 8009ffa:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ffc:	f3ef 8310 	mrs	r3, PRIMASK
 800a000:	60fb      	str	r3, [r7, #12]
  return(result);
 800a002:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a004:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a006:	b672      	cpsid	i
}
 800a008:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800a00a:	79bb      	ldrb	r3, [r7, #6]
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	79f9      	ldrb	r1, [r7, #7]
 800a010:	683a      	ldr	r2, [r7, #0]
 800a012:	4806      	ldr	r0, [pc, #24]	; (800a02c <SUBGRF_ReadBuffer+0x40>)
 800a014:	f7fa fd30 	bl	8004a78 <HAL_SUBGHZ_ReadBuffer>
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	f383 8810 	msr	PRIMASK, r3
}
 800a022:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a024:	bf00      	nop
 800a026:	3718      	adds	r7, #24
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}
 800a02c:	20000070 	.word	0x20000070

0800a030 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b086      	sub	sp, #24
 800a034:	af00      	add	r7, sp, #0
 800a036:	4603      	mov	r3, r0
 800a038:	6039      	str	r1, [r7, #0]
 800a03a:	71fb      	strb	r3, [r7, #7]
 800a03c:	4613      	mov	r3, r2
 800a03e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a040:	f3ef 8310 	mrs	r3, PRIMASK
 800a044:	60fb      	str	r3, [r7, #12]
  return(result);
 800a046:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a048:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a04a:	b672      	cpsid	i
}
 800a04c:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800a04e:	88bb      	ldrh	r3, [r7, #4]
 800a050:	79f9      	ldrb	r1, [r7, #7]
 800a052:	683a      	ldr	r2, [r7, #0]
 800a054:	4806      	ldr	r0, [pc, #24]	; (800a070 <SUBGRF_WriteCommand+0x40>)
 800a056:	f7fa fc09 	bl	800486c <HAL_SUBGHZ_ExecSetCmd>
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	f383 8810 	msr	PRIMASK, r3
}
 800a064:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a066:	bf00      	nop
 800a068:	3718      	adds	r7, #24
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
 800a06e:	bf00      	nop
 800a070:	20000070 	.word	0x20000070

0800a074 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b086      	sub	sp, #24
 800a078:	af00      	add	r7, sp, #0
 800a07a:	4603      	mov	r3, r0
 800a07c:	6039      	str	r1, [r7, #0]
 800a07e:	71fb      	strb	r3, [r7, #7]
 800a080:	4613      	mov	r3, r2
 800a082:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a084:	f3ef 8310 	mrs	r3, PRIMASK
 800a088:	60fb      	str	r3, [r7, #12]
  return(result);
 800a08a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a08c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a08e:	b672      	cpsid	i
}
 800a090:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800a092:	88bb      	ldrh	r3, [r7, #4]
 800a094:	79f9      	ldrb	r1, [r7, #7]
 800a096:	683a      	ldr	r2, [r7, #0]
 800a098:	4806      	ldr	r0, [pc, #24]	; (800a0b4 <SUBGRF_ReadCommand+0x40>)
 800a09a:	f7fa fc46 	bl	800492a <HAL_SUBGHZ_ExecGetCmd>
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	f383 8810 	msr	PRIMASK, r3
}
 800a0a8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a0aa:	bf00      	nop
 800a0ac:	3718      	adds	r7, #24
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	20000070 	.word	0x20000070

0800a0b8 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b084      	sub	sp, #16
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	4603      	mov	r3, r0
 800a0c0:	460a      	mov	r2, r1
 800a0c2:	71fb      	strb	r3, [r7, #7]
 800a0c4:	4613      	mov	r3, r2
 800a0c6:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800a0cc:	79bb      	ldrb	r3, [r7, #6]
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d10d      	bne.n	800a0ee <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800a0d2:	79fb      	ldrb	r3, [r7, #7]
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d104      	bne.n	800a0e2 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800a0d8:	2302      	movs	r3, #2
 800a0da:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800a0dc:	2004      	movs	r0, #4
 800a0de:	f000 f8df 	bl	800a2a0 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800a0e2:	79fb      	ldrb	r3, [r7, #7]
 800a0e4:	2b02      	cmp	r3, #2
 800a0e6:	d107      	bne.n	800a0f8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800a0e8:	2303      	movs	r3, #3
 800a0ea:	73fb      	strb	r3, [r7, #15]
 800a0ec:	e004      	b.n	800a0f8 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800a0ee:	79bb      	ldrb	r3, [r7, #6]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d101      	bne.n	800a0f8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800a0f8:	7bfb      	ldrb	r3, [r7, #15]
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f000 fa73 	bl	800a5e6 <RBI_ConfigRFSwitch>
}
 800a100:	bf00      	nop
 800a102:	3710      	adds	r7, #16
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b084      	sub	sp, #16
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	4603      	mov	r3, r0
 800a110:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800a112:	2301      	movs	r3, #1
 800a114:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800a116:	f000 fa74 	bl	800a602 <RBI_GetTxConfig>
 800a11a:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	2b02      	cmp	r3, #2
 800a120:	d016      	beq.n	800a150 <SUBGRF_SetRfTxPower+0x48>
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	2b02      	cmp	r3, #2
 800a126:	dc16      	bgt.n	800a156 <SUBGRF_SetRfTxPower+0x4e>
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d003      	beq.n	800a136 <SUBGRF_SetRfTxPower+0x2e>
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	2b01      	cmp	r3, #1
 800a132:	d00a      	beq.n	800a14a <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800a134:	e00f      	b.n	800a156 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800a136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a13a:	2b0f      	cmp	r3, #15
 800a13c:	dd02      	ble.n	800a144 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800a13e:	2302      	movs	r3, #2
 800a140:	73fb      	strb	r3, [r7, #15]
            break;
 800a142:	e009      	b.n	800a158 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800a144:	2301      	movs	r3, #1
 800a146:	73fb      	strb	r3, [r7, #15]
            break;
 800a148:	e006      	b.n	800a158 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800a14a:	2301      	movs	r3, #1
 800a14c:	73fb      	strb	r3, [r7, #15]
            break;
 800a14e:	e003      	b.n	800a158 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800a150:	2302      	movs	r3, #2
 800a152:	73fb      	strb	r3, [r7, #15]
            break;
 800a154:	e000      	b.n	800a158 <SUBGRF_SetRfTxPower+0x50>
            break;
 800a156:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800a158:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800a15c:	7bfb      	ldrb	r3, [r7, #15]
 800a15e:	2202      	movs	r2, #2
 800a160:	4618      	mov	r0, r3
 800a162:	f7ff fbcd 	bl	8009900 <SUBGRF_SetTxParams>

    return paSelect;
 800a166:	7bfb      	ldrb	r3, [r7, #15]
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3710      	adds	r7, #16
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800a170:	b480      	push	{r7}
 800a172:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800a174:	2301      	movs	r3, #1
}
 800a176:	4618      	mov	r0, r3
 800a178:	46bd      	mov	sp, r7
 800a17a:	bc80      	pop	{r7}
 800a17c:	4770      	bx	lr
	...

0800a180 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b082      	sub	sp, #8
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800a188:	4b03      	ldr	r3, [pc, #12]	; (800a198 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	2001      	movs	r0, #1
 800a18e:	4798      	blx	r3
}
 800a190:	bf00      	nop
 800a192:	3708      	adds	r7, #8
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}
 800a198:	2000031c 	.word	0x2000031c

0800a19c <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800a1a4:	4b03      	ldr	r3, [pc, #12]	; (800a1b4 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	2002      	movs	r0, #2
 800a1aa:	4798      	blx	r3
}
 800a1ac:	bf00      	nop
 800a1ae:	3708      	adds	r7, #8
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}
 800a1b4:	2000031c 	.word	0x2000031c

0800a1b8 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b082      	sub	sp, #8
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800a1c0:	4b03      	ldr	r3, [pc, #12]	; (800a1d0 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	2040      	movs	r0, #64	; 0x40
 800a1c6:	4798      	blx	r3
}
 800a1c8:	bf00      	nop
 800a1ca:	3708      	adds	r7, #8
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}
 800a1d0:	2000031c 	.word	0x2000031c

0800a1d4 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b082      	sub	sp, #8
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	460b      	mov	r3, r1
 800a1de:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800a1e0:	78fb      	ldrb	r3, [r7, #3]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d002      	beq.n	800a1ec <HAL_SUBGHZ_CADStatusCallback+0x18>
 800a1e6:	2b01      	cmp	r3, #1
 800a1e8:	d005      	beq.n	800a1f6 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800a1ea:	e00a      	b.n	800a202 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800a1ec:	4b07      	ldr	r3, [pc, #28]	; (800a20c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	2080      	movs	r0, #128	; 0x80
 800a1f2:	4798      	blx	r3
            break;
 800a1f4:	e005      	b.n	800a202 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800a1f6:	4b05      	ldr	r3, [pc, #20]	; (800a20c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a1fe:	4798      	blx	r3
            break;
 800a200:	bf00      	nop
    }
}
 800a202:	bf00      	nop
 800a204:	3708      	adds	r7, #8
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop
 800a20c:	2000031c 	.word	0x2000031c

0800a210 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b082      	sub	sp, #8
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800a218:	4b04      	ldr	r3, [pc, #16]	; (800a22c <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a220:	4798      	blx	r3
}
 800a222:	bf00      	nop
 800a224:	3708      	adds	r7, #8
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop
 800a22c:	2000031c 	.word	0x2000031c

0800a230 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800a238:	4b03      	ldr	r3, [pc, #12]	; (800a248 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	2020      	movs	r0, #32
 800a23e:	4798      	blx	r3
}
 800a240:	bf00      	nop
 800a242:	3708      	adds	r7, #8
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	2000031c 	.word	0x2000031c

0800a24c <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800a254:	4b03      	ldr	r3, [pc, #12]	; (800a264 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	2004      	movs	r0, #4
 800a25a:	4798      	blx	r3
}
 800a25c:	bf00      	nop
 800a25e:	3708      	adds	r7, #8
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}
 800a264:	2000031c 	.word	0x2000031c

0800a268 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800a270:	4b03      	ldr	r3, [pc, #12]	; (800a280 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	2008      	movs	r0, #8
 800a276:	4798      	blx	r3
}
 800a278:	bf00      	nop
 800a27a:	3708      	adds	r7, #8
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}
 800a280:	2000031c 	.word	0x2000031c

0800a284 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800a28c:	4b03      	ldr	r3, [pc, #12]	; (800a29c <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	2010      	movs	r0, #16
 800a292:	4798      	blx	r3
}
 800a294:	bf00      	nop
 800a296:	3708      	adds	r7, #8
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}
 800a29c:	2000031c 	.word	0x2000031c

0800a2a0 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b084      	sub	sp, #16
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800a2aa:	f000 f9b8 	bl	800a61e <RBI_IsDCDC>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d112      	bne.n	800a2da <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800a2b4:	f640 1023 	movw	r0, #2339	; 0x923
 800a2b8:	f7ff fe1e 	bl	8009ef8 <SUBGRF_ReadRegister>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800a2c0:	7bfb      	ldrb	r3, [r7, #15]
 800a2c2:	f023 0306 	bic.w	r3, r3, #6
 800a2c6:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800a2c8:	7bfa      	ldrb	r2, [r7, #15]
 800a2ca:	79fb      	ldrb	r3, [r7, #7]
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	f640 1023 	movw	r0, #2339	; 0x923
 800a2d6:	f7ff fdfb 	bl	8009ed0 <SUBGRF_WriteRegister>
  }
}
 800a2da:	bf00      	nop
 800a2dc:	3710      	adds	r7, #16
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}
	...

0800a2e4 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b085      	sub	sp, #20
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d101      	bne.n	800a2f6 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800a2f2:	231f      	movs	r3, #31
 800a2f4:	e016      	b.n	800a324 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	73fb      	strb	r3, [r7, #15]
 800a2fa:	e00f      	b.n	800a31c <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800a2fc:	7bfb      	ldrb	r3, [r7, #15]
 800a2fe:	4a0c      	ldr	r2, [pc, #48]	; (800a330 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800a300:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	429a      	cmp	r2, r3
 800a308:	d205      	bcs.n	800a316 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800a30a:	7bfb      	ldrb	r3, [r7, #15]
 800a30c:	4a08      	ldr	r2, [pc, #32]	; (800a330 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800a30e:	00db      	lsls	r3, r3, #3
 800a310:	4413      	add	r3, r2
 800a312:	791b      	ldrb	r3, [r3, #4]
 800a314:	e006      	b.n	800a324 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800a316:	7bfb      	ldrb	r3, [r7, #15]
 800a318:	3301      	adds	r3, #1
 800a31a:	73fb      	strb	r3, [r7, #15]
 800a31c:	7bfb      	ldrb	r3, [r7, #15]
 800a31e:	2b15      	cmp	r3, #21
 800a320:	d9ec      	bls.n	800a2fc <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 800a322:	e7fe      	b.n	800a322 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800a324:	4618      	mov	r0, r3
 800a326:	3714      	adds	r7, #20
 800a328:	46bd      	mov	sp, r7
 800a32a:	bc80      	pop	{r7}
 800a32c:	4770      	bx	lr
 800a32e:	bf00      	nop
 800a330:	0800bdc4 	.word	0x0800bdc4

0800a334 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b08a      	sub	sp, #40	; 0x28
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800a33e:	4b35      	ldr	r3, [pc, #212]	; (800a414 <SUBGRF_GetCFO+0xe0>)
 800a340:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800a342:	f640 0007 	movw	r0, #2055	; 0x807
 800a346:	f7ff fdd7 	bl	8009ef8 <SUBGRF_ReadRegister>
 800a34a:	4603      	mov	r3, r0
 800a34c:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800a34e:	7ffb      	ldrb	r3, [r7, #31]
 800a350:	08db      	lsrs	r3, r3, #3
 800a352:	b2db      	uxtb	r3, r3
 800a354:	f003 0303 	and.w	r3, r3, #3
 800a358:	3328      	adds	r3, #40	; 0x28
 800a35a:	443b      	add	r3, r7
 800a35c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800a360:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800a362:	7ffb      	ldrb	r3, [r7, #31]
 800a364:	f003 0307 	and.w	r3, r3, #7
 800a368:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 800a36a:	7fba      	ldrb	r2, [r7, #30]
 800a36c:	7f7b      	ldrb	r3, [r7, #29]
 800a36e:	3b01      	subs	r3, #1
 800a370:	fa02 f303 	lsl.w	r3, r2, r3
 800a374:	461a      	mov	r2, r3
 800a376:	4b28      	ldr	r3, [pc, #160]	; (800a418 <SUBGRF_GetCFO+0xe4>)
 800a378:	fbb3 f3f2 	udiv	r3, r3, r2
 800a37c:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800a37e:	69ba      	ldr	r2, [r7, #24]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	fbb2 f3f3 	udiv	r3, r2, r3
 800a386:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800a388:	2301      	movs	r3, #1
 800a38a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800a38e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a392:	697a      	ldr	r2, [r7, #20]
 800a394:	fb02 f303 	mul.w	r3, r2, r3
 800a398:	2b07      	cmp	r3, #7
 800a39a:	d802      	bhi.n	800a3a2 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800a39c:	2302      	movs	r3, #2
 800a39e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 800a3a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3a6:	697a      	ldr	r2, [r7, #20]
 800a3a8:	fb02 f303 	mul.w	r3, r2, r3
 800a3ac:	2b03      	cmp	r3, #3
 800a3ae:	d802      	bhi.n	800a3b6 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800a3b0:	2304      	movs	r3, #4
 800a3b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800a3b6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a3ba:	69bb      	ldr	r3, [r7, #24]
 800a3bc:	fb02 f303 	mul.w	r3, r2, r3
 800a3c0:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800a3c2:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 800a3c6:	f7ff fd97 	bl	8009ef8 <SUBGRF_ReadRegister>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	021b      	lsls	r3, r3, #8
 800a3ce:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a3d2:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800a3d4:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800a3d8:	f7ff fd8e 	bl	8009ef8 <SUBGRF_ReadRegister>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	461a      	mov	r2, r3
 800a3e0:	6a3b      	ldr	r3, [r7, #32]
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800a3e6:	6a3b      	ldr	r3, [r7, #32]
 800a3e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d005      	beq.n	800a3fc <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800a3f0:	6a3b      	ldr	r3, [r7, #32]
 800a3f2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800a3f6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800a3fa:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	095b      	lsrs	r3, r3, #5
 800a400:	6a3a      	ldr	r2, [r7, #32]
 800a402:	fb02 f303 	mul.w	r3, r2, r3
 800a406:	11da      	asrs	r2, r3, #7
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	601a      	str	r2, [r3, #0]
}
 800a40c:	bf00      	nop
 800a40e:	3728      	adds	r7, #40	; 0x28
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}
 800a414:	0c0a0804 	.word	0x0c0a0804
 800a418:	01e84800 	.word	0x01e84800

0800a41c <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 800a41c:	b480      	push	{r7}
 800a41e:	b087      	sub	sp, #28
 800a420:	af00      	add	r7, sp, #0
 800a422:	4603      	mov	r3, r0
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	607a      	str	r2, [r7, #4]
 800a428:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 800a42a:	2300      	movs	r3, #0
 800a42c:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 800a42e:	f04f 33ff 	mov.w	r3, #4294967295
 800a432:	617b      	str	r3, [r7, #20]
#endif
  return status;
 800a434:	697b      	ldr	r3, [r7, #20]
}
 800a436:	4618      	mov	r0, r3
 800a438:	371c      	adds	r7, #28
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bc80      	pop	{r7}
 800a43e:	4770      	bx	lr

0800a440 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 800a440:	b480      	push	{r7}
 800a442:	b087      	sub	sp, #28
 800a444:	af00      	add	r7, sp, #0
 800a446:	4603      	mov	r3, r0
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	607a      	str	r2, [r7, #4]
 800a44c:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 800a44e:	2300      	movs	r3, #0
 800a450:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 800a452:	f04f 33ff 	mov.w	r3, #4294967295
 800a456:	617b      	str	r3, [r7, #20]
#endif
  return status;
 800a458:	697b      	ldr	r3, [r7, #20]
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	371c      	adds	r7, #28
 800a45e:	46bd      	mov	sp, r7
 800a460:	bc80      	pop	{r7}
 800a462:	4770      	bx	lr

0800a464 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 800a464:	b480      	push	{r7}
 800a466:	b085      	sub	sp, #20
 800a468:	af00      	add	r7, sp, #0
 800a46a:	60f8      	str	r0, [r7, #12]
 800a46c:	60b9      	str	r1, [r7, #8]
 800a46e:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 800a470:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 800a474:	4618      	mov	r0, r3
 800a476:	3714      	adds	r7, #20
 800a478:	46bd      	mov	sp, r7
 800a47a:	bc80      	pop	{r7}
 800a47c:	4770      	bx	lr

0800a47e <RFW_DeInit>:

void RFW_DeInit( void)
{
 800a47e:	b480      	push	{r7}
 800a480:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 800a482:	bf00      	nop
 800a484:	46bd      	mov	sp, r7
 800a486:	bc80      	pop	{r7}
 800a488:	4770      	bx	lr

0800a48a <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 800a48a:	b480      	push	{r7}
 800a48c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 800a48e:	2300      	movs	r3, #0
#endif
}
 800a490:	4618      	mov	r0, r3
 800a492:	46bd      	mov	sp, r7
 800a494:	bc80      	pop	{r7}
 800a496:	4770      	bx	lr

0800a498 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 800a498:	b480      	push	{r7}
 800a49a:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 800a49c:	2300      	movs	r3, #0
#endif
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bc80      	pop	{r7}
 800a4a4:	4770      	bx	lr

0800a4a6 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 800a4a6:	b480      	push	{r7}
 800a4a8:	b083      	sub	sp, #12
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 800a4b0:	bf00      	nop
 800a4b2:	370c      	adds	r7, #12
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bc80      	pop	{r7}
 800a4b8:	4770      	bx	lr

0800a4ba <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 800a4ba:	b480      	push	{r7}
 800a4bc:	b087      	sub	sp, #28
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	60f8      	str	r0, [r7, #12]
 800a4c2:	460b      	mov	r3, r1
 800a4c4:	607a      	str	r2, [r7, #4]
 800a4c6:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 800a4c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a4cc:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 800a4ce:	697b      	ldr	r3, [r7, #20]
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	371c      	adds	r7, #28
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bc80      	pop	{r7}
 800a4d8:	4770      	bx	lr

0800a4da <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800a4da:	b480      	push	{r7}
 800a4dc:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 800a4de:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bc80      	pop	{r7}
 800a4e8:	4770      	bx	lr

0800a4ea <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 800a4ea:	b480      	push	{r7}
 800a4ec:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 800a4ee:	bf00      	nop
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bc80      	pop	{r7}
 800a4f4:	4770      	bx	lr

0800a4f6 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800a4f6:	b480      	push	{r7}
 800a4f8:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 800a4fa:	bf00      	nop
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bc80      	pop	{r7}
 800a500:	4770      	bx	lr

0800a502 <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 800a502:	b480      	push	{r7}
 800a504:	b083      	sub	sp, #12
 800a506:	af00      	add	r7, sp, #0
 800a508:	4603      	mov	r3, r0
 800a50a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 800a50c:	bf00      	nop
 800a50e:	370c      	adds	r7, #12
 800a510:	46bd      	mov	sp, r7
 800a512:	bc80      	pop	{r7}
 800a514:	4770      	bx	lr

0800a516 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800a516:	b580      	push	{r7, lr}
 800a518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800a51a:	f7f6 fa7f 	bl	8000a1c <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800a51e:	f000 f80b 	bl	800a538 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800a522:	bf00      	nop
 800a524:	bd80      	pop	{r7, pc}

0800a526 <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 800a526:	b580      	push	{r7, lr}
 800a528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800a52a:	f04f 30ff 	mov.w	r0, #4294967295
 800a52e:	f000 fc47 	bl	800adc0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_2 */

  /* USER CODE END MX_SubGHz_Phy_Process_2 */
}
 800a532:	bf00      	nop
 800a534:	bd80      	pop	{r7, pc}
	...

0800a538 <SubghzApp_Init>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800a53c:	4b0a      	ldr	r3, [pc, #40]	; (800a568 <SubghzApp_Init+0x30>)
 800a53e:	4a0b      	ldr	r2, [pc, #44]	; (800a56c <SubghzApp_Init+0x34>)
 800a540:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800a542:	4b09      	ldr	r3, [pc, #36]	; (800a568 <SubghzApp_Init+0x30>)
 800a544:	4a0a      	ldr	r2, [pc, #40]	; (800a570 <SubghzApp_Init+0x38>)
 800a546:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800a548:	4b07      	ldr	r3, [pc, #28]	; (800a568 <SubghzApp_Init+0x30>)
 800a54a:	4a0a      	ldr	r2, [pc, #40]	; (800a574 <SubghzApp_Init+0x3c>)
 800a54c:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800a54e:	4b06      	ldr	r3, [pc, #24]	; (800a568 <SubghzApp_Init+0x30>)
 800a550:	4a09      	ldr	r2, [pc, #36]	; (800a578 <SubghzApp_Init+0x40>)
 800a552:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800a554:	4b04      	ldr	r3, [pc, #16]	; (800a568 <SubghzApp_Init+0x30>)
 800a556:	4a09      	ldr	r2, [pc, #36]	; (800a57c <SubghzApp_Init+0x44>)
 800a558:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800a55a:	4b09      	ldr	r3, [pc, #36]	; (800a580 <SubghzApp_Init+0x48>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4802      	ldr	r0, [pc, #8]	; (800a568 <SubghzApp_Init+0x30>)
 800a560:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

  /* USER CODE END SubghzApp_Init_2 */
}
 800a562:	bf00      	nop
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	20000320 	.word	0x20000320
 800a56c:	0800a585 	.word	0x0800a585
 800a570:	0800a591 	.word	0x0800a591
 800a574:	0800a5b5 	.word	0x0800a5b5
 800a578:	0800a5c1 	.word	0x0800a5c1
 800a57c:	0800a5cd 	.word	0x0800a5cd
 800a580:	0800bd3c 	.word	0x0800bd3c

0800a584 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 800a584:	b480      	push	{r7}
 800a586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  /* USER CODE END OnTxDone */
}
 800a588:	bf00      	nop
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bc80      	pop	{r7}
 800a58e:	4770      	bx	lr

0800a590 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800a590:	b480      	push	{r7}
 800a592:	b085      	sub	sp, #20
 800a594:	af00      	add	r7, sp, #0
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	4608      	mov	r0, r1
 800a59a:	4611      	mov	r1, r2
 800a59c:	461a      	mov	r2, r3
 800a59e:	4603      	mov	r3, r0
 800a5a0:	817b      	strh	r3, [r7, #10]
 800a5a2:	460b      	mov	r3, r1
 800a5a4:	813b      	strh	r3, [r7, #8]
 800a5a6:	4613      	mov	r3, r2
 800a5a8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  /* USER CODE END OnRxDone */
}
 800a5aa:	bf00      	nop
 800a5ac:	3714      	adds	r7, #20
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bc80      	pop	{r7}
 800a5b2:	4770      	bx	lr

0800a5b4 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  /* USER CODE END OnTxTimeout */
}
 800a5b8:	bf00      	nop
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bc80      	pop	{r7}
 800a5be:	4770      	bx	lr

0800a5c0 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  /* USER CODE END OnRxTimeout */
}
 800a5c4:	bf00      	nop
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bc80      	pop	{r7}
 800a5ca:	4770      	bx	lr

0800a5cc <OnRxError>:

static void OnRxError(void)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  /* USER CODE END OnRxError */
}
 800a5d0:	bf00      	nop
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bc80      	pop	{r7}
 800a5d6:	4770      	bx	lr

0800a5d8 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800a5dc:	f7f6 ffe5 	bl	80015aa <BSP_RADIO_Init>
 800a5e0:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	bd80      	pop	{r7, pc}

0800a5e6 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800a5e6:	b580      	push	{r7, lr}
 800a5e8:	b082      	sub	sp, #8
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800a5f0:	79fb      	ldrb	r3, [r7, #7]
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f7f7 f80a 	bl	800160c <BSP_RADIO_ConfigRFSwitch>
 800a5f8:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3708      	adds	r7, #8
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}

0800a602 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800a602:	b580      	push	{r7, lr}
 800a604:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800a606:	f7f7 f84f 	bl	80016a8 <BSP_RADIO_GetTxConfig>
 800a60a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800a614:	f7f7 f84f 	bl	80016b6 <BSP_RADIO_IsTCXO>
 800a618:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	bd80      	pop	{r7, pc}

0800a61e <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800a61e:	b580      	push	{r7, lr}
 800a620:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800a622:	f7f7 f84f 	bl	80016c4 <BSP_RADIO_IsDCDC>
 800a626:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a628:	4618      	mov	r0, r3
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
 800a632:	4603      	mov	r3, r0
 800a634:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800a636:	79fb      	ldrb	r3, [r7, #7]
 800a638:	4618      	mov	r0, r3
 800a63a:	f7f7 f84a 	bl	80016d2 <BSP_RADIO_GetRFOMaxPowerConfig>
 800a63e:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800a640:	4618      	mov	r0, r3
 800a642:	3708      	adds	r7, #8
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800a648:	b480      	push	{r7}
 800a64a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800a64c:	4b04      	ldr	r3, [pc, #16]	; (800a660 <UTIL_LPM_Init+0x18>)
 800a64e:	2200      	movs	r2, #0
 800a650:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800a652:	4b04      	ldr	r3, [pc, #16]	; (800a664 <UTIL_LPM_Init+0x1c>)
 800a654:	2200      	movs	r2, #0
 800a656:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800a658:	bf00      	nop
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bc80      	pop	{r7}
 800a65e:	4770      	bx	lr
 800a660:	2000033c 	.word	0x2000033c
 800a664:	20000340 	.word	0x20000340

0800a668 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a668:	b480      	push	{r7}
 800a66a:	b087      	sub	sp, #28
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	460b      	mov	r3, r1
 800a672:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a674:	f3ef 8310 	mrs	r3, PRIMASK
 800a678:	613b      	str	r3, [r7, #16]
  return(result);
 800a67a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a67c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a67e:	b672      	cpsid	i
}
 800a680:	bf00      	nop
  
  switch( state )
 800a682:	78fb      	ldrb	r3, [r7, #3]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d008      	beq.n	800a69a <UTIL_LPM_SetStopMode+0x32>
 800a688:	2b01      	cmp	r3, #1
 800a68a:	d10e      	bne.n	800a6aa <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800a68c:	4b0d      	ldr	r3, [pc, #52]	; (800a6c4 <UTIL_LPM_SetStopMode+0x5c>)
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	4313      	orrs	r3, r2
 800a694:	4a0b      	ldr	r2, [pc, #44]	; (800a6c4 <UTIL_LPM_SetStopMode+0x5c>)
 800a696:	6013      	str	r3, [r2, #0]
      break;
 800a698:	e008      	b.n	800a6ac <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	43da      	mvns	r2, r3
 800a69e:	4b09      	ldr	r3, [pc, #36]	; (800a6c4 <UTIL_LPM_SetStopMode+0x5c>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	4013      	ands	r3, r2
 800a6a4:	4a07      	ldr	r2, [pc, #28]	; (800a6c4 <UTIL_LPM_SetStopMode+0x5c>)
 800a6a6:	6013      	str	r3, [r2, #0]
      break;
 800a6a8:	e000      	b.n	800a6ac <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800a6aa:	bf00      	nop
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f383 8810 	msr	PRIMASK, r3
}
 800a6b6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a6b8:	bf00      	nop
 800a6ba:	371c      	adds	r7, #28
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bc80      	pop	{r7}
 800a6c0:	4770      	bx	lr
 800a6c2:	bf00      	nop
 800a6c4:	2000033c 	.word	0x2000033c

0800a6c8 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b087      	sub	sp, #28
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	460b      	mov	r3, r1
 800a6d2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6d4:	f3ef 8310 	mrs	r3, PRIMASK
 800a6d8:	613b      	str	r3, [r7, #16]
  return(result);
 800a6da:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a6dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a6de:	b672      	cpsid	i
}
 800a6e0:	bf00      	nop
  
  switch(state)
 800a6e2:	78fb      	ldrb	r3, [r7, #3]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d008      	beq.n	800a6fa <UTIL_LPM_SetOffMode+0x32>
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d10e      	bne.n	800a70a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800a6ec:	4b0d      	ldr	r3, [pc, #52]	; (800a724 <UTIL_LPM_SetOffMode+0x5c>)
 800a6ee:	681a      	ldr	r2, [r3, #0]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	4a0b      	ldr	r2, [pc, #44]	; (800a724 <UTIL_LPM_SetOffMode+0x5c>)
 800a6f6:	6013      	str	r3, [r2, #0]
      break;
 800a6f8:	e008      	b.n	800a70c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	43da      	mvns	r2, r3
 800a6fe:	4b09      	ldr	r3, [pc, #36]	; (800a724 <UTIL_LPM_SetOffMode+0x5c>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	4013      	ands	r3, r2
 800a704:	4a07      	ldr	r2, [pc, #28]	; (800a724 <UTIL_LPM_SetOffMode+0x5c>)
 800a706:	6013      	str	r3, [r2, #0]
      break;
 800a708:	e000      	b.n	800a70c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800a70a:	bf00      	nop
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f383 8810 	msr	PRIMASK, r3
}
 800a716:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a718:	bf00      	nop
 800a71a:	371c      	adds	r7, #28
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bc80      	pop	{r7}
 800a720:	4770      	bx	lr
 800a722:	bf00      	nop
 800a724:	20000340 	.word	0x20000340

0800a728 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b084      	sub	sp, #16
 800a72c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a72e:	f3ef 8310 	mrs	r3, PRIMASK
 800a732:	60bb      	str	r3, [r7, #8]
  return(result);
 800a734:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 800a736:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a738:	b672      	cpsid	i
}
 800a73a:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800a73c:	4b12      	ldr	r3, [pc, #72]	; (800a788 <UTIL_LPM_EnterLowPower+0x60>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d006      	beq.n	800a752 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800a744:	4b11      	ldr	r3, [pc, #68]	; (800a78c <UTIL_LPM_EnterLowPower+0x64>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800a74a:	4b10      	ldr	r3, [pc, #64]	; (800a78c <UTIL_LPM_EnterLowPower+0x64>)
 800a74c:	685b      	ldr	r3, [r3, #4]
 800a74e:	4798      	blx	r3
 800a750:	e010      	b.n	800a774 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800a752:	4b0f      	ldr	r3, [pc, #60]	; (800a790 <UTIL_LPM_EnterLowPower+0x68>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d006      	beq.n	800a768 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 800a75a:	4b0c      	ldr	r3, [pc, #48]	; (800a78c <UTIL_LPM_EnterLowPower+0x64>)
 800a75c:	689b      	ldr	r3, [r3, #8]
 800a75e:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800a760:	4b0a      	ldr	r3, [pc, #40]	; (800a78c <UTIL_LPM_EnterLowPower+0x64>)
 800a762:	68db      	ldr	r3, [r3, #12]
 800a764:	4798      	blx	r3
 800a766:	e005      	b.n	800a774 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 800a768:	4b08      	ldr	r3, [pc, #32]	; (800a78c <UTIL_LPM_EnterLowPower+0x64>)
 800a76a:	691b      	ldr	r3, [r3, #16]
 800a76c:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800a76e:	4b07      	ldr	r3, [pc, #28]	; (800a78c <UTIL_LPM_EnterLowPower+0x64>)
 800a770:	695b      	ldr	r3, [r3, #20]
 800a772:	4798      	blx	r3
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f383 8810 	msr	PRIMASK, r3
}
 800a77e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800a780:	bf00      	nop
 800a782:	3710      	adds	r7, #16
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}
 800a788:	2000033c 	.word	0x2000033c
 800a78c:	0800bc0c 	.word	0x0800bc0c
 800a790:	20000340 	.word	0x20000340

0800a794 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800a794:	b480      	push	{r7}
 800a796:	b087      	sub	sp, #28
 800a798:	af00      	add	r7, sp, #0
 800a79a:	60f8      	str	r0, [r7, #12]
 800a79c:	60b9      	str	r1, [r7, #8]
 800a79e:	4613      	mov	r3, r2
 800a7a0:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	613b      	str	r3, [r7, #16]

  while( size-- )
 800a7aa:	e007      	b.n	800a7bc <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800a7ac:	693a      	ldr	r2, [r7, #16]
 800a7ae:	1c53      	adds	r3, r2, #1
 800a7b0:	613b      	str	r3, [r7, #16]
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	1c59      	adds	r1, r3, #1
 800a7b6:	6179      	str	r1, [r7, #20]
 800a7b8:	7812      	ldrb	r2, [r2, #0]
 800a7ba:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800a7bc:	88fb      	ldrh	r3, [r7, #6]
 800a7be:	1e5a      	subs	r2, r3, #1
 800a7c0:	80fa      	strh	r2, [r7, #6]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d1f2      	bne.n	800a7ac <UTIL_MEM_cpy_8+0x18>
    }
}
 800a7c6:	bf00      	nop
 800a7c8:	bf00      	nop
 800a7ca:	371c      	adds	r7, #28
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bc80      	pop	{r7}
 800a7d0:	4770      	bx	lr

0800a7d2 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800a7d2:	b480      	push	{r7}
 800a7d4:	b085      	sub	sp, #20
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	6078      	str	r0, [r7, #4]
 800a7da:	460b      	mov	r3, r1
 800a7dc:	70fb      	strb	r3, [r7, #3]
 800a7de:	4613      	mov	r3, r2
 800a7e0:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800a7e6:	e004      	b.n	800a7f2 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	1c5a      	adds	r2, r3, #1
 800a7ec:	60fa      	str	r2, [r7, #12]
 800a7ee:	78fa      	ldrb	r2, [r7, #3]
 800a7f0:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800a7f2:	883b      	ldrh	r3, [r7, #0]
 800a7f4:	1e5a      	subs	r2, r3, #1
 800a7f6:	803a      	strh	r2, [r7, #0]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d1f5      	bne.n	800a7e8 <UTIL_MEM_set_8+0x16>
  }
}
 800a7fc:	bf00      	nop
 800a7fe:	bf00      	nop
 800a800:	3714      	adds	r7, #20
 800a802:	46bd      	mov	sp, r7
 800a804:	bc80      	pop	{r7}
 800a806:	4770      	bx	lr

0800a808 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800a808:	b082      	sub	sp, #8
 800a80a:	b480      	push	{r7}
 800a80c:	b087      	sub	sp, #28
 800a80e:	af00      	add	r7, sp, #0
 800a810:	60f8      	str	r0, [r7, #12]
 800a812:	1d38      	adds	r0, r7, #4
 800a814:	e880 0006 	stmia.w	r0, {r1, r2}
 800a818:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 800a81a:	2300      	movs	r3, #0
 800a81c:	613b      	str	r3, [r7, #16]
 800a81e:	2300      	movs	r3, #0
 800a820:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a826:	4413      	add	r3, r2
 800a828:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800a82a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800a82e:	b29a      	uxth	r2, r3
 800a830:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800a834:	b29b      	uxth	r3, r3
 800a836:	4413      	add	r3, r2
 800a838:	b29b      	uxth	r3, r3
 800a83a:	b21b      	sxth	r3, r3
 800a83c:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 800a83e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a842:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a846:	db0a      	blt.n	800a85e <SysTimeAdd+0x56>
  {
    c.Seconds++;
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	3301      	adds	r3, #1
 800a84c:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 800a84e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a852:	b29b      	uxth	r3, r3
 800a854:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800a858:	b29b      	uxth	r3, r3
 800a85a:	b21b      	sxth	r3, r3
 800a85c:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	461a      	mov	r2, r3
 800a862:	f107 0310 	add.w	r3, r7, #16
 800a866:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a86a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800a86e:	68f8      	ldr	r0, [r7, #12]
 800a870:	371c      	adds	r7, #28
 800a872:	46bd      	mov	sp, r7
 800a874:	bc80      	pop	{r7}
 800a876:	b002      	add	sp, #8
 800a878:	4770      	bx	lr
	...

0800a87c <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b08a      	sub	sp, #40	; 0x28
 800a880:	af02      	add	r7, sp, #8
 800a882:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800a884:	2300      	movs	r3, #0
 800a886:	61bb      	str	r3, [r7, #24]
 800a888:	2300      	movs	r3, #0
 800a88a:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 800a88c:	2300      	movs	r3, #0
 800a88e:	613b      	str	r3, [r7, #16]
 800a890:	2300      	movs	r3, #0
 800a892:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800a894:	4b14      	ldr	r3, [pc, #80]	; (800a8e8 <SysTimeGet+0x6c>)
 800a896:	691b      	ldr	r3, [r3, #16]
 800a898:	f107 0218 	add.w	r2, r7, #24
 800a89c:	3204      	adds	r2, #4
 800a89e:	4610      	mov	r0, r2
 800a8a0:	4798      	blx	r3
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800a8a6:	4b10      	ldr	r3, [pc, #64]	; (800a8e8 <SysTimeGet+0x6c>)
 800a8a8:	68db      	ldr	r3, [r3, #12]
 800a8aa:	4798      	blx	r3
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	b21b      	sxth	r3, r3
 800a8b0:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800a8b2:	4b0d      	ldr	r3, [pc, #52]	; (800a8e8 <SysTimeGet+0x6c>)
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	4798      	blx	r3
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 800a8bc:	f107 0010 	add.w	r0, r7, #16
 800a8c0:	69fb      	ldr	r3, [r7, #28]
 800a8c2:	9300      	str	r3, [sp, #0]
 800a8c4:	69bb      	ldr	r3, [r7, #24]
 800a8c6:	f107 0208 	add.w	r2, r7, #8
 800a8ca:	ca06      	ldmia	r2, {r1, r2}
 800a8cc:	f7ff ff9c 	bl	800a808 <SysTimeAdd>

  return sysTime;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	f107 0310 	add.w	r3, r7, #16
 800a8d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a8dc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	3720      	adds	r7, #32
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}
 800a8e8:	0800bcf0 	.word	0x0800bcf0

0800a8ec <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b085      	sub	sp, #20
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  int i = 0;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800a8f8:	e00e      	b.n	800a918 <ee_skip_atoi+0x2c>
 800a8fa:	68fa      	ldr	r2, [r7, #12]
 800a8fc:	4613      	mov	r3, r2
 800a8fe:	009b      	lsls	r3, r3, #2
 800a900:	4413      	add	r3, r2
 800a902:	005b      	lsls	r3, r3, #1
 800a904:	4618      	mov	r0, r3
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	1c59      	adds	r1, r3, #1
 800a90c:	687a      	ldr	r2, [r7, #4]
 800a90e:	6011      	str	r1, [r2, #0]
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	4403      	add	r3, r0
 800a914:	3b30      	subs	r3, #48	; 0x30
 800a916:	60fb      	str	r3, [r7, #12]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	781b      	ldrb	r3, [r3, #0]
 800a91e:	2b2f      	cmp	r3, #47	; 0x2f
 800a920:	d904      	bls.n	800a92c <ee_skip_atoi+0x40>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	2b39      	cmp	r3, #57	; 0x39
 800a92a:	d9e6      	bls.n	800a8fa <ee_skip_atoi+0xe>
  return i;
 800a92c:	68fb      	ldr	r3, [r7, #12]
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3714      	adds	r7, #20
 800a932:	46bd      	mov	sp, r7
 800a934:	bc80      	pop	{r7}
 800a936:	4770      	bx	lr

0800a938 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 800a938:	b480      	push	{r7}
 800a93a:	b099      	sub	sp, #100	; 0x64
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	60b9      	str	r1, [r7, #8]
 800a942:	607a      	str	r2, [r7, #4]
 800a944:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 800a946:	4b71      	ldr	r3, [pc, #452]	; (800ab0c <ee_number+0x1d4>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 800a94c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a94e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a952:	2b00      	cmp	r3, #0
 800a954:	d002      	beq.n	800a95c <ee_number+0x24>
 800a956:	4b6e      	ldr	r3, [pc, #440]	; (800ab10 <ee_number+0x1d8>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	2b01      	cmp	r3, #1
 800a960:	dd02      	ble.n	800a968 <ee_number+0x30>
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	2b24      	cmp	r3, #36	; 0x24
 800a966:	dd01      	ble.n	800a96c <ee_number+0x34>
 800a968:	2300      	movs	r3, #0
 800a96a:	e0ca      	b.n	800ab02 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 800a96c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a96e:	f003 0301 	and.w	r3, r3, #1
 800a972:	2b00      	cmp	r3, #0
 800a974:	d001      	beq.n	800a97a <ee_number+0x42>
 800a976:	2330      	movs	r3, #48	; 0x30
 800a978:	e000      	b.n	800a97c <ee_number+0x44>
 800a97a:	2320      	movs	r3, #32
 800a97c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 800a980:	2300      	movs	r3, #0
 800a982:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 800a986:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a988:	f003 0302 	and.w	r3, r3, #2
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d00b      	beq.n	800a9a8 <ee_number+0x70>
  {
    if (num < 0)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2b00      	cmp	r3, #0
 800a994:	da08      	bge.n	800a9a8 <ee_number+0x70>
    {
      sign = '-';
 800a996:	232d      	movs	r3, #45	; 0x2d
 800a998:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	425b      	negs	r3, r3
 800a9a0:	607b      	str	r3, [r7, #4]
      size--;
 800a9a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a9a4:	3b01      	subs	r3, #1
 800a9a6:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d11e      	bne.n	800a9f0 <ee_number+0xb8>
    tmp[i++] = '0';
 800a9b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9b4:	1c5a      	adds	r2, r3, #1
 800a9b6:	657a      	str	r2, [r7, #84]	; 0x54
 800a9b8:	3360      	adds	r3, #96	; 0x60
 800a9ba:	443b      	add	r3, r7
 800a9bc:	2230      	movs	r2, #48	; 0x30
 800a9be:	f803 2c50 	strb.w	r2, [r3, #-80]
 800a9c2:	e018      	b.n	800a9f6 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	683a      	ldr	r2, [r7, #0]
 800a9c8:	fbb3 f1f2 	udiv	r1, r3, r2
 800a9cc:	fb01 f202 	mul.w	r2, r1, r2
 800a9d0:	1a9b      	subs	r3, r3, r2
 800a9d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a9d4:	441a      	add	r2, r3
 800a9d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9d8:	1c59      	adds	r1, r3, #1
 800a9da:	6579      	str	r1, [r7, #84]	; 0x54
 800a9dc:	7812      	ldrb	r2, [r2, #0]
 800a9de:	3360      	adds	r3, #96	; 0x60
 800a9e0:	443b      	add	r3, r7
 800a9e2:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 800a9e6:	687a      	ldr	r2, [r7, #4]
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9ee:	607b      	str	r3, [r7, #4]
    while (num != 0)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d1e6      	bne.n	800a9c4 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 800a9f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a9f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	dd01      	ble.n	800aa02 <ee_number+0xca>
 800a9fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa00:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 800aa02:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aa04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa06:	1ad3      	subs	r3, r2, r3
 800aa08:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800aa0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa0c:	f003 0301 	and.w	r3, r3, #1
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d112      	bne.n	800aa3a <ee_number+0x102>
 800aa14:	e00c      	b.n	800aa30 <ee_number+0xf8>
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	1c5a      	adds	r2, r3, #1
 800aa1a:	60fa      	str	r2, [r7, #12]
 800aa1c:	2220      	movs	r2, #32
 800aa1e:	701a      	strb	r2, [r3, #0]
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	3b01      	subs	r3, #1
 800aa24:	60bb      	str	r3, [r7, #8]
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d101      	bne.n	800aa30 <ee_number+0xf8>
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	e068      	b.n	800ab02 <ee_number+0x1ca>
 800aa30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aa32:	1e5a      	subs	r2, r3, #1
 800aa34:	66ba      	str	r2, [r7, #104]	; 0x68
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	dced      	bgt.n	800aa16 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 800aa3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d01b      	beq.n	800aa7a <ee_number+0x142>
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	1c5a      	adds	r2, r3, #1
 800aa46:	60fa      	str	r2, [r7, #12]
 800aa48:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800aa4c:	701a      	strb	r2, [r3, #0]
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	3b01      	subs	r3, #1
 800aa52:	60bb      	str	r3, [r7, #8]
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d10f      	bne.n	800aa7a <ee_number+0x142>
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	e051      	b.n	800ab02 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	1c5a      	adds	r2, r3, #1
 800aa62:	60fa      	str	r2, [r7, #12]
 800aa64:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800aa68:	701a      	strb	r2, [r3, #0]
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	3b01      	subs	r3, #1
 800aa6e:	60bb      	str	r3, [r7, #8]
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d101      	bne.n	800aa7a <ee_number+0x142>
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	e043      	b.n	800ab02 <ee_number+0x1ca>
 800aa7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aa7c:	1e5a      	subs	r2, r3, #1
 800aa7e:	66ba      	str	r2, [r7, #104]	; 0x68
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	dcec      	bgt.n	800aa5e <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 800aa84:	e00c      	b.n	800aaa0 <ee_number+0x168>
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	1c5a      	adds	r2, r3, #1
 800aa8a:	60fa      	str	r2, [r7, #12]
 800aa8c:	2230      	movs	r2, #48	; 0x30
 800aa8e:	701a      	strb	r2, [r3, #0]
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	3b01      	subs	r3, #1
 800aa94:	60bb      	str	r3, [r7, #8]
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d101      	bne.n	800aaa0 <ee_number+0x168>
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	e030      	b.n	800ab02 <ee_number+0x1ca>
 800aaa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aaa2:	1e5a      	subs	r2, r3, #1
 800aaa4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800aaa6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	dbec      	blt.n	800aa86 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800aaac:	e010      	b.n	800aad0 <ee_number+0x198>
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	1c5a      	adds	r2, r3, #1
 800aab2:	60fa      	str	r2, [r7, #12]
 800aab4:	f107 0110 	add.w	r1, r7, #16
 800aab8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aaba:	440a      	add	r2, r1
 800aabc:	7812      	ldrb	r2, [r2, #0]
 800aabe:	701a      	strb	r2, [r3, #0]
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	3b01      	subs	r3, #1
 800aac4:	60bb      	str	r3, [r7, #8]
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d101      	bne.n	800aad0 <ee_number+0x198>
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	e018      	b.n	800ab02 <ee_number+0x1ca>
 800aad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aad2:	1e5a      	subs	r2, r3, #1
 800aad4:	657a      	str	r2, [r7, #84]	; 0x54
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	dce9      	bgt.n	800aaae <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 800aada:	e00c      	b.n	800aaf6 <ee_number+0x1be>
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	1c5a      	adds	r2, r3, #1
 800aae0:	60fa      	str	r2, [r7, #12]
 800aae2:	2220      	movs	r2, #32
 800aae4:	701a      	strb	r2, [r3, #0]
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	3b01      	subs	r3, #1
 800aaea:	60bb      	str	r3, [r7, #8]
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d101      	bne.n	800aaf6 <ee_number+0x1be>
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	e005      	b.n	800ab02 <ee_number+0x1ca>
 800aaf6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aaf8:	1e5a      	subs	r2, r3, #1
 800aafa:	66ba      	str	r2, [r7, #104]	; 0x68
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	dced      	bgt.n	800aadc <ee_number+0x1a4>

  return str;
 800ab00:	68fb      	ldr	r3, [r7, #12]
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3764      	adds	r7, #100	; 0x64
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bc80      	pop	{r7}
 800ab0a:	4770      	bx	lr
 800ab0c:	2000000c 	.word	0x2000000c
 800ab10:	20000010 	.word	0x20000010

0800ab14 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b092      	sub	sp, #72	; 0x48
 800ab18:	af04      	add	r7, sp, #16
 800ab1a:	60f8      	str	r0, [r7, #12]
 800ab1c:	60b9      	str	r1, [r7, #8]
 800ab1e:	607a      	str	r2, [r7, #4]
 800ab20:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	dc01      	bgt.n	800ab2c <tiny_vsnprintf_like+0x18>
  {
    return 0;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	e142      	b.n	800adb2 <tiny_vsnprintf_like+0x29e>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab30:	e12a      	b.n	800ad88 <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 800ab32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	1ad2      	subs	r2, r2, r3
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	3b01      	subs	r3, #1
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	f280 8131 	bge.w	800ada4 <tiny_vsnprintf_like+0x290>

    if (*fmt != '%')
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	2b25      	cmp	r3, #37	; 0x25
 800ab48:	d006      	beq.n	800ab58 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 800ab4a:	687a      	ldr	r2, [r7, #4]
 800ab4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab4e:	1c59      	adds	r1, r3, #1
 800ab50:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ab52:	7812      	ldrb	r2, [r2, #0]
 800ab54:	701a      	strb	r2, [r3, #0]
      continue;
 800ab56:	e114      	b.n	800ad82 <tiny_vsnprintf_like+0x26e>
    }

    // Process flags
    flags = 0;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	3301      	adds	r3, #1
 800ab60:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	781b      	ldrb	r3, [r3, #0]
 800ab66:	2b30      	cmp	r3, #48	; 0x30
 800ab68:	d103      	bne.n	800ab72 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 800ab6a:	6a3b      	ldr	r3, [r7, #32]
 800ab6c:	f043 0301 	orr.w	r3, r3, #1
 800ab70:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 800ab72:	f04f 33ff 	mov.w	r3, #4294967295
 800ab76:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	781b      	ldrb	r3, [r3, #0]
 800ab7c:	2b2f      	cmp	r3, #47	; 0x2f
 800ab7e:	d908      	bls.n	800ab92 <tiny_vsnprintf_like+0x7e>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	781b      	ldrb	r3, [r3, #0]
 800ab84:	2b39      	cmp	r3, #57	; 0x39
 800ab86:	d804      	bhi.n	800ab92 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 800ab88:	1d3b      	adds	r3, r7, #4
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7ff feae 	bl	800a8ec <ee_skip_atoi>
 800ab90:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 800ab92:	f04f 33ff 	mov.w	r3, #4294967295
 800ab96:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 800ab98:	f04f 33ff 	mov.w	r3, #4294967295
 800ab9c:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 800ab9e:	230a      	movs	r3, #10
 800aba0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	3b58      	subs	r3, #88	; 0x58
 800aba8:	2b20      	cmp	r3, #32
 800abaa:	f200 8094 	bhi.w	800acd6 <tiny_vsnprintf_like+0x1c2>
 800abae:	a201      	add	r2, pc, #4	; (adr r2, 800abb4 <tiny_vsnprintf_like+0xa0>)
 800abb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abb4:	0800acbf 	.word	0x0800acbf
 800abb8:	0800acd7 	.word	0x0800acd7
 800abbc:	0800acd7 	.word	0x0800acd7
 800abc0:	0800acd7 	.word	0x0800acd7
 800abc4:	0800acd7 	.word	0x0800acd7
 800abc8:	0800acd7 	.word	0x0800acd7
 800abcc:	0800acd7 	.word	0x0800acd7
 800abd0:	0800acd7 	.word	0x0800acd7
 800abd4:	0800acd7 	.word	0x0800acd7
 800abd8:	0800acd7 	.word	0x0800acd7
 800abdc:	0800acd7 	.word	0x0800acd7
 800abe0:	0800ac43 	.word	0x0800ac43
 800abe4:	0800accd 	.word	0x0800accd
 800abe8:	0800acd7 	.word	0x0800acd7
 800abec:	0800acd7 	.word	0x0800acd7
 800abf0:	0800acd7 	.word	0x0800acd7
 800abf4:	0800acd7 	.word	0x0800acd7
 800abf8:	0800accd 	.word	0x0800accd
 800abfc:	0800acd7 	.word	0x0800acd7
 800ac00:	0800acd7 	.word	0x0800acd7
 800ac04:	0800acd7 	.word	0x0800acd7
 800ac08:	0800acd7 	.word	0x0800acd7
 800ac0c:	0800acd7 	.word	0x0800acd7
 800ac10:	0800acd7 	.word	0x0800acd7
 800ac14:	0800acd7 	.word	0x0800acd7
 800ac18:	0800acd7 	.word	0x0800acd7
 800ac1c:	0800acd7 	.word	0x0800acd7
 800ac20:	0800ac63 	.word	0x0800ac63
 800ac24:	0800acd7 	.word	0x0800acd7
 800ac28:	0800ad23 	.word	0x0800ad23
 800ac2c:	0800acd7 	.word	0x0800acd7
 800ac30:	0800acd7 	.word	0x0800acd7
 800ac34:	0800acc7 	.word	0x0800acc7
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 800ac38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac3a:	1c5a      	adds	r2, r3, #1
 800ac3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ac3e:	2220      	movs	r2, #32
 800ac40:	701a      	strb	r2, [r3, #0]
 800ac42:	69fb      	ldr	r3, [r7, #28]
 800ac44:	3b01      	subs	r3, #1
 800ac46:	61fb      	str	r3, [r7, #28]
 800ac48:	69fb      	ldr	r3, [r7, #28]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	dcf4      	bgt.n	800ac38 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	1d1a      	adds	r2, r3, #4
 800ac52:	603a      	str	r2, [r7, #0]
 800ac54:	6819      	ldr	r1, [r3, #0]
 800ac56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac58:	1c5a      	adds	r2, r3, #1
 800ac5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ac5c:	b2ca      	uxtb	r2, r1
 800ac5e:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 800ac60:	e08f      	b.n	800ad82 <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	1d1a      	adds	r2, r3, #4
 800ac66:	603a      	str	r2, [r7, #0]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 800ac6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d101      	bne.n	800ac76 <tiny_vsnprintf_like+0x162>
 800ac72:	4b52      	ldr	r3, [pc, #328]	; (800adbc <tiny_vsnprintf_like+0x2a8>)
 800ac74:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 800ac76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac78:	f7f5 fa7e 	bl	8000178 <strlen>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 800ac80:	e004      	b.n	800ac8c <tiny_vsnprintf_like+0x178>
 800ac82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac84:	1c5a      	adds	r2, r3, #1
 800ac86:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ac88:	2220      	movs	r2, #32
 800ac8a:	701a      	strb	r2, [r3, #0]
 800ac8c:	69fb      	ldr	r3, [r7, #28]
 800ac8e:	1e5a      	subs	r2, r3, #1
 800ac90:	61fa      	str	r2, [r7, #28]
 800ac92:	693a      	ldr	r2, [r7, #16]
 800ac94:	429a      	cmp	r2, r3
 800ac96:	dbf4      	blt.n	800ac82 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac9c:	e00a      	b.n	800acb4 <tiny_vsnprintf_like+0x1a0>
 800ac9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aca0:	1c53      	adds	r3, r2, #1
 800aca2:	627b      	str	r3, [r7, #36]	; 0x24
 800aca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca6:	1c59      	adds	r1, r3, #1
 800aca8:	62f9      	str	r1, [r7, #44]	; 0x2c
 800acaa:	7812      	ldrb	r2, [r2, #0]
 800acac:	701a      	strb	r2, [r3, #0]
 800acae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb0:	3301      	adds	r3, #1
 800acb2:	62bb      	str	r3, [r7, #40]	; 0x28
 800acb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	429a      	cmp	r2, r3
 800acba:	dbf0      	blt.n	800ac9e <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 800acbc:	e061      	b.n	800ad82 <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 800acbe:	6a3b      	ldr	r3, [r7, #32]
 800acc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acc4:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 800acc6:	2310      	movs	r3, #16
 800acc8:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 800acca:	e02d      	b.n	800ad28 <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 800accc:	6a3b      	ldr	r3, [r7, #32]
 800acce:	f043 0302 	orr.w	r3, r3, #2
 800acd2:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 800acd4:	e025      	b.n	800ad22 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	2b25      	cmp	r3, #37	; 0x25
 800acdc:	d004      	beq.n	800ace8 <tiny_vsnprintf_like+0x1d4>
 800acde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace0:	1c5a      	adds	r2, r3, #1
 800ace2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ace4:	2225      	movs	r2, #37	; 0x25
 800ace6:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 800ace8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	1ad2      	subs	r2, r2, r3
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	3b01      	subs	r3, #1
 800acf2:	429a      	cmp	r2, r3
 800acf4:	da17      	bge.n	800ad26 <tiny_vsnprintf_like+0x212>
        if (*fmt)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	781b      	ldrb	r3, [r3, #0]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d006      	beq.n	800ad0c <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad02:	1c59      	adds	r1, r3, #1
 800ad04:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ad06:	7812      	ldrb	r2, [r2, #0]
 800ad08:	701a      	strb	r2, [r3, #0]
 800ad0a:	e002      	b.n	800ad12 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	3b01      	subs	r3, #1
 800ad10:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 800ad12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	1ad2      	subs	r2, r2, r3
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	3b01      	subs	r3, #1
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	db2f      	blt.n	800ad80 <tiny_vsnprintf_like+0x26c>
 800ad20:	e002      	b.n	800ad28 <tiny_vsnprintf_like+0x214>
        break;
 800ad22:	bf00      	nop
 800ad24:	e000      	b.n	800ad28 <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 800ad26:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	2b6c      	cmp	r3, #108	; 0x6c
 800ad2c:	d105      	bne.n	800ad3a <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	1d1a      	adds	r2, r3, #4
 800ad32:	603a      	str	r2, [r7, #0]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	637b      	str	r3, [r7, #52]	; 0x34
 800ad38:	e00f      	b.n	800ad5a <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 800ad3a:	6a3b      	ldr	r3, [r7, #32]
 800ad3c:	f003 0302 	and.w	r3, r3, #2
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d005      	beq.n	800ad50 <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	1d1a      	adds	r2, r3, #4
 800ad48:	603a      	str	r2, [r7, #0]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	637b      	str	r3, [r7, #52]	; 0x34
 800ad4e:	e004      	b.n	800ad5a <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	1d1a      	adds	r2, r3, #4
 800ad54:	603a      	str	r2, [r7, #0]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	1e5a      	subs	r2, r3, #1
 800ad5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	1acb      	subs	r3, r1, r3
 800ad64:	1ad1      	subs	r1, r2, r3
 800ad66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad68:	6a3b      	ldr	r3, [r7, #32]
 800ad6a:	9302      	str	r3, [sp, #8]
 800ad6c:	69bb      	ldr	r3, [r7, #24]
 800ad6e:	9301      	str	r3, [sp, #4]
 800ad70:	69fb      	ldr	r3, [r7, #28]
 800ad72:	9300      	str	r3, [sp, #0]
 800ad74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad78:	f7ff fdde 	bl	800a938 <ee_number>
 800ad7c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ad7e:	e000      	b.n	800ad82 <tiny_vsnprintf_like+0x26e>
        continue;
 800ad80:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	3301      	adds	r3, #1
 800ad86:	607b      	str	r3, [r7, #4]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	781b      	ldrb	r3, [r3, #0]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	f47f aed0 	bne.w	800ab32 <tiny_vsnprintf_like+0x1e>
 800ad92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	1ad2      	subs	r2, r2, r3
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	3b01      	subs	r3, #1
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	f6bf aec8 	bge.w	800ab32 <tiny_vsnprintf_like+0x1e>
 800ada2:	e000      	b.n	800ada6 <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 800ada4:	bf00      	nop
  }

  *str = '\0';
 800ada6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada8:	2200      	movs	r2, #0
 800adaa:	701a      	strb	r2, [r3, #0]
  return str - buf;
 800adac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	1ad3      	subs	r3, r2, r3
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3738      	adds	r7, #56	; 0x38
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
 800adba:	bf00      	nop
 800adbc:	0800bc04 	.word	0x0800bc04

0800adc0 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b090      	sub	sp, #64	; 0x40
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800adc8:	4b73      	ldr	r3, [pc, #460]	; (800af98 <UTIL_SEQ_Run+0x1d8>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800adce:	4b72      	ldr	r3, [pc, #456]	; (800af98 <UTIL_SEQ_Run+0x1d8>)
 800add0:	681a      	ldr	r2, [r3, #0]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	4013      	ands	r3, r2
 800add6:	4a70      	ldr	r2, [pc, #448]	; (800af98 <UTIL_SEQ_Run+0x1d8>)
 800add8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800adda:	4b70      	ldr	r3, [pc, #448]	; (800af9c <UTIL_SEQ_Run+0x1dc>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800ade0:	4b6f      	ldr	r3, [pc, #444]	; (800afa0 <UTIL_SEQ_Run+0x1e0>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800ade6:	4b6f      	ldr	r3, [pc, #444]	; (800afa4 <UTIL_SEQ_Run+0x1e4>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800adec:	4b6e      	ldr	r3, [pc, #440]	; (800afa8 <UTIL_SEQ_Run+0x1e8>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800adf2:	e08d      	b.n	800af10 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800adf4:	2300      	movs	r3, #0
 800adf6:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800adf8:	e002      	b.n	800ae00 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800adfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adfc:	3301      	adds	r3, #1
 800adfe:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800ae00:	4a6a      	ldr	r2, [pc, #424]	; (800afac <UTIL_SEQ_Run+0x1ec>)
 800ae02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae04:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ae08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae0a:	401a      	ands	r2, r3
 800ae0c:	4b62      	ldr	r3, [pc, #392]	; (800af98 <UTIL_SEQ_Run+0x1d8>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	4013      	ands	r3, r2
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d0f1      	beq.n	800adfa <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800ae16:	4a65      	ldr	r2, [pc, #404]	; (800afac <UTIL_SEQ_Run+0x1ec>)
 800ae18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae1a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ae1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae20:	401a      	ands	r2, r3
 800ae22:	4b5d      	ldr	r3, [pc, #372]	; (800af98 <UTIL_SEQ_Run+0x1d8>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	4013      	ands	r3, r2
 800ae28:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800ae2a:	4a60      	ldr	r2, [pc, #384]	; (800afac <UTIL_SEQ_Run+0x1ec>)
 800ae2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae2e:	00db      	lsls	r3, r3, #3
 800ae30:	4413      	add	r3, r2
 800ae32:	685a      	ldr	r2, [r3, #4]
 800ae34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae36:	4013      	ands	r3, r2
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d106      	bne.n	800ae4a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800ae3c:	4a5b      	ldr	r2, [pc, #364]	; (800afac <UTIL_SEQ_Run+0x1ec>)
 800ae3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae40:	00db      	lsls	r3, r3, #3
 800ae42:	4413      	add	r3, r2
 800ae44:	f04f 32ff 	mov.w	r2, #4294967295
 800ae48:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800ae4a:	4a58      	ldr	r2, [pc, #352]	; (800afac <UTIL_SEQ_Run+0x1ec>)
 800ae4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae4e:	00db      	lsls	r3, r3, #3
 800ae50:	4413      	add	r3, r2
 800ae52:	685a      	ldr	r2, [r3, #4]
 800ae54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae56:	4013      	ands	r3, r2
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f000 f8b9 	bl	800afd0 <SEQ_BitPosition>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	461a      	mov	r2, r3
 800ae62:	4b53      	ldr	r3, [pc, #332]	; (800afb0 <UTIL_SEQ_Run+0x1f0>)
 800ae64:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800ae66:	4a51      	ldr	r2, [pc, #324]	; (800afac <UTIL_SEQ_Run+0x1ec>)
 800ae68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae6a:	00db      	lsls	r3, r3, #3
 800ae6c:	4413      	add	r3, r2
 800ae6e:	685a      	ldr	r2, [r3, #4]
 800ae70:	4b4f      	ldr	r3, [pc, #316]	; (800afb0 <UTIL_SEQ_Run+0x1f0>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	2101      	movs	r1, #1
 800ae76:	fa01 f303 	lsl.w	r3, r1, r3
 800ae7a:	43db      	mvns	r3, r3
 800ae7c:	401a      	ands	r2, r3
 800ae7e:	494b      	ldr	r1, [pc, #300]	; (800afac <UTIL_SEQ_Run+0x1ec>)
 800ae80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae82:	00db      	lsls	r3, r3, #3
 800ae84:	440b      	add	r3, r1
 800ae86:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae88:	f3ef 8310 	mrs	r3, PRIMASK
 800ae8c:	61bb      	str	r3, [r7, #24]
  return(result);
 800ae8e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ae90:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae92:	b672      	cpsid	i
}
 800ae94:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800ae96:	4b46      	ldr	r3, [pc, #280]	; (800afb0 <UTIL_SEQ_Run+0x1f0>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	fa02 f303 	lsl.w	r3, r2, r3
 800aea0:	43da      	mvns	r2, r3
 800aea2:	4b3e      	ldr	r3, [pc, #248]	; (800af9c <UTIL_SEQ_Run+0x1dc>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	4013      	ands	r3, r2
 800aea8:	4a3c      	ldr	r2, [pc, #240]	; (800af9c <UTIL_SEQ_Run+0x1dc>)
 800aeaa:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800aeac:	2301      	movs	r3, #1
 800aeae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aeb0:	e013      	b.n	800aeda <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800aeb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeb4:	3b01      	subs	r3, #1
 800aeb6:	4a3d      	ldr	r2, [pc, #244]	; (800afac <UTIL_SEQ_Run+0x1ec>)
 800aeb8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800aebc:	4b3c      	ldr	r3, [pc, #240]	; (800afb0 <UTIL_SEQ_Run+0x1f0>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	2201      	movs	r2, #1
 800aec2:	fa02 f303 	lsl.w	r3, r2, r3
 800aec6:	43da      	mvns	r2, r3
 800aec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeca:	3b01      	subs	r3, #1
 800aecc:	400a      	ands	r2, r1
 800aece:	4937      	ldr	r1, [pc, #220]	; (800afac <UTIL_SEQ_Run+0x1ec>)
 800aed0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800aed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aed6:	3b01      	subs	r3, #1
 800aed8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aeda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d1e8      	bne.n	800aeb2 <UTIL_SEQ_Run+0xf2>
 800aee0:	6a3b      	ldr	r3, [r7, #32]
 800aee2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	f383 8810 	msr	PRIMASK, r3
}
 800aeea:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800aeec:	4b30      	ldr	r3, [pc, #192]	; (800afb0 <UTIL_SEQ_Run+0x1f0>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	4a30      	ldr	r2, [pc, #192]	; (800afb4 <UTIL_SEQ_Run+0x1f4>)
 800aef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aef6:	4798      	blx	r3

    local_taskset = TaskSet;
 800aef8:	4b28      	ldr	r3, [pc, #160]	; (800af9c <UTIL_SEQ_Run+0x1dc>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800aefe:	4b28      	ldr	r3, [pc, #160]	; (800afa0 <UTIL_SEQ_Run+0x1e0>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800af04:	4b27      	ldr	r3, [pc, #156]	; (800afa4 <UTIL_SEQ_Run+0x1e4>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800af0a:	4b27      	ldr	r3, [pc, #156]	; (800afa8 <UTIL_SEQ_Run+0x1e8>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800af10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af14:	401a      	ands	r2, r3
 800af16:	4b20      	ldr	r3, [pc, #128]	; (800af98 <UTIL_SEQ_Run+0x1d8>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4013      	ands	r3, r2
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d005      	beq.n	800af2c <UTIL_SEQ_Run+0x16c>
 800af20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af24:	4013      	ands	r3, r2
 800af26:	2b00      	cmp	r3, #0
 800af28:	f43f af64 	beq.w	800adf4 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800af2c:	4b20      	ldr	r3, [pc, #128]	; (800afb0 <UTIL_SEQ_Run+0x1f0>)
 800af2e:	f04f 32ff 	mov.w	r2, #4294967295
 800af32:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800af34:	f000 f840 	bl	800afb8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af38:	f3ef 8310 	mrs	r3, PRIMASK
 800af3c:	613b      	str	r3, [r7, #16]
  return(result);
 800af3e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800af40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800af42:	b672      	cpsid	i
}
 800af44:	bf00      	nop
  local_taskset = TaskSet;
 800af46:	4b15      	ldr	r3, [pc, #84]	; (800af9c <UTIL_SEQ_Run+0x1dc>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800af4c:	4b14      	ldr	r3, [pc, #80]	; (800afa0 <UTIL_SEQ_Run+0x1e0>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800af52:	4b14      	ldr	r3, [pc, #80]	; (800afa4 <UTIL_SEQ_Run+0x1e4>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800af58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af5c:	401a      	ands	r2, r3
 800af5e:	4b0e      	ldr	r3, [pc, #56]	; (800af98 <UTIL_SEQ_Run+0x1d8>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	4013      	ands	r3, r2
 800af64:	2b00      	cmp	r3, #0
 800af66:	d107      	bne.n	800af78 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800af68:	4b0f      	ldr	r3, [pc, #60]	; (800afa8 <UTIL_SEQ_Run+0x1e8>)
 800af6a:	681a      	ldr	r2, [r3, #0]
 800af6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af6e:	4013      	ands	r3, r2
 800af70:	2b00      	cmp	r3, #0
 800af72:	d101      	bne.n	800af78 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800af74:	f7f5 fd72 	bl	8000a5c <UTIL_SEQ_Idle>
 800af78:	69fb      	ldr	r3, [r7, #28]
 800af7a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	f383 8810 	msr	PRIMASK, r3
}
 800af82:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800af84:	f000 f81e 	bl	800afc4 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800af88:	4a03      	ldr	r2, [pc, #12]	; (800af98 <UTIL_SEQ_Run+0x1d8>)
 800af8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af8c:	6013      	str	r3, [r2, #0]

  return;
 800af8e:	bf00      	nop
}
 800af90:	3740      	adds	r7, #64	; 0x40
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
 800af96:	bf00      	nop
 800af98:	20000018 	.word	0x20000018
 800af9c:	20000344 	.word	0x20000344
 800afa0:	20000348 	.word	0x20000348
 800afa4:	20000014 	.word	0x20000014
 800afa8:	2000034c 	.word	0x2000034c
 800afac:	20000358 	.word	0x20000358
 800afb0:	20000350 	.word	0x20000350
 800afb4:	20000354 	.word	0x20000354

0800afb8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800afb8:	b480      	push	{r7}
 800afba:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800afbc:	bf00      	nop
}
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bc80      	pop	{r7}
 800afc2:	4770      	bx	lr

0800afc4 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800afc4:	b480      	push	{r7}
 800afc6:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800afc8:	bf00      	nop
}
 800afca:	46bd      	mov	sp, r7
 800afcc:	bc80      	pop	{r7}
 800afce:	4770      	bx	lr

0800afd0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b085      	sub	sp, #20
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800afd8:	2300      	movs	r3, #0
 800afda:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	0c1b      	lsrs	r3, r3, #16
 800afe4:	041b      	lsls	r3, r3, #16
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d104      	bne.n	800aff4 <SEQ_BitPosition+0x24>
 800afea:	2310      	movs	r3, #16
 800afec:	73fb      	strb	r3, [r7, #15]
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	041b      	lsls	r3, r3, #16
 800aff2:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800affa:	2b00      	cmp	r3, #0
 800affc:	d105      	bne.n	800b00a <SEQ_BitPosition+0x3a>
 800affe:	7bfb      	ldrb	r3, [r7, #15]
 800b000:	3308      	adds	r3, #8
 800b002:	73fb      	strb	r3, [r7, #15]
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	021b      	lsls	r3, r3, #8
 800b008:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b010:	2b00      	cmp	r3, #0
 800b012:	d105      	bne.n	800b020 <SEQ_BitPosition+0x50>
 800b014:	7bfb      	ldrb	r3, [r7, #15]
 800b016:	3304      	adds	r3, #4
 800b018:	73fb      	strb	r3, [r7, #15]
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	011b      	lsls	r3, r3, #4
 800b01e:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	0f1b      	lsrs	r3, r3, #28
 800b024:	4a06      	ldr	r2, [pc, #24]	; (800b040 <SEQ_BitPosition+0x70>)
 800b026:	5cd2      	ldrb	r2, [r2, r3]
 800b028:	7bfb      	ldrb	r3, [r7, #15]
 800b02a:	4413      	add	r3, r2
 800b02c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800b02e:	7bfb      	ldrb	r3, [r7, #15]
 800b030:	f1c3 031f 	rsb	r3, r3, #31
 800b034:	b2db      	uxtb	r3, r3
}
 800b036:	4618      	mov	r0, r3
 800b038:	3714      	adds	r7, #20
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bc80      	pop	{r7}
 800b03e:	4770      	bx	lr
 800b040:	0800be74 	.word	0x0800be74

0800b044 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800b048:	4b04      	ldr	r3, [pc, #16]	; (800b05c <UTIL_TIMER_Init+0x18>)
 800b04a:	2200      	movs	r2, #0
 800b04c:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800b04e:	4b04      	ldr	r3, [pc, #16]	; (800b060 <UTIL_TIMER_Init+0x1c>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4798      	blx	r3
 800b054:	4603      	mov	r3, r0
}
 800b056:	4618      	mov	r0, r3
 800b058:	bd80      	pop	{r7, pc}
 800b05a:	bf00      	nop
 800b05c:	20000360 	.word	0x20000360
 800b060:	0800bcc4 	.word	0x0800bcc4

0800b064 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	60f8      	str	r0, [r7, #12]
 800b06c:	60b9      	str	r1, [r7, #8]
 800b06e:	603b      	str	r3, [r7, #0]
 800b070:	4613      	mov	r3, r2
 800b072:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d023      	beq.n	800b0c2 <UTIL_TIMER_Create+0x5e>
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d020      	beq.n	800b0c2 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2200      	movs	r2, #0
 800b084:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800b086:	4b11      	ldr	r3, [pc, #68]	; (800b0cc <UTIL_TIMER_Create+0x68>)
 800b088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b08a:	68b8      	ldr	r0, [r7, #8]
 800b08c:	4798      	blx	r3
 800b08e:	4602      	mov	r2, r0
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	2200      	movs	r2, #0
 800b098:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2200      	movs	r2, #0
 800b09e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	683a      	ldr	r2, [r7, #0]
 800b0aa:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	69ba      	ldr	r2, [r7, #24]
 800b0b0:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	79fa      	ldrb	r2, [r7, #7]
 800b0b6:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	e000      	b.n	800b0c4 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800b0c2:	2301      	movs	r3, #1
  }
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3710      	adds	r7, #16
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}
 800b0cc:	0800bcc4 	.word	0x0800bcc4

0800b0d0 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b08a      	sub	sp, #40	; 0x28
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d056      	beq.n	800b192 <UTIL_TIMER_Start+0xc2>
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f000 f9a9 	bl	800b43c <TimerExists>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	f083 0301 	eor.w	r3, r3, #1
 800b0f0:	b2db      	uxtb	r3, r3
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d04d      	beq.n	800b192 <UTIL_TIMER_Start+0xc2>
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	7a5b      	ldrb	r3, [r3, #9]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d149      	bne.n	800b192 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b0fe:	f3ef 8310 	mrs	r3, PRIMASK
 800b102:	613b      	str	r3, [r7, #16]
  return(result);
 800b104:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b106:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b108:	b672      	cpsid	i
}
 800b10a:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	685b      	ldr	r3, [r3, #4]
 800b110:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800b112:	4b24      	ldr	r3, [pc, #144]	; (800b1a4 <UTIL_TIMER_Start+0xd4>)
 800b114:	6a1b      	ldr	r3, [r3, #32]
 800b116:	4798      	blx	r3
 800b118:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800b11a:	6a3a      	ldr	r2, [r7, #32]
 800b11c:	69bb      	ldr	r3, [r7, #24]
 800b11e:	429a      	cmp	r2, r3
 800b120:	d201      	bcs.n	800b126 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800b122:	69bb      	ldr	r3, [r7, #24]
 800b124:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6a3a      	ldr	r2, [r7, #32]
 800b12a:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2200      	movs	r2, #0
 800b130:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2201      	movs	r2, #1
 800b136:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2200      	movs	r2, #0
 800b13c:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800b13e:	4b1a      	ldr	r3, [pc, #104]	; (800b1a8 <UTIL_TIMER_Start+0xd8>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d106      	bne.n	800b154 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800b146:	4b17      	ldr	r3, [pc, #92]	; (800b1a4 <UTIL_TIMER_Start+0xd4>)
 800b148:	691b      	ldr	r3, [r3, #16]
 800b14a:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f000 f9eb 	bl	800b528 <TimerInsertNewHeadTimer>
 800b152:	e017      	b.n	800b184 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800b154:	4b13      	ldr	r3, [pc, #76]	; (800b1a4 <UTIL_TIMER_Start+0xd4>)
 800b156:	699b      	ldr	r3, [r3, #24]
 800b158:	4798      	blx	r3
 800b15a:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681a      	ldr	r2, [r3, #0]
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	441a      	add	r2, r3
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681a      	ldr	r2, [r3, #0]
 800b16c:	4b0e      	ldr	r3, [pc, #56]	; (800b1a8 <UTIL_TIMER_Start+0xd8>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	429a      	cmp	r2, r3
 800b174:	d203      	bcs.n	800b17e <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f000 f9d6 	bl	800b528 <TimerInsertNewHeadTimer>
 800b17c:	e002      	b.n	800b184 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f000 f9a2 	bl	800b4c8 <TimerInsertTimer>
 800b184:	69fb      	ldr	r3, [r7, #28]
 800b186:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	f383 8810 	msr	PRIMASK, r3
}
 800b18e:	bf00      	nop
  {
 800b190:	e002      	b.n	800b198 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800b192:	2301      	movs	r3, #1
 800b194:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800b198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3728      	adds	r7, #40	; 0x28
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}
 800b1a4:	0800bcc4 	.word	0x0800bcc4
 800b1a8:	20000360 	.word	0x20000360

0800b1ac <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b088      	sub	sp, #32
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d05b      	beq.n	800b276 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1be:	f3ef 8310 	mrs	r3, PRIMASK
 800b1c2:	60fb      	str	r3, [r7, #12]
  return(result);
 800b1c4:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b1c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b1c8:	b672      	cpsid	i
}
 800b1ca:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800b1cc:	4b2d      	ldr	r3, [pc, #180]	; (800b284 <UTIL_TIMER_Stop+0xd8>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800b1d2:	4b2c      	ldr	r3, [pc, #176]	; (800b284 <UTIL_TIMER_Stop+0xd8>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2201      	movs	r2, #1
 800b1dc:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800b1de:	4b29      	ldr	r3, [pc, #164]	; (800b284 <UTIL_TIMER_Stop+0xd8>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d041      	beq.n	800b26a <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800b1ec:	4b25      	ldr	r3, [pc, #148]	; (800b284 <UTIL_TIMER_Stop+0xd8>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	687a      	ldr	r2, [r7, #4]
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d134      	bne.n	800b260 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800b1f6:	4b23      	ldr	r3, [pc, #140]	; (800b284 <UTIL_TIMER_Stop+0xd8>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800b1fe:	4b21      	ldr	r3, [pc, #132]	; (800b284 <UTIL_TIMER_Stop+0xd8>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	695b      	ldr	r3, [r3, #20]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d00a      	beq.n	800b21e <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800b208:	4b1e      	ldr	r3, [pc, #120]	; (800b284 <UTIL_TIMER_Stop+0xd8>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	695b      	ldr	r3, [r3, #20]
 800b20e:	4a1d      	ldr	r2, [pc, #116]	; (800b284 <UTIL_TIMER_Stop+0xd8>)
 800b210:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800b212:	4b1c      	ldr	r3, [pc, #112]	; (800b284 <UTIL_TIMER_Stop+0xd8>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	4618      	mov	r0, r3
 800b218:	f000 f92c 	bl	800b474 <TimerSetTimeout>
 800b21c:	e023      	b.n	800b266 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800b21e:	4b1a      	ldr	r3, [pc, #104]	; (800b288 <UTIL_TIMER_Stop+0xdc>)
 800b220:	68db      	ldr	r3, [r3, #12]
 800b222:	4798      	blx	r3
            TimerListHead = NULL;
 800b224:	4b17      	ldr	r3, [pc, #92]	; (800b284 <UTIL_TIMER_Stop+0xd8>)
 800b226:	2200      	movs	r2, #0
 800b228:	601a      	str	r2, [r3, #0]
 800b22a:	e01c      	b.n	800b266 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800b22c:	697a      	ldr	r2, [r7, #20]
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	429a      	cmp	r2, r3
 800b232:	d110      	bne.n	800b256 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	695b      	ldr	r3, [r3, #20]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d006      	beq.n	800b24a <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	695b      	ldr	r3, [r3, #20]
 800b240:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800b242:	69bb      	ldr	r3, [r7, #24]
 800b244:	697a      	ldr	r2, [r7, #20]
 800b246:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800b248:	e00d      	b.n	800b266 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800b24a:	2300      	movs	r3, #0
 800b24c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800b24e:	69bb      	ldr	r3, [r7, #24]
 800b250:	697a      	ldr	r2, [r7, #20]
 800b252:	615a      	str	r2, [r3, #20]
            break;
 800b254:	e007      	b.n	800b266 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	695b      	ldr	r3, [r3, #20]
 800b25e:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d1e2      	bne.n	800b22c <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800b266:	2300      	movs	r3, #0
 800b268:	77fb      	strb	r3, [r7, #31]
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	f383 8810 	msr	PRIMASK, r3
}
 800b274:	e001      	b.n	800b27a <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800b276:	2301      	movs	r3, #1
 800b278:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800b27a:	7ffb      	ldrb	r3, [r7, #31]
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3720      	adds	r7, #32
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}
 800b284:	20000360 	.word	0x20000360
 800b288:	0800bcc4 	.word	0x0800bcc4

0800b28c <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b084      	sub	sp, #16
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b296:	2300      	movs	r3, #0
 800b298:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d102      	bne.n	800b2a6 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	73fb      	strb	r3, [r7, #15]
 800b2a4:	e014      	b.n	800b2d0 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800b2a6:	4b0d      	ldr	r3, [pc, #52]	; (800b2dc <UTIL_TIMER_SetPeriod+0x50>)
 800b2a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2aa:	6838      	ldr	r0, [r7, #0]
 800b2ac:	4798      	blx	r3
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 f8c1 	bl	800b43c <TimerExists>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d007      	beq.n	800b2d0 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f7ff ff73 	bl	800b1ac <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f7ff ff02 	bl	800b0d0 <UTIL_TIMER_Start>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800b2d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3710      	adds	r7, #16
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}
 800b2da:	bf00      	nop
 800b2dc:	0800bcc4 	.word	0x0800bcc4

0800b2e0 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 800b2e0:	b590      	push	{r4, r7, lr}
 800b2e2:	b089      	sub	sp, #36	; 0x24
 800b2e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2e6:	f3ef 8310 	mrs	r3, PRIMASK
 800b2ea:	60bb      	str	r3, [r7, #8]
  return(result);
 800b2ec:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b2ee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800b2f0:	b672      	cpsid	i
}
 800b2f2:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 800b2f4:	4b38      	ldr	r3, [pc, #224]	; (800b3d8 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800b2f6:	695b      	ldr	r3, [r3, #20]
 800b2f8:	4798      	blx	r3
 800b2fa:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800b2fc:	4b36      	ldr	r3, [pc, #216]	; (800b3d8 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800b2fe:	691b      	ldr	r3, [r3, #16]
 800b300:	4798      	blx	r3
 800b302:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 800b304:	693a      	ldr	r2, [r7, #16]
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	1ad3      	subs	r3, r2, r3
 800b30a:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 800b30c:	4b33      	ldr	r3, [pc, #204]	; (800b3dc <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d037      	beq.n	800b384 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 800b314:	4b31      	ldr	r3, [pc, #196]	; (800b3dc <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 800b31a:	69fb      	ldr	r3, [r7, #28]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	68fa      	ldr	r2, [r7, #12]
 800b320:	429a      	cmp	r2, r3
 800b322:	d206      	bcs.n	800b332 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 800b324:	69fb      	ldr	r3, [r7, #28]
 800b326:	681a      	ldr	r2, [r3, #0]
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	1ad2      	subs	r2, r2, r3
 800b32c:	69fb      	ldr	r3, [r7, #28]
 800b32e:	601a      	str	r2, [r3, #0]
 800b330:	e002      	b.n	800b338 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 800b332:	69fb      	ldr	r3, [r7, #28]
 800b334:	2200      	movs	r2, #0
 800b336:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 800b338:	69fb      	ldr	r3, [r7, #28]
 800b33a:	695b      	ldr	r3, [r3, #20]
 800b33c:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 800b33e:	69fb      	ldr	r3, [r7, #28]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d1ea      	bne.n	800b31a <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800b344:	e01e      	b.n	800b384 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 800b346:	4b25      	ldr	r3, [pc, #148]	; (800b3dc <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 800b34c:	4b23      	ldr	r3, [pc, #140]	; (800b3dc <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	695b      	ldr	r3, [r3, #20]
 800b352:	4a22      	ldr	r2, [pc, #136]	; (800b3dc <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b354:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 800b356:	69fb      	ldr	r3, [r7, #28]
 800b358:	2200      	movs	r2, #0
 800b35a:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 800b35c:	69fb      	ldr	r3, [r7, #28]
 800b35e:	2200      	movs	r2, #0
 800b360:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 800b362:	69fb      	ldr	r3, [r7, #28]
 800b364:	68db      	ldr	r3, [r3, #12]
 800b366:	69fa      	ldr	r2, [r7, #28]
 800b368:	6912      	ldr	r2, [r2, #16]
 800b36a:	4610      	mov	r0, r2
 800b36c:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800b36e:	69fb      	ldr	r3, [r7, #28]
 800b370:	7adb      	ldrb	r3, [r3, #11]
 800b372:	2b01      	cmp	r3, #1
 800b374:	d106      	bne.n	800b384 <UTIL_TIMER_IRQ_Handler+0xa4>
 800b376:	69fb      	ldr	r3, [r7, #28]
 800b378:	7a9b      	ldrb	r3, [r3, #10]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d102      	bne.n	800b384 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 800b37e:	69f8      	ldr	r0, [r7, #28]
 800b380:	f7ff fea6 	bl	800b0d0 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800b384:	4b15      	ldr	r3, [pc, #84]	; (800b3dc <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d00d      	beq.n	800b3a8 <UTIL_TIMER_IRQ_Handler+0xc8>
 800b38c:	4b13      	ldr	r3, [pc, #76]	; (800b3dc <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d0d7      	beq.n	800b346 <UTIL_TIMER_IRQ_Handler+0x66>
 800b396:	4b11      	ldr	r3, [pc, #68]	; (800b3dc <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	681c      	ldr	r4, [r3, #0]
 800b39c:	4b0e      	ldr	r3, [pc, #56]	; (800b3d8 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800b39e:	699b      	ldr	r3, [r3, #24]
 800b3a0:	4798      	blx	r3
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	429c      	cmp	r4, r3
 800b3a6:	d3ce      	bcc.n	800b346 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800b3a8:	4b0c      	ldr	r3, [pc, #48]	; (800b3dc <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d009      	beq.n	800b3c4 <UTIL_TIMER_IRQ_Handler+0xe4>
 800b3b0:	4b0a      	ldr	r3, [pc, #40]	; (800b3dc <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	7a1b      	ldrb	r3, [r3, #8]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d104      	bne.n	800b3c4 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 800b3ba:	4b08      	ldr	r3, [pc, #32]	; (800b3dc <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f000 f858 	bl	800b474 <TimerSetTimeout>
 800b3c4:	69bb      	ldr	r3, [r7, #24]
 800b3c6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f383 8810 	msr	PRIMASK, r3
}
 800b3ce:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 800b3d0:	bf00      	nop
 800b3d2:	3724      	adds	r7, #36	; 0x24
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd90      	pop	{r4, r7, pc}
 800b3d8:	0800bcc4 	.word	0x0800bcc4
 800b3dc:	20000360 	.word	0x20000360

0800b3e0 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b082      	sub	sp, #8
 800b3e4:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800b3e6:	4b06      	ldr	r3, [pc, #24]	; (800b400 <UTIL_TIMER_GetCurrentTime+0x20>)
 800b3e8:	69db      	ldr	r3, [r3, #28]
 800b3ea:	4798      	blx	r3
 800b3ec:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800b3ee:	4b04      	ldr	r3, [pc, #16]	; (800b400 <UTIL_TIMER_GetCurrentTime+0x20>)
 800b3f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	4798      	blx	r3
 800b3f6:	4603      	mov	r3, r0
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3708      	adds	r7, #8
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}
 800b400:	0800bcc4 	.word	0x0800bcc4

0800b404 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b084      	sub	sp, #16
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800b40c:	4b0a      	ldr	r3, [pc, #40]	; (800b438 <UTIL_TIMER_GetElapsedTime+0x34>)
 800b40e:	69db      	ldr	r3, [r3, #28]
 800b410:	4798      	blx	r3
 800b412:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800b414:	4b08      	ldr	r3, [pc, #32]	; (800b438 <UTIL_TIMER_GetElapsedTime+0x34>)
 800b416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	4798      	blx	r3
 800b41c:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800b41e:	4b06      	ldr	r3, [pc, #24]	; (800b438 <UTIL_TIMER_GetElapsedTime+0x34>)
 800b420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b422:	68f9      	ldr	r1, [r7, #12]
 800b424:	68ba      	ldr	r2, [r7, #8]
 800b426:	1a8a      	subs	r2, r1, r2
 800b428:	4610      	mov	r0, r2
 800b42a:	4798      	blx	r3
 800b42c:	4603      	mov	r3, r0
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3710      	adds	r7, #16
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}
 800b436:	bf00      	nop
 800b438:	0800bcc4 	.word	0x0800bcc4

0800b43c <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800b43c:	b480      	push	{r7}
 800b43e:	b085      	sub	sp, #20
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800b444:	4b0a      	ldr	r3, [pc, #40]	; (800b470 <TimerExists+0x34>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800b44a:	e008      	b.n	800b45e <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800b44c:	68fa      	ldr	r2, [r7, #12]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	429a      	cmp	r2, r3
 800b452:	d101      	bne.n	800b458 <TimerExists+0x1c>
    {
      return true;
 800b454:	2301      	movs	r3, #1
 800b456:	e006      	b.n	800b466 <TimerExists+0x2a>
    }
    cur = cur->Next;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	695b      	ldr	r3, [r3, #20]
 800b45c:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d1f3      	bne.n	800b44c <TimerExists+0x10>
  }
  return false;
 800b464:	2300      	movs	r3, #0
}
 800b466:	4618      	mov	r0, r3
 800b468:	3714      	adds	r7, #20
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bc80      	pop	{r7}
 800b46e:	4770      	bx	lr
 800b470:	20000360 	.word	0x20000360

0800b474 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800b474:	b590      	push	{r4, r7, lr}
 800b476:	b085      	sub	sp, #20
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800b47c:	4b11      	ldr	r3, [pc, #68]	; (800b4c4 <TimerSetTimeout+0x50>)
 800b47e:	6a1b      	ldr	r3, [r3, #32]
 800b480:	4798      	blx	r3
 800b482:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2201      	movs	r2, #1
 800b488:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681c      	ldr	r4, [r3, #0]
 800b48e:	4b0d      	ldr	r3, [pc, #52]	; (800b4c4 <TimerSetTimeout+0x50>)
 800b490:	699b      	ldr	r3, [r3, #24]
 800b492:	4798      	blx	r3
 800b494:	4602      	mov	r2, r0
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	4413      	add	r3, r2
 800b49a:	429c      	cmp	r4, r3
 800b49c:	d207      	bcs.n	800b4ae <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800b49e:	4b09      	ldr	r3, [pc, #36]	; (800b4c4 <TimerSetTimeout+0x50>)
 800b4a0:	699b      	ldr	r3, [r3, #24]
 800b4a2:	4798      	blx	r3
 800b4a4:	4602      	mov	r2, r0
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	441a      	add	r2, r3
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800b4ae:	4b05      	ldr	r3, [pc, #20]	; (800b4c4 <TimerSetTimeout+0x50>)
 800b4b0:	689b      	ldr	r3, [r3, #8]
 800b4b2:	687a      	ldr	r2, [r7, #4]
 800b4b4:	6812      	ldr	r2, [r2, #0]
 800b4b6:	4610      	mov	r0, r2
 800b4b8:	4798      	blx	r3
}
 800b4ba:	bf00      	nop
 800b4bc:	3714      	adds	r7, #20
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd90      	pop	{r4, r7, pc}
 800b4c2:	bf00      	nop
 800b4c4:	0800bcc4 	.word	0x0800bcc4

0800b4c8 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b085      	sub	sp, #20
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800b4d0:	4b14      	ldr	r3, [pc, #80]	; (800b524 <TimerInsertTimer+0x5c>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800b4d6:	4b13      	ldr	r3, [pc, #76]	; (800b524 <TimerInsertTimer+0x5c>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	695b      	ldr	r3, [r3, #20]
 800b4dc:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800b4de:	e012      	b.n	800b506 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	d905      	bls.n	800b4f8 <TimerInsertTimer+0x30>
    {
        cur = next;
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	695b      	ldr	r3, [r3, #20]
 800b4f4:	60bb      	str	r3, [r7, #8]
 800b4f6:	e006      	b.n	800b506 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	687a      	ldr	r2, [r7, #4]
 800b4fc:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	68ba      	ldr	r2, [r7, #8]
 800b502:	615a      	str	r2, [r3, #20]
        return;
 800b504:	e009      	b.n	800b51a <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	695b      	ldr	r3, [r3, #20]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d1e8      	bne.n	800b4e0 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	687a      	ldr	r2, [r7, #4]
 800b512:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2200      	movs	r2, #0
 800b518:	615a      	str	r2, [r3, #20]
}
 800b51a:	3714      	adds	r7, #20
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bc80      	pop	{r7}
 800b520:	4770      	bx	lr
 800b522:	bf00      	nop
 800b524:	20000360 	.word	0x20000360

0800b528 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b084      	sub	sp, #16
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800b530:	4b0b      	ldr	r3, [pc, #44]	; (800b560 <TimerInsertNewHeadTimer+0x38>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d002      	beq.n	800b542 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	2200      	movs	r2, #0
 800b540:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	68fa      	ldr	r2, [r7, #12]
 800b546:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800b548:	4a05      	ldr	r2, [pc, #20]	; (800b560 <TimerInsertNewHeadTimer+0x38>)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800b54e:	4b04      	ldr	r3, [pc, #16]	; (800b560 <TimerInsertNewHeadTimer+0x38>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	4618      	mov	r0, r3
 800b554:	f7ff ff8e 	bl	800b474 <TimerSetTimeout>
}
 800b558:	bf00      	nop
 800b55a:	3710      	adds	r7, #16
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}
 800b560:	20000360 	.word	0x20000360

0800b564 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800b568:	2218      	movs	r2, #24
 800b56a:	2100      	movs	r1, #0
 800b56c:	4807      	ldr	r0, [pc, #28]	; (800b58c <UTIL_ADV_TRACE_Init+0x28>)
 800b56e:	f7ff f930 	bl	800a7d2 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800b572:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b576:	2100      	movs	r1, #0
 800b578:	4805      	ldr	r0, [pc, #20]	; (800b590 <UTIL_ADV_TRACE_Init+0x2c>)
 800b57a:	f7ff f92a 	bl	800a7d2 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800b57e:	4b05      	ldr	r3, [pc, #20]	; (800b594 <UTIL_ADV_TRACE_Init+0x30>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	4805      	ldr	r0, [pc, #20]	; (800b598 <UTIL_ADV_TRACE_Init+0x34>)
 800b584:	4798      	blx	r3
 800b586:	4603      	mov	r3, r0
}
 800b588:	4618      	mov	r0, r3
 800b58a:	bd80      	pop	{r7, pc}
 800b58c:	20000364 	.word	0x20000364
 800b590:	2000037c 	.word	0x2000037c
 800b594:	0800bd04 	.word	0x0800bd04
 800b598:	0800b7e1 	.word	0x0800b7e1

0800b59c <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 800b59c:	b408      	push	{r3}
 800b59e:	b580      	push	{r7, lr}
 800b5a0:	b08d      	sub	sp, #52	; 0x34
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	60f8      	str	r0, [r7, #12]
 800b5a6:	60b9      	str	r1, [r7, #8]
 800b5a8:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800b5b2:	4b37      	ldr	r3, [pc, #220]	; (800b690 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800b5b4:	7a1b      	ldrb	r3, [r3, #8]
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	4293      	cmp	r3, r2
 800b5bc:	d902      	bls.n	800b5c4 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 800b5be:	f06f 0304 	mvn.w	r3, #4
 800b5c2:	e05e      	b.n	800b682 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800b5c4:	4b32      	ldr	r3, [pc, #200]	; (800b690 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800b5c6:	68da      	ldr	r2, [r3, #12]
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	4013      	ands	r3, r2
 800b5cc:	68ba      	ldr	r2, [r7, #8]
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	d002      	beq.n	800b5d8 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 800b5d2:	f06f 0305 	mvn.w	r3, #5
 800b5d6:	e054      	b.n	800b682 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800b5d8:	4b2d      	ldr	r3, [pc, #180]	; (800b690 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800b5da:	685b      	ldr	r3, [r3, #4]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d00a      	beq.n	800b5f6 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d007      	beq.n	800b5f6 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800b5e6:	4b2a      	ldr	r3, [pc, #168]	; (800b690 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	f107 0116 	add.w	r1, r7, #22
 800b5ee:	f107 0218 	add.w	r2, r7, #24
 800b5f2:	4610      	mov	r0, r2
 800b5f4:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 800b5f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b5fa:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800b5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b600:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b604:	4823      	ldr	r0, [pc, #140]	; (800b694 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 800b606:	f7ff fa85 	bl	800ab14 <tiny_vsnprintf_like>
 800b60a:	4603      	mov	r3, r0
 800b60c:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 800b60e:	f000 f9f1 	bl	800b9f4 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800b612:	8afa      	ldrh	r2, [r7, #22]
 800b614:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b616:	4413      	add	r3, r2
 800b618:	b29b      	uxth	r3, r3
 800b61a:	f107 0214 	add.w	r2, r7, #20
 800b61e:	4611      	mov	r1, r2
 800b620:	4618      	mov	r0, r3
 800b622:	f000 f969 	bl	800b8f8 <TRACE_AllocateBufer>
 800b626:	4603      	mov	r3, r0
 800b628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b62c:	d025      	beq.n	800b67a <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 800b62e:	2300      	movs	r3, #0
 800b630:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b632:	e00e      	b.n	800b652 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800b634:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b636:	8aba      	ldrh	r2, [r7, #20]
 800b638:	3330      	adds	r3, #48	; 0x30
 800b63a:	443b      	add	r3, r7
 800b63c:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 800b640:	4b15      	ldr	r3, [pc, #84]	; (800b698 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800b642:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 800b644:	8abb      	ldrh	r3, [r7, #20]
 800b646:	3301      	adds	r3, #1
 800b648:	b29b      	uxth	r3, r3
 800b64a:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 800b64c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b64e:	3301      	adds	r3, #1
 800b650:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b652:	8afb      	ldrh	r3, [r7, #22]
 800b654:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b656:	429a      	cmp	r2, r3
 800b658:	d3ec      	bcc.n	800b634 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800b65a:	8abb      	ldrh	r3, [r7, #20]
 800b65c:	461a      	mov	r2, r3
 800b65e:	4b0e      	ldr	r3, [pc, #56]	; (800b698 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800b660:	18d0      	adds	r0, r2, r3
 800b662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b664:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b666:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b66a:	f7ff fa53 	bl	800ab14 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 800b66e:	f000 f9df 	bl	800ba30 <TRACE_UnLock>

    return TRACE_Send();
 800b672:	f000 f831 	bl	800b6d8 <TRACE_Send>
 800b676:	4603      	mov	r3, r0
 800b678:	e003      	b.n	800b682 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 800b67a:	f000 f9d9 	bl	800ba30 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 800b67e:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 800b682:	4618      	mov	r0, r3
 800b684:	3734      	adds	r7, #52	; 0x34
 800b686:	46bd      	mov	sp, r7
 800b688:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b68c:	b001      	add	sp, #4
 800b68e:	4770      	bx	lr
 800b690:	20000364 	.word	0x20000364
 800b694:	2000057c 	.word	0x2000057c
 800b698:	2000037c 	.word	0x2000037c

0800b69c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 800b69c:	b480      	push	{r7}
 800b69e:	b083      	sub	sp, #12
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 800b6a4:	4a03      	ldr	r2, [pc, #12]	; (800b6b4 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6053      	str	r3, [r2, #4]
}
 800b6aa:	bf00      	nop
 800b6ac:	370c      	adds	r7, #12
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bc80      	pop	{r7}
 800b6b2:	4770      	bx	lr
 800b6b4:	20000364 	.word	0x20000364

0800b6b8 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b083      	sub	sp, #12
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	4603      	mov	r3, r0
 800b6c0:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800b6c2:	4a04      	ldr	r2, [pc, #16]	; (800b6d4 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 800b6c4:	79fb      	ldrb	r3, [r7, #7]
 800b6c6:	7213      	strb	r3, [r2, #8]
}
 800b6c8:	bf00      	nop
 800b6ca:	370c      	adds	r7, #12
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bc80      	pop	{r7}
 800b6d0:	4770      	bx	lr
 800b6d2:	bf00      	nop
 800b6d4:	20000364 	.word	0x20000364

0800b6d8 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b088      	sub	sp, #32
 800b6dc:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b6e6:	f3ef 8310 	mrs	r3, PRIMASK
 800b6ea:	613b      	str	r3, [r7, #16]
  return(result);
 800b6ec:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800b6ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b6f0:	b672      	cpsid	i
}
 800b6f2:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 800b6f4:	f000 f9ba 	bl	800ba6c <TRACE_IsLocked>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d15d      	bne.n	800b7ba <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 800b6fe:	f000 f979 	bl	800b9f4 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800b702:	4b34      	ldr	r3, [pc, #208]	; (800b7d4 <TRACE_Send+0xfc>)
 800b704:	8a1a      	ldrh	r2, [r3, #16]
 800b706:	4b33      	ldr	r3, [pc, #204]	; (800b7d4 <TRACE_Send+0xfc>)
 800b708:	8a5b      	ldrh	r3, [r3, #18]
 800b70a:	429a      	cmp	r2, r3
 800b70c:	d04d      	beq.n	800b7aa <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800b70e:	4b31      	ldr	r3, [pc, #196]	; (800b7d4 <TRACE_Send+0xfc>)
 800b710:	789b      	ldrb	r3, [r3, #2]
 800b712:	2b01      	cmp	r3, #1
 800b714:	d117      	bne.n	800b746 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800b716:	4b2f      	ldr	r3, [pc, #188]	; (800b7d4 <TRACE_Send+0xfc>)
 800b718:	881a      	ldrh	r2, [r3, #0]
 800b71a:	4b2e      	ldr	r3, [pc, #184]	; (800b7d4 <TRACE_Send+0xfc>)
 800b71c:	8a1b      	ldrh	r3, [r3, #16]
 800b71e:	1ad3      	subs	r3, r2, r3
 800b720:	b29a      	uxth	r2, r3
 800b722:	4b2c      	ldr	r3, [pc, #176]	; (800b7d4 <TRACE_Send+0xfc>)
 800b724:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800b726:	4b2b      	ldr	r3, [pc, #172]	; (800b7d4 <TRACE_Send+0xfc>)
 800b728:	2202      	movs	r2, #2
 800b72a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800b72c:	4b29      	ldr	r3, [pc, #164]	; (800b7d4 <TRACE_Send+0xfc>)
 800b72e:	2200      	movs	r2, #0
 800b730:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800b732:	4b28      	ldr	r3, [pc, #160]	; (800b7d4 <TRACE_Send+0xfc>)
 800b734:	8a9b      	ldrh	r3, [r3, #20]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d105      	bne.n	800b746 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800b73a:	4b26      	ldr	r3, [pc, #152]	; (800b7d4 <TRACE_Send+0xfc>)
 800b73c:	2200      	movs	r2, #0
 800b73e:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800b740:	4b24      	ldr	r3, [pc, #144]	; (800b7d4 <TRACE_Send+0xfc>)
 800b742:	2200      	movs	r2, #0
 800b744:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800b746:	4b23      	ldr	r3, [pc, #140]	; (800b7d4 <TRACE_Send+0xfc>)
 800b748:	789b      	ldrb	r3, [r3, #2]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d115      	bne.n	800b77a <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800b74e:	4b21      	ldr	r3, [pc, #132]	; (800b7d4 <TRACE_Send+0xfc>)
 800b750:	8a5a      	ldrh	r2, [r3, #18]
 800b752:	4b20      	ldr	r3, [pc, #128]	; (800b7d4 <TRACE_Send+0xfc>)
 800b754:	8a1b      	ldrh	r3, [r3, #16]
 800b756:	429a      	cmp	r2, r3
 800b758:	d908      	bls.n	800b76c <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800b75a:	4b1e      	ldr	r3, [pc, #120]	; (800b7d4 <TRACE_Send+0xfc>)
 800b75c:	8a5a      	ldrh	r2, [r3, #18]
 800b75e:	4b1d      	ldr	r3, [pc, #116]	; (800b7d4 <TRACE_Send+0xfc>)
 800b760:	8a1b      	ldrh	r3, [r3, #16]
 800b762:	1ad3      	subs	r3, r2, r3
 800b764:	b29a      	uxth	r2, r3
 800b766:	4b1b      	ldr	r3, [pc, #108]	; (800b7d4 <TRACE_Send+0xfc>)
 800b768:	829a      	strh	r2, [r3, #20]
 800b76a:	e006      	b.n	800b77a <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800b76c:	4b19      	ldr	r3, [pc, #100]	; (800b7d4 <TRACE_Send+0xfc>)
 800b76e:	8a1b      	ldrh	r3, [r3, #16]
 800b770:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b774:	b29a      	uxth	r2, r3
 800b776:	4b17      	ldr	r3, [pc, #92]	; (800b7d4 <TRACE_Send+0xfc>)
 800b778:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800b77a:	4b16      	ldr	r3, [pc, #88]	; (800b7d4 <TRACE_Send+0xfc>)
 800b77c:	8a1b      	ldrh	r3, [r3, #16]
 800b77e:	461a      	mov	r2, r3
 800b780:	4b15      	ldr	r3, [pc, #84]	; (800b7d8 <TRACE_Send+0x100>)
 800b782:	4413      	add	r3, r2
 800b784:	61bb      	str	r3, [r7, #24]
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	f383 8810 	msr	PRIMASK, r3
}
 800b790:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 800b792:	f7f5 f989 	bl	8000aa8 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800b796:	4b11      	ldr	r3, [pc, #68]	; (800b7dc <TRACE_Send+0x104>)
 800b798:	68db      	ldr	r3, [r3, #12]
 800b79a:	4a0e      	ldr	r2, [pc, #56]	; (800b7d4 <TRACE_Send+0xfc>)
 800b79c:	8a92      	ldrh	r2, [r2, #20]
 800b79e:	4611      	mov	r1, r2
 800b7a0:	69b8      	ldr	r0, [r7, #24]
 800b7a2:	4798      	blx	r3
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	77fb      	strb	r3, [r7, #31]
 800b7a8:	e00d      	b.n	800b7c6 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 800b7aa:	f000 f941 	bl	800ba30 <TRACE_UnLock>
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	f383 8810 	msr	PRIMASK, r3
}
 800b7b8:	e005      	b.n	800b7c6 <TRACE_Send+0xee>
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f383 8810 	msr	PRIMASK, r3
}
 800b7c4:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 800b7c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3720      	adds	r7, #32
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}
 800b7d2:	bf00      	nop
 800b7d4:	20000364 	.word	0x20000364
 800b7d8:	2000037c 	.word	0x2000037c
 800b7dc:	0800bd04 	.word	0x0800bd04

0800b7e0 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b088      	sub	sp, #32
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b7ec:	f3ef 8310 	mrs	r3, PRIMASK
 800b7f0:	617b      	str	r3, [r7, #20]
  return(result);
 800b7f2:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800b7f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800b7f6:	b672      	cpsid	i
}
 800b7f8:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800b7fa:	4b3c      	ldr	r3, [pc, #240]	; (800b8ec <TRACE_TxCpltCallback+0x10c>)
 800b7fc:	789b      	ldrb	r3, [r3, #2]
 800b7fe:	2b02      	cmp	r3, #2
 800b800:	d106      	bne.n	800b810 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800b802:	4b3a      	ldr	r3, [pc, #232]	; (800b8ec <TRACE_TxCpltCallback+0x10c>)
 800b804:	2200      	movs	r2, #0
 800b806:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 800b808:	4b38      	ldr	r3, [pc, #224]	; (800b8ec <TRACE_TxCpltCallback+0x10c>)
 800b80a:	2200      	movs	r2, #0
 800b80c:	821a      	strh	r2, [r3, #16]
 800b80e:	e00a      	b.n	800b826 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800b810:	4b36      	ldr	r3, [pc, #216]	; (800b8ec <TRACE_TxCpltCallback+0x10c>)
 800b812:	8a1a      	ldrh	r2, [r3, #16]
 800b814:	4b35      	ldr	r3, [pc, #212]	; (800b8ec <TRACE_TxCpltCallback+0x10c>)
 800b816:	8a9b      	ldrh	r3, [r3, #20]
 800b818:	4413      	add	r3, r2
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b820:	b29a      	uxth	r2, r3
 800b822:	4b32      	ldr	r3, [pc, #200]	; (800b8ec <TRACE_TxCpltCallback+0x10c>)
 800b824:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800b826:	4b31      	ldr	r3, [pc, #196]	; (800b8ec <TRACE_TxCpltCallback+0x10c>)
 800b828:	8a1a      	ldrh	r2, [r3, #16]
 800b82a:	4b30      	ldr	r3, [pc, #192]	; (800b8ec <TRACE_TxCpltCallback+0x10c>)
 800b82c:	8a5b      	ldrh	r3, [r3, #18]
 800b82e:	429a      	cmp	r2, r3
 800b830:	d04d      	beq.n	800b8ce <TRACE_TxCpltCallback+0xee>
 800b832:	4b2e      	ldr	r3, [pc, #184]	; (800b8ec <TRACE_TxCpltCallback+0x10c>)
 800b834:	8adb      	ldrh	r3, [r3, #22]
 800b836:	2b01      	cmp	r3, #1
 800b838:	d149      	bne.n	800b8ce <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800b83a:	4b2c      	ldr	r3, [pc, #176]	; (800b8ec <TRACE_TxCpltCallback+0x10c>)
 800b83c:	789b      	ldrb	r3, [r3, #2]
 800b83e:	2b01      	cmp	r3, #1
 800b840:	d117      	bne.n	800b872 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800b842:	4b2a      	ldr	r3, [pc, #168]	; (800b8ec <TRACE_TxCpltCallback+0x10c>)
 800b844:	881a      	ldrh	r2, [r3, #0]
 800b846:	4b29      	ldr	r3, [pc, #164]	; (800b8ec <TRACE_TxCpltCallback+0x10c>)
 800b848:	8a1b      	ldrh	r3, [r3, #16]
 800b84a:	1ad3      	subs	r3, r2, r3
 800b84c:	b29a      	uxth	r2, r3
 800b84e:	4b27      	ldr	r3, [pc, #156]	; (800b8ec <TRACE_TxCpltCallback+0x10c>)
 800b850:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800b852:	4b26      	ldr	r3, [pc, #152]	; (800b8ec <TRACE_TxCpltCallback+0x10c>)
 800b854:	2202      	movs	r2, #2
 800b856:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800b858:	4b24      	ldr	r3, [pc, #144]	; (800b8ec <TRACE_TxCpltCallback+0x10c>)
 800b85a:	2200      	movs	r2, #0
 800b85c:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800b85e:	4b23      	ldr	r3, [pc, #140]	; (800b8ec <TRACE_TxCpltCallback+0x10c>)
 800b860:	8a9b      	ldrh	r3, [r3, #20]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d105      	bne.n	800b872 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800b866:	4b21      	ldr	r3, [pc, #132]	; (800b8ec <TRACE_TxCpltCallback+0x10c>)
 800b868:	2200      	movs	r2, #0
 800b86a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800b86c:	4b1f      	ldr	r3, [pc, #124]	; (800b8ec <TRACE_TxCpltCallback+0x10c>)
 800b86e:	2200      	movs	r2, #0
 800b870:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800b872:	4b1e      	ldr	r3, [pc, #120]	; (800b8ec <TRACE_TxCpltCallback+0x10c>)
 800b874:	789b      	ldrb	r3, [r3, #2]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d115      	bne.n	800b8a6 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800b87a:	4b1c      	ldr	r3, [pc, #112]	; (800b8ec <TRACE_TxCpltCallback+0x10c>)
 800b87c:	8a5a      	ldrh	r2, [r3, #18]
 800b87e:	4b1b      	ldr	r3, [pc, #108]	; (800b8ec <TRACE_TxCpltCallback+0x10c>)
 800b880:	8a1b      	ldrh	r3, [r3, #16]
 800b882:	429a      	cmp	r2, r3
 800b884:	d908      	bls.n	800b898 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800b886:	4b19      	ldr	r3, [pc, #100]	; (800b8ec <TRACE_TxCpltCallback+0x10c>)
 800b888:	8a5a      	ldrh	r2, [r3, #18]
 800b88a:	4b18      	ldr	r3, [pc, #96]	; (800b8ec <TRACE_TxCpltCallback+0x10c>)
 800b88c:	8a1b      	ldrh	r3, [r3, #16]
 800b88e:	1ad3      	subs	r3, r2, r3
 800b890:	b29a      	uxth	r2, r3
 800b892:	4b16      	ldr	r3, [pc, #88]	; (800b8ec <TRACE_TxCpltCallback+0x10c>)
 800b894:	829a      	strh	r2, [r3, #20]
 800b896:	e006      	b.n	800b8a6 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800b898:	4b14      	ldr	r3, [pc, #80]	; (800b8ec <TRACE_TxCpltCallback+0x10c>)
 800b89a:	8a1b      	ldrh	r3, [r3, #16]
 800b89c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b8a0:	b29a      	uxth	r2, r3
 800b8a2:	4b12      	ldr	r3, [pc, #72]	; (800b8ec <TRACE_TxCpltCallback+0x10c>)
 800b8a4:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800b8a6:	4b11      	ldr	r3, [pc, #68]	; (800b8ec <TRACE_TxCpltCallback+0x10c>)
 800b8a8:	8a1b      	ldrh	r3, [r3, #16]
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	4b10      	ldr	r3, [pc, #64]	; (800b8f0 <TRACE_TxCpltCallback+0x110>)
 800b8ae:	4413      	add	r3, r2
 800b8b0:	61fb      	str	r3, [r7, #28]
 800b8b2:	69bb      	ldr	r3, [r7, #24]
 800b8b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	f383 8810 	msr	PRIMASK, r3
}
 800b8bc:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800b8be:	4b0d      	ldr	r3, [pc, #52]	; (800b8f4 <TRACE_TxCpltCallback+0x114>)
 800b8c0:	68db      	ldr	r3, [r3, #12]
 800b8c2:	4a0a      	ldr	r2, [pc, #40]	; (800b8ec <TRACE_TxCpltCallback+0x10c>)
 800b8c4:	8a92      	ldrh	r2, [r2, #20]
 800b8c6:	4611      	mov	r1, r2
 800b8c8:	69f8      	ldr	r0, [r7, #28]
 800b8ca:	4798      	blx	r3
 800b8cc:	e00a      	b.n	800b8e4 <TRACE_TxCpltCallback+0x104>
 800b8ce:	69bb      	ldr	r3, [r7, #24]
 800b8d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	f383 8810 	msr	PRIMASK, r3
}
 800b8d8:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 800b8da:	f7f5 f8ed 	bl	8000ab8 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 800b8de:	f000 f8a7 	bl	800ba30 <TRACE_UnLock>
  }
}
 800b8e2:	bf00      	nop
 800b8e4:	bf00      	nop
 800b8e6:	3720      	adds	r7, #32
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}
 800b8ec:	20000364 	.word	0x20000364
 800b8f0:	2000037c 	.word	0x2000037c
 800b8f4:	0800bd04 	.word	0x0800bd04

0800b8f8 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b087      	sub	sp, #28
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	4603      	mov	r3, r0
 800b900:	6039      	str	r1, [r7, #0]
 800b902:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 800b904:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b908:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b90a:	f3ef 8310 	mrs	r3, PRIMASK
 800b90e:	60fb      	str	r3, [r7, #12]
  return(result);
 800b910:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800b912:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b914:	b672      	cpsid	i
}
 800b916:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800b918:	4b35      	ldr	r3, [pc, #212]	; (800b9f0 <TRACE_AllocateBufer+0xf8>)
 800b91a:	8a5a      	ldrh	r2, [r3, #18]
 800b91c:	4b34      	ldr	r3, [pc, #208]	; (800b9f0 <TRACE_AllocateBufer+0xf8>)
 800b91e:	8a1b      	ldrh	r3, [r3, #16]
 800b920:	429a      	cmp	r2, r3
 800b922:	d11b      	bne.n	800b95c <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800b924:	4b32      	ldr	r3, [pc, #200]	; (800b9f0 <TRACE_AllocateBufer+0xf8>)
 800b926:	8a5b      	ldrh	r3, [r3, #18]
 800b928:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b92c:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800b92e:	88fa      	ldrh	r2, [r7, #6]
 800b930:	8afb      	ldrh	r3, [r7, #22]
 800b932:	429a      	cmp	r2, r3
 800b934:	d33a      	bcc.n	800b9ac <TRACE_AllocateBufer+0xb4>
 800b936:	4b2e      	ldr	r3, [pc, #184]	; (800b9f0 <TRACE_AllocateBufer+0xf8>)
 800b938:	8a1b      	ldrh	r3, [r3, #16]
 800b93a:	88fa      	ldrh	r2, [r7, #6]
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d235      	bcs.n	800b9ac <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800b940:	4b2b      	ldr	r3, [pc, #172]	; (800b9f0 <TRACE_AllocateBufer+0xf8>)
 800b942:	2201      	movs	r2, #1
 800b944:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800b946:	4b2a      	ldr	r3, [pc, #168]	; (800b9f0 <TRACE_AllocateBufer+0xf8>)
 800b948:	8a5a      	ldrh	r2, [r3, #18]
 800b94a:	4b29      	ldr	r3, [pc, #164]	; (800b9f0 <TRACE_AllocateBufer+0xf8>)
 800b94c:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800b94e:	4b28      	ldr	r3, [pc, #160]	; (800b9f0 <TRACE_AllocateBufer+0xf8>)
 800b950:	8a1b      	ldrh	r3, [r3, #16]
 800b952:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 800b954:	4b26      	ldr	r3, [pc, #152]	; (800b9f0 <TRACE_AllocateBufer+0xf8>)
 800b956:	2200      	movs	r2, #0
 800b958:	825a      	strh	r2, [r3, #18]
 800b95a:	e027      	b.n	800b9ac <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800b95c:	4b24      	ldr	r3, [pc, #144]	; (800b9f0 <TRACE_AllocateBufer+0xf8>)
 800b95e:	8a5a      	ldrh	r2, [r3, #18]
 800b960:	4b23      	ldr	r3, [pc, #140]	; (800b9f0 <TRACE_AllocateBufer+0xf8>)
 800b962:	8a1b      	ldrh	r3, [r3, #16]
 800b964:	429a      	cmp	r2, r3
 800b966:	d91b      	bls.n	800b9a0 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800b968:	4b21      	ldr	r3, [pc, #132]	; (800b9f0 <TRACE_AllocateBufer+0xf8>)
 800b96a:	8a5b      	ldrh	r3, [r3, #18]
 800b96c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b970:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800b972:	88fa      	ldrh	r2, [r7, #6]
 800b974:	8afb      	ldrh	r3, [r7, #22]
 800b976:	429a      	cmp	r2, r3
 800b978:	d318      	bcc.n	800b9ac <TRACE_AllocateBufer+0xb4>
 800b97a:	4b1d      	ldr	r3, [pc, #116]	; (800b9f0 <TRACE_AllocateBufer+0xf8>)
 800b97c:	8a1b      	ldrh	r3, [r3, #16]
 800b97e:	88fa      	ldrh	r2, [r7, #6]
 800b980:	429a      	cmp	r2, r3
 800b982:	d213      	bcs.n	800b9ac <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800b984:	4b1a      	ldr	r3, [pc, #104]	; (800b9f0 <TRACE_AllocateBufer+0xf8>)
 800b986:	2201      	movs	r2, #1
 800b988:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800b98a:	4b19      	ldr	r3, [pc, #100]	; (800b9f0 <TRACE_AllocateBufer+0xf8>)
 800b98c:	8a5a      	ldrh	r2, [r3, #18]
 800b98e:	4b18      	ldr	r3, [pc, #96]	; (800b9f0 <TRACE_AllocateBufer+0xf8>)
 800b990:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800b992:	4b17      	ldr	r3, [pc, #92]	; (800b9f0 <TRACE_AllocateBufer+0xf8>)
 800b994:	8a1b      	ldrh	r3, [r3, #16]
 800b996:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800b998:	4b15      	ldr	r3, [pc, #84]	; (800b9f0 <TRACE_AllocateBufer+0xf8>)
 800b99a:	2200      	movs	r2, #0
 800b99c:	825a      	strh	r2, [r3, #18]
 800b99e:	e005      	b.n	800b9ac <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800b9a0:	4b13      	ldr	r3, [pc, #76]	; (800b9f0 <TRACE_AllocateBufer+0xf8>)
 800b9a2:	8a1a      	ldrh	r2, [r3, #16]
 800b9a4:	4b12      	ldr	r3, [pc, #72]	; (800b9f0 <TRACE_AllocateBufer+0xf8>)
 800b9a6:	8a5b      	ldrh	r3, [r3, #18]
 800b9a8:	1ad3      	subs	r3, r2, r3
 800b9aa:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 800b9ac:	8afa      	ldrh	r2, [r7, #22]
 800b9ae:	88fb      	ldrh	r3, [r7, #6]
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d90f      	bls.n	800b9d4 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800b9b4:	4b0e      	ldr	r3, [pc, #56]	; (800b9f0 <TRACE_AllocateBufer+0xf8>)
 800b9b6:	8a5a      	ldrh	r2, [r3, #18]
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800b9bc:	4b0c      	ldr	r3, [pc, #48]	; (800b9f0 <TRACE_AllocateBufer+0xf8>)
 800b9be:	8a5a      	ldrh	r2, [r3, #18]
 800b9c0:	88fb      	ldrh	r3, [r7, #6]
 800b9c2:	4413      	add	r3, r2
 800b9c4:	b29b      	uxth	r3, r3
 800b9c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9ca:	b29a      	uxth	r2, r3
 800b9cc:	4b08      	ldr	r3, [pc, #32]	; (800b9f0 <TRACE_AllocateBufer+0xf8>)
 800b9ce:	825a      	strh	r2, [r3, #18]
    ret = 0;
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	82bb      	strh	r3, [r7, #20]
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	f383 8810 	msr	PRIMASK, r3
}
 800b9de:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 800b9e0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	371c      	adds	r7, #28
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bc80      	pop	{r7}
 800b9ec:	4770      	bx	lr
 800b9ee:	bf00      	nop
 800b9f0:	20000364 	.word	0x20000364

0800b9f4 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b085      	sub	sp, #20
 800b9f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9fa:	f3ef 8310 	mrs	r3, PRIMASK
 800b9fe:	607b      	str	r3, [r7, #4]
  return(result);
 800ba00:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800ba02:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba04:	b672      	cpsid	i
}
 800ba06:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 800ba08:	4b08      	ldr	r3, [pc, #32]	; (800ba2c <TRACE_Lock+0x38>)
 800ba0a:	8adb      	ldrh	r3, [r3, #22]
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	b29a      	uxth	r2, r3
 800ba10:	4b06      	ldr	r3, [pc, #24]	; (800ba2c <TRACE_Lock+0x38>)
 800ba12:	82da      	strh	r2, [r3, #22]
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	f383 8810 	msr	PRIMASK, r3
}
 800ba1e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800ba20:	bf00      	nop
 800ba22:	3714      	adds	r7, #20
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bc80      	pop	{r7}
 800ba28:	4770      	bx	lr
 800ba2a:	bf00      	nop
 800ba2c:	20000364 	.word	0x20000364

0800ba30 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b085      	sub	sp, #20
 800ba34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba36:	f3ef 8310 	mrs	r3, PRIMASK
 800ba3a:	607b      	str	r3, [r7, #4]
  return(result);
 800ba3c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800ba3e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba40:	b672      	cpsid	i
}
 800ba42:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 800ba44:	4b08      	ldr	r3, [pc, #32]	; (800ba68 <TRACE_UnLock+0x38>)
 800ba46:	8adb      	ldrh	r3, [r3, #22]
 800ba48:	3b01      	subs	r3, #1
 800ba4a:	b29a      	uxth	r2, r3
 800ba4c:	4b06      	ldr	r3, [pc, #24]	; (800ba68 <TRACE_UnLock+0x38>)
 800ba4e:	82da      	strh	r2, [r3, #22]
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	f383 8810 	msr	PRIMASK, r3
}
 800ba5a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800ba5c:	bf00      	nop
 800ba5e:	3714      	adds	r7, #20
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bc80      	pop	{r7}
 800ba64:	4770      	bx	lr
 800ba66:	bf00      	nop
 800ba68:	20000364 	.word	0x20000364

0800ba6c <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800ba70:	4b05      	ldr	r3, [pc, #20]	; (800ba88 <TRACE_IsLocked+0x1c>)
 800ba72:	8adb      	ldrh	r3, [r3, #22]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	bf14      	ite	ne
 800ba78:	2301      	movne	r3, #1
 800ba7a:	2300      	moveq	r3, #0
 800ba7c:	b2db      	uxtb	r3, r3
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bc80      	pop	{r7}
 800ba84:	4770      	bx	lr
 800ba86:	bf00      	nop
 800ba88:	20000364 	.word	0x20000364

0800ba8c <__libc_init_array>:
 800ba8c:	b570      	push	{r4, r5, r6, lr}
 800ba8e:	4d0d      	ldr	r5, [pc, #52]	; (800bac4 <__libc_init_array+0x38>)
 800ba90:	4c0d      	ldr	r4, [pc, #52]	; (800bac8 <__libc_init_array+0x3c>)
 800ba92:	1b64      	subs	r4, r4, r5
 800ba94:	10a4      	asrs	r4, r4, #2
 800ba96:	2600      	movs	r6, #0
 800ba98:	42a6      	cmp	r6, r4
 800ba9a:	d109      	bne.n	800bab0 <__libc_init_array+0x24>
 800ba9c:	4d0b      	ldr	r5, [pc, #44]	; (800bacc <__libc_init_array+0x40>)
 800ba9e:	4c0c      	ldr	r4, [pc, #48]	; (800bad0 <__libc_init_array+0x44>)
 800baa0:	f000 f820 	bl	800bae4 <_init>
 800baa4:	1b64      	subs	r4, r4, r5
 800baa6:	10a4      	asrs	r4, r4, #2
 800baa8:	2600      	movs	r6, #0
 800baaa:	42a6      	cmp	r6, r4
 800baac:	d105      	bne.n	800baba <__libc_init_array+0x2e>
 800baae:	bd70      	pop	{r4, r5, r6, pc}
 800bab0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bab4:	4798      	blx	r3
 800bab6:	3601      	adds	r6, #1
 800bab8:	e7ee      	b.n	800ba98 <__libc_init_array+0xc>
 800baba:	f855 3b04 	ldr.w	r3, [r5], #4
 800babe:	4798      	blx	r3
 800bac0:	3601      	adds	r6, #1
 800bac2:	e7f2      	b.n	800baaa <__libc_init_array+0x1e>
 800bac4:	0800be8c 	.word	0x0800be8c
 800bac8:	0800be8c 	.word	0x0800be8c
 800bacc:	0800be8c 	.word	0x0800be8c
 800bad0:	0800be90 	.word	0x0800be90

0800bad4 <memset>:
 800bad4:	4402      	add	r2, r0
 800bad6:	4603      	mov	r3, r0
 800bad8:	4293      	cmp	r3, r2
 800bada:	d100      	bne.n	800bade <memset+0xa>
 800badc:	4770      	bx	lr
 800bade:	f803 1b01 	strb.w	r1, [r3], #1
 800bae2:	e7f9      	b.n	800bad8 <memset+0x4>

0800bae4 <_init>:
 800bae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bae6:	bf00      	nop
 800bae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baea:	bc08      	pop	{r3}
 800baec:	469e      	mov	lr, r3
 800baee:	4770      	bx	lr

0800baf0 <_fini>:
 800baf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baf2:	bf00      	nop
 800baf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baf6:	bc08      	pop	{r3}
 800baf8:	469e      	mov	lr, r3
 800bafa:	4770      	bx	lr
